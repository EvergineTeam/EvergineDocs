### YamlMime:ManagedReference
items:
- uid: WaveEngine.Common.Math.Quaternion
  commentId: T:WaveEngine.Common.Math.Quaternion
  id: Quaternion
  parent: WaveEngine.Common.Math
  children:
  - WaveEngine.Common.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  - WaveEngine.Common.Math.Quaternion.#ctor(WaveEngine.Common.Math.Vector3,System.Single)
  - WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Conjugate
  - WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)
  - WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3)
  - WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.CreateFromLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix)
  - WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)
  - WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  - WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Dot(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Equals(System.Object)
  - WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.GetHashCode
  - WaveEngine.Common.Math.Quaternion.Identity
  - WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Length
  - WaveEngine.Common.Math.Quaternion.LengthSquared
  - WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  - WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  - WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.Normalize
  - WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.op_Addition(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.op_Division(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.op_Equality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.op_Inequality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  - WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)
  - WaveEngine.Common.Math.Quaternion.op_Subtraction(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.op_UnaryNegation(WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  - WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.SmoothDamp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion@,System.Single,System.Single)
  - WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  - WaveEngine.Common.Math.Quaternion.ToAngleAxis(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,System.Single@)
  - WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion)
  - WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)
  - WaveEngine.Common.Math.Quaternion.ToString
  - WaveEngine.Common.Math.Quaternion.W
  - WaveEngine.Common.Math.Quaternion.X
  - WaveEngine.Common.Math.Quaternion.Y
  - WaveEngine.Common.Math.Quaternion.Z
  langs:
  - csharp
  - vb
  name: Quaternion
  nameWithType: Quaternion
  fullName: WaveEngine.Common.Math.Quaternion
  type: Struct
  source:
    id: Quaternion
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 16
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nQuaternions are very useful used to represent rotations because they don&apos;t suffer from gimbal lock and can be easily interpolated.\nWave Engine internally uses Quaternions to represent all rotations.\n"
  example: []
  syntax:
    content: >-
      [DataContract(Namespace = "WaveEngine.Common.Math")]

      public struct Quaternion : IEquatable<Quaternion>
    content.vb: >-
      <DataContract(Namespace:="WaveEngine.Common.Math")>

      Public Structure Quaternion

          Implements IEquatable(Of Quaternion)
  implements:
  - System.IEquatable{WaveEngine.Common.Math.Quaternion}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Namespace
      type: System.String
      value: WaveEngine.Common.Math
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: WaveEngine.Common.Math.Quaternion.X
  commentId: F:WaveEngine.Common.Math.Quaternion.X
  id: X
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Quaternion.X
  fullName: WaveEngine.Common.Math.Quaternion.X
  type: Field
  source:
    id: X
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 28
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nX component.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float X
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public X As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Y
  commentId: F:WaveEngine.Common.Math.Quaternion.Y
  id: Y
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Quaternion.Y
  fullName: WaveEngine.Common.Math.Quaternion.Y
  type: Field
  source:
    id: Y
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 34
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nY component.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Y
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Y As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Z
  commentId: F:WaveEngine.Common.Math.Quaternion.Z
  id: Z
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Quaternion.Z
  fullName: WaveEngine.Common.Math.Quaternion.Z
  type: Field
  source:
    id: Z
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 40
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nZ component.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Z
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Z As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.W
  commentId: F:WaveEngine.Common.Math.Quaternion.W
  id: W
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: W
  nameWithType: Quaternion.W
  fullName: WaveEngine.Common.Math.Quaternion.W
  type: Field
  source:
    id: W
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 46
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nW component.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float W
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public W As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Identity
  commentId: P:WaveEngine.Common.Math.Quaternion.Identity
  id: Identity
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: Quaternion.Identity
  fullName: WaveEngine.Common.Math.Quaternion.Identity
  type: Property
  source:
    id: Identity
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 53
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nGets the identity quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Identity { get; }
    parameters: []
    return:
      type: WaveEngine.Common.Math.Quaternion
    content.vb: Public Shared ReadOnly Property Identity As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Identity*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: WaveEngine.Common.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Quaternion(Single, Single, Single, Single)
  nameWithType: Quaternion.Quaternion(Single, Single, Single, Single)
  fullName: WaveEngine.Common.Math.Quaternion.Quaternion(System.Single, System.Single, System.Single, System.Single)
  type: Constructor
  source:
    id: .ctor
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 79
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nInitializes a new instance of the <xref href=\"WaveEngine.Common.Math.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public Quaternion(float x, float y, float z, float w)
    parameters:
    - id: x
      type: System.Single
      description: The x.
    - id: y
      type: System.Single
      description: The y.
    - id: z
      type: System.Single
      description: The z.
    - id: w
      type: System.Single
      description: The w.
    content.vb: Public Sub New(x As Single, y As Single, z As Single, w As Single)
  overload: WaveEngine.Common.Math.Quaternion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.#ctor(WaveEngine.Common.Math.Vector3,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.#ctor(WaveEngine.Common.Math.Vector3,System.Single)
  id: '#ctor(WaveEngine.Common.Math.Vector3,System.Single)'
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Quaternion(Vector3, Single)
  nameWithType: Quaternion.Quaternion(Vector3, Single)
  fullName: WaveEngine.Common.Math.Quaternion.Quaternion(WaveEngine.Common.Math.Vector3, System.Single)
  type: Constructor
  source:
    id: .ctor
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 92
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nInitializes a new instance of the <xref href=\"WaveEngine.Common.Math.Quaternion\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public Quaternion(Vector3 vectorPart, float scalarPart)
    parameters:
    - id: vectorPart
      type: WaveEngine.Common.Math.Vector3
      description: The vector part.
    - id: scalarPart
      type: System.Single
      description: The scalar part.
    content.vb: Public Sub New(vectorPart As Vector3, scalarPart As Single)
  overload: WaveEngine.Common.Math.Quaternion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.ToString
  commentId: M:WaveEngine.Common.Math.Quaternion.ToString
  id: ToString
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Quaternion.ToString()
  fullName: WaveEngine.Common.Math.Quaternion.ToString()
  type: Method
  source:
    id: ToString
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 110
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: WaveEngine.Common.Math.Quaternion.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion)
  id: Equals(WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Equals(Quaternion)
  nameWithType: Quaternion.Equals(Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Equals
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 124
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns a value that indicates whether the current instance is equal to another quaternion\n"
  example: []
  syntax:
    content: public bool Equals(Quaternion other)
    parameters:
    - id: other
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to compare.
    return:
      type: System.Boolean
      description: True if the current instance is equal to the given quaternion.
    content.vb: Public Function Equals(other As Quaternion) As Boolean
  overload: WaveEngine.Common.Math.Quaternion.Equals*
  implements:
  - System.IEquatable{WaveEngine.Common.Math.Quaternion}.Equals(WaveEngine.Common.Math.Quaternion)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion@)
  id: Equals(WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Equals(ref Quaternion)
  nameWithType: Quaternion.Equals(ref Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Equals(ref WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Equals
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 134
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns a value that indicates whether the current instance is equal to another quaternion\n"
  example: []
  syntax:
    content: public bool Equals(ref Quaternion other)
    parameters:
    - id: other
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to compare.
    return:
      type: System.Boolean
      description: True if the current instance is equal to the given quaternion.
    content.vb: Public Function Equals(ByRef other As Quaternion) As Boolean
  overload: WaveEngine.Common.Math.Quaternion.Equals*
  nameWithType.vb: Quaternion.Equals(ByRef Quaternion)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Math.Quaternion.Equals(ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Equals(ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Equals(System.Object)
  commentId: M:WaveEngine.Common.Math.Quaternion.Equals(System.Object)
  id: Equals(System.Object)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Quaternion.Equals(Object)
  fullName: WaveEngine.Common.Math.Quaternion.Equals(System.Object)
  type: Method
  source:
    id: Equals
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 146
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to this instance; otherwise, <code>false</code>.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: WaveEngine.Common.Math.Quaternion.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: WaveEngine.Common.Math.Quaternion.GetHashCode
  commentId: M:WaveEngine.Common.Math.Quaternion.GetHashCode
  id: GetHashCode
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Quaternion.GetHashCode()
  fullName: WaveEngine.Common.Math.Quaternion.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 163
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns a hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: WaveEngine.Common.Math.Quaternion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: WaveEngine.Common.Math.Quaternion.LengthSquared
  commentId: M:WaveEngine.Common.Math.Quaternion.LengthSquared
  id: LengthSquared
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: LengthSquared()
  nameWithType: Quaternion.LengthSquared()
  fullName: WaveEngine.Common.Math.Quaternion.LengthSquared()
  type: Method
  source:
    id: LengthSquared
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 177
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns the square of the current quaternion instance length\n"
  example: []
  syntax:
    content: public float LengthSquared()
    return:
      type: System.Single
      description: The square of the current quaternion instance length.
    content.vb: Public Function LengthSquared As Single
  overload: WaveEngine.Common.Math.Quaternion.LengthSquared*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Length
  commentId: M:WaveEngine.Common.Math.Quaternion.Length
  id: Length
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Quaternion.Length()
  fullName: WaveEngine.Common.Math.Quaternion.Length()
  type: Method
  source:
    id: Length
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 186
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns the lenght of the current quaternion instance\n"
  example: []
  syntax:
    content: public float Length()
    return:
      type: System.Single
      description: The lenght of the current quaternion instance.
    content.vb: Public Function Length As Single
  overload: WaveEngine.Common.Math.Quaternion.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Normalize
  commentId: M:WaveEngine.Common.Math.Quaternion.Normalize
  id: Normalize
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Quaternion.Normalize()
  fullName: WaveEngine.Common.Math.Quaternion.Normalize()
  type: Method
  source:
    id: Normalize
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 196
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nNormalizes this quaternion instance.\n"
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize
  overload: WaveEngine.Common.Math.Quaternion.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion)
  id: Normalize(WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Normalize(Quaternion)
  nameWithType: Quaternion.Normalize(Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Normalize
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 212
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nNormalizes the given quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Normalize(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to be normalized.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The normalized quaternion.
    content.vb: Public Shared Function Normalize(quaternion As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Normalize(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Normalize(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Normalize(ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Normalize(ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Normalize
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 225
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nNormalizes the given quaternion.\n"
  example: []
  syntax:
    content: public static void Normalize(ref Quaternion quaternion, out Quaternion result)
    parameters:
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to be normalized.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The normalized quaternion.
    content.vb: Public Shared Sub Normalize(ByRef quaternion As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Normalize*
  nameWithType.vb: Quaternion.Normalize(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Normalize(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Normalize(ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Conjugate
  commentId: M:WaveEngine.Common.Math.Quaternion.Conjugate
  id: Conjugate
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Conjugate()
  nameWithType: Quaternion.Conjugate()
  fullName: WaveEngine.Common.Math.Quaternion.Conjugate()
  type: Method
  source:
    id: Conjugate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 239
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nConjugates this quaternion instance.\n"
  example: []
  syntax:
    content: public void Conjugate()
    content.vb: Public Sub Conjugate
  overload: WaveEngine.Common.Math.Quaternion.Conjugate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion)
  id: Conjugate(WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Conjugate(Quaternion)
  nameWithType: Quaternion.Conjugate(Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Conjugate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 251
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nConjugates the given quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Conjugate(Quaternion value)
    parameters:
    - id: value
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to conjugate.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The conjugated quaternion.
    content.vb: Public Shared Function Conjugate(value As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Conjugate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Conjugate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Conjugate(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Conjugate(ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Conjugate(ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Conjugate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 264
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nConjugates the given quaternion.\n"
  example: []
  syntax:
    content: public static void Conjugate(ref Quaternion value, out Quaternion result)
    parameters:
    - id: value
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to conjugate.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The conjugated quaternion.
    content.vb: Public Shared Sub Conjugate(ByRef value As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Conjugate*
  nameWithType.vb: Quaternion.Conjugate(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Conjugate(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Conjugate(ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion)
  id: Inverse(WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Inverse(Quaternion)
  nameWithType: Quaternion.Inverse(Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Inverse
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 277
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns the inverse of the given quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Inverse(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to inverse.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The inversed quaternion.
    content.vb: Public Shared Function Inverse(quaternion As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Inverse(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Inverse(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Inverse(ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Inverse(ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Inverse
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 290
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nReturns the inverse of the given quaternion.\n"
  example: []
  syntax:
    content: public static void Inverse(ref Quaternion quaternion, out Quaternion result)
    parameters:
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to inverse.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The inversed quaternion.
    content.vb: Public Shared Sub Inverse(ByRef quaternion As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Inverse*
  nameWithType.vb: Quaternion.Inverse(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Inverse(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Inverse(ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)
  id: CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromAxisAngle(Vector3, Single)
  nameWithType: Quaternion.CreateFromAxisAngle(Vector3, Single)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3, System.Single)
  type: Method
  source:
    id: CreateFromAxisAngle
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 307
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion which rotates angle radians around axis.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle)
    parameters:
    - id: axis
      type: WaveEngine.Common.Math.Vector3
      description: The axis.
    - id: angle
      type: System.Single
      description: The angle (radians).
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Function CreateFromAxisAngle(axis As Vector3, angle As Single) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Quaternion@)
  id: CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromAxisAngle(ref Vector3, Single, out Quaternion)
  nameWithType: Quaternion.CreateFromAxisAngle(ref Vector3, Single, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(ref WaveEngine.Common.Math.Vector3, System.Single, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: CreateFromAxisAngle
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 321
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion which rotates angle radians around axis.\n"
  example: []
  syntax:
    content: public static void CreateFromAxisAngle(ref Vector3 axis, float angle, out Quaternion result)
    parameters:
    - id: axis
      type: WaveEngine.Common.Math.Vector3
      description: The axis.
    - id: angle
      type: System.Single
      description: The angle (radians).
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Sub CreateFromAxisAngle(ByRef axis As Vector3, angle As Single, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle*
  nameWithType.vb: Quaternion.CreateFromAxisAngle(ByRef Vector3, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(ByRef WaveEngine.Common.Math.Vector3, System.Single, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: CreateFromAxisAngle(ByRef Vector3, Single, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromYawPitchRoll(Single, Single, Single)
  nameWithType: Quaternion.CreateFromYawPitchRoll(Single, Single, Single)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single, System.Single, System.Single)
  type: Method
  source:
    id: CreateFromYawPitchRoll
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 340
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from yaw pitch roll.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll)
    parameters:
    - id: yaw
      type: System.Single
      description: The yaw (radians).
    - id: pitch
      type: System.Single
      description: The pitch (radians).
    - id: roll
      type: System.Single
      description: The roll (radians).
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Function CreateFromYawPitchRoll(yaw As Single, pitch As Single, roll As Single) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Quaternion@)
  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromYawPitchRoll(Single, Single, Single, out Quaternion)
  nameWithType: Quaternion.CreateFromYawPitchRoll(Single, Single, Single, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single, System.Single, System.Single, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: CreateFromYawPitchRoll
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 355
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from yaw pitch roll.\n"
  example: []
  syntax:
    content: public static void CreateFromYawPitchRoll(float yaw, float pitch, float roll, out Quaternion result)
    parameters:
    - id: yaw
      type: System.Single
      description: The yaw (radians).
    - id: pitch
      type: System.Single
      description: The pitch (radians).
    - id: roll
      type: System.Single
      description: The roll (radians).
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Sub CreateFromYawPitchRoll(yaw As Single, pitch As Single, roll As Single, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll*
  nameWithType.vb: Quaternion.CreateFromYawPitchRoll(Single, Single, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single, System.Single, System.Single, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: CreateFromYawPitchRoll(Single, Single, Single, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  id: CreateFromEuler(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromEuler(ref Vector3, out Quaternion)
  nameWithType: Quaternion.CreateFromEuler(ref Vector3, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromEuler(ref WaveEngine.Common.Math.Vector3, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: CreateFromEuler
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 378
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from euler angles.\n"
  example: []
  syntax:
    content: public static void CreateFromEuler(ref Vector3 euler, out Quaternion result)
    parameters:
    - id: euler
      type: WaveEngine.Common.Math.Vector3
      description: The euler angles.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Sub CreateFromEuler(ByRef euler As Vector3, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.CreateFromEuler*
  nameWithType.vb: Quaternion.CreateFromEuler(ByRef Vector3, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.CreateFromEuler(ByRef WaveEngine.Common.Math.Vector3, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: CreateFromEuler(ByRef Vector3, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3)
  id: CreateFromEuler(WaveEngine.Common.Math.Vector3)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromEuler(Vector3)
  nameWithType: Quaternion.CreateFromEuler(Vector3)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3)
  type: Method
  source:
    id: CreateFromEuler
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 388
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from euler angles.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromEuler(Vector3 euler)
    parameters:
    - id: euler
      type: WaveEngine.Common.Math.Vector3
      description: The euler angles.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Function CreateFromEuler(euler As Vector3) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.CreateFromEuler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)
  id: CreateFromTwoVectors(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromTwoVectors(Vector3, Vector3)
  nameWithType: Quaternion.CreateFromTwoVectors(Vector3, Vector3)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3, WaveEngine.Common.Math.Vector3)
  type: Method
  source:
    id: CreateFromTwoVectors
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 399
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from the angle between two vectors.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromTwoVectors(Vector3 u, Vector3 v)
    parameters:
    - id: u
      type: WaveEngine.Common.Math.Vector3
      description: First vector.
    - id: v
      type: WaveEngine.Common.Math.Vector3
      description: Second vector.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Function CreateFromTwoVectors(u As Vector3, v As Vector3) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  id: CreateFromTwoVectors(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromTwoVectors(ref Vector3, out Quaternion)
  nameWithType: Quaternion.CreateFromTwoVectors(ref Vector3, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(ref WaveEngine.Common.Math.Vector3, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: CreateFromTwoVectors
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 424
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from the angle between the lookAt and Vector3.Up vectors.\n"
  example: []
  syntax:
    content: public static void CreateFromTwoVectors(ref Vector3 lookAt, out Quaternion result)
    parameters:
    - id: lookAt
      type: WaveEngine.Common.Math.Vector3
      description: The look at vector.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Sub CreateFromTwoVectors(ByRef lookAt As Vector3, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors*
  nameWithType.vb: Quaternion.CreateFromTwoVectors(ByRef Vector3, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(ByRef WaveEngine.Common.Math.Vector3, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: CreateFromTwoVectors(ByRef Vector3, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.CreateFromLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  id: CreateFromLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromLookAt(ref Vector3, ref Vector3, out Quaternion)
  nameWithType: Quaternion.CreateFromLookAt(ref Vector3, ref Vector3, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromLookAt(ref WaveEngine.Common.Math.Vector3, ref WaveEngine.Common.Math.Vector3, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: CreateFromLookAt
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 436
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from the lookAt and up vector.\n"
  example: []
  syntax:
    content: public static void CreateFromLookAt(ref Vector3 lookAt, ref Vector3 up, out Quaternion result)
    parameters:
    - id: lookAt
      type: WaveEngine.Common.Math.Vector3
      description: The look at vector.
    - id: up
      type: WaveEngine.Common.Math.Vector3
      description: The Up vector
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Sub CreateFromLookAt(ByRef lookAt As Vector3, ByRef up As Vector3, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.CreateFromLookAt*
  nameWithType.vb: Quaternion.CreateFromLookAt(ByRef Vector3, ByRef Vector3, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.CreateFromLookAt(ByRef WaveEngine.Common.Math.Vector3, ByRef WaveEngine.Common.Math.Vector3, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: CreateFromLookAt(ByRef Vector3, ByRef Vector3, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix)
  id: CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromRotationMatrix(Matrix)
  nameWithType: Quaternion.CreateFromRotationMatrix(Matrix)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix)
  type: Method
  source:
    id: CreateFromRotationMatrix
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 475
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from a rotation matrix.\n"
  example: []
  syntax:
    content: public static Quaternion CreateFromRotationMatrix(Matrix matrix)
    parameters:
    - id: matrix
      type: WaveEngine.Common.Math.Matrix
      description: The matrix.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion created.
    content.vb: Public Shared Function CreateFromRotationMatrix(matrix As Matrix) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@)
  id: CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: CreateFromRotationMatrix(ref Matrix, out Quaternion)
  nameWithType: Quaternion.CreateFromRotationMatrix(ref Matrix, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(ref WaveEngine.Common.Math.Matrix, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: CreateFromRotationMatrix
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 488
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCreates a quaternion from a rotation matrix.\n"
  example: []
  syntax:
    content: public static void CreateFromRotationMatrix(ref Matrix matrix, out Quaternion quaternion)
    parameters:
    - id: matrix
      type: WaveEngine.Common.Math.Matrix
      description: The rotation matrix.
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: The rotation created.
    content.vb: Public Shared Sub CreateFromRotationMatrix(ByRef matrix As Matrix, ByRef quaternion As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix*
  nameWithType.vb: Quaternion.CreateFromRotationMatrix(ByRef Matrix, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(ByRef WaveEngine.Common.Math.Matrix, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: CreateFromRotationMatrix(ByRef Matrix, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Dot(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Dot(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: Dot(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Dot(Quaternion, Quaternion)
  nameWithType: Quaternion.Dot(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Dot(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Dot
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 571
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nThe Dot product between two quaternions.\n"
  example: []
  syntax:
    content: public static float Dot(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    return:
      type: System.Single
      description: The dot product.
    content.vb: Public Shared Function Dot(quaternion1 As Quaternion, quaternion2 As Quaternion) As Single
  overload: WaveEngine.Common.Math.Quaternion.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  id: Slerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Slerp(Quaternion, Quaternion, Single)
  nameWithType: Quaternion.Slerp(Quaternion, Quaternion, Single)
  fullName: WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion, System.Single)
  type: Method
  source:
    id: Slerp
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 583
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nInterpolates between two quaternions, using spherical linear interpolation\n"
  example: []
  syntax:
    content: public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    - id: amount
      type: System.Single
      description: A value that indicates how far to interpolate between the quaternions.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The interpolated quaternion.
    content.vb: Public Shared Function Slerp(quaternion1 As Quaternion, quaternion2 As Quaternion, amount As Single) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Slerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  id: Slerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Slerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  nameWithType: Quaternion.Slerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Slerp(ref WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, System.Single, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Slerp
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 598
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nInterpolates between two quaternions, using spherical linear interpolation\n"
  example: []
  syntax:
    content: public static void Slerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion .
    - id: amount
      type: System.Single
      description: A value that indicates how far to interpolate between the quaternions.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The interpolated quaternion.
    content.vb: Public Shared Sub Slerp(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, amount As Single, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Slerp*
  nameWithType.vb: Quaternion.Slerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Slerp(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, System.Single, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Slerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  id: Lerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Lerp(Quaternion, Quaternion, Single)
  nameWithType: Quaternion.Lerp(Quaternion, Quaternion, Single)
  fullName: WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion, System.Single)
  type: Method
  source:
    id: Lerp
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 638
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nInterpolates between quaternion1 and quaternion2 by amount and normalizes the result afterwards..\n"
  example: []
  syntax:
    content: public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    - id: amount
      type: System.Single
      description: Clamped to the range [0, 1].
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The interpolated quaternion.
    content.vb: Public Shared Function Lerp(quaternion1 As Quaternion, quaternion2 As Quaternion, amount As Single) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  id: Lerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Lerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  nameWithType: Quaternion.Lerp(ref Quaternion, ref Quaternion, Single, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Lerp(ref WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, System.Single, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Lerp
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 653
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nInterpolates between quaternion1 and quaternion2 by amount and normalizes the result afterwards..\n"
  example: []
  syntax:
    content: public static void Lerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    - id: amount
      type: System.Single
      description: Clamped to the range [0, 1].
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The interpolated quaternion.
    content.vb: Public Shared Sub Lerp(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, amount As Single, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Lerp*
  nameWithType.vb: Quaternion.Lerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Lerp(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, System.Single, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Lerp(ByRef Quaternion, ByRef Quaternion, Single, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.SmoothDamp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion@,System.Single,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.SmoothDamp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion@,System.Single,System.Single)
  id: SmoothDamp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion@,System.Single,System.Single)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single, Single)
  nameWithType: Quaternion.SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single, Single)
  fullName: WaveEngine.Common.Math.Quaternion.SmoothDamp(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, System.Single, System.Single)
  type: Method
  source:
    id: SmoothDamp
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 692
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nChanges a quaternion towards a desired goal over time\n"
  example: []
  syntax:
    content: public static Quaternion SmoothDamp(Quaternion current, Quaternion target, ref Quaternion deriv, float smoothTime, float gameTime)
    parameters:
    - id: current
      type: WaveEngine.Common.Math.Quaternion
      description: Current quaternion
    - id: target
      type: WaveEngine.Common.Math.Quaternion
      description: Target quaternion
    - id: deriv
      type: WaveEngine.Common.Math.Quaternion
      description: Derivative quaternion
    - id: smoothTime
      type: System.Single
      description: The smooth time.
    - id: gameTime
      type: System.Single
      description: The elapsed time.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The smoothed quaternion
    content.vb: Public Shared Function SmoothDamp(current As Quaternion, target As Quaternion, ByRef deriv As Quaternion, smoothTime As Single, gameTime As Single) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.SmoothDamp*
  nameWithType.vb: Quaternion.SmoothDamp(Quaternion, Quaternion, ByRef Quaternion, Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.SmoothDamp(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, System.Single, System.Single)
  name.vb: SmoothDamp(Quaternion, Quaternion, ByRef Quaternion, Single, Single)
- uid: WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: Concatenate(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Concatenate(Quaternion, Quaternion)
  nameWithType: Quaternion.Concatenate(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Concatenate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 726
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nConcatenates the specified quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion Concatenate(Quaternion value1, Quaternion value2)
    parameters:
    - id: value1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: value2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The concatenated quaternion.
    content.vb: Public Shared Function Concatenate(value1 As Quaternion, value2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Concatenate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Concatenate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Concatenate(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Concatenate(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Concatenate(ref WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Concatenate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 740
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nConcatenates the specified quaternions.\n"
  example: []
  syntax:
    content: public static void Concatenate(ref Quaternion value1, ref Quaternion value2, out Quaternion result)
    parameters:
    - id: value1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: value2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The concatenated quaternion.
    content.vb: Public Shared Sub Concatenate(ByRef value1 As Quaternion, ByRef value2 As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Concatenate*
  nameWithType.vb: Quaternion.Concatenate(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Concatenate(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Concatenate(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion)
  id: Negate(WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Negate(Quaternion)
  nameWithType: Quaternion.Negate(Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Negate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 766
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nNegates the given quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Negate(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to negate.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The negated quaternion.
    content.vb: Public Shared Function Negate(quaternion As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Negate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Negate(ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Negate(ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Negate(ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Negate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 779
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nNegates the given quaternion.\n"
  example: []
  syntax:
    content: public static void Negate(ref Quaternion quaternion, out Quaternion result)
    parameters:
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to negate.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The negated quaternion.
    content.vb: Public Shared Sub Negate(ByRef quaternion As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Negate*
  nameWithType.vb: Quaternion.Negate(ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Negate(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Negate(ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: Add(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Add(Quaternion, Quaternion)
  nameWithType: Quaternion.Add(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 793
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nAdds two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion Add(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion1.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion2.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The resulting quaternion.
    content.vb: Public Shared Function Add(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Add(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Add(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Add(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Add(ref WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 807
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nAdds two quaternions.\n"
  example: []
  syntax:
    content: public static void Add(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion1.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion2.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The resulting quaternion.
    content.vb: Public Shared Sub Add(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Add*
  nameWithType.vb: Quaternion.Add(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Add(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Add(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: Subtract(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Subtract(Quaternion, Quaternion)
  nameWithType: Quaternion.Subtract(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Subtract
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 821
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nSubtracts two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion Subtract(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion1.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion2.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The resulting quaternion.
    content.vb: Public Shared Function Subtract(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Subtract(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Subtract(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Subtract(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Subtract(ref WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Subtract
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 835
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nSubtracts two quaternions.\n"
  example: []
  syntax:
    content: public static void Subtract(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion1.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion2.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The resulting quaternion.
    content.vb: Public Shared Sub Subtract(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Subtract*
  nameWithType.vb: Quaternion.Subtract(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Subtract(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Subtract(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Quaternion)
  nameWithType: Quaternion.Multiply(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Multiply
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 849
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCombines two quaternions. Combining quaternions is the same as applying them in sequence but the order matters.\n"
  example: []
  syntax:
    content: public static Quaternion Multiply(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion to apply.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion to apply.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion resulting of applying quaternion1 and then quaternion2.
    content.vb: Public Shared Function Multiply(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Multiply(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Multiply(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Multiply(ref WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Multiply
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 863
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nCombines two quaternions. Combining quaternions is the same as applying them in sequence but the order matters.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion to apply.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion to apply.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion resulting of applying quaternion1 and then quaternion2.
    content.vb: Public Shared Sub Multiply(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Multiply*
  nameWithType.vb: Quaternion.Multiply(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Multiply(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Multiply(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  id: Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Single)
  nameWithType: Quaternion.Multiply(Quaternion, Single)
  fullName: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion, System.Single)
  type: Method
  source:
    id: Multiply
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 890
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nApplies a scale factor to a quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion Multiply(Quaternion quaternion1, float scaleFactor)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to scale.
    - id: scaleFactor
      type: System.Single
      description: The scale factor.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion resulting of applying the scale factor.
    content.vb: Public Shared Function Multiply(quaternion1 As Quaternion, scaleFactor As Single) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  id: Multiply(WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(ref Quaternion, Single, out Quaternion)
  nameWithType: Quaternion.Multiply(ref Quaternion, Single, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Multiply(ref WaveEngine.Common.Math.Quaternion, System.Single, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Multiply
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 904
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nApplies a scale factor to a quaternion.\n"
  example: []
  syntax:
    content: public static void Multiply(ref Quaternion quaternion1, float scaleFactor, out Quaternion result)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to scale.
    - id: scaleFactor
      type: System.Single
      description: The scale factor.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion resulting of applying the scale factor.
    content.vb: Public Shared Sub Multiply(ByRef quaternion1 As Quaternion, scaleFactor As Single, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Multiply*
  nameWithType.vb: Quaternion.Multiply(ByRef Quaternion, Single, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Multiply(ByRef WaveEngine.Common.Math.Quaternion, System.Single, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Multiply(ByRef Quaternion, Single, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: Divide(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Divide(Quaternion, Quaternion)
  nameWithType: Quaternion.Divide(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Divide
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 918
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nDivides a quaternion by another quaternion\n"
  example: []
  syntax:
    content: public static Quaternion Divide(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: Source quaternion
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The divisor.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion resulting of dividing two quaternions.
    content.vb: Public Shared Function Divide(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  commentId: M:WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  id: Divide(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Divide(ref Quaternion, ref Quaternion, out Quaternion)
  nameWithType: Quaternion.Divide(ref Quaternion, ref Quaternion, out Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Divide(ref WaveEngine.Common.Math.Quaternion, ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: Divide
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 932
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nDivides a quaternion by another quaternion\n"
  example: []
  syntax:
    content: public static void Divide(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: Source quaternion
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The divisor.
    - id: result
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion resulting of dividing two quaternions.
    content.vb: Public Shared Sub Divide(ByRef quaternion1 As Quaternion, ByRef quaternion2 As Quaternion, ByRef result As Quaternion)
  overload: WaveEngine.Common.Math.Quaternion.Divide*
  nameWithType.vb: Quaternion.Divide(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.Divide(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Quaternion)
  name.vb: Divide(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion)
- uid: WaveEngine.Common.Math.Quaternion.op_UnaryNegation(WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_UnaryNegation(WaveEngine.Common.Math.Quaternion)
  id: op_UnaryNegation(WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: UnaryNegation(Quaternion)
  nameWithType: Quaternion.UnaryNegation(Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.UnaryNegation(WaveEngine.Common.Math.Quaternion)
  type: Operator
  source:
    id: op_UnaryNegation
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 963
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator -.\nSubtracts a quaternion from another quaternion\n"
  example: []
  syntax:
    content: public static Quaternion operator -(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: WaveEngine.Common.Math.Quaternion
      description: A quaternion.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: "\nThe result of the subtraction\n"
    content.vb: Public Shared Operator -(quaternion As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Equality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Equality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: op_Equality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Equality(Quaternion, Quaternion)
  nameWithType: Quaternion.Equality(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Equality(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Operator
  source:
    id: op_Equality
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 983
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator ==.\nCompares two quaternions\n"
  example: []
  syntax:
    content: public static bool operator ==(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the quaternions are equal; otherwise, <code>false</code>.\n"
    content.vb: Public Shared Operator =(quaternion1 As Quaternion, quaternion2 As Quaternion) As Boolean
  overload: WaveEngine.Common.Math.Quaternion.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Inequality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Inequality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: op_Inequality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Inequality(Quaternion, Quaternion)
  nameWithType: Quaternion.Inequality(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Inequality(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Operator
  source:
    id: op_Inequality
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 997
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator !=.\nCompares two quaternions\n"
  example: []
  syntax:
    content: public static bool operator !=(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the quaternions are not equal; otherwise, <code>false</code>.\n"
    content.vb: Public Shared Operator <>(quaternion1 As Quaternion, quaternion2 As Quaternion) As Boolean
  overload: WaveEngine.Common.Math.Quaternion.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Addition(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Addition(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: op_Addition(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Addition(Quaternion, Quaternion)
  nameWithType: Quaternion.Addition(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Addition(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Operator
  source:
    id: op_Addition
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1011
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator +.\nAdds two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion operator +(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: "\nThe resulting quaternion.\n"
    content.vb: Public Shared Operator +(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Subtraction(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Subtraction(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: op_Subtraction(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Subtraction(Quaternion, Quaternion)
  nameWithType: Quaternion.Subtraction(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Subtraction(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Operator
  source:
    id: op_Subtraction
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1031
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator -.\nSubtracts two quaternions.\n"
  example: []
  syntax:
    content: public static Quaternion operator -(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: "\nThe resulting quaternion.\n"
    content.vb: Public Shared Operator -(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Quaternion)
  nameWithType: Quaternion.Multiply(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Operator
  source:
    id: op_Multiply
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1051
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator *.\nCombines two quaternions. Combining quaternions is the same as applying them in sequence but the order matters.\n"
  example: []
  syntax:
    content: public static Quaternion operator *(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The first quaternion to apply.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The second quaternion to apply.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: "\nThe quaternion resulting of applying quaternion1 and then quaternion2.\n"
    content.vb: Public Shared Operator *(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  id: op_Multiply(WaveEngine.Common.Math.Quaternion,System.Single)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Single)
  nameWithType: Quaternion.Multiply(Quaternion, Single)
  fullName: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion, System.Single)
  type: Operator
  source:
    id: op_Multiply
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1084
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator *.\nApplies a scale factor to a quaternion.\n"
  example: []
  syntax:
    content: public static Quaternion operator *(Quaternion quaternion1, float scaleFactor)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion to scale.
    - id: scaleFactor
      type: System.Single
      description: The scale factor.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: "\nThe quaternion resulting of applying the scale factor.\n"
    content.vb: Public Shared Operator *(quaternion1 As Quaternion, scaleFactor As Single) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)
  id: op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Multiply(Quaternion, Vector3)
  nameWithType: Quaternion.Multiply(Quaternion, Vector3)
  fullName: WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Vector3)
  type: Operator
  source:
    id: op_Multiply
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1101
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator *\n"
  example: []
  syntax:
    content: public static Vector3 operator *(Quaternion rotation, Vector3 point)
    parameters:
    - id: rotation
      type: WaveEngine.Common.Math.Quaternion
      description: The rotation quaternion.
    - id: point
      type: WaveEngine.Common.Math.Vector3
      description: The point as vector3.
    return:
      type: WaveEngine.Common.Math.Vector3
      description: Rotates the point with rotation.
    content.vb: Public Shared Operator *(rotation As Quaternion, point As Vector3) As Vector3
  overload: WaveEngine.Common.Math.Quaternion.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.op_Division(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.op_Division(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  id: op_Division(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: Division(Quaternion, Quaternion)
  nameWithType: Quaternion.Division(Quaternion, Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.Division(WaveEngine.Common.Math.Quaternion, WaveEngine.Common.Math.Quaternion)
  type: Operator
  source:
    id: op_Division
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1134
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nImplements the operator /.\nDivides a quaternion by another quaternion\n"
  example: []
  syntax:
    content: public static Quaternion operator /(Quaternion quaternion1, Quaternion quaternion2)
    parameters:
    - id: quaternion1
      type: WaveEngine.Common.Math.Quaternion
      description: Source quaternion.
    - id: quaternion2
      type: WaveEngine.Common.Math.Quaternion
      description: The divisor.
    return:
      type: WaveEngine.Common.Math.Quaternion
      description: "\nThe quaternion resulting of dividing two quaternions.\n"
    content.vb: Public Shared Operator /(quaternion1 As Quaternion, quaternion2 As Quaternion) As Quaternion
  overload: WaveEngine.Common.Math.Quaternion.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion)
  commentId: M:WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion)
  id: ToEuler(WaveEngine.Common.Math.Quaternion)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: ToEuler(Quaternion)
  nameWithType: Quaternion.ToEuler(Quaternion)
  fullName: WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion)
  type: Method
  source:
    id: ToEuler
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1165
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nConverts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).\n"
  example: []
  syntax:
    content: public static Vector3 ToEuler(Quaternion orientation)
    parameters:
    - id: orientation
      type: WaveEngine.Common.Math.Quaternion
      description: The rotation.
    return:
      type: WaveEngine.Common.Math.Vector3
      description: The rotationaxes.
    content.vb: Public Shared Function ToEuler(orientation As Quaternion) As Vector3
  overload: WaveEngine.Common.Math.Quaternion.ToEuler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)
  commentId: M:WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)
  id: ToEuler(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: ToEuler(ref Quaternion, out Vector3)
  nameWithType: Quaternion.ToEuler(ref Quaternion, out Vector3)
  fullName: WaveEngine.Common.Math.Quaternion.ToEuler(ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Vector3)
  type: Method
  source:
    id: ToEuler
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1178
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nConverts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).\n"
  example: []
  syntax:
    content: public static void ToEuler(ref Quaternion orientation, out Vector3 rotationaxes)
    parameters:
    - id: orientation
      type: WaveEngine.Common.Math.Quaternion
      description: The rotation.
    - id: rotationaxes
      type: WaveEngine.Common.Math.Vector3
      description: The rotationaxes.
    content.vb: Public Shared Sub ToEuler(ByRef orientation As Quaternion, ByRef rotationaxes As Vector3)
  overload: WaveEngine.Common.Math.Quaternion.ToEuler*
  nameWithType.vb: Quaternion.ToEuler(ByRef Quaternion, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.ToEuler(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Vector3)
  name.vb: ToEuler(ByRef Quaternion, ByRef Vector3)
- uid: WaveEngine.Common.Math.Quaternion.ToAngleAxis(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,System.Single@)
  commentId: M:WaveEngine.Common.Math.Quaternion.ToAngleAxis(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,System.Single@)
  id: ToAngleAxis(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,System.Single@)
  parent: WaveEngine.Common.Math.Quaternion
  langs:
  - csharp
  - vb
  name: ToAngleAxis(ref Quaternion, out Vector3, out Single)
  nameWithType: Quaternion.ToAngleAxis(ref Quaternion, out Vector3, out Single)
  fullName: WaveEngine.Common.Math.Quaternion.ToAngleAxis(ref WaveEngine.Common.Math.Quaternion, out WaveEngine.Common.Math.Vector3, out System.Single)
  type: Method
  source:
    id: ToAngleAxis
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Math\Quaternion.cs
    startLine: 1207
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Math
  summary: "\nObtains the Angle and Axis of a Quaternion\n"
  example: []
  syntax:
    content: public static void ToAngleAxis(ref Quaternion orientation, out Vector3 axis, out float angle)
    parameters:
    - id: orientation
      type: WaveEngine.Common.Math.Quaternion
      description: The quaternion.
    - id: axis
      type: WaveEngine.Common.Math.Vector3
      description: The axis of the quaternion.
    - id: angle
      type: System.Single
      description: The angle of the quaternion.
    content.vb: Public Shared Sub ToAngleAxis(ByRef orientation As Quaternion, ByRef axis As Vector3, ByRef angle As Single)
  overload: WaveEngine.Common.Math.Quaternion.ToAngleAxis*
  nameWithType.vb: Quaternion.ToAngleAxis(ByRef Quaternion, ByRef Vector3, ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Math.Quaternion.ToAngleAxis(ByRef WaveEngine.Common.Math.Quaternion, ByRef WaveEngine.Common.Math.Vector3, ByRef System.Single)
  name.vb: ToAngleAxis(ByRef Quaternion, ByRef Vector3, ByRef Single)
references:
- uid: WaveEngine.Common.Math
  commentId: N:WaveEngine.Common.Math
  name: WaveEngine.Common.Math
  nameWithType: WaveEngine.Common.Math
  fullName: WaveEngine.Common.Math
- uid: System.IEquatable{WaveEngine.Common.Math.Quaternion}
  commentId: T:System.IEquatable{WaveEngine.Common.Math.Quaternion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Quaternion>
  nameWithType: IEquatable<Quaternion>
  fullName: System.IEquatable<WaveEngine.Common.Math.Quaternion>
  nameWithType.vb: IEquatable(Of Quaternion)
  fullName.vb: System.IEquatable(Of WaveEngine.Common.Math.Quaternion)
  name.vb: IEquatable(Of Quaternion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: WaveEngine.Common.Math.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: WaveEngine.Common.Math.Quaternion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: WaveEngine.Common.Math.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: WaveEngine.Common.Math.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  name: GetMemberAssembly()
  nameWithType: ReflectionHelper.GetMemberAssembly()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  name: GetTypeName()
  nameWithType: ReflectionHelper.GetTypeName()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  isExternal: true
  name: GetMemberAssembly(Object)
  nameWithType: ReflectionHelper.GetMemberAssembly(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.ReflectionHelper
  commentId: T:WaveEngine.Common.Helpers.ReflectionHelper
  parent: WaveEngine.Common.Helpers
  name: ReflectionHelper
  nameWithType: ReflectionHelper
  fullName: WaveEngine.Common.Helpers.ReflectionHelper
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  isExternal: true
  name: GetTypeName(Object)
  nameWithType: ReflectionHelper.GetTypeName(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers
  commentId: N:WaveEngine.Common.Helpers
  name: WaveEngine.Common.Helpers
  nameWithType: WaveEngine.Common.Helpers
  fullName: WaveEngine.Common.Helpers
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: WaveEngine.Common.Math.Quaternion.Identity*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Identity
  name: Identity
  nameWithType: Quaternion.Identity
  fullName: WaveEngine.Common.Math.Quaternion.Identity
- uid: WaveEngine.Common.Math.Quaternion
  commentId: T:WaveEngine.Common.Math.Quaternion
  parent: WaveEngine.Common.Math
  name: Quaternion
  nameWithType: Quaternion
  fullName: WaveEngine.Common.Math.Quaternion
- uid: WaveEngine.Common.Math.Quaternion.#ctor*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.#ctor
  name: Quaternion
  nameWithType: Quaternion.Quaternion
  fullName: WaveEngine.Common.Math.Quaternion.Quaternion
- uid: WaveEngine.Common.Math.Vector3
  commentId: T:WaveEngine.Common.Math.Vector3
  parent: WaveEngine.Common.Math
  name: Vector3
  nameWithType: Vector3
  fullName: WaveEngine.Common.Math.Vector3
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Math.Quaternion.ToString*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.ToString
  name: ToString
  nameWithType: Quaternion.ToString
  fullName: WaveEngine.Common.Math.Quaternion.ToString
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: WaveEngine.Common.Math.Quaternion.Equals*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Equals
  name: Equals
  nameWithType: Quaternion.Equals
  fullName: WaveEngine.Common.Math.Quaternion.Equals
- uid: System.IEquatable{WaveEngine.Common.Math.Quaternion}.Equals(WaveEngine.Common.Math.Quaternion)
  commentId: M:System.IEquatable{WaveEngine.Common.Math.Quaternion}.Equals(WaveEngine.Common.Math.Quaternion)
  parent: System.IEquatable{WaveEngine.Common.Math.Quaternion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Quaternion)
  nameWithType: IEquatable<Quaternion>.Equals(Quaternion)
  fullName: System.IEquatable<WaveEngine.Common.Math.Quaternion>.Equals(WaveEngine.Common.Math.Quaternion)
  nameWithType.vb: IEquatable(Of Quaternion).Equals(Quaternion)
  fullName.vb: System.IEquatable(Of WaveEngine.Common.Math.Quaternion).Equals(WaveEngine.Common.Math.Quaternion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Quaternion>.Equals
    fullName: System.IEquatable<WaveEngine.Common.Math.Quaternion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: WaveEngine.Common.Math.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: WaveEngine.Common.Math.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Quaternion).Equals
    fullName: System.IEquatable(Of WaveEngine.Common.Math.Quaternion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: WaveEngine.Common.Math.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: WaveEngine.Common.Math.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Math.Quaternion.GetHashCode*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.GetHashCode
  name: GetHashCode
  nameWithType: Quaternion.GetHashCode
  fullName: WaveEngine.Common.Math.Quaternion.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: WaveEngine.Common.Math.Quaternion.LengthSquared*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.LengthSquared
  name: LengthSquared
  nameWithType: Quaternion.LengthSquared
  fullName: WaveEngine.Common.Math.Quaternion.LengthSquared
- uid: WaveEngine.Common.Math.Quaternion.Length*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Length
  name: Length
  nameWithType: Quaternion.Length
  fullName: WaveEngine.Common.Math.Quaternion.Length
- uid: WaveEngine.Common.Math.Quaternion.Normalize*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Normalize
  name: Normalize
  nameWithType: Quaternion.Normalize
  fullName: WaveEngine.Common.Math.Quaternion.Normalize
- uid: WaveEngine.Common.Math.Quaternion.Conjugate*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Conjugate
  name: Conjugate
  nameWithType: Quaternion.Conjugate
  fullName: WaveEngine.Common.Math.Quaternion.Conjugate
- uid: WaveEngine.Common.Math.Quaternion.Inverse*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Inverse
  name: Inverse
  nameWithType: Quaternion.Inverse
  fullName: WaveEngine.Common.Math.Quaternion.Inverse
- uid: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle
  name: CreateFromAxisAngle
  nameWithType: Quaternion.CreateFromAxisAngle
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle
- uid: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll
  name: CreateFromYawPitchRoll
  nameWithType: Quaternion.CreateFromYawPitchRoll
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll
- uid: WaveEngine.Common.Math.Quaternion.CreateFromEuler*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.CreateFromEuler
  name: CreateFromEuler
  nameWithType: Quaternion.CreateFromEuler
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromEuler
- uid: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors
  name: CreateFromTwoVectors
  nameWithType: Quaternion.CreateFromTwoVectors
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors
- uid: WaveEngine.Common.Math.Quaternion.CreateFromLookAt*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.CreateFromLookAt
  name: CreateFromLookAt
  nameWithType: Quaternion.CreateFromLookAt
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromLookAt
- uid: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix
  name: CreateFromRotationMatrix
  nameWithType: Quaternion.CreateFromRotationMatrix
  fullName: WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix
- uid: WaveEngine.Common.Math.Matrix
  commentId: T:WaveEngine.Common.Math.Matrix
  parent: WaveEngine.Common.Math
  name: Matrix
  nameWithType: Matrix
  fullName: WaveEngine.Common.Math.Matrix
- uid: WaveEngine.Common.Math.Quaternion.Dot*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Dot
  name: Dot
  nameWithType: Quaternion.Dot
  fullName: WaveEngine.Common.Math.Quaternion.Dot
- uid: WaveEngine.Common.Math.Quaternion.Slerp*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Slerp
  name: Slerp
  nameWithType: Quaternion.Slerp
  fullName: WaveEngine.Common.Math.Quaternion.Slerp
- uid: WaveEngine.Common.Math.Quaternion.Lerp*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Lerp
  name: Lerp
  nameWithType: Quaternion.Lerp
  fullName: WaveEngine.Common.Math.Quaternion.Lerp
- uid: WaveEngine.Common.Math.Quaternion.SmoothDamp*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.SmoothDamp
  name: SmoothDamp
  nameWithType: Quaternion.SmoothDamp
  fullName: WaveEngine.Common.Math.Quaternion.SmoothDamp
- uid: WaveEngine.Common.Math.Quaternion.Concatenate*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Concatenate
  name: Concatenate
  nameWithType: Quaternion.Concatenate
  fullName: WaveEngine.Common.Math.Quaternion.Concatenate
- uid: WaveEngine.Common.Math.Quaternion.Negate*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Negate
  name: Negate
  nameWithType: Quaternion.Negate
  fullName: WaveEngine.Common.Math.Quaternion.Negate
- uid: WaveEngine.Common.Math.Quaternion.Add*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Add
  name: Add
  nameWithType: Quaternion.Add
  fullName: WaveEngine.Common.Math.Quaternion.Add
- uid: WaveEngine.Common.Math.Quaternion.Subtract*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Subtract
  name: Subtract
  nameWithType: Quaternion.Subtract
  fullName: WaveEngine.Common.Math.Quaternion.Subtract
- uid: WaveEngine.Common.Math.Quaternion.Multiply*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Multiply
  name: Multiply
  nameWithType: Quaternion.Multiply
  fullName: WaveEngine.Common.Math.Quaternion.Multiply
- uid: WaveEngine.Common.Math.Quaternion.Divide*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.Divide
  name: Divide
  nameWithType: Quaternion.Divide
  fullName: WaveEngine.Common.Math.Quaternion.Divide
- uid: WaveEngine.Common.Math.Quaternion.op_UnaryNegation*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Quaternion.UnaryNegation
  fullName: WaveEngine.Common.Math.Quaternion.UnaryNegation
- uid: WaveEngine.Common.Math.Quaternion.op_Equality*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.op_Equality
  name: Equality
  nameWithType: Quaternion.Equality
  fullName: WaveEngine.Common.Math.Quaternion.Equality
- uid: WaveEngine.Common.Math.Quaternion.op_Inequality*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.op_Inequality
  name: Inequality
  nameWithType: Quaternion.Inequality
  fullName: WaveEngine.Common.Math.Quaternion.Inequality
- uid: WaveEngine.Common.Math.Quaternion.op_Addition*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.op_Addition
  name: Addition
  nameWithType: Quaternion.Addition
  fullName: WaveEngine.Common.Math.Quaternion.Addition
- uid: WaveEngine.Common.Math.Quaternion.op_Subtraction*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.op_Subtraction
  name: Subtraction
  nameWithType: Quaternion.Subtraction
  fullName: WaveEngine.Common.Math.Quaternion.Subtraction
- uid: WaveEngine.Common.Math.Quaternion.op_Multiply*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.op_Multiply
  name: Multiply
  nameWithType: Quaternion.Multiply
  fullName: WaveEngine.Common.Math.Quaternion.Multiply
- uid: WaveEngine.Common.Math.Quaternion.op_Division*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.op_Division
  name: Division
  nameWithType: Quaternion.Division
  fullName: WaveEngine.Common.Math.Quaternion.Division
- uid: WaveEngine.Common.Math.Quaternion.ToEuler*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.ToEuler
  name: ToEuler
  nameWithType: Quaternion.ToEuler
  fullName: WaveEngine.Common.Math.Quaternion.ToEuler
- uid: WaveEngine.Common.Math.Quaternion.ToAngleAxis*
  commentId: Overload:WaveEngine.Common.Math.Quaternion.ToAngleAxis
  name: ToAngleAxis
  nameWithType: Quaternion.ToAngleAxis
  fullName: WaveEngine.Common.Math.Quaternion.ToAngleAxis
