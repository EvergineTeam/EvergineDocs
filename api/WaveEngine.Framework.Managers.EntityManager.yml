### YamlMime:ManagedReference
items:
- uid: WaveEngine.Framework.Managers.EntityManager
  commentId: T:WaveEngine.Framework.Managers.EntityManager
  id: EntityManager
  parent: WaveEngine.Framework.Managers
  children:
  - WaveEngine.Framework.Managers.EntityManager.#ctor(WaveEngine.Framework.Scene)
  - WaveEngine.Framework.Managers.EntityManager.Add(System.Collections.Generic.List{WaveEngine.Framework.Entity})
  - WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.BaseDecorator)
  - WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity)
  - WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity,System.Boolean)
  - WaveEngine.Framework.Managers.EntityManager.AllEntities
  - WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.BaseDecorator)
  - WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.Entity)
  - WaveEngine.Framework.Managers.EntityManager.Count
  - WaveEngine.Framework.Managers.EntityManager.Detach(System.String)
  - WaveEngine.Framework.Managers.EntityManager.Detach(WaveEngine.Framework.Entity)
  - WaveEngine.Framework.Managers.EntityManager.Dispose
  - WaveEngine.Framework.Managers.EntityManager.Dispose(System.Boolean)
  - WaveEngine.Framework.Managers.EntityManager.EntityGraph
  - WaveEngine.Framework.Managers.EntityManager.Finalize
  - WaveEngine.Framework.Managers.EntityManager.Find(System.String,WaveEngine.Framework.Entity)
  - WaveEngine.Framework.Managers.EntityManager.Find``1(System.String)
  - WaveEngine.Framework.Managers.EntityManager.FindAllByTag(System.String)
  - WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath``1(System.String,System.Boolean)
  - WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath``1(System.String,System.Boolean)
  - WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType``1(System.Boolean)
  - WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType``1(System.Boolean)
  - WaveEngine.Framework.Managers.EntityManager.Initialize
  - WaveEngine.Framework.Managers.EntityManager.Instantiate(System.String)
  - WaveEngine.Framework.Managers.EntityManager.IsStaticEntitiesAllowed
  - WaveEngine.Framework.Managers.EntityManager.ObjectGraph
  - WaveEngine.Framework.Managers.EntityManager.Remove(System.String)
  - WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.BaseDecorator)
  - WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.Entity)
  langs:
  - csharp
  - vb
  name: EntityManager
  nameWithType: EntityManager
  fullName: WaveEngine.Framework.Managers.EntityManager
  type: Class
  source:
    id: EntityManager
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 20
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nCollects every <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instance present in a <xref href=\"WaveEngine.Framework.Scene\" data-throw-if-not-resolved=\"false\"></xref>.\nAs a collection, it supports common operations like adding and removing entities.\n"
  example: []
  syntax:
    content: 'public class EntityManager : Manager, IDisposable'
    content.vb: >-
      Public Class EntityManager

          Inherits Manager

          Implements IDisposable
  inheritance:
  - System.Object
  - WaveEngine.Common.Manager
  implements:
  - System.IDisposable
  inheritedMembers:
  - WaveEngine.Common.Manager.IsInitialized
  - WaveEngine.Common.Manager.BaseInitialize
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: WaveEngine.Framework.Managers.EntityManager.IsStaticEntitiesAllowed
  commentId: F:WaveEngine.Framework.Managers.EntityManager.IsStaticEntitiesAllowed
  id: IsStaticEntitiesAllowed
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: IsStaticEntitiesAllowed
  nameWithType: EntityManager.IsStaticEntitiesAllowed
  fullName: WaveEngine.Framework.Managers.EntityManager.IsStaticEntitiesAllowed
  type: Field
  source:
    id: IsStaticEntitiesAllowed
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 35
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nIs static entities allowed\n"
  example: []
  syntax:
    content: public bool IsStaticEntitiesAllowed
    return:
      type: System.Boolean
    content.vb: Public IsStaticEntitiesAllowed As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Count
  commentId: P:WaveEngine.Framework.Managers.EntityManager.Count
  id: Count
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: EntityManager.Count
  fullName: WaveEngine.Framework.Managers.EntityManager.Count
  type: Property
  source:
    id: Count
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 55
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nGets how many <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instances are added to this instance.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nHow many <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instances are added to this instance.\n"
    content.vb: Public ReadOnly Property Count As Integer
  overload: WaveEngine.Framework.Managers.EntityManager.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: WaveEngine.Framework.Managers.EntityManager.ObjectGraph
  commentId: P:WaveEngine.Framework.Managers.EntityManager.ObjectGraph
  id: ObjectGraph
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: ObjectGraph
  nameWithType: EntityManager.ObjectGraph
  fullName: WaveEngine.Framework.Managers.EntityManager.ObjectGraph
  type: Property
  source:
    id: ObjectGraph
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 79
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nGets the <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instances as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> collection\n(see <see pref=\"EntityGraph\"></see> if you want to avoid manual castings to <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref>).\nIMPORTANT NOTE: Just the parents are contained within the returning value (i.e.\njust the instances subject to an Add() call). Children will not be considered here.\nSee <see pref=\"AllEntities\"></see> if you are looking also for children.\n"
  example: []
  syntax:
    content: public IEnumerable<object> ObjectGraph { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\nThe <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instances as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> collection.\n"
    content.vb: Public ReadOnly Property ObjectGraph As IEnumerable(Of Object)
  overload: WaveEngine.Framework.Managers.EntityManager.ObjectGraph*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: EntityManager has been disposed.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: WaveEngine.Framework.Managers.EntityManager.AllEntities
  commentId: P:WaveEngine.Framework.Managers.EntityManager.AllEntities
  id: AllEntities
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: AllEntities
  nameWithType: EntityManager.AllEntities
  fullName: WaveEngine.Framework.Managers.EntityManager.AllEntities
  type: Property
  source:
    id: AllEntities
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 101
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nGets *every* <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instance.\nThe <see pref=\"ObjectGraph\"></see> is gone through every <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref>\nincluding its children.\n"
  example: []
  syntax:
    content: public IEnumerable<Entity> AllEntities { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{WaveEngine.Framework.Entity}
      description: "\n*Every* <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: Public ReadOnly Property AllEntities As IEnumerable(Of Entity)
  overload: WaveEngine.Framework.Managers.EntityManager.AllEntities*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: EntityManager has been disposed.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: WaveEngine.Framework.Managers.EntityManager.EntityGraph
  commentId: P:WaveEngine.Framework.Managers.EntityManager.EntityGraph
  id: EntityGraph
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: EntityGraph
  nameWithType: EntityManager.EntityGraph
  fullName: WaveEngine.Framework.Managers.EntityManager.EntityGraph
  type: Property
  source:
    id: EntityGraph
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 155
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nGets the <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instances\n(see <see pref=\"ObjectGraph\"></see> if you prefer a collection of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>).\nIMPORTANT NOTE: Just the parents are contained within the returning value (i.e.\njust the instances subject to an Add() call). Children will not be considered here.\nSee <see pref=\"AllEntities\"></see> if you are looking also for children.\n"
  example: []
  syntax:
    content: public IEnumerable<Entity> EntityGraph { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{WaveEngine.Framework.Entity}
      description: "\nThe <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
    content.vb: Public ReadOnly Property EntityGraph As IEnumerable(Of Entity)
  overload: WaveEngine.Framework.Managers.EntityManager.EntityGraph*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: EntityManager has been disposed.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: WaveEngine.Framework.Managers.EntityManager.#ctor(WaveEngine.Framework.Scene)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.#ctor(WaveEngine.Framework.Scene)
  id: '#ctor(WaveEngine.Framework.Scene)'
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: EntityManager(Scene)
  nameWithType: EntityManager.EntityManager(Scene)
  fullName: WaveEngine.Framework.Managers.EntityManager.EntityManager(WaveEngine.Framework.Scene)
  type: Constructor
  source:
    id: .ctor
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 190
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nInitializes a new instance of the <xref href=\"WaveEngine.Framework.Managers.EntityManager\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public EntityManager(Scene scene)
    parameters:
    - id: scene
      type: WaveEngine.Framework.Scene
      description: The <xref href="WaveEngine.Framework.Scene" data-throw-if-not-resolved="false"></xref> that will make use of this instance.
    content.vb: Public Sub New(scene As Scene)
  overload: WaveEngine.Framework.Managers.EntityManager.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If adapter or scene are null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Finalize
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Finalize
  id: Finalize
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: EntityManager.Finalize()
  fullName: WaveEngine.Framework.Managers.EntityManager.Finalize()
  type: Method
  source:
    id: Finalize
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 212
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nFinalizes an instance of the <xref href=\"WaveEngine.Framework.Managers.EntityManager\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: WaveEngine.Framework.Managers.EntityManager.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity)
  id: Add(WaveEngine.Framework.Entity)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Add(Entity)
  nameWithType: EntityManager.Add(Entity)
  fullName: WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 226
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nAdds a new <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> to this instance.\n"
  example: []
  syntax:
    content: public void Add(Entity entity)
    parameters:
    - id: entity
      type: WaveEngine.Framework.Entity
      description: The <xref href="WaveEngine.Framework.Entity" data-throw-if-not-resolved="false"></xref> to add.
    content.vb: Public Sub Add(entity As Entity)
  overload: WaveEngine.Framework.Managers.EntityManager.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If entity is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If there is already an entity added to this instance with the same name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Add(System.Collections.Generic.List{WaveEngine.Framework.Entity})
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Add(System.Collections.Generic.List{WaveEngine.Framework.Entity})
  id: Add(System.Collections.Generic.List{WaveEngine.Framework.Entity})
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Add(List<Entity>)
  nameWithType: EntityManager.Add(List<Entity>)
  fullName: WaveEngine.Framework.Managers.EntityManager.Add(System.Collections.Generic.List<WaveEngine.Framework.Entity>)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 237
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nAdds a list of <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> to EntityManager.\n"
  example: []
  syntax:
    content: public void Add(List<Entity> entityList)
    parameters:
    - id: entityList
      type: System.Collections.Generic.List{WaveEngine.Framework.Entity}
      description: The <xref href="WaveEngine.Framework.Entity" data-throw-if-not-resolved="false"></xref> list to add.
    content.vb: Public Sub Add(entityList As List(Of Entity))
  overload: WaveEngine.Framework.Managers.EntityManager.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If entity is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If there is already an entity added to this instance with the same name.
  nameWithType.vb: EntityManager.Add(List(Of Entity))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Framework.Managers.EntityManager.Add(System.Collections.Generic.List(Of WaveEngine.Framework.Entity))
  name.vb: Add(List(Of Entity))
- uid: WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.BaseDecorator)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.BaseDecorator)
  id: Add(WaveEngine.Framework.BaseDecorator)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Add(BaseDecorator)
  nameWithType: EntityManager.Add(BaseDecorator)
  fullName: WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.BaseDecorator)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 275
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nAdds a new <xref href=\"WaveEngine.Framework.BaseDecorator\" data-throw-if-not-resolved=\"false\"></xref> entity to this instance.\nSee <xref href=\"WaveEngine.Framework.BaseDecorator\" data-throw-if-not-resolved=\"false\"></xref> for more information.\n"
  example: []
  syntax:
    content: public void Add(BaseDecorator decorator)
    parameters:
    - id: decorator
      type: WaveEngine.Framework.BaseDecorator
      description: The new <xref href="WaveEngine.Framework.BaseDecorator" data-throw-if-not-resolved="false"></xref> entity to add.
    content.vb: Public Sub Add(decorator As BaseDecorator)
  overload: WaveEngine.Framework.Managers.EntityManager.Add*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Object disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Decorator cannot be null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If there is already an entity added to this instance with the same name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Instantiate(System.String)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Instantiate(System.String)
  id: Instantiate(System.String)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Instantiate(String)
  nameWithType: EntityManager.Instantiate(String)
  fullName: WaveEngine.Framework.Managers.EntityManager.Instantiate(System.String)
  type: Method
  source:
    id: Instantiate
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 320
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nCreate a Entity by prefabPath\n"
  example: []
  syntax:
    content: public Entity Instantiate(string prefabPath)
    parameters:
    - id: prefabPath
      type: System.String
      description: prefab path
    return:
      type: WaveEngine.Framework.Entity
      description: Entity instance
    content.vb: Public Function Instantiate(prefabPath As String) As Entity
  overload: WaveEngine.Framework.Managers.EntityManager.Instantiate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.Entity)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.Entity)
  id: Contains(WaveEngine.Framework.Entity)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Contains(Entity)
  nameWithType: EntityManager.Contains(Entity)
  fullName: WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.Entity)
  type: Method
  source:
    id: Contains
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 354
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nDetermines whether this instance contains the specified <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref>\nthrough its <see pref=\"Entity.Name\"></see> property.\n"
  example: []
  syntax:
    content: public bool Contains(Entity entity)
    parameters:
    - id: entity
      type: WaveEngine.Framework.Entity
      description: The <xref href="WaveEngine.Framework.Entity" data-throw-if-not-resolved="false"></xref> to check.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance contains the specified <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <code>false</code>.\n"
    content.vb: Public Function Contains(entity As Entity) As Boolean
  overload: WaveEngine.Framework.Managers.EntityManager.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If entity is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.BaseDecorator)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.BaseDecorator)
  id: Contains(WaveEngine.Framework.BaseDecorator)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Contains(BaseDecorator)
  nameWithType: EntityManager.Contains(BaseDecorator)
  fullName: WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.BaseDecorator)
  type: Method
  source:
    id: Contains
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 379
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nDetermines whether this instance contains the specified <xref href=\"WaveEngine.Framework.BaseDecorator\" data-throw-if-not-resolved=\"false\"></xref> entity\nthrough its <see pref=\"BaseDecorator.Name\"></see> property.\n"
  example: []
  syntax:
    content: public bool Contains(BaseDecorator decorator)
    parameters:
    - id: decorator
      type: WaveEngine.Framework.BaseDecorator
      description: The <xref href="WaveEngine.Framework.BaseDecorator" data-throw-if-not-resolved="false"></xref> entity to check.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance contains the specified <xref href=\"WaveEngine.Framework.BaseDecorator\" data-throw-if-not-resolved=\"false\"></xref> entity; otherwise, <code>false</code>.\n"
    content.vb: Public Function Contains(decorator As BaseDecorator) As Boolean
  overload: WaveEngine.Framework.Managers.EntityManager.Contains*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Object disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If decorator is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Find(System.String,WaveEngine.Framework.Entity)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Find(System.String,WaveEngine.Framework.Entity)
  id: Find(System.String,WaveEngine.Framework.Entity)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Find(String, Entity)
  nameWithType: EntityManager.Find(String, Entity)
  fullName: WaveEngine.Framework.Managers.EntityManager.Find(System.String, WaveEngine.Framework.Entity)
  type: Method
  source:
    id: Find
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 403
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nLooks for an <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"WaveEngine.Framework.BaseDecorator\" data-throw-if-not-resolved=\"false\"></xref> entity\nin the <see pref=\"EntityGraph\"></see>, through its name.\n"
  example: []
  syntax:
    content: public Entity Find(string name, Entity sourceEntity = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the entity to look for.
    - id: sourceEntity
      type: WaveEngine.Framework.Entity
      description: The source entity for a relative path
    return:
      type: WaveEngine.Framework.Entity
      description: >-
        The <xref href="WaveEngine.Framework.Entity" data-throw-if-not-resolved="false"></xref> with the specified <code data-dev-comment-type="paramref" class="paramref">name</code>,

        or null if no entity was found.
    content.vb: Public Function Find(name As String, sourceEntity As Entity = Nothing) As Entity
  overload: WaveEngine.Framework.Managers.EntityManager.Find*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If name is null or empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType``1(System.Boolean)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType``1(System.Boolean)
  id: FindFirstComponentOfType``1(System.Boolean)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: FindFirstComponentOfType<T>(Boolean)
  nameWithType: EntityManager.FindFirstComponentOfType<T>(Boolean)
  fullName: WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType<T>(System.Boolean)
  type: Method
  source:
    id: FindFirstComponentOfType
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 436
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nIterate through the entire entity hierarchy and return the first component instance of the specified type\n"
  remarks: This method is extremely low, try to not use inside an Update method.
  example: []
  syntax:
    content: >-
      public T FindFirstComponentOfType<T>(bool isExactType = true)

          where T : Component
    parameters:
    - id: isExactType
      type: System.Boolean
      description: if set to <code>true</code> [is exact type].
    typeParameters:
    - id: T
      description: The component type
    return:
      type: '{T}'
      description: The component
    content.vb: Public Function FindFirstComponentOfType(Of T As Component)(isExactType As Boolean = True) As T
  overload: WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType*
  nameWithType.vb: EntityManager.FindFirstComponentOfType(Of T)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType(Of T)(System.Boolean)
  name.vb: FindFirstComponentOfType(Of T)(Boolean)
- uid: WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType``1(System.Boolean)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType``1(System.Boolean)
  id: FindComponentsOfType``1(System.Boolean)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: FindComponentsOfType<T>(Boolean)
  nameWithType: EntityManager.FindComponentsOfType<T>(Boolean)
  fullName: WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType<T>(System.Boolean)
  type: Method
  source:
    id: FindComponentsOfType
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 449
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nIterate through the entire entity hierarchy and return all component instances of the specified type\n"
  remarks: This method is extremely low, try to not use inside an Update method.
  example: []
  syntax:
    content: >-
      public IEnumerable<T> FindComponentsOfType<T>(bool isExactType = true)

          where T : Component
    parameters:
    - id: isExactType
      type: System.Boolean
      description: if set to <code>true</code> [is exact type].
    typeParameters:
    - id: T
      description: The component type
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The component enumerable
    content.vb: Public Function FindComponentsOfType(Of T As Component)(isExactType As Boolean = True) As IEnumerable(Of T)
  overload: WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType*
  nameWithType.vb: EntityManager.FindComponentsOfType(Of T)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType(Of T)(System.Boolean)
  name.vb: FindComponentsOfType(Of T)(Boolean)
- uid: WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath``1(System.String,System.Boolean)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath``1(System.String,System.Boolean)
  id: FindComponentFromEntityPath``1(System.String,System.Boolean)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: FindComponentFromEntityPath<T>(String, Boolean)
  nameWithType: EntityManager.FindComponentFromEntityPath<T>(String, Boolean)
  fullName: WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath<T>(System.String, System.Boolean)
  type: Method
  source:
    id: FindComponentFromEntityPath
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 467
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nReturn the first component inside an entity\n"
  example: []
  syntax:
    content: >-
      public T FindComponentFromEntityPath<T>(string entityPath, bool isExactType = true)

          where T : Component
    parameters:
    - id: entityPath
      type: System.String
      description: Entity Path
    - id: isExactType
      type: System.Boolean
      description: if set to <code>true</code> [is exact type].
    typeParameters:
    - id: T
      description: Component Type
    return:
      type: '{T}'
      description: Component inside of entity
    content.vb: Public Function FindComponentFromEntityPath(Of T As Component)(entityPath As String, isExactType As Boolean = True) As T
  overload: WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath*
  nameWithType.vb: EntityManager.FindComponentFromEntityPath(Of T)(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath(Of T)(System.String, System.Boolean)
  name.vb: FindComponentFromEntityPath(Of T)(String, Boolean)
- uid: WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath``1(System.String,System.Boolean)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath``1(System.String,System.Boolean)
  id: FindComponentsFromEntityPath``1(System.String,System.Boolean)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: FindComponentsFromEntityPath<T>(String, Boolean)
  nameWithType: EntityManager.FindComponentsFromEntityPath<T>(String, Boolean)
  fullName: WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath<T>(System.String, System.Boolean)
  type: Method
  source:
    id: FindComponentsFromEntityPath
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 490
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nReturn the components inside an entity\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> FindComponentsFromEntityPath<T>(string entityPath, bool isExactType = true)

          where T : Component
    parameters:
    - id: entityPath
      type: System.String
      description: Entity Path
    - id: isExactType
      type: System.Boolean
      description: if set to <code>true</code> [is exact type].
    typeParameters:
    - id: T
      description: Component Type
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Components collection
    content.vb: Public Function FindComponentsFromEntityPath(Of T As Component)(entityPath As String, isExactType As Boolean = True) As IEnumerable(Of T)
  overload: WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath*
  nameWithType.vb: EntityManager.FindComponentsFromEntityPath(Of T)(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath(Of T)(System.String, System.Boolean)
  name.vb: FindComponentsFromEntityPath(Of T)(String, Boolean)
- uid: WaveEngine.Framework.Managers.EntityManager.Find``1(System.String)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Find``1(System.String)
  id: Find``1(System.String)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Find<T>(String)
  nameWithType: EntityManager.Find<T>(String)
  fullName: WaveEngine.Framework.Managers.EntityManager.Find<T>(System.String)
  type: Method
  source:
    id: Find
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 516
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nLooks for a <xref href=\"WaveEngine.Framework.BaseDecorator\" data-throw-if-not-resolved=\"false\"></xref> entity (T)\nin the <see pref=\"EntityGraph\"></see>, through its name.\n"
  example: []
  syntax:
    content: public T Find<T>(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the entity to look for.
    typeParameters:
    - id: T
      description: <xref href="WaveEngine.Framework.BaseDecorator" data-throw-if-not-resolved="false"></xref> type to look for.
    return:
      type: '{T}'
      description: >-
        The <xref href="WaveEngine.Framework.BaseDecorator" data-throw-if-not-resolved="false"></xref> entity with the specified <code data-dev-comment-type="paramref" class="paramref">name</code>,

        or null if no entity was found.
    content.vb: Public Function Find(Of T)(name As String) As T
  overload: WaveEngine.Framework.Managers.EntityManager.Find*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Object disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If name is null or empty.
  nameWithType.vb: EntityManager.Find(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Framework.Managers.EntityManager.Find(Of T)(System.String)
  name.vb: Find(Of T)(String)
- uid: WaveEngine.Framework.Managers.EntityManager.FindAllByTag(System.String)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.FindAllByTag(System.String)
  id: FindAllByTag(System.String)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: FindAllByTag(String)
  nameWithType: EntityManager.FindAllByTag(String)
  fullName: WaveEngine.Framework.Managers.EntityManager.FindAllByTag(System.String)
  type: Method
  source:
    id: FindAllByTag
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 546
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nFinds all entities with the same <code data-dev-comment-type=\"paramref\" class=\"paramref\">tag</code>\nin the <see pref=\"ObjectGraph\"></see>.\n"
  example: []
  syntax:
    content: public IEnumerable<object> FindAllByTag(string tag)
    parameters:
    - id: tag
      type: System.String
      description: The tag.
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: >-
        All entities with the same <code data-dev-comment-type="paramref" class="paramref">tag</code>

        in the <see pref="ObjectGraph"></see>.
    content.vb: Public Function FindAllByTag(tag As String) As IEnumerable(Of Object)
  overload: WaveEngine.Framework.Managers.EntityManager.FindAllByTag*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Remove(System.String)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Remove(System.String)
  id: Remove(System.String)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: EntityManager.Remove(String)
  fullName: WaveEngine.Framework.Managers.EntityManager.Remove(System.String)
  type: Method
  source:
    id: Remove
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 614
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nRemoves a specific entity through its <code data-dev-comment-type=\"paramref\" class=\"paramref\">entityPath</code>.\n"
  remarks: The entity is <code>disposed</code> when it is removed from this instance.
  example: []
  syntax:
    content: public bool Remove(string entityPath)
    parameters:
    - id: entityPath
      type: System.String
      description: Entity path of the entity to remove.
    return:
      type: System.Boolean
      description: Whether an entity was removed.
    content.vb: Public Function Remove(entityPath As String) As Boolean
  overload: WaveEngine.Framework.Managers.EntityManager.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If name is null or empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.Entity)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.Entity)
  id: Remove(WaveEngine.Framework.Entity)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Remove(Entity)
  nameWithType: EntityManager.Remove(Entity)
  fullName: WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.Entity)
  type: Method
  source:
    id: Remove
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 642
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nRemoves a specific entity.\n"
  remarks: The entity is <code>disposed</code> when it is removed from this instance.
  example: []
  syntax:
    content: public bool Remove(Entity entity)
    parameters:
    - id: entity
      type: WaveEngine.Framework.Entity
      description: The entity to remove.
    return:
      type: System.Boolean
      description: Whether an entity was removed.
    content.vb: Public Function Remove(entity As Entity) As Boolean
  overload: WaveEngine.Framework.Managers.EntityManager.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If entity is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.BaseDecorator)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.BaseDecorator)
  id: Remove(WaveEngine.Framework.BaseDecorator)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Remove(BaseDecorator)
  nameWithType: EntityManager.Remove(BaseDecorator)
  fullName: WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.BaseDecorator)
  type: Method
  source:
    id: Remove
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 678
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nRemoves a specific entity through its <code data-dev-comment-type=\"paramref\" class=\"paramref\">decorator</code>.\n"
  example: []
  syntax:
    content: public bool Remove(BaseDecorator decorator)
    parameters:
    - id: decorator
      type: WaveEngine.Framework.BaseDecorator
      description: The <xref href="WaveEngine.Framework.Entity" data-throw-if-not-resolved="false"></xref> decorator.
    return:
      type: System.Boolean
      description: Whether an entity was removed.
    content.vb: Public Function Remove(decorator As BaseDecorator) As Boolean
  overload: WaveEngine.Framework.Managers.EntityManager.Remove*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Object disposed
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If decorator is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Detach(System.String)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Detach(System.String)
  id: Detach(System.String)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Detach(String)
  nameWithType: EntityManager.Detach(String)
  fullName: WaveEngine.Framework.Managers.EntityManager.Detach(System.String)
  type: Method
  source:
    id: Detach
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 709
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nDetach a specific entity through its <code data-dev-comment-type=\"paramref\" class=\"paramref\">entityPath</code>.\n"
  example: []
  syntax:
    content: public Entity Detach(string entityPath)
    parameters:
    - id: entityPath
      type: System.String
      description: Entity path of the entity to detach.
    return:
      type: WaveEngine.Framework.Entity
      description: Whether an entity was detach or null otherwise.
    content.vb: Public Function Detach(entityPath As String) As Entity
  overload: WaveEngine.Framework.Managers.EntityManager.Detach*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Detach(WaveEngine.Framework.Entity)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Detach(WaveEngine.Framework.Entity)
  id: Detach(WaveEngine.Framework.Entity)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Detach(Entity)
  nameWithType: EntityManager.Detach(Entity)
  fullName: WaveEngine.Framework.Managers.EntityManager.Detach(WaveEngine.Framework.Entity)
  type: Method
  source:
    id: Detach
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 737
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nDetach a specific entity.\n"
  remarks: The entity is <code>disposed</code> when it is detached from this instance.
  example: []
  syntax:
    content: public bool Detach(Entity entity)
    parameters:
    - id: entity
      type: WaveEngine.Framework.Entity
      description: The entity to detach.
    return:
      type: System.Boolean
      description: Whether an entity was detached.
    content.vb: Public Function Detach(entity As Entity) As Boolean
  overload: WaveEngine.Framework.Managers.EntityManager.Detach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If entity is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity,System.Boolean)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity,System.Boolean)
  id: Add(WaveEngine.Framework.Entity,System.Boolean)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Add(Entity, Boolean)
  nameWithType: EntityManager.Add(Entity, Boolean)
  fullName: WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity, System.Boolean)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 772
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nAdds a new <xref href=\"WaveEngine.Framework.Entity\" data-throw-if-not-resolved=\"false\"></xref> to this instance.\n"
  example: []
  syntax:
    content: public void Add(Entity entity, bool initializeEntity)
    parameters:
    - id: entity
      type: WaveEngine.Framework.Entity
      description: The <xref href="WaveEngine.Framework.Entity" data-throw-if-not-resolved="false"></xref> to add.
    - id: initializeEntity
      type: System.Boolean
      description: Initialize the entity
    content.vb: Public Sub Add(entity As Entity, initializeEntity As Boolean)
  overload: WaveEngine.Framework.Managers.EntityManager.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If entity is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If there is already an entity added to this instance with the same name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Dispose
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Dispose
  id: Dispose
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: EntityManager.Dispose()
  fullName: WaveEngine.Framework.Managers.EntityManager.Dispose()
  type: Method
  source:
    id: Dispose
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 810
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: WaveEngine.Framework.Managers.EntityManager.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: WaveEngine.Framework.Managers.EntityManager.Initialize
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Initialize
  id: Initialize
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: EntityManager.Initialize()
  fullName: WaveEngine.Framework.Managers.EntityManager.Initialize()
  type: Method
  source:
    id: Initialize
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 970
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nAllows to execute custom logic during the initialization of this instance.\n"
  example: []
  syntax:
    content: protected override void Initialize()
    content.vb: Protected Overrides Sub Initialize
  overridden: WaveEngine.Common.Manager.Initialize
  overload: WaveEngine.Framework.Managers.EntityManager.Initialize*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: WaveEngine.Framework.Managers.EntityManager.Dispose(System.Boolean)
  commentId: M:WaveEngine.Framework.Managers.EntityManager.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: WaveEngine.Framework.Managers.EntityManager
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: EntityManager.Dispose(Boolean)
  fullName: WaveEngine.Framework.Managers.EntityManager.Dispose(System.Boolean)
  type: Method
  source:
    id: Dispose
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Framework\Shared\Managers\EntityManager.cs
    startLine: 1012
  assemblies:
  - WaveEngine.Framework
  namespace: WaveEngine.Framework.Managers
  summary: "\nReleases unmanaged and - optionally - managed resources\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: <code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: WaveEngine.Framework.Managers.EntityManager.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: WaveEngine.Framework.Entity
  commentId: T:WaveEngine.Framework.Entity
  parent: WaveEngine.Framework
  name: Entity
  nameWithType: Entity
  fullName: WaveEngine.Framework.Entity
- uid: WaveEngine.Framework.Scene
  commentId: T:WaveEngine.Framework.Scene
  parent: WaveEngine.Framework
  name: Scene
  nameWithType: Scene
  fullName: WaveEngine.Framework.Scene
- uid: WaveEngine.Framework.Managers
  commentId: N:WaveEngine.Framework.Managers
  name: WaveEngine.Framework.Managers
  nameWithType: WaveEngine.Framework.Managers
  fullName: WaveEngine.Framework.Managers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: WaveEngine.Common.Manager
  commentId: T:WaveEngine.Common.Manager
  parent: WaveEngine.Common
  name: Manager
  nameWithType: Manager
  fullName: WaveEngine.Common.Manager
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: WaveEngine.Common.Manager.IsInitialized
  commentId: P:WaveEngine.Common.Manager.IsInitialized
  parent: WaveEngine.Common.Manager
  name: IsInitialized
  nameWithType: Manager.IsInitialized
  fullName: WaveEngine.Common.Manager.IsInitialized
- uid: WaveEngine.Common.Manager.BaseInitialize
  commentId: M:WaveEngine.Common.Manager.BaseInitialize
  parent: WaveEngine.Common.Manager
  name: BaseInitialize()
  nameWithType: Manager.BaseInitialize()
  fullName: WaveEngine.Common.Manager.BaseInitialize()
  spec.csharp:
  - uid: WaveEngine.Common.Manager.BaseInitialize
    name: BaseInitialize
    nameWithType: Manager.BaseInitialize
    fullName: WaveEngine.Common.Manager.BaseInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Manager.BaseInitialize
    name: BaseInitialize
    nameWithType: Manager.BaseInitialize
    fullName: WaveEngine.Common.Manager.BaseInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  name: GetMemberAssembly()
  nameWithType: ReflectionHelper.GetMemberAssembly()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  name: GetTypeName()
  nameWithType: ReflectionHelper.GetTypeName()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Framework
  commentId: N:WaveEngine.Framework
  name: WaveEngine.Framework
  nameWithType: WaveEngine.Framework
  fullName: WaveEngine.Framework
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WaveEngine.Common
  commentId: N:WaveEngine.Common
  name: WaveEngine.Common
  nameWithType: WaveEngine.Common
  fullName: WaveEngine.Common
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  isExternal: true
  name: GetMemberAssembly(Object)
  nameWithType: ReflectionHelper.GetMemberAssembly(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.ReflectionHelper
  commentId: T:WaveEngine.Common.Helpers.ReflectionHelper
  parent: WaveEngine.Common.Helpers
  name: ReflectionHelper
  nameWithType: ReflectionHelper
  fullName: WaveEngine.Common.Helpers.ReflectionHelper
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  isExternal: true
  name: GetTypeName(Object)
  nameWithType: ReflectionHelper.GetTypeName(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers
  commentId: N:WaveEngine.Common.Helpers
  name: WaveEngine.Common.Helpers
  nameWithType: WaveEngine.Common.Helpers
  fullName: WaveEngine.Common.Helpers
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: WaveEngine.Framework.Managers.EntityManager.Count*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Count
  name: Count
  nameWithType: EntityManager.Count
  fullName: WaveEngine.Framework.Managers.EntityManager.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: true
- uid: WaveEngine.Framework.Managers.EntityManager.ObjectGraph*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.ObjectGraph
  name: ObjectGraph
  nameWithType: EntityManager.ObjectGraph
  fullName: WaveEngine.Framework.Managers.EntityManager.ObjectGraph
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: WaveEngine.Framework.Managers.EntityManager.AllEntities*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.AllEntities
  name: AllEntities
  nameWithType: EntityManager.AllEntities
  fullName: WaveEngine.Framework.Managers.EntityManager.AllEntities
- uid: System.Collections.Generic.IEnumerable{WaveEngine.Framework.Entity}
  commentId: T:System.Collections.Generic.IEnumerable{WaveEngine.Framework.Entity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Entity>
  nameWithType: IEnumerable<Entity>
  fullName: System.Collections.Generic.IEnumerable<WaveEngine.Framework.Entity>
  nameWithType.vb: IEnumerable(Of Entity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of WaveEngine.Framework.Entity)
  name.vb: IEnumerable(Of Entity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: WaveEngine.Framework.Entity
    name: Entity
    nameWithType: Entity
    fullName: WaveEngine.Framework.Entity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: WaveEngine.Framework.Entity
    name: Entity
    nameWithType: Entity
    fullName: WaveEngine.Framework.Entity
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Framework.Managers.EntityManager.EntityGraph*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.EntityGraph
  name: EntityGraph
  nameWithType: EntityManager.EntityGraph
  fullName: WaveEngine.Framework.Managers.EntityManager.EntityGraph
- uid: WaveEngine.Framework.Managers.EntityManager
  commentId: T:WaveEngine.Framework.Managers.EntityManager
  parent: WaveEngine.Framework.Managers
  name: EntityManager
  nameWithType: EntityManager
  fullName: WaveEngine.Framework.Managers.EntityManager
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: WaveEngine.Framework.Managers.EntityManager.#ctor*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.#ctor
  name: EntityManager
  nameWithType: EntityManager.EntityManager
  fullName: WaveEngine.Framework.Managers.EntityManager.EntityManager
- uid: WaveEngine.Framework.Managers.EntityManager.Finalize*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Finalize
  name: Finalize
  nameWithType: EntityManager.Finalize
  fullName: WaveEngine.Framework.Managers.EntityManager.Finalize
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: WaveEngine.Framework.Managers.EntityManager.Add*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Add
  name: Add
  nameWithType: EntityManager.Add
  fullName: WaveEngine.Framework.Managers.EntityManager.Add
- uid: System.Collections.Generic.List{WaveEngine.Framework.Entity}
  commentId: T:System.Collections.Generic.List{WaveEngine.Framework.Entity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Entity>
  nameWithType: List<Entity>
  fullName: System.Collections.Generic.List<WaveEngine.Framework.Entity>
  nameWithType.vb: List(Of Entity)
  fullName.vb: System.Collections.Generic.List(Of WaveEngine.Framework.Entity)
  name.vb: List(Of Entity)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: WaveEngine.Framework.Entity
    name: Entity
    nameWithType: Entity
    fullName: WaveEngine.Framework.Entity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: WaveEngine.Framework.Entity
    name: Entity
    nameWithType: Entity
    fullName: WaveEngine.Framework.Entity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Framework.BaseDecorator
  commentId: T:WaveEngine.Framework.BaseDecorator
  parent: WaveEngine.Framework
  name: BaseDecorator
  nameWithType: BaseDecorator
  fullName: WaveEngine.Framework.BaseDecorator
- uid: WaveEngine.Framework.Managers.EntityManager.Instantiate*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Instantiate
  name: Instantiate
  nameWithType: EntityManager.Instantiate
  fullName: WaveEngine.Framework.Managers.EntityManager.Instantiate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: WaveEngine.Framework.Managers.EntityManager.Contains*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Contains
  name: Contains
  nameWithType: EntityManager.Contains
  fullName: WaveEngine.Framework.Managers.EntityManager.Contains
- uid: WaveEngine.Framework.Managers.EntityManager.Find*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Find
  name: Find
  nameWithType: EntityManager.Find
  fullName: WaveEngine.Framework.Managers.EntityManager.Find
- uid: WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType
  name: FindFirstComponentOfType
  nameWithType: EntityManager.FindFirstComponentOfType
  fullName: WaveEngine.Framework.Managers.EntityManager.FindFirstComponentOfType
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType
  name: FindComponentsOfType
  nameWithType: EntityManager.FindComponentsOfType
  fullName: WaveEngine.Framework.Managers.EntityManager.FindComponentsOfType
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath
  name: FindComponentFromEntityPath
  nameWithType: EntityManager.FindComponentFromEntityPath
  fullName: WaveEngine.Framework.Managers.EntityManager.FindComponentFromEntityPath
- uid: WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath
  name: FindComponentsFromEntityPath
  nameWithType: EntityManager.FindComponentsFromEntityPath
  fullName: WaveEngine.Framework.Managers.EntityManager.FindComponentsFromEntityPath
- uid: WaveEngine.Framework.Managers.EntityManager.FindAllByTag*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.FindAllByTag
  name: FindAllByTag
  nameWithType: EntityManager.FindAllByTag
  fullName: WaveEngine.Framework.Managers.EntityManager.FindAllByTag
- uid: WaveEngine.Framework.Managers.EntityManager.Remove*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Remove
  name: Remove
  nameWithType: EntityManager.Remove
  fullName: WaveEngine.Framework.Managers.EntityManager.Remove
- uid: WaveEngine.Framework.Managers.EntityManager.Detach*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Detach
  name: Detach
  nameWithType: EntityManager.Detach
  fullName: WaveEngine.Framework.Managers.EntityManager.Detach
- uid: WaveEngine.Framework.Managers.EntityManager.Dispose*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Dispose
  name: Dispose
  nameWithType: EntityManager.Dispose
  fullName: WaveEngine.Framework.Managers.EntityManager.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Manager.Initialize
  commentId: M:WaveEngine.Common.Manager.Initialize
  parent: WaveEngine.Common.Manager
  name: Initialize()
  nameWithType: Manager.Initialize()
  fullName: WaveEngine.Common.Manager.Initialize()
  spec.csharp:
  - uid: WaveEngine.Common.Manager.Initialize
    name: Initialize
    nameWithType: Manager.Initialize
    fullName: WaveEngine.Common.Manager.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Manager.Initialize
    name: Initialize
    nameWithType: Manager.Initialize
    fullName: WaveEngine.Common.Manager.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Framework.Managers.EntityManager.Initialize*
  commentId: Overload:WaveEngine.Framework.Managers.EntityManager.Initialize
  name: Initialize
  nameWithType: EntityManager.Initialize
  fullName: WaveEngine.Framework.Managers.EntityManager.Initialize
