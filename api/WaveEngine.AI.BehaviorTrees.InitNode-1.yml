### YamlMime:ManagedReference
items:
- uid: WaveEngine.AI.BehaviorTrees.InitNode`1
  commentId: T:WaveEngine.AI.BehaviorTrees.InitNode`1
  id: InitNode`1
  parent: WaveEngine.AI.BehaviorTrees
  children:
  - WaveEngine.AI.BehaviorTrees.InitNode`1.Evaluate(`0)
  - WaveEngine.AI.BehaviorTrees.InitNode`1.Execute(`0)
  langs:
  - csharp
  - vb
  name: InitNode<T>
  nameWithType: InitNode<T>
  fullName: WaveEngine.AI.BehaviorTrees.InitNode<T>
  type: Class
  source:
    id: InitNode
    path: D:\Source\Repos\TestDoc\src25\Extensions\WaveEngine.AI\Shared\BehaviorTrees\InitNode`1.cs
    startLine: 14
  assemblies:
  - WaveEngine.AI
  namespace: WaveEngine.AI.BehaviorTrees
  summary: "\nRepresent a strongly typed root node for a behavior tree\n"
  example: []
  syntax:
    content: 'public sealed class InitNode<T> : Node<T> where T : NodeInfo'
    typeParameters:
    - id: T
      description: The type of elements a tree behavior will contain
    content.vb: >-
      Public NotInheritable Class InitNode(Of T As NodeInfo)

          Inherits Node(Of T)
  inheritance:
  - System.Object
  - WaveEngine.AI.BehaviorTrees.Node{{T}}
  inheritedMembers:
  - WaveEngine.AI.BehaviorTrees.Node{{T}}.Children
  - WaveEngine.AI.BehaviorTrees.Node{{T}}.AddChild(WaveEngine.AI.BehaviorTrees.Node{{T}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  nameWithType.vb: InitNode(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: WaveEngine.AI.BehaviorTrees.InitNode(Of T)
  name.vb: InitNode(Of T)
- uid: WaveEngine.AI.BehaviorTrees.InitNode`1.Execute(`0)
  commentId: M:WaveEngine.AI.BehaviorTrees.InitNode`1.Execute(`0)
  id: Execute(`0)
  parent: WaveEngine.AI.BehaviorTrees.InitNode`1
  langs:
  - csharp
  - vb
  name: Execute(T)
  nameWithType: InitNode<T>.Execute(T)
  fullName: WaveEngine.AI.BehaviorTrees.InitNode<T>.Execute(T)
  type: Method
  source:
    id: Execute
    path: D:\Source\Repos\TestDoc\src25\Extensions\WaveEngine.AI\Shared\BehaviorTrees\InitNode`1.cs
    startLine: 21
  assemblies:
  - WaveEngine.AI
  namespace: WaveEngine.AI.BehaviorTrees
  summary: "\nExecutes the logic of the node\n"
  example: []
  syntax:
    content: public override void Execute(T gameTime)
    parameters:
    - id: gameTime
      type: '{T}'
      description: The game time.
    content.vb: Public Overrides Sub Execute(gameTime As T)
  overridden: WaveEngine.AI.BehaviorTrees.Node{{T}}.Execute({T})
  overload: WaveEngine.AI.BehaviorTrees.InitNode`1.Execute*
  nameWithType.vb: InitNode(Of T).Execute(T)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: WaveEngine.AI.BehaviorTrees.InitNode(Of T).Execute(T)
- uid: WaveEngine.AI.BehaviorTrees.InitNode`1.Evaluate(`0)
  commentId: M:WaveEngine.AI.BehaviorTrees.InitNode`1.Evaluate(`0)
  id: Evaluate(`0)
  parent: WaveEngine.AI.BehaviorTrees.InitNode`1
  langs:
  - csharp
  - vb
  name: Evaluate(T)
  nameWithType: InitNode<T>.Evaluate(T)
  fullName: WaveEngine.AI.BehaviorTrees.InitNode<T>.Evaluate(T)
  type: Method
  source:
    id: Evaluate
    path: D:\Source\Repos\TestDoc\src25\Extensions\WaveEngine.AI\Shared\BehaviorTrees\InitNode`1.cs
    startLine: 30
  assemblies:
  - WaveEngine.AI
  namespace: WaveEngine.AI.BehaviorTrees
  summary: "\nEvaluates the node\n"
  example: []
  syntax:
    content: public override bool Evaluate(T gameTime)
    parameters:
    - id: gameTime
      type: '{T}'
      description: The game time.
    return:
      type: System.Boolean
      description: True if evaluation of the node success, false in other case
    content.vb: Public Overrides Function Evaluate(gameTime As T) As Boolean
  overridden: WaveEngine.AI.BehaviorTrees.Node{{T}}.Evaluate({T})
  overload: WaveEngine.AI.BehaviorTrees.InitNode`1.Evaluate*
  nameWithType.vb: InitNode(Of T).Evaluate(T)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: WaveEngine.AI.BehaviorTrees.InitNode(Of T).Evaluate(T)
references:
- uid: WaveEngine.AI.BehaviorTrees
  commentId: N:WaveEngine.AI.BehaviorTrees
  name: WaveEngine.AI.BehaviorTrees
  nameWithType: WaveEngine.AI.BehaviorTrees
  fullName: WaveEngine.AI.BehaviorTrees
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: WaveEngine.AI.BehaviorTrees.Node{{T}}
  commentId: T:WaveEngine.AI.BehaviorTrees.Node{`0}
  parent: WaveEngine.AI.BehaviorTrees
  definition: WaveEngine.AI.BehaviorTrees.Node`1
  name: Node<T>
  nameWithType: Node<T>
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>
  nameWithType.vb: Node(Of T)
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T)
  name.vb: Node(Of T)
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.AI.BehaviorTrees.Node{{T}}.Children
  commentId: F:WaveEngine.AI.BehaviorTrees.Node{`0}.Children
  parent: WaveEngine.AI.BehaviorTrees.Node{{T}}
  definition: WaveEngine.AI.BehaviorTrees.Node`1.Children
  name: Children
  nameWithType: Node<T>.Children
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Children
  nameWithType.vb: Node(Of T).Children
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).Children
- uid: WaveEngine.AI.BehaviorTrees.Node{{T}}.AddChild(WaveEngine.AI.BehaviorTrees.Node{{T}})
  commentId: M:WaveEngine.AI.BehaviorTrees.Node{`0}.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
  parent: WaveEngine.AI.BehaviorTrees.Node{{T}}
  definition: WaveEngine.AI.BehaviorTrees.Node`1.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
  name: AddChild(Node<T>)
  nameWithType: Node<T>.AddChild(Node<T>)
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.AddChild(WaveEngine.AI.BehaviorTrees.Node<T>)
  nameWithType.vb: Node(Of T).AddChild(Node(Of T))
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).AddChild(WaveEngine.AI.BehaviorTrees.Node(Of T))
  name.vb: AddChild(Node(Of T))
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
    name: AddChild
    nameWithType: Node<T>.AddChild
    fullName: WaveEngine.AI.BehaviorTrees.Node<T>.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
    name: AddChild
    nameWithType: Node(Of T).AddChild
    fullName: WaveEngine.AI.BehaviorTrees.Node(Of T).AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  name: GetMemberAssembly()
  nameWithType: ReflectionHelper.GetMemberAssembly()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  name: GetTypeName()
  nameWithType: ReflectionHelper.GetTypeName()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WaveEngine.AI.BehaviorTrees.Node`1
  commentId: T:WaveEngine.AI.BehaviorTrees.Node`1
  parent: WaveEngine.AI.BehaviorTrees
  name: Node<T>
  nameWithType: Node<T>
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>
  nameWithType.vb: Node(Of T)
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T)
  name.vb: Node(Of T)
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.AI.BehaviorTrees.Node`1.Children
  commentId: F:WaveEngine.AI.BehaviorTrees.Node`1.Children
  name: Children
  nameWithType: Node<T>.Children
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Children
  nameWithType.vb: Node(Of T).Children
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).Children
- uid: WaveEngine.AI.BehaviorTrees.Node`1.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
  commentId: M:WaveEngine.AI.BehaviorTrees.Node`1.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
  name: AddChild(Node<T>)
  nameWithType: Node<T>.AddChild(Node<T>)
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.AddChild(WaveEngine.AI.BehaviorTrees.Node<T>)
  nameWithType.vb: Node(Of T).AddChild(Node(Of T))
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).AddChild(WaveEngine.AI.BehaviorTrees.Node(Of T))
  name.vb: AddChild(Node(Of T))
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
    name: AddChild
    nameWithType: Node<T>.AddChild
    fullName: WaveEngine.AI.BehaviorTrees.Node<T>.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.AddChild(WaveEngine.AI.BehaviorTrees.Node{`0})
    name: AddChild
    nameWithType: Node(Of T).AddChild
    fullName: WaveEngine.AI.BehaviorTrees.Node(Of T).AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: WaveEngine.AI.BehaviorTrees.Node`1
    name: Node
    nameWithType: Node
    fullName: WaveEngine.AI.BehaviorTrees.Node
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  isExternal: true
  name: GetMemberAssembly(Object)
  nameWithType: ReflectionHelper.GetMemberAssembly(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.ReflectionHelper
  commentId: T:WaveEngine.Common.Helpers.ReflectionHelper
  parent: WaveEngine.Common.Helpers
  name: ReflectionHelper
  nameWithType: ReflectionHelper
  fullName: WaveEngine.Common.Helpers.ReflectionHelper
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  isExternal: true
  name: GetTypeName(Object)
  nameWithType: ReflectionHelper.GetTypeName(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers
  commentId: N:WaveEngine.Common.Helpers
  name: WaveEngine.Common.Helpers
  nameWithType: WaveEngine.Common.Helpers
  fullName: WaveEngine.Common.Helpers
- uid: WaveEngine.AI.BehaviorTrees.Node{{T}}.Execute({T})
  commentId: M:WaveEngine.AI.BehaviorTrees.Node{`0}.Execute(`0)
  parent: WaveEngine.AI.BehaviorTrees.Node{{T}}
  definition: WaveEngine.AI.BehaviorTrees.Node`1.Execute(`0)
  name: Execute(T)
  nameWithType: Node<T>.Execute(T)
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Execute(T)
  nameWithType.vb: Node(Of T).Execute(T)
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).Execute(T)
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Execute(`0)
    name: Execute
    nameWithType: Node<T>.Execute
    fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Execute(`0)
    name: Execute
    nameWithType: Node(Of T).Execute
    fullName: WaveEngine.AI.BehaviorTrees.Node(Of T).Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.AI.BehaviorTrees.InitNode`1.Execute*
  commentId: Overload:WaveEngine.AI.BehaviorTrees.InitNode`1.Execute
  name: Execute
  nameWithType: InitNode<T>.Execute
  fullName: WaveEngine.AI.BehaviorTrees.InitNode<T>.Execute
  nameWithType.vb: InitNode(Of T).Execute
  fullName.vb: WaveEngine.AI.BehaviorTrees.InitNode(Of T).Execute
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: WaveEngine.AI.BehaviorTrees.Node`1.Execute(`0)
  commentId: M:WaveEngine.AI.BehaviorTrees.Node`1.Execute(`0)
  name: Execute(T)
  nameWithType: Node<T>.Execute(T)
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Execute(T)
  nameWithType.vb: Node(Of T).Execute(T)
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).Execute(T)
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Execute(`0)
    name: Execute
    nameWithType: Node<T>.Execute
    fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Execute(`0)
    name: Execute
    nameWithType: Node(Of T).Execute
    fullName: WaveEngine.AI.BehaviorTrees.Node(Of T).Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: WaveEngine.AI.BehaviorTrees.Node{{T}}.Evaluate({T})
  commentId: M:WaveEngine.AI.BehaviorTrees.Node{`0}.Evaluate(`0)
  parent: WaveEngine.AI.BehaviorTrees.Node{{T}}
  definition: WaveEngine.AI.BehaviorTrees.Node`1.Evaluate(`0)
  name: Evaluate(T)
  nameWithType: Node<T>.Evaluate(T)
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Evaluate(T)
  nameWithType.vb: Node(Of T).Evaluate(T)
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).Evaluate(T)
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Evaluate(`0)
    name: Evaluate
    nameWithType: Node<T>.Evaluate
    fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Evaluate(`0)
    name: Evaluate
    nameWithType: Node(Of T).Evaluate
    fullName: WaveEngine.AI.BehaviorTrees.Node(Of T).Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.AI.BehaviorTrees.InitNode`1.Evaluate*
  commentId: Overload:WaveEngine.AI.BehaviorTrees.InitNode`1.Evaluate
  name: Evaluate
  nameWithType: InitNode<T>.Evaluate
  fullName: WaveEngine.AI.BehaviorTrees.InitNode<T>.Evaluate
  nameWithType.vb: InitNode(Of T).Evaluate
  fullName.vb: WaveEngine.AI.BehaviorTrees.InitNode(Of T).Evaluate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: WaveEngine.AI.BehaviorTrees.Node`1.Evaluate(`0)
  commentId: M:WaveEngine.AI.BehaviorTrees.Node`1.Evaluate(`0)
  name: Evaluate(T)
  nameWithType: Node<T>.Evaluate(T)
  fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Evaluate(T)
  nameWithType.vb: Node(Of T).Evaluate(T)
  fullName.vb: WaveEngine.AI.BehaviorTrees.Node(Of T).Evaluate(T)
  spec.csharp:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Evaluate(`0)
    name: Evaluate
    nameWithType: Node<T>.Evaluate
    fullName: WaveEngine.AI.BehaviorTrees.Node<T>.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.AI.BehaviorTrees.Node`1.Evaluate(`0)
    name: Evaluate
    nameWithType: Node(Of T).Evaluate
    fullName: WaveEngine.AI.BehaviorTrees.Node(Of T).Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
