### YamlMime:ManagedReference
items:
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  commentId: T:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  id: TypeInfoAllMemberExtensions
  parent: WaveEngine.Common.Helpers
  children:
  - WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors(System.Reflection.TypeInfo)
  - WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents(System.Reflection.TypeInfo)
  - WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields(System.Reflection.TypeInfo)
  - WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers(System.Reflection.TypeInfo)
  - WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods(System.Reflection.TypeInfo)
  - WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes(System.Reflection.TypeInfo)
  - WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties(System.Reflection.TypeInfo)
  langs:
  - csharp
  - vb
  name: TypeInfoAllMemberExtensions
  nameWithType: TypeInfoAllMemberExtensions
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  type: Class
  source:
    id: TypeInfoAllMemberExtensions
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 13
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nExtensions for TypeInfo\n"
  example: []
  syntax:
    content: public static class TypeInfoAllMemberExtensions
    content.vb: Public Module TypeInfoAllMemberExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors(System.Reflection.TypeInfo)
  commentId: M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors(System.Reflection.TypeInfo)
  id: GetAllConstructors(System.Reflection.TypeInfo)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  langs:
  - csharp
  - vb
  name: GetAllConstructors(TypeInfo)
  nameWithType: TypeInfoAllMemberExtensions.GetAllConstructors(TypeInfo)
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors(System.Reflection.TypeInfo)
  type: Method
  source:
    id: GetAllConstructors
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 20
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGet contructors of the type and its base types.\n"
  example: []
  syntax:
    content: public static IEnumerable<ConstructorInfo> GetAllConstructors(this TypeInfo typeInfo)
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type info.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
      description: All the contructors.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllConstructors(typeInfo As TypeInfo) As IEnumerable(Of ConstructorInfo)
  overload: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents(System.Reflection.TypeInfo)
  commentId: M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents(System.Reflection.TypeInfo)
  id: GetAllEvents(System.Reflection.TypeInfo)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  langs:
  - csharp
  - vb
  name: GetAllEvents(TypeInfo)
  nameWithType: TypeInfoAllMemberExtensions.GetAllEvents(TypeInfo)
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents(System.Reflection.TypeInfo)
  type: Method
  source:
    id: GetAllEvents
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 30
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGet events of the type and its base types.\n"
  example: []
  syntax:
    content: public static IEnumerable<EventInfo> GetAllEvents(this TypeInfo typeInfo)
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type info.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
      description: All the events.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllEvents(typeInfo As TypeInfo) As IEnumerable(Of EventInfo)
  overload: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields(System.Reflection.TypeInfo)
  commentId: M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields(System.Reflection.TypeInfo)
  id: GetAllFields(System.Reflection.TypeInfo)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  langs:
  - csharp
  - vb
  name: GetAllFields(TypeInfo)
  nameWithType: TypeInfoAllMemberExtensions.GetAllFields(TypeInfo)
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields(System.Reflection.TypeInfo)
  type: Method
  source:
    id: GetAllFields
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 40
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGet fields of the type and its base types.\n"
  example: []
  syntax:
    content: public static IEnumerable<FieldInfo> GetAllFields(this TypeInfo typeInfo)
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type info.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
      description: All the fields.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllFields(typeInfo As TypeInfo) As IEnumerable(Of FieldInfo)
  overload: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers(System.Reflection.TypeInfo)
  commentId: M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers(System.Reflection.TypeInfo)
  id: GetAllMembers(System.Reflection.TypeInfo)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  langs:
  - csharp
  - vb
  name: GetAllMembers(TypeInfo)
  nameWithType: TypeInfoAllMemberExtensions.GetAllMembers(TypeInfo)
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers(System.Reflection.TypeInfo)
  type: Method
  source:
    id: GetAllMembers
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 50
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGet members of the type and its base types.\n"
  example: []
  syntax:
    content: public static IEnumerable<MemberInfo> GetAllMembers(this TypeInfo typeInfo)
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type info.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
      description: All the members.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllMembers(typeInfo As TypeInfo) As IEnumerable(Of MemberInfo)
  overload: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods(System.Reflection.TypeInfo)
  commentId: M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods(System.Reflection.TypeInfo)
  id: GetAllMethods(System.Reflection.TypeInfo)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  langs:
  - csharp
  - vb
  name: GetAllMethods(TypeInfo)
  nameWithType: TypeInfoAllMemberExtensions.GetAllMethods(TypeInfo)
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods(System.Reflection.TypeInfo)
  type: Method
  source:
    id: GetAllMethods
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 60
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGet methods of the type and its base types.\n"
  example: []
  syntax:
    content: public static IEnumerable<MethodInfo> GetAllMethods(this TypeInfo typeInfo)
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type info.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
      description: All the methods.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllMethods(typeInfo As TypeInfo) As IEnumerable(Of MethodInfo)
  overload: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes(System.Reflection.TypeInfo)
  commentId: M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes(System.Reflection.TypeInfo)
  id: GetAllNestedTypes(System.Reflection.TypeInfo)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  langs:
  - csharp
  - vb
  name: GetAllNestedTypes(TypeInfo)
  nameWithType: TypeInfoAllMemberExtensions.GetAllNestedTypes(TypeInfo)
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes(System.Reflection.TypeInfo)
  type: Method
  source:
    id: GetAllNestedTypes
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 70
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGet nested types of the type and its base types.\n"
  example: []
  syntax:
    content: public static IEnumerable<TypeInfo> GetAllNestedTypes(this TypeInfo typeInfo)
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type info.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
      description: All the nested types.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllNestedTypes(typeInfo As TypeInfo) As IEnumerable(Of TypeInfo)
  overload: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties(System.Reflection.TypeInfo)
  commentId: M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties(System.Reflection.TypeInfo)
  id: GetAllProperties(System.Reflection.TypeInfo)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions
  langs:
  - csharp
  - vb
  name: GetAllProperties(TypeInfo)
  nameWithType: TypeInfoAllMemberExtensions.GetAllProperties(TypeInfo)
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties(System.Reflection.TypeInfo)
  type: Method
  source:
    id: GetAllProperties
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\TypeInfoAllMemberExtensions.cs
    startLine: 80
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGet properties of the type and its base types.\n"
  example: []
  syntax:
    content: public static IEnumerable<PropertyInfo> GetAllProperties(this TypeInfo typeInfo)
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type info.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: All the properties.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllProperties(typeInfo As TypeInfo) As IEnumerable(Of PropertyInfo)
  overload: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: WaveEngine.Common.Helpers
  commentId: N:WaveEngine.Common.Helpers
  name: WaveEngine.Common.Helpers
  nameWithType: WaveEngine.Common.Helpers
  fullName: WaveEngine.Common.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors*
  commentId: Overload:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors
  name: GetAllConstructors
  nameWithType: TypeInfoAllMemberExtensions.GetAllConstructors
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: true
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ConstructorInfo>
  nameWithType: IEnumerable<ConstructorInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>
  nameWithType.vb: IEnumerable(Of ConstructorInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.ConstructorInfo)
  name.vb: IEnumerable(Of ConstructorInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents*
  commentId: Overload:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents
  name: GetAllEvents
  nameWithType: TypeInfoAllMemberExtensions.GetAllEvents
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents
- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventInfo>
  nameWithType: IEnumerable<EventInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>
  nameWithType.vb: IEnumerable(Of EventInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)
  name.vb: IEnumerable(Of EventInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields*
  commentId: Overload:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields
  name: GetAllFields
  nameWithType: TypeInfoAllMemberExtensions.GetAllFields
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields
- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FieldInfo>
  nameWithType: IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>
  nameWithType.vb: IEnumerable(Of FieldInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)
  name.vb: IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers*
  commentId: Overload:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers
  name: GetAllMembers
  nameWithType: TypeInfoAllMemberExtensions.GetAllMembers
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MemberInfo>
  nameWithType: IEnumerable<MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  nameWithType.vb: IEnumerable(Of MemberInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  name.vb: IEnumerable(Of MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods*
  commentId: Overload:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods
  name: GetAllMethods
  nameWithType: TypeInfoAllMemberExtensions.GetAllMethods
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodInfo>
  nameWithType: IEnumerable<MethodInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>
  nameWithType.vb: IEnumerable(Of MethodInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)
  name.vb: IEnumerable(Of MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes*
  commentId: Overload:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes
  name: GetAllNestedTypes
  nameWithType: TypeInfoAllMemberExtensions.GetAllNestedTypes
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypeInfo>
  nameWithType: IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  nameWithType.vb: IEnumerable(Of TypeInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties*
  commentId: Overload:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties
  name: GetAllProperties
  nameWithType: TypeInfoAllMemberExtensions.GetAllProperties
  fullName: WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyInfo>
  nameWithType: IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  nameWithType.vb: IEnumerable(Of PropertyInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
