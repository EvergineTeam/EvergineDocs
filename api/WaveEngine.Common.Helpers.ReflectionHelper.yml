### YamlMime:ManagedReference
items:
- uid: WaveEngine.Common.Helpers.ReflectionHelper
  commentId: T:WaveEngine.Common.Helpers.ReflectionHelper
  id: ReflectionHelper
  parent: WaveEngine.Common.Helpers
  children:
  - WaveEngine.Common.Helpers.ReflectionHelper.FindTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})
  - WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  - WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf``1
  - WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom(System.Type,System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined``1(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom(System.Type,System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsEnum(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsInterface(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive(System.Type)
  - WaveEngine.Common.Helpers.ReflectionHelper.IsValueType(System.Type)
  langs:
  - csharp
  - vb
  name: ReflectionHelper
  nameWithType: ReflectionHelper
  fullName: WaveEngine.Common.Helpers.ReflectionHelper
  type: Class
  source:
    id: ReflectionHelper
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 15
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nHelper methods for reflection\n"
  example: []
  syntax:
    content: public static class ReflectionHelper
    content.vb: Public Module ReflectionHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsEnum(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsEnum(System.Type)
  id: IsEnum(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsEnum(Type)
  nameWithType: ReflectionHelper.IsEnum(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsEnum(System.Type)
  type: Method
  source:
    id: IsEnum
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 40
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDetermines whether the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is enum.\n"
  example: []
  syntax:
    content: public static bool IsEnum(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is a enum type; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEnum(type As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsEnum*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsInterface(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsInterface(System.Type)
  id: IsInterface(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsInterface(Type)
  nameWithType: ReflectionHelper.IsInterface(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsInterface(System.Type)
  type: Method
  source:
    id: IsInterface
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 52
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDetermines whether the specified type is an interface.\n"
  example: []
  syntax:
    content: public static bool IsInterface(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is a enum type; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsInterface(type As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsInterface*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsValueType(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsValueType(System.Type)
  id: IsValueType(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsValueType(Type)
  nameWithType: ReflectionHelper.IsValueType(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsValueType(System.Type)
  type: Method
  source:
    id: IsValueType
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 64
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets a value indicating whether the specified type is a value type.\n"
  example: []
  syntax:
    content: public static bool IsValueType(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is a value type; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsValueType(type As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsValueType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType(System.Type)
  id: IsGenericType(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsGenericType(Type)
  nameWithType: ReflectionHelper.IsGenericType(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType(System.Type)
  type: Method
  source:
    id: IsGenericType
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 76
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets a value indicating whether the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is a generic type.\n"
  example: []
  syntax:
    content: public static bool IsGenericType(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is a generic type; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsGenericType(type As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition(System.Type)
  id: IsGenericTypeDefinition(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsGenericTypeDefinition(Type)
  nameWithType: ReflectionHelper.IsGenericTypeDefinition(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition(System.Type)
  type: Method
  source:
    id: IsGenericTypeDefinition
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 88
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets a value indicating whether the specified type is a generic type definition.\n"
  example: []
  syntax:
    content: public static bool IsGenericTypeDefinition(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is a generic type definition; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsGenericTypeDefinition(type As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive(System.Type)
  id: IsPrimitive(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsPrimitive(Type)
  nameWithType: ReflectionHelper.IsPrimitive(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive(System.Type)
  type: Method
  source:
    id: IsPrimitive
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 100
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDetermines whether the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is one of the primitive types.\n"
  example: []
  syntax:
    content: public static bool IsPrimitive(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is one of the primitive types; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPrimitive(type As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom(System.Type,System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom(System.Type,System.Type)
  id: IsAssignableFrom(System.Type,System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(Type, Type)
  nameWithType: ReflectionHelper.IsAssignableFrom(Type, Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom(System.Type, System.Type)
  type: Method
  source:
    id: IsAssignableFrom
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 113
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDetermines whether an instance of the second specified type can be assigned to the first specified type instance.\n"
  example: []
  syntax:
    content: public static bool IsAssignableFrom(this Type first, Type second)
    parameters:
    - id: first
      type: System.Type
      description: The first type.
    - id: second
      type: System.Type
      description: The type to check.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the first specified type can be assigned from the second type; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAssignableFrom(first As Type, second As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom(System.Type,System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom(System.Type,System.Type)
  id: IsCastableFrom(System.Type,System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsCastableFrom(Type, Type)
  nameWithType: ReflectionHelper.IsCastableFrom(Type, Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom(System.Type, System.Type)
  type: Method
  source:
    id: IsCastableFrom
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 126
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDetermines whether an instance of the second specified type can be casted to the first specified type instance.\n"
  example: []
  syntax:
    content: public static bool IsCastableFrom(this Type first, Type second)
    parameters:
    - id: first
      type: System.Type
      description: The first type.
    - id: second
      type: System.Type
      description: The type to check.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the first specified type can be casted from the second type; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsCastableFrom(first As Type, second As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined``1(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined``1(System.Type)
  id: IsAttributeDefined``1(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: IsAttributeDefined<TAttribute>(Type)
  nameWithType: ReflectionHelper.IsAttributeDefined<TAttribute>(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined<TAttribute>(System.Type)
  type: Method
  source:
    id: IsAttributeDefined
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 155
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nIndicates whether custom attributes of a specified type are applied to a specified type.\n"
  example: []
  syntax:
    content: >-
      public static bool IsAttributeDefined<TAttribute>(this Type type)

          where TAttribute : Attribute
    parameters:
    - id: type
      type: System.Type
      description: The type.
    typeParameters:
    - id: TAttribute
      description: The type of the attribute.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if an attribute of the specified type is applied to the specified type; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAttributeDefined(Of TAttribute As Attribute)(type As Type) As Boolean
  overload: WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined*
  nameWithType.vb: ReflectionHelper.IsAttributeDefined(Of TAttribute)(Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined(Of TAttribute)(System.Type)
  name.vb: IsAttributeDefined(Of TAttribute)(Type)
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  id: GetMemberAssembly(System.Object)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetMemberAssembly(Object)
  nameWithType: ReflectionHelper.GetMemberAssembly(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  type: Method
  source:
    id: GetMemberAssembly
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 168
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> in which the member type is declared. For generic types, gets the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> in which the generic type is defined.\n"
  example: []
  syntax:
    content: public static Assembly GetMemberAssembly(this object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The member.
    return:
      type: System.Reflection.Assembly
      description: "\nThe type assembly\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMemberAssembly(obj As Object) As Assembly
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly(System.Type)
  id: GetTypeAssembly(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetTypeAssembly(Type)
  nameWithType: ReflectionHelper.GetTypeAssembly(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly(System.Type)
  type: Method
  source:
    id: GetTypeAssembly
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 180
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> in which the type is declared. For generic types, gets the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> in which the generic type is defined.\n"
  example: []
  syntax:
    content: public static Assembly GetTypeAssembly(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Reflection.Assembly
      description: "\nThe type assembly\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTypeAssembly(type As Type) As Assembly
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName(System.Type)
  id: GetTypeAssemblyName(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetTypeAssemblyName(Type)
  nameWithType: ReflectionHelper.GetTypeAssemblyName(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName(System.Type)
  type: Method
  source:
    id: GetTypeAssemblyName
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 192
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> name in which the type is declared. For generic types, gets the <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> name in which the generic type is defined.\n"
  example: []
  syntax:
    content: public static string GetTypeAssemblyName(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the name of this member assembly.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTypeAssemblyName(type As Type) As String
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType(System.Type)
  id: GetBaseType(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetBaseType(Type)
  nameWithType: ReflectionHelper.GetBaseType(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType(System.Type)
  type: Method
  source:
    id: GetBaseType
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 205
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the type from which the current System.Type directly inherits.\n"
  example: []
  syntax:
    content: public static Type GetBaseType(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Type
      description: "\nThe <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> from which the current System.Type directly inherits, or null\nif the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> represents the System.Object class or an interface.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBaseType(type As Type) As Type
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition(System.Type)
  id: GetGenericTypeDefinition(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetGenericTypeDefinition(Type)
  nameWithType: ReflectionHelper.GetGenericTypeDefinition(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition(System.Type)
  type: Method
  source:
    id: GetGenericTypeDefinition
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 217
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nReturns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic type definition from which the current generic type can be constructed.\n"
  example: []
  syntax:
    content: public static Type GetGenericTypeDefinition(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Type
      description: "\nA <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing a generic type from which the current type can be constructed.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetGenericTypeDefinition(type As Type) As Type
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces(System.Type)
  id: GetInterfaces(System.Type)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetInterfaces(Type)
  nameWithType: ReflectionHelper.GetInterfaces(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces(System.Type)
  type: Method
  source:
    id: GetInterfaces
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 227
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the interfaces.\n"
  example: []
  syntax:
    content: public static Type[] GetInterfaces(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.Type[]
      description: The interfaces.
    content.vb: Public Shared Function GetInterfaces(type As Type) As Type()
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  id: GetTypeName(System.Object)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetTypeName(Object)
  nameWithType: ReflectionHelper.GetTypeName(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  type: Method
  source:
    id: GetTypeName
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 239
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the name of the current member.\n"
  example: []
  syntax:
    content: public static string GetTypeName(this object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the name of this member type.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTypeName(obj As Object) As String
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf``1
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf``1
  id: GetSizeOf``1
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetSizeOf<T>()
  nameWithType: ReflectionHelper.GetSizeOf<T>()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf<T>()
  type: Method
  source:
    id: GetSizeOf
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 249
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the size of the specified type\n"
  example: []
  syntax:
    content: public static int GetSizeOf<T>()
    typeParameters:
    - id: T
      description: The type
    return:
      type: System.Int32
      description: The size of the specified type
    content.vb: Public Shared Function GetSizeOf(Of T) As Integer
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf*
  nameWithType.vb: ReflectionHelper.GetSizeOf(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf(Of T)()
  name.vb: GetSizeOf(Of T)()
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo(System.Type)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo(System.Type)
  id: GetFullNameWithoutAssemblyInfo(System.Type)
  isExtensionMethod: true
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: GetFullNameWithoutAssemblyInfo(Type)
  nameWithType: ReflectionHelper.GetFullNameWithoutAssemblyInfo(Type)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo(System.Type)
  type: Method
  source:
    id: GetFullNameWithoutAssemblyInfo
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 263
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the full name of the name of the specified type without assembly full name.\n"
  example: []
  syntax:
    content: public static string GetFullNameWithoutAssemblyInfo(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: System.String
      description: The full name of the name without assembly full name.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFullNameWithoutAssemblyInfo(type As Type) As String
  overload: WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: WaveEngine.Common.Helpers.ReflectionHelper.FindTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.FindTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})
  id: FindTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  langs:
  - csharp
  - vb
  name: FindTypes(Assembly, Func<Type, Boolean>)
  nameWithType: ReflectionHelper.FindTypes(Assembly, Func<Type, Boolean>)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.FindTypes(System.Reflection.Assembly, System.Func<System.Type, System.Boolean>)
  type: Method
  source:
    id: FindTypes
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\ReflectionHelper.cs
    startLine: 290
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nFind the types that match the corresponding predicate\n"
  example: []
  syntax:
    content: public static IEnumerable<Type> FindTypes(Assembly assembly, Func<Type, bool> predicate)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: The target search assembly
    - id: predicate
      type: System.Func{System.Type,System.Boolean}
      description: The predicate to filter types
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: A collection of matching types
    content.vb: Public Shared Function FindTypes(assembly As Assembly, predicate As Func(Of Type, Boolean)) As IEnumerable(Of Type)
  overload: WaveEngine.Common.Helpers.ReflectionHelper.FindTypes*
  nameWithType.vb: ReflectionHelper.FindTypes(Assembly, Func(Of Type, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WaveEngine.Common.Helpers.ReflectionHelper.FindTypes(System.Reflection.Assembly, System.Func(Of System.Type, System.Boolean))
  name.vb: FindTypes(Assembly, Func(Of Type, Boolean))
references:
- uid: WaveEngine.Common.Helpers
  commentId: N:WaveEngine.Common.Helpers
  name: WaveEngine.Common.Helpers
  nameWithType: WaveEngine.Common.Helpers
  fullName: WaveEngine.Common.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsEnum*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsEnum
  name: IsEnum
  nameWithType: ReflectionHelper.IsEnum
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsEnum
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsInterface*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsInterface
  name: IsInterface
  nameWithType: ReflectionHelper.IsInterface
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsInterface
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsValueType*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsValueType
  name: IsValueType
  nameWithType: ReflectionHelper.IsValueType
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsValueType
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType
  name: IsGenericType
  nameWithType: ReflectionHelper.IsGenericType
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition
  name: IsGenericTypeDefinition
  nameWithType: ReflectionHelper.IsGenericTypeDefinition
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive
  name: IsPrimitive
  nameWithType: ReflectionHelper.IsPrimitive
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom
  name: IsAssignableFrom
  nameWithType: ReflectionHelper.IsAssignableFrom
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom
  name: IsCastableFrom
  nameWithType: ReflectionHelper.IsCastableFrom
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom
- uid: WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined
  name: IsAttributeDefined
  nameWithType: ReflectionHelper.IsAttributeDefined
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  name: GetMemberAssembly
  nameWithType: ReflectionHelper.GetMemberAssembly
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly
  name: GetTypeAssembly
  nameWithType: ReflectionHelper.GetTypeAssembly
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName
  name: GetTypeAssemblyName
  nameWithType: ReflectionHelper.GetTypeAssemblyName
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType
  name: GetBaseType
  nameWithType: ReflectionHelper.GetBaseType
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition
  name: GetGenericTypeDefinition
  nameWithType: ReflectionHelper.GetGenericTypeDefinition
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces
  name: GetInterfaces
  nameWithType: ReflectionHelper.GetInterfaces
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  name: GetTypeName
  nameWithType: ReflectionHelper.GetTypeName
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf
  name: GetSizeOf
  nameWithType: ReflectionHelper.GetSizeOf
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo
  name: GetFullNameWithoutAssemblyInfo
  nameWithType: ReflectionHelper.GetFullNameWithoutAssemblyInfo
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo
- uid: WaveEngine.Common.Helpers.ReflectionHelper.FindTypes*
  commentId: Overload:WaveEngine.Common.Helpers.ReflectionHelper.FindTypes
  name: FindTypes
  nameWithType: ReflectionHelper.FindTypes
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.FindTypes
- uid: System.Func{System.Type,System.Boolean}
  commentId: T:System.Func{System.Type,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Type, Boolean>
  nameWithType: Func<Type, Boolean>
  fullName: System.Func<System.Type, System.Boolean>
  nameWithType.vb: Func(Of Type, Boolean)
  fullName.vb: System.Func(Of System.Type, System.Boolean)
  name.vb: Func(Of Type, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
