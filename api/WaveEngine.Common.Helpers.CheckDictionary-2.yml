### YamlMime:ManagedReference
items:
- uid: WaveEngine.Common.Helpers.CheckDictionary`2
  commentId: T:WaveEngine.Common.Helpers.CheckDictionary`2
  id: CheckDictionary`2
  parent: WaveEngine.Common.Helpers
  children:
  - WaveEngine.Common.Helpers.CheckDictionary`2.#ctor
  - WaveEngine.Common.Helpers.CheckDictionary`2.Add(`0,`1)
  - WaveEngine.Common.Helpers.CheckDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - WaveEngine.Common.Helpers.CheckDictionary`2.Changed
  - WaveEngine.Common.Helpers.CheckDictionary`2.Clear
  - WaveEngine.Common.Helpers.CheckDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey(`0)
  - WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - WaveEngine.Common.Helpers.CheckDictionary`2.Count
  - WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator
  - WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly
  - WaveEngine.Common.Helpers.CheckDictionary`2.Item(`0)
  - WaveEngine.Common.Helpers.CheckDictionary`2.Keys
  - WaveEngine.Common.Helpers.CheckDictionary`2.Remove(`0)
  - WaveEngine.Common.Helpers.CheckDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator
  - WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue(`0,`1@)
  - WaveEngine.Common.Helpers.CheckDictionary`2.Values
  langs:
  - csharp
  - vb
  name: CheckDictionary<K, V>
  nameWithType: CheckDictionary<K, V>
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>
  type: Class
  source:
    id: CheckDictionary
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 17
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDictionary implementation to detect when the collection is modified\n"
  example: []
  syntax:
    content: 'public class CheckDictionary<K, V> : IDictionary<K, V>, ICollection<KeyValuePair<K, V>>, IEnumerable<KeyValuePair<K, V>>, IEnumerable'
    typeParameters:
    - id: K
      description: Key type
    - id: V
      description: Value type
    content.vb: >-
      Public Class CheckDictionary(Of K, V)

          Implements IDictionary(Of K, V), ICollection(Of KeyValuePair(Of K, V)), IEnumerable(Of KeyValuePair(Of K, V)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  nameWithType.vb: CheckDictionary(Of K, V)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V)
  name.vb: CheckDictionary(Of K, V)
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Changed
  commentId: P:WaveEngine.Common.Helpers.CheckDictionary`2.Changed
  id: Changed
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Changed
  nameWithType: CheckDictionary<K, V>.Changed
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Changed
  type: Property
  source:
    id: Changed
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 35
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets a value indicating whether this <xref href=\"WaveEngine.Common.Helpers.CheckDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> is changed.\n"
  example: []
  syntax:
    content: public bool Changed { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if changed; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property Changed As Boolean
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Changed*
  nameWithType.vb: CheckDictionary(Of K, V).Changed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Changed
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.#ctor
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.#ctor
  id: '#ctor'
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: CheckDictionary()
  nameWithType: CheckDictionary<K, V>.CheckDictionary()
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.CheckDictionary()
  type: Constructor
  source:
    id: .ctor
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 48
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nInitializes a new instance of the <xref href=\"WaveEngine.Common.Helpers.CheckDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public CheckDictionary()
    content.vb: Public Sub New
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.#ctor*
  nameWithType.vb: CheckDictionary(Of K, V).CheckDictionary()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).CheckDictionary()
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Add(`0,`1)
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Add(K, V)
  nameWithType: CheckDictionary<K, V>.Add(K, V)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Add(K, V)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 58
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nAdds the specified key.\n"
  example: []
  syntax:
    content: public void Add(K key, V value)
    parameters:
    - id: key
      type: '{K}'
      description: The key.
    - id: value
      type: '{V}'
      description: The value.
    content.vb: Public Sub Add(key As K, value As V)
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Add*
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}.Add({K},{V})
  nameWithType.vb: CheckDictionary(Of K, V).Add(K, V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Add(K, V)
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey(`0)
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(K)
  nameWithType: CheckDictionary<K, V>.ContainsKey(K)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.ContainsKey(K)
  type: Method
  source:
    id: ContainsKey
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 71
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDetermines whether the specified key contains key.\n"
  example: []
  syntax:
    content: public bool ContainsKey(K key)
    parameters:
    - id: key
      type: '{K}'
      description: The key.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified key contains key; otherwise, <code>false</code>.\n"
    content.vb: Public Function ContainsKey(key As K) As Boolean
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}.ContainsKey({K})
  nameWithType.vb: CheckDictionary(Of K, V).ContainsKey(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).ContainsKey(K)
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Keys
  commentId: P:WaveEngine.Common.Helpers.CheckDictionary`2.Keys
  id: Keys
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: CheckDictionary<K, V>.Keys
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Keys
  type: Property
  source:
    id: Keys
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 82
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the keys.\n"
  example: []
  syntax:
    content: public ICollection<K> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{K}}
      description: "\nThe keys.\n"
    content.vb: Public ReadOnly Property Keys As ICollection(Of K)
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Keys*
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}.Keys
  nameWithType.vb: CheckDictionary(Of K, V).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Keys
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Remove(`0)
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(K)
  nameWithType: CheckDictionary<K, V>.Remove(K)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Remove(K)
  type: Method
  source:
    id: Remove
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 95
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nRemoves the specified key.\n"
  example: []
  syntax:
    content: public bool Remove(K key)
    parameters:
    - id: key
      type: '{K}'
      description: The key.
    return:
      type: System.Boolean
      description: true if was suscessfully removed
    content.vb: Public Function Remove(key As K) As Boolean
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Remove*
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}.Remove({K})
  nameWithType.vb: CheckDictionary(Of K, V).Remove(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Remove(K)
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue(`0,`1@)
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(K, out V)
  nameWithType: CheckDictionary<K, V>.TryGetValue(K, out V)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.TryGetValue(K, out V)
  type: Method
  source:
    id: TryGetValue
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 107
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nTries the get value.\n"
  example: []
  syntax:
    content: public bool TryGetValue(K key, out V value)
    parameters:
    - id: key
      type: '{K}'
      description: The key.
    - id: value
      type: '{V}'
      description: The value.
    return:
      type: System.Boolean
      description: true if value was retourned
    content.vb: Public Function TryGetValue(key As K, ByRef value As V) As Boolean
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}.TryGetValue({K},{V}@)
  nameWithType.vb: CheckDictionary(Of K, V).TryGetValue(K, ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).TryGetValue(K, ByRef V)
  name.vb: TryGetValue(K, ByRef V)
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Values
  commentId: P:WaveEngine.Common.Helpers.CheckDictionary`2.Values
  id: Values
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: CheckDictionary<K, V>.Values
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Values
  type: Property
  source:
    id: Values
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 118
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the values.\n"
  example: []
  syntax:
    content: public ICollection<V> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{V}}
      description: "\nThe values.\n"
    content.vb: Public ReadOnly Property Values As ICollection(Of V)
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Values*
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}.Values
  nameWithType.vb: CheckDictionary(Of K, V).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Values
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Item(`0)
  commentId: P:WaveEngine.Common.Helpers.CheckDictionary`2.Item(`0)
  id: Item(`0)
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Item[K]
  nameWithType: CheckDictionary<K, V>.Item[K]
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Item[K]
  type: Property
  source:
    id: this[]
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 134
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets or sets the value with the specified key.\n"
  example: []
  syntax:
    content: public V this[K key] { get; set; }
    parameters:
    - id: key
      type: '{K}'
      description: The key.
    return:
      type: '{V}'
      description: "\nThe value.\n"
    content.vb: Public Property Item(key As K) As V
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Item*
  implements:
  - System.Collections.Generic.IDictionary{{K},{V}}.Item({K})
  nameWithType.vb: CheckDictionary(Of K, V).Item(K)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Item(K)
  name.vb: Item(K)
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<K, V>)
  nameWithType: CheckDictionary<K, V>.Add(KeyValuePair<K, V>)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Add(System.Collections.Generic.KeyValuePair<K, V>)
  type: Method
  source:
    id: Add
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 152
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nAdds the specified item.\n"
  example: []
  syntax:
    content: public void Add(KeyValuePair<K, V> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{K},{V}}
      description: The item.
    content.vb: Public Sub Add(item As KeyValuePair(Of K, V))
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Add(System.Collections.Generic.KeyValuePair{{K},{V}})
  nameWithType.vb: CheckDictionary(Of K, V).Add(KeyValuePair(Of K, V))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Add(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Add(KeyValuePair(Of K, V))
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Clear
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.Clear
  id: Clear
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: CheckDictionary<K, V>.Clear()
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Clear()
  type: Method
  source:
    id: Clear
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 161
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nClears this instance.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Clear
  nameWithType.vb: CheckDictionary(Of K, V).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Clear()
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<K, V>)
  nameWithType: CheckDictionary<K, V>.Contains(KeyValuePair<K, V>)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Contains(System.Collections.Generic.KeyValuePair<K, V>)
  type: Method
  source:
    id: Contains
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 174
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nDetermines whether [contains] [the specified item].\n"
  example: []
  syntax:
    content: public bool Contains(KeyValuePair<K, V> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{K},{V}}
      description: The item.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if [contains] [the specified item]; otherwise, <code>false</code>.\n"
    content.vb: Public Function Contains(item As KeyValuePair(Of K, V)) As Boolean
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Contains(System.Collections.Generic.KeyValuePair{{K},{V}})
  nameWithType.vb: CheckDictionary(Of K, V).Contains(KeyValuePair(Of K, V))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Contains(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Contains(KeyValuePair(Of K, V))
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<K, V>[], Int32)
  nameWithType: CheckDictionary<K, V>.CopyTo(KeyValuePair<K, V>[], Int32)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.CopyTo(System.Collections.Generic.KeyValuePair<K, V>[], System.Int32)
  type: Method
  source:
    id: CopyTo
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 184
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nCopies to.\n"
  example: []
  syntax:
    content: public void CopyTo(KeyValuePair<K, V>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{K},{V}}[]
      description: The array.
    - id: arrayIndex
      type: System.Int32
      description: Index of the array.
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of K, V)(), arrayIndex As Integer)
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.CopyTo(System.Collections.Generic.KeyValuePair{{K},{V}}[],System.Int32)
  nameWithType.vb: CheckDictionary(Of K, V).CopyTo(KeyValuePair(Of K, V)(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).CopyTo(System.Collections.Generic.KeyValuePair(Of K, V)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of K, V)(), Int32)
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Count
  commentId: P:WaveEngine.Common.Helpers.CheckDictionary`2.Count
  id: Count
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: CheckDictionary<K, V>.Count
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Count
  type: Property
  source:
    id: Count
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 196
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the count.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe count.\n"
    content.vb: Public ReadOnly Property Count As Integer
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Count
  nameWithType.vb: CheckDictionary(Of K, V).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Count
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly
  commentId: P:WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly
  id: IsReadOnly
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: CheckDictionary<K, V>.IsReadOnly
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.IsReadOnly
  type: Property
  source:
    id: IsReadOnly
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 207
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets a value indicating whether this instance is read only.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is read only; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.IsReadOnly
  nameWithType.vb: CheckDictionary(Of K, V).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).IsReadOnly
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<K, V>)
  nameWithType: CheckDictionary<K, V>.Remove(KeyValuePair<K, V>)
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Remove(System.Collections.Generic.KeyValuePair<K, V>)
  type: Method
  source:
    id: Remove
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 217
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nRemoves the specified item.\n"
  example: []
  syntax:
    content: public bool Remove(KeyValuePair<K, V> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{K},{V}}
      description: The item.
    return:
      type: System.Boolean
      description: was removed
    content.vb: Public Function Remove(item As KeyValuePair(Of K, V)) As Boolean
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Remove(System.Collections.Generic.KeyValuePair{{K},{V}})
  nameWithType.vb: CheckDictionary(Of K, V).Remove(KeyValuePair(Of K, V))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Remove(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Remove(KeyValuePair(Of K, V))
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: CheckDictionary<K, V>.GetEnumerator()
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 227
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nGets the enumerator.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<K, V>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{K},{V}}}
      description: the enumerator.
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of K, V))
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}.GetEnumerator
  nameWithType.vb: CheckDictionary(Of K, V).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).GetEnumerator()
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: WaveEngine.Common.Helpers.CheckDictionary`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: CheckDictionary<K, V>.IEnumerable.GetEnumerator()
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    id: System.Collections.IEnumerable.GetEnumerator
    path: D:\Source\Repos\TestDoc\src25\Common\WaveEngine.Common\Shared\Helpers\CheckDictionary`2.cs
    startLine: 238
  assemblies:
  - WaveEngine.Common
  namespace: WaveEngine.Common.Helpers
  summary: "\nReturns an enumerator that iterates through a collection.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: "\nAn <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: CheckDictionary(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: WaveEngine.Common.Helpers
  commentId: N:WaveEngine.Common.Helpers
  name: WaveEngine.Common.Helpers
  nameWithType: WaveEngine.Common.Helpers
  fullName: WaveEngine.Common.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{K},{V}}
  commentId: T:System.Collections.Generic.IDictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<K, V>
  nameWithType: IDictionary<K, V>
  fullName: System.Collections.Generic.IDictionary<K, V>
  nameWithType.vb: IDictionary(Of K, V)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V)
  name.vb: IDictionary(Of K, V)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<K, V>>
  nameWithType: ICollection<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: ICollection(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<K, V>>
  nameWithType: IEnumerable<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerable(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  name: GetMemberAssembly()
  nameWithType: ReflectionHelper.GetMemberAssembly()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  parent: WaveEngine.Common.Helpers.ReflectionHelper
  definition: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  name: GetTypeName()
  nameWithType: ReflectionHelper.GetTypeName()
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName()
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  isExternal: true
  name: GetMemberAssembly(Object)
  nameWithType: ReflectionHelper.GetMemberAssembly(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)
    name: GetMemberAssembly
    nameWithType: ReflectionHelper.GetMemberAssembly
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.ReflectionHelper
  commentId: T:WaveEngine.Common.Helpers.ReflectionHelper
  parent: WaveEngine.Common.Helpers
  name: ReflectionHelper
  nameWithType: ReflectionHelper
  fullName: WaveEngine.Common.Helpers.ReflectionHelper
- uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  commentId: M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  isExternal: true
  name: GetTypeName(Object)
  nameWithType: ReflectionHelper.GetTypeName(Object)
  fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)
    name: GetTypeName
    nameWithType: ReflectionHelper.GetTypeName
    fullName: WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2
  commentId: T:WaveEngine.Common.Helpers.CheckDictionary`2
  name: CheckDictionary<K, V>
  nameWithType: CheckDictionary<K, V>
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>
  nameWithType.vb: CheckDictionary(Of K, V)
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V)
  name.vb: CheckDictionary(Of K, V)
  spec.csharp:
  - uid: WaveEngine.Common.Helpers.CheckDictionary`2
    name: CheckDictionary
    nameWithType: CheckDictionary
    fullName: WaveEngine.Common.Helpers.CheckDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: WaveEngine.Common.Helpers.CheckDictionary`2
    name: CheckDictionary
    nameWithType: CheckDictionary
    fullName: WaveEngine.Common.Helpers.CheckDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Changed*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Changed
  name: Changed
  nameWithType: CheckDictionary<K, V>.Changed
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Changed
  nameWithType.vb: CheckDictionary(Of K, V).Changed
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Changed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.#ctor*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.#ctor
  name: CheckDictionary
  nameWithType: CheckDictionary<K, V>.CheckDictionary
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.CheckDictionary
  nameWithType.vb: CheckDictionary(Of K, V).CheckDictionary
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).CheckDictionary
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Add*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Add
  name: Add
  nameWithType: CheckDictionary<K, V>.Add
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Add
  nameWithType.vb: CheckDictionary(Of K, V).Add
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Add
- uid: System.Collections.Generic.IDictionary{{K},{V}}.Add({K},{V})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary{{K},{V}}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(K, V)
  nameWithType: IDictionary<K, V>.Add(K, V)
  fullName: System.Collections.Generic.IDictionary<K, V>.Add(K, V)
  nameWithType.vb: IDictionary(Of K, V).Add(K, V)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V).Add(K, V)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<K, V>.Add
    fullName: System.Collections.Generic.IDictionary<K, V>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of K, V).Add
    fullName: System.Collections.Generic.IDictionary(Of K, V).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: '{K}'
  commentId: '!:K'
  definition: K
  name: K
  nameWithType: K
  fullName: K
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: K
  name: K
  nameWithType: K
  fullName: K
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey
  name: ContainsKey
  nameWithType: CheckDictionary<K, V>.ContainsKey
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.ContainsKey
  nameWithType.vb: CheckDictionary(Of K, V).ContainsKey
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).ContainsKey
- uid: System.Collections.Generic.IDictionary{{K},{V}}.ContainsKey({K})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary{{K},{V}}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(K)
  nameWithType: IDictionary<K, V>.ContainsKey(K)
  fullName: System.Collections.Generic.IDictionary<K, V>.ContainsKey(K)
  nameWithType.vb: IDictionary(Of K, V).ContainsKey(K)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<K, V>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<K, V>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of K, V).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of K, V).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Keys*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Keys
  name: Keys
  nameWithType: CheckDictionary<K, V>.Keys
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Keys
  nameWithType.vb: CheckDictionary(Of K, V).Keys
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Keys
- uid: System.Collections.Generic.IDictionary{{K},{V}}.Keys
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Keys
  parent: System.Collections.Generic.IDictionary{{K},{V}}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<K, V>.Keys
  fullName: System.Collections.Generic.IDictionary<K, V>.Keys
  nameWithType.vb: IDictionary(Of K, V).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V).Keys
- uid: System.Collections.Generic.ICollection{{K}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<K>
  nameWithType: ICollection<K>
  fullName: System.Collections.Generic.ICollection<K>
  nameWithType.vb: ICollection(Of K)
  fullName.vb: System.Collections.Generic.ICollection(Of K)
  name.vb: ICollection(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Remove*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Remove
  name: Remove
  nameWithType: CheckDictionary<K, V>.Remove
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Remove
  nameWithType.vb: CheckDictionary(Of K, V).Remove
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Remove
- uid: System.Collections.Generic.IDictionary{{K},{V}}.Remove({K})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
  parent: System.Collections.Generic.IDictionary{{K},{V}}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(K)
  nameWithType: IDictionary<K, V>.Remove(K)
  fullName: System.Collections.Generic.IDictionary<K, V>.Remove(K)
  nameWithType.vb: IDictionary(Of K, V).Remove(K)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V).Remove(K)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<K, V>.Remove
    fullName: System.Collections.Generic.IDictionary<K, V>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of K, V).Remove
    fullName: System.Collections.Generic.IDictionary(Of K, V).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue
  name: TryGetValue
  nameWithType: CheckDictionary<K, V>.TryGetValue
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.TryGetValue
  nameWithType.vb: CheckDictionary(Of K, V).TryGetValue
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).TryGetValue
- uid: System.Collections.Generic.IDictionary{{K},{V}}.TryGetValue({K},{V}@)
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary{{K},{V}}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(K, V)
  nameWithType: IDictionary<K, V>.TryGetValue(K, V)
  fullName: System.Collections.Generic.IDictionary<K, V>.TryGetValue(K, V)
  nameWithType.vb: IDictionary(Of K, V).TryGetValue(K, V)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V).TryGetValue(K, V)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<K, V>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<K, V>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of K, V).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of K, V).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Values*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Values
  name: Values
  nameWithType: CheckDictionary<K, V>.Values
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Values
  nameWithType.vb: CheckDictionary(Of K, V).Values
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Values
- uid: System.Collections.Generic.IDictionary{{K},{V}}.Values
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Values
  parent: System.Collections.Generic.IDictionary{{K},{V}}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<K, V>.Values
  fullName: System.Collections.Generic.IDictionary<K, V>.Values
  nameWithType.vb: IDictionary(Of K, V).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V).Values
- uid: System.Collections.Generic.ICollection{{V}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<V>
  nameWithType: ICollection<V>
  fullName: System.Collections.Generic.ICollection<V>
  nameWithType.vb: ICollection(Of V)
  fullName.vb: System.Collections.Generic.ICollection(Of V)
  name.vb: ICollection(Of V)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Item*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Item
  name: Item
  nameWithType: CheckDictionary<K, V>.Item
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Item
  nameWithType.vb: CheckDictionary(Of K, V).Item
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Item
- uid: System.Collections.Generic.IDictionary{{K},{V}}.Item({K})
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Item(`0)
  parent: System.Collections.Generic.IDictionary{{K},{V}}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[K]
  nameWithType: IDictionary<K, V>.Item[K]
  fullName: System.Collections.Generic.IDictionary<K, V>.Item[K]
  nameWithType.vb: IDictionary(Of K, V).Item(K)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, V).Item(K)
  name.vb: Item(K)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<K, V>.Item
    fullName: System.Collections.Generic.IDictionary<K, V>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: K
    nameWithType: K
    fullName: K
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of K, V).Item
    fullName: System.Collections.Generic.IDictionary(Of K, V).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Add(System.Collections.Generic.KeyValuePair{{K},{V}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<K, V>)
  nameWithType: ICollection<KeyValuePair<K, V>>.Add(KeyValuePair<K, V>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Add(System.Collections.Generic.KeyValuePair<K, V>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V)).Add(KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Add(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Add(KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<K, V>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of K, V)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{K},{V}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<K, V>
  nameWithType: KeyValuePair<K, V>
  fullName: System.Collections.Generic.KeyValuePair<K, V>
  nameWithType.vb: KeyValuePair(Of K, V)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of K, V)
  name.vb: KeyValuePair(Of K, V)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Clear*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Clear
  name: Clear
  nameWithType: CheckDictionary<K, V>.Clear
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Clear
  nameWithType.vb: CheckDictionary(Of K, V).Clear
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<K, V>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<K, V>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of K, V)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Contains*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Contains
  name: Contains
  nameWithType: CheckDictionary<K, V>.Contains
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Contains
  nameWithType.vb: CheckDictionary(Of K, V).Contains
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Contains(System.Collections.Generic.KeyValuePair{{K},{V}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<K, V>)
  nameWithType: ICollection<KeyValuePair<K, V>>.Contains(KeyValuePair<K, V>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Contains(System.Collections.Generic.KeyValuePair<K, V>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V)).Contains(KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Contains(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Contains(KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<K, V>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of K, V)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo
  name: CopyTo
  nameWithType: CheckDictionary<K, V>.CopyTo
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.CopyTo
  nameWithType.vb: CheckDictionary(Of K, V).CopyTo
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.CopyTo(System.Collections.Generic.KeyValuePair{{K},{V}}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<K, V>[], Int32)
  nameWithType: ICollection<KeyValuePair<K, V>>.CopyTo(KeyValuePair<K, V>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.CopyTo(System.Collections.Generic.KeyValuePair<K, V>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V)).CopyTo(KeyValuePair(Of K, V)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).CopyTo(System.Collections.Generic.KeyValuePair(Of K, V)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of K, V)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<K, V>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of K, V)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{K},{V}}[]
  isExternal: true
  name: KeyValuePair<K, V>[]
  nameWithType: KeyValuePair<K, V>[]
  fullName: System.Collections.Generic.KeyValuePair<K, V>[]
  nameWithType.vb: KeyValuePair(Of K, V)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of K, V)()
  name.vb: KeyValuePair(Of K, V)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.Count*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.Count
  name: Count
  nameWithType: CheckDictionary<K, V>.Count
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.Count
  nameWithType.vb: CheckDictionary(Of K, V).Count
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<K, V>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly
  name: IsReadOnly
  nameWithType: CheckDictionary<K, V>.IsReadOnly
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.IsReadOnly
  nameWithType.vb: CheckDictionary(Of K, V).IsReadOnly
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<K, V>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}.Remove(System.Collections.Generic.KeyValuePair{{K},{V}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<K, V>)
  nameWithType: ICollection<KeyValuePair<K, V>>.Remove(KeyValuePair<K, V>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Remove(System.Collections.Generic.KeyValuePair<K, V>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, V)).Remove(KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Remove(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Remove(KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<K, V>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of K, V)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, V)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator
  name: GetEnumerator
  nameWithType: CheckDictionary<K, V>.GetEnumerator
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.GetEnumerator
  nameWithType.vb: CheckDictionary(Of K, V).GetEnumerator
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<K, V>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<K, V>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of K, V)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<K, V>>
  nameWithType: IEnumerator<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerator(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: CheckDictionary<K, V>.IEnumerable.GetEnumerator
  fullName: WaveEngine.Common.Helpers.CheckDictionary<K, V>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: CheckDictionary(Of K, V).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: WaveEngine.Common.Helpers.CheckDictionary(Of K, V).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
