{
  "api/Evergine.ARMobile.ARMobilePlatform.html": {
    "href": "api/Evergine.ARMobile.ARMobilePlatform.html",
    "title": "Class ARMobilePlatform | Evergine Doc",
    "keywords": "Class ARMobilePlatform The AR mobile base service class. Inheritance object IdentifiableObject DependencyObject AttachableObject Service XRPlatform ARMobilePlatform Implements IDependencyObject IGetNativePointers Inherited Members XRPlatform.screenContextManager XRPlatform.AssetsService XRPlatform.eyeProperties XRPlatform.headGaze XRPlatform.eyeGaze XRPlatform.trackingState XRPlatform.mirrorDisplay XRPlatform.msaaSampleCount XRPlatform.AvailablePointerKeys XRPlatform.MSAASampleCount XRPlatform.MirrorDisplay XRPlatform.NearClipDistance XRPlatform.FarClipDistance XRPlatform.MirrorHMDTexture XRPlatform.HeadGaze XRPlatform.EyeGaze XRPlatform.IsEyeGazeValid XRPlatform.TrackingState XRPlatform.SpatialAnchorStore XRPlatform.SpatialInputManager XRPlatform.RenderableModels XRPlatform.RenderMirrorTexture XRPlatform.Passthrough XRPlatform.CreateSpatialMappingObserver() XRPlatform.Update() XRPlatform.RequestEyeGazePermission() XRPlatform.GetNativePointer(string, out IntPtr) XRPlatform.InternalUpdate() XRPlatform.UpdateCameras() XRPlatform.MirrorDisplayUpdated() XRPlatform.RefreshMSAA() Service.OnLoaded() Service.OnAttached() Service.OnActivated() Service.Start() Service.OnDeactivated() Service.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile Assembly: Evergine.ARMobile.dll Syntax public abstract class ARMobilePlatform : XRPlatform, IDependencyObject, IGetNativePointers Constructors ARMobilePlatform() Initializes a new instance of the ARMobilePlatform class. Declaration protected ARMobilePlatform() Fields cameraProjection Backing field for CameraProjection property. Declaration protected Matrix4x4 cameraProjection Field Value Type Description Matrix4x4 cameraTransform Backing field for CameraTransform property. Declaration protected Matrix4x4 cameraTransform Field Value Type Description Matrix4x4 featurePoints Backing field for FeaturePoints property. Declaration protected ARMobileFeaturePoints featurePoints Field Value Type Description ARMobileFeaturePoints imagesDataSetProvider Image DataSet provider. Declaration [BindService(true)] protected DataSetProvider imagesDataSetProvider Field Value Type Description DataSetProvider initializationTCS Initialization task completion source. Declaration protected TaskCompletionSource<bool> initializationTCS Field Value Type Description TaskCompletionSource<bool> isSupported Backing field for IsSupported property. Declaration protected bool isSupported Field Value Type Description bool lightEstimation Backing field for LightEstimation property. Declaration protected ARMobileLightEstimation lightEstimation Field Value Type Description ARMobileLightEstimation trackables Backing field for TrackableItems property. Declaration protected ARMobileTrackables trackables Field Value Type Description ARMobileTrackables Properties ActiveCamera Gets or sets the active camera. Declaration public Camera3D ActiveCamera { get; set; } Property Value Type Description Camera3D CameraProjection Gets the camera projection matrix. Declaration public Matrix4x4 CameraProjection { get; } Property Value Type Description Matrix4x4 CameraTransform Gets the camera transform matrix. Declaration public Matrix4x4 CameraTransform { get; } Property Value Type Description Matrix4x4 Display Gets the display provided by this XR device. Declaration public override Display Display { get; } Property Value Type Description Display Overrides Evergine.Framework.Services.XRPlatform.Display EnableFaceTracking Gets or sets a value indicating whether face tracking is enabled. Declaration public bool EnableFaceTracking { get; set; } Property Value Type Description bool EnableImagesDetection Gets or sets a value indicating whether image detection is enabled. Declaration public bool EnableImagesDetection { get; set; } Property Value Type Description bool EyeCount Gets the number of eyes needed by this device to draw. Declaration public override int EyeCount { get; } Property Value Type Description int Overrides Evergine.Framework.Services.XRPlatform.EyeCount FeaturePoints Gets the feature points based on a captured video frame in an AR session. Declaration public override XRFeaturePoints FeaturePoints { get; } Property Value Type Description XRFeaturePoints Overrides Evergine.Framework.Services.XRPlatform.FeaturePoints FeaturePointsEnable Gets or sets a value indicating whether the point cloud is available. Declaration public bool FeaturePointsEnable { get; set; } Property Value Type Description bool ImagesDataSetFilePath Gets or sets images data set file path. Declaration public string ImagesDataSetFilePath { get; set; } Property Value Type Description string InputTracking Gets the input tracking. Declaration public override XRInputTracking InputTracking { get; } Property Value Type Description XRInputTracking Overrides Evergine.Framework.Services.XRPlatform.InputTracking IsSupported Gets a value indicating whether the AR is supported. Declaration public bool IsSupported { get; } Property Value Type Description bool LightEstimation Gets the estimated scene lighting information based on a captured video frame in an AR session. Declaration public override XRLightEstimation LightEstimation { get; } Property Value Type Description XRLightEstimation Overrides Evergine.Framework.Services.XRPlatform.LightEstimation LightEstimationMode Gets or sets a value indicating whether the light estimation is available. Declaration public XRLightEstimation.Modes LightEstimationMode { get; set; } Property Value Type Description XRLightEstimation.Modes PlaneDetection Gets or sets how flat surfaces are detected in captured images. Declaration public XRPlaneDetectionType PlaneDetection { get; set; } Property Value Type Description XRPlaneDetectionType TrackPosition Gets or sets a value indicating whether the position tracking is enabled. On ARCore position tracking cannot be disabled. Declaration public bool TrackPosition { get; set; } Property Value Type Description bool TrackableItems Gets the trackables based on a captured video frame in an AR session. Declaration public override XRTrackableItems TrackableItems { get; } Property Value Type Description XRTrackableItems Overrides Evergine.Framework.Services.XRPlatform.TrackableItems WorldAlignment Gets or sets the world alignment mode that indicates how a scene coordinate system is constructed based on real-world device motion. On ARCore only Gravity mode is supported. Declaration public WorldAlignment WorldAlignment { get; set; } Property Value Type Description WorldAlignment Methods HitTest(Vector2, out ARMobileHitTestResult[]) Makes a hit tests over real world and retrieves results. Declaration public abstract bool HitTest(Vector2 screenPosition, out ARMobileHitTestResult[] results) Parameters Type Name Description Vector2 screenPosition Screen position (using screen dimensions). ARMobileHitTestResult[] results Hit test results. Returns Type Description bool True if at least one result was found; false otherwise. OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Services.Service.OnDetach() RefreshConfiguration() Refreshes AR session configuration. Declaration protected abstract void RefreshConfiguration() Reset() Resets AR session. Declaration protected abstract void Reset() StartTrackingAsync(StartOptions) Starts AR tracking. Declaration public abstract Task<bool> StartTrackingAsync(StartOptions startOptions) Parameters Type Name Description StartOptions startOptions Start options StartOptions. Returns Type Description Task<bool> True if trackings successfully started; false otherwise. Implements IDependencyObject IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Components.ARMobileHitTestBehavior.html": {
    "href": "api/Evergine.ARMobile.Components.ARMobileHitTestBehavior.html",
    "title": "Class ARMobileHitTestBehavior | Evergine Doc",
    "keywords": "Class ARMobileHitTestBehavior Places owner entity after a successful hit test. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior ARMobileHitTestBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.Components Assembly: Evergine.ARMobile.dll Syntax public class ARMobileHitTestBehavior : Behavior, IDependencyObject Constructors ARMobileHitTestBehavior() Initializes a new instance of the ARMobileHitTestBehavior class. Declaration public ARMobileHitTestBehavior() Properties Mode Gets or sets hit test mode. Declaration public ARMobileHitTestBehavior.Modes Mode { get; set; } Property Value Type Description ARMobileHitTestBehavior.Modes Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Components.ARMobileHitTestBehavior.Modes.html": {
    "href": "api/Evergine.ARMobile.Components.ARMobileHitTestBehavior.Modes.html",
    "title": "Enum ARMobileHitTestBehavior.Modes | Evergine Doc",
    "keywords": "Enum ARMobileHitTestBehavior.Modes Hit test mode. Namespace: Evergine.ARMobile.Components Assembly: Evergine.ARMobile.dll Syntax public enum ARMobileHitTestBehavior.Modes Fields Name Description EveryFrame Performs hit test every frame. Touch Performs hit test on user screen touch. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Components.html": {
    "href": "api/Evergine.ARMobile.Components.html",
    "title": "Namespace Evergine.ARMobile.Components | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile.Components Classes ARMobileHitTestBehavior Places owner entity after a successful hit test. Enums ARMobileHitTestBehavior.Modes Hit test mode."
  },
  "api/Evergine.ARMobile.DefaultResourcesIDs.html": {
    "href": "api/Evergine.ARMobile.DefaultResourcesIDs.html",
    "title": "Class DefaultResourcesIDs | Evergine Doc",
    "keywords": "Class DefaultResourcesIDs Default resources Ids. Inheritance object DefaultResourcesIDs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile Assembly: Evergine.ARMobile.dll Syntax public class DefaultResourcesIDs Fields CursorMaterialId Cursor material ID. Declaration public static Guid CursorMaterialId Field Value Type Description Guid FaceMeshMateriaId Face mesh material ID. Declaration public static Guid FaceMeshMateriaId Field Value Type Description Guid PlaneMateriaId Plane material ID. Declaration public static Guid PlaneMateriaId Field Value Type Description Guid PointerTextureId Pointer texture ID. Declaration public static Guid PointerTextureId Field Value Type Description Guid TrackableMateriaId Trackable material ID. Declaration public static Guid TrackableMateriaId Field Value Type Description Guid Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.FeaturePoints.ARMobileFeaturePoints.html": {
    "href": "api/Evergine.ARMobile.FeaturePoints.ARMobileFeaturePoints.html",
    "title": "Class ARMobileFeaturePoints | Evergine Doc",
    "keywords": "Class ARMobileFeaturePoints ARCore implementation to XRFeaturePoints. Inheritance object DisposableObject XRFeaturePoints ARMobileFeaturePoints Implements IDisposable Inherited Members XRFeaturePoints.Points XRFeaturePoints.Destroy() DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.FeaturePoints Assembly: Evergine.ARMobile.dll Syntax public class ARMobileFeaturePoints : XRFeaturePoints, IDisposable Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.FeaturePoints.html": {
    "href": "api/Evergine.ARMobile.FeaturePoints.html",
    "title": "Namespace Evergine.ARMobile.FeaturePoints | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile.FeaturePoints Classes ARMobileFeaturePoints ARCore implementation to XRFeaturePoints."
  },
  "api/Evergine.ARMobile.HitTest.ARMobileHitTestResult.html": {
    "href": "api/Evergine.ARMobile.HitTest.ARMobileHitTestResult.html",
    "title": "Class ARMobileHitTestResult | Evergine Doc",
    "keywords": "Class ARMobileHitTestResult A result generated by the HitTest(Vector2, out ARMobileHitTestResult[]) method. Inheritance object ARMobileHitTestResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.HitTest Assembly: Evergine.ARMobile.dll Syntax public class ARMobileHitTestResult Fields Anchor If not null, the Evergine.Framework.XR.TrackableItems.XRTrackableItem of the detected surface. Declaration public XRTrackableItem Anchor Field Value Type Description XRTrackableItem Distance The distance, in meters, to the detected object. Declaration public float Distance Field Value Type Description float WorldTransform The position and orientation of the detected object relative to the world coordinate system. Declaration public Matrix4x4 WorldTransform Field Value Type Description Matrix4x4 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.HitTest.html": {
    "href": "api/Evergine.ARMobile.HitTest.html",
    "title": "Namespace Evergine.ARMobile.HitTest | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile.HitTest Classes ARMobileHitTestResult A result generated by the HitTest(Vector2, out ARMobileHitTestResult[]) method."
  },
  "api/Evergine.ARMobile.html": {
    "href": "api/Evergine.ARMobile.html",
    "title": "Namespace Evergine.ARMobile | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile Classes ARMobilePlatform The AR mobile base service class. DefaultResourcesIDs Default resources Ids. Enums StartOptions Options affecting how to transition an AR session's current state when the tracking is started. WorldAlignment Options for how a scene coordinate system is constructed based on real-world device motion."
  },
  "api/Evergine.ARMobile.Light.ARMobileLightEstimation.html": {
    "href": "api/Evergine.ARMobile.Light.ARMobileLightEstimation.html",
    "title": "Class ARMobileLightEstimation | Evergine Doc",
    "keywords": "Class ARMobileLightEstimation Estimated scene lighting information associated with a captured video frame in an AR session. Inheritance object DisposableObject XRLightEstimation ARMobileLightEstimation Implements IDisposable Inherited Members XRLightEstimation.Mode XRLightEstimation.ColorCorrection XRLightEstimation.PixelIntensity XRLightEstimation.MainLightDirection XRLightEstimation.MainLightIntensity XRLightEstimation.EnvironmentProbe XRLightEstimation.Destroy() DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.Light Assembly: Evergine.ARMobile.dll Syntax public class ARMobileLightEstimation : XRLightEstimation, IDisposable Properties AmbientSphericalHarmonics Gets or sets ambient spherical harmonics. Declaration public float[] AmbientSphericalHarmonics { get; set; } Property Value Type Description float[] Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Light.html": {
    "href": "api/Evergine.ARMobile.Light.html",
    "title": "Namespace Evergine.ARMobile.Light | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile.Light Classes ARMobileLightEstimation Estimated scene lighting information associated with a captured video frame in an AR session."
  },
  "api/Evergine.ARMobile.Manager.ARMobileManager.html": {
    "href": "api/Evergine.ARMobile.Manager.ARMobileManager.html",
    "title": "Class ARMobileManager | Evergine Doc",
    "keywords": "Class ARMobileManager ARMobile scene manager. Inheritance object IdentifiableObject DependencyObject AttachableObject SceneManager ARMobileManager Implements IDependencyObject Inherited Members SceneManager.Managers SceneManager.Scene SceneManager.OnLoaded() SceneManager.OnActivated() SceneManager.OnDeactivated() SceneManager.OnDetach() SceneManager.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.Manager Assembly: Evergine.ARMobile.dll Syntax public class ARMobileManager : SceneManager, IDependencyObject Fields arcore ARCore instance. Declaration [BindService(true)] protected ARMobilePlatform arcore Field Value Type Description ARMobilePlatform Properties FaceTrackingEnabled Gets or sets a value indicating whether the face tracking is enabled. Declaration public bool FaceTrackingEnabled { get; set; } Property Value Type Description bool FeaturePointsEnabled Gets or sets a value indicating whether the feature points are enabled. Declaration public bool FeaturePointsEnabled { get; set; } Property Value Type Description bool ImageDataSetPath Gets or sets the image dataset path (csv file). Declaration public string ImageDataSetPath { get; set; } Property Value Type Description string ImageDetectionEnabled Gets or sets a value indicating whether the image detection is enabled. Declaration public bool ImageDetectionEnabled { get; set; } Property Value Type Description bool LightEstimationMode Gets or sets the light estimation mode. Declaration public XRLightEstimation.Modes LightEstimationMode { get; set; } Property Value Type Description XRLightEstimation.Modes PlaneDetection Gets or sets the plane detectition mode. Declaration public XRPlaneDetectionType PlaneDetection { get; set; } Property Value Type Description XRPlaneDetectionType Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Managers.SceneManager.OnAttached() Start() Invoked to start the object. Declaration protected override void Start() Overrides Evergine.Framework.Managers.SceneManager.Start() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Manager.html": {
    "href": "api/Evergine.ARMobile.Manager.html",
    "title": "Namespace Evergine.ARMobile.Manager | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile.Manager Classes ARMobileManager ARMobile scene manager."
  },
  "api/Evergine.ARMobile.StartOptions.html": {
    "href": "api/Evergine.ARMobile.StartOptions.html",
    "title": "Enum StartOptions | Evergine Doc",
    "keywords": "Enum StartOptions Options affecting how to transition an AR session's current state when the tracking is started. Namespace: Evergine.ARMobile Assembly: Evergine.ARMobile.dll Syntax [Flags] public enum StartOptions Fields Name Description None The session is resumed if it is not running for the first time. RemoveExistingAnchors Any anchor objects associated with the session in its previous configuration are removed. ResetTracking The session does not continue device position/motion tracking from the previous world origin. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Trackables.ARMobileTrackables.html": {
    "href": "api/Evergine.ARMobile.Trackables.ARMobileTrackables.html",
    "title": "Class ARMobileTrackables | Evergine Doc",
    "keywords": "Class ARMobileTrackables Stores the current trackable items. Inheritance object DisposableObject XRTrackableItems ARMobileTrackables Implements IDisposable Inherited Members XRTrackableItems.TrackablesById XRTrackableItems.AddedTrackables XRTrackableItems.UpdatedTrackables XRTrackableItems.RemovedTrackables XRTrackableItems.FindTrackable(Guid) XRTrackableItems.AddTrackables(IEnumerable<XRTrackableItem>) XRTrackableItems.UpdateTrackables(IEnumerable<XRTrackableItem>) XRTrackableItems.RemoveTrackables(IEnumerable<Guid>) XRTrackableItems.ClearAllTrackables() XRTrackableItems.Destroy() DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.Trackables Assembly: Evergine.ARMobile.dll Syntax public class ARMobileTrackables : XRTrackableItems, IDisposable Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Trackables.html": {
    "href": "api/Evergine.ARMobile.Trackables.html",
    "title": "Namespace Evergine.ARMobile.Trackables | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile.Trackables Classes ARMobileTrackables Stores the current trackable items."
  },
  "api/Evergine.ARMobile.Trackables.Images.DataSetProvider.html": {
    "href": "api/Evergine.ARMobile.Trackables.Images.DataSetProvider.html",
    "title": "Class DataSetProvider | Evergine Doc",
    "keywords": "Class DataSetProvider Images datas set provider. Inheritance object IdentifiableObject DependencyObject AttachableObject Service DataSetProvider Implements IDependencyObject Inherited Members Service.OnLoaded() Service.OnAttached() Service.OnActivated() Service.Start() Service.OnDeactivated() Service.OnDetach() Service.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.Trackables.Images Assembly: Evergine.ARMobile.dll Syntax public abstract class DataSetProvider : Service, IDependencyObject Properties DataSetFilePath Gets or sets dataset file path. Declaration public string DataSetFilePath { get; set; } Property Value Type Description string HasImages Gets a value indicating whether dataset has images. Declaration public bool HasImages { get; } Property Value Type Description bool NumberOfImages Gets dataset number of images. Declaration public abstract int NumberOfImages { get; } Property Value Type Description int Methods CheckInitialization() Checks provider initialization. Declaration protected virtual void CheckInitialization() Exceptions Type Condition InvalidOperationException When path has not been established. GetImagePathsWithSizesDataAsync(Stream) Gets image paths information. Declaration protected Task<IEnumerable<ImageWithSizesData>> GetImagePathsWithSizesDataAsync(Stream dataSetStream) Parameters Type Name Description Stream dataSetStream Dataset stream. Returns Type Description Task<IEnumerable<ImageWithSizesData>> Collection of dataset images data. LoadDataSetAsync() Loads images dataset. Declaration public virtual Task LoadDataSetAsync() Returns Type Description Task A Task representing the result of the asynchronous operation. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.Trackables.Images.html": {
    "href": "api/Evergine.ARMobile.Trackables.Images.html",
    "title": "Namespace Evergine.ARMobile.Trackables.Images | Evergine Doc",
    "keywords": "Namespace Evergine.ARMobile.Trackables.Images Classes DataSetProvider Images datas set provider. ImageWithSizesData Tracking image information."
  },
  "api/Evergine.ARMobile.Trackables.Images.ImageWithSizesData.html": {
    "href": "api/Evergine.ARMobile.Trackables.Images.ImageWithSizesData.html",
    "title": "Class ImageWithSizesData | Evergine Doc",
    "keywords": "Class ImageWithSizesData Tracking image information. Inheritance object ImageWithSizesData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.ARMobile.Trackables.Images Assembly: Evergine.ARMobile.dll Syntax public class ImageWithSizesData Properties FilePath Gets or sets file path, relative to its dataset file. Declaration public string FilePath { get; set; } Property Value Type Description string Width Gets or sets image width in meters. Declaration public float Width { get; set; } Property Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.ARMobile.WorldAlignment.html": {
    "href": "api/Evergine.ARMobile.WorldAlignment.html",
    "title": "Enum WorldAlignment | Evergine Doc",
    "keywords": "Enum WorldAlignment Options for how a scene coordinate system is constructed based on real-world device motion. Namespace: Evergine.ARMobile Assembly: Evergine.ARMobile.dll Syntax public enum WorldAlignment Fields Name Description Camera The scene coordinate system is locked to match the orientation of the camera. (ARKit only) Gravity The coordinate system's y-axis is parallel to gravity, and its origin is the initial position of the device. GravityAndHeading The coordinate system's y-axis is parallel to gravity, its x- and z-axes are oriented to compass heading, and its origin is the initial position of the device. (ARKit only) Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Contents.ContentDirectory.html": {
    "href": "api/Evergine.Assets.Contents.ContentDirectory.html",
    "title": "Class ContentDirectory | Evergine Doc",
    "keywords": "Class ContentDirectory The content directory class. Inheritance object ContentElement ContentDirectory Inherited Members ContentElement.Name ContentElement.RelativePath ContentElement.ParentDirectory object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Assets.Contents Assembly: Evergine.Assets.dll Syntax public class ContentDirectory : ContentElement Constructors ContentDirectory(string) Initializes a new instance of the ContentDirectory class. Declaration public ContentDirectory(string rootDirectory) Parameters Type Name Description string rootDirectory The parent directory. ContentDirectory(string, ContentDirectory) Initializes a new instance of the ContentDirectory class. Declaration public ContentDirectory(string directoryName, ContentDirectory parentDirectory) Parameters Type Name Description string directoryName The directory name. ContentDirectory parentDirectory The parent directory. Properties DirectoryInfo Gets the directory info. Declaration public DirectoryInfo DirectoryInfo { get; } Property Value Type Description DirectoryInfo DirtyPath Gets or sets a value indicating whether the path is dirty and needs to be recalculated. Declaration public override bool DirtyPath { get; set; } Property Value Type Description bool Overrides ContentElement.DirtyPath Files Gets the files of the directory. Declaration public ConcurrentDictionary<string, ContentFile> Files { get; } Property Value Type Description ConcurrentDictionary<string, ContentFile> FullPath Gets the full path. Declaration public override string FullPath { get; } Property Value Type Description string Overrides ContentElement.FullPath LastModified Gets the latest modified time. Declaration public override DateTime LastModified { get; } Property Value Type Description DateTime Overrides ContentElement.LastModified SubDirectories Gets the subdirectories of the directory. Declaration public ConcurrentDictionary<string, ContentDirectory> SubDirectories { get; } Property Value Type Description ConcurrentDictionary<string, ContentDirectory> Methods ContainsDirectory(string) Checks if the directory contains a defined directory. Declaration public bool ContainsDirectory(string name) Parameters Type Name Description string name The name of the directory to search. Returns Type Description bool True if exists. False otherwise. ContainsElement(string) Checks if the directory contains a defined element. Declaration public bool ContainsElement(string name) Parameters Type Name Description string name The name of the element to search. Returns Type Description bool True if exists. False otherwise. ContainsFile(string) Checks if the directory contains a defined file. Declaration public bool ContainsFile(string name) Parameters Type Name Description string name The name of the file to search. Returns Type Description bool True if exists. False otherwise. CreateContentFile(string, out ContentFile) Creates a sub directory. Declaration public FileStream CreateContentFile(string fileName, out ContentFile file) Parameters Type Name Description string fileName The name of the subdirectory. ContentFile file The content file. Returns Type Description FileStream The write stream. CreateSubDirectory(string) Creates a sub directory. Declaration public ContentDirectory CreateSubDirectory(string name) Parameters Type Name Description string name The name of the subdirectory. Returns Type Description ContentDirectory The contentDirectory object. Delete() Deletes the file. Declaration public override void Delete() Overrides ContentElement.Delete() FindDirectoryByName(string) Gets a sub directory contained in the directory by its name. Declaration public ContentDirectory FindDirectoryByName(string name) Parameters Type Name Description string name The name of the directory to search. Returns Type Description ContentDirectory The directory if exists. False otherwise. FindFileByName(string) Gets a file contained in the directory by its name. Declaration public ContentFile FindFileByName(string name) Parameters Type Name Description string name The name of the file to search. Returns Type Description ContentFile The file if exists. False otherwise. FindFilesByExtension(IEnumerable<string>) Gets all the files of the directory with a specific set of extensions. Declaration public List<ContentFile> FindFilesByExtension(IEnumerable<string> extensions) Parameters Type Name Description IEnumerable<string> extensions The extension enumerable. Returns Type Description List<ContentFile> The list of the files that satisfy the extensions. FindFilesByExtension(string) Gets all the files of the directory with a specific extension. Declaration public List<ContentFile> FindFilesByExtension(string extension) Parameters Type Name Description string extension The extension. Returns Type Description List<ContentFile> The list of the files. Move(ContentDirectory) Moves the element to a new directory. Declaration public override bool Move(ContentDirectory newParentDirectory) Parameters Type Name Description ContentDirectory newParentDirectory The new parent Content Directory. Returns Type Description bool True if it was successful. Overrides ContentElement.Move(ContentDirectory) Refresh() Refreshes the element, setting its path to dirty mode. Declaration public override void Refresh() Overrides ContentElement.Refresh() SetName(string) Sets a new name for the directory. Declaration public override bool SetName(string newName) Parameters Type Name Description string newName The new name. Returns Type Description bool If the change of name could be achieved. Overrides ContentElement.SetName(string) ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() UpdateName(string) Updates the name of the element. Declaration public override bool UpdateName(string newName) Parameters Type Name Description string newName The new name of the element. Returns Type Description bool True if the operation was succesful. False otherwise. Overrides ContentElement.UpdateName(string) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Contents.ContentElement.html": {
    "href": "api/Evergine.Assets.Contents.ContentElement.html",
    "title": "Class ContentElement | Evergine Doc",
    "keywords": "Class ContentElement The content element class. Inheritance object ContentElement ContentDirectory ContentFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Contents Assembly: Evergine.Assets.dll Syntax public abstract class ContentElement Properties DirtyPath Gets or sets a value indicating whether the path is dirty and needs to be recalculated. Declaration public virtual bool DirtyPath { get; set; } Property Value Type Description bool FullPath Gets the full content path. Declaration public abstract string FullPath { get; } Property Value Type Description string LastModified Gets the latest modified time. Declaration public abstract DateTime LastModified { get; } Property Value Type Description DateTime Name Gets the content name. Declaration public virtual string Name { get; } Property Value Type Description string ParentDirectory Gets the content directory. Declaration public virtual ContentDirectory ParentDirectory { get; } Property Value Type Description ContentDirectory RelativePath Gets the content path. Declaration public string RelativePath { get; } Property Value Type Description string Methods Delete() Deletes the element. Declaration public abstract void Delete() Move(ContentDirectory) Moves the element to a new directory. Declaration public virtual bool Move(ContentDirectory newParentDirectory) Parameters Type Name Description ContentDirectory newParentDirectory The new parent Content Directory. Returns Type Description bool True if it was successful. Refresh() Refreshes the element, setting its path to dirty mode. Declaration public virtual void Refresh() SetName(string) Sets the name of the element. Declaration public virtual bool SetName(string newName) Parameters Type Name Description string newName The new name of the element. Returns Type Description bool True if it was possible to change its name. UpdateName(string) Updates the name of the element. Declaration public virtual bool UpdateName(string newName) Parameters Type Name Description string newName The new name of the element. Returns Type Description bool True if the operation was succesful. False otherwise. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Contents.ContentFile.html": {
    "href": "api/Evergine.Assets.Contents.ContentFile.html",
    "title": "Class ContentFile | Evergine Doc",
    "keywords": "Class ContentFile The content file class. Inheritance object ContentElement ContentFile Inherited Members ContentElement.DirtyPath ContentElement.Name ContentElement.RelativePath ContentElement.ParentDirectory object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Assets.Contents Assembly: Evergine.Assets.dll Syntax public class ContentFile : ContentElement Constructors ContentFile(string, ContentDirectory) Initializes a new instance of the ContentFile class. Declaration public ContentFile(string fileName, ContentDirectory parentDirectory) Parameters Type Name Description string fileName The file name. ContentDirectory parentDirectory The parent directory. Properties Extension Gets the file extension. Declaration public string Extension { get; } Property Value Type Description string FileInfo Gets the file info. Declaration public FileInfo FileInfo { get; } Property Value Type Description FileInfo FullPath Gets the full path. Declaration public override string FullPath { get; } Property Value Type Description string Overrides ContentElement.FullPath LastModified Gets the latest modified time. Declaration public override DateTime LastModified { get; } Property Value Type Description DateTime Overrides ContentElement.LastModified NameWithoutExtension Gets the name without extension. Declaration public string NameWithoutExtension { get; } Property Value Type Description string Methods CopyTo(ContentDirectory) Copies the file to another directory. Declaration public Task<ContentFile> CopyTo(ContentDirectory targetDirectory) Parameters Type Name Description ContentDirectory targetDirectory The destination directory. Returns Type Description Task<ContentFile> Awaitable task returning the result file. CopyTo(ContentDirectory, string) Copies the file into another directory. Declaration public Task<ContentFile> CopyTo(ContentDirectory destinationDirectory, string newName) Parameters Type Name Description ContentDirectory destinationDirectory The destination directory. string newName The new name of the file. Returns Type Description Task<ContentFile> Awaitable task of the operation, returning the new Content File. Delete() Deletes the file. Declaration public override void Delete() Overrides ContentElement.Delete() GetDataAsync() Gets the file data. Declaration public Task<byte[]> GetDataAsync() Returns Type Description Task<byte[]> Awaitable task of the operation returning its content as byte array. Move(ContentDirectory) Moves the element to a new directory. Declaration public override bool Move(ContentDirectory newParentDirectory) Parameters Type Name Description ContentDirectory newParentDirectory The new parent Content Directory. Returns Type Description bool True if it was successful. Overrides ContentElement.Move(ContentDirectory) OpenReader() Opens the file as reader. Declaration public FileStream OpenReader() Returns Type Description FileStream The File Stream of the file. OpenWrite() Opens the file for writing. Declaration public FileStream OpenWrite() Returns Type Description FileStream The FileStream of the file. Refresh() Refreshes the element, setting its path to dirty mode. Declaration public override void Refresh() Overrides ContentElement.Refresh() SetName(string) Sets a new name for the file. Declaration public override bool SetName(string newName) Parameters Type Name Description string newName The new name. Returns Type Description bool If the change of name could be achieved. Overrides ContentElement.SetName(string) SetNameWithoutExtension(string) Sets a new name for the file without extension. Declaration public bool SetNameWithoutExtension(string newName) Parameters Type Name Description string newName The new name. Returns Type Description bool If the change of name could be achieved. ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() UpdateName(string) Updates the name of the element. Declaration public override bool UpdateName(string newName) Parameters Type Name Description string newName The new name of the element. Returns Type Description bool True if the operation was succesful. False otherwise. Overrides ContentElement.UpdateName(string) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Contents.html": {
    "href": "api/Evergine.Assets.Contents.html",
    "title": "Namespace Evergine.Assets.Contents | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Contents Classes ContentDirectory The content directory class. ContentElement The content element class. ContentFile The content file class."
  },
  "api/Evergine.Assets.Exporters.AssetExporter-2.html": {
    "href": "api/Evergine.Assets.Exporters.AssetExporter-2.html",
    "title": "Class AssetExporter<TAsset, TProfile> | Evergine Doc",
    "keywords": "Class AssetExporter<TAsset, TProfile> The asset Exporter class. Inheritance object BaseAssetExporter<TAsset, TProfile> AssetExporter<TAsset, TProfile> CustomTextureExporter EffectExporter FontExporter FrameBufferExporter MaterialExporter ModelExporter ParticlesExporter PostProcessingGraphExporter ReflectionProbeExporter RenderLayerExporter SamplerExporter SoundExporter TextureExporter Implements IAssetExporter Inherited Members BaseAssetExporter<TAsset, TProfile>.Extension BaseAssetExporter<TAsset, TProfile>.GetExportFilePath(TAsset, TProfile, ExportContext) BaseAssetExporter<TAsset, TProfile>.BaseExport(TAsset, TProfile, ExportContext) BaseAssetExporter<TAsset, TProfile>.ExportOutputFile(TAsset, TProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public abstract class AssetExporter<TAsset, TProfile> : BaseAssetExporter<TAsset, TProfile>, IAssetExporter where TAsset : IAssetMetaFile where TProfile : AssetProfile Type Parameters Name Description TAsset The asset generic type. TProfile The profile generic type. Methods ExportOutputFile(TAsset, TProfile, ExportContext) Exports the assets. Declaration protected override Task<ExportResult> ExportOutputFile(TAsset asset, TProfile profile, ExportContext exportContext) Parameters Type Name Description TAsset asset The asset meta file. TProfile profile The profile object. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> Awaitable task of the operation with the result of the export process. Overrides BaseAssetExporter<TAsset, TProfile>.ExportOutputFile(TAsset, TProfile, ExportContext) GenerateAssetParts(TAsset, TProfile, ExportContext) Exports the asset. Declaration protected abstract Task<List<AssetPart>> GenerateAssetParts(TAsset metafile, TProfile profile, ExportContext exportContext) Parameters Type Name Description TAsset metafile The meta file. TProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. GetExportFilePath(TAsset, TProfile, ExportContext) Gets the export file path. Declaration public override string GetExportFilePath(TAsset asset, TProfile profile, ExportContext exportContext) Parameters Type Name Description TAsset asset The asset. TProfile profile The profile. ExportContext exportContext The export context. Returns Type Description string The export file path. Overrides BaseAssetExporter<TAsset, TProfile>.GetExportFilePath(TAsset, TProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.AssetExporterManager.html": {
    "href": "api/Evergine.Assets.Exporters.AssetExporterManager.html",
    "title": "Class AssetExporterManager | Evergine Doc",
    "keywords": "Class AssetExporterManager The asset exporter manager class. Inheritance object AssetExporterManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class AssetExporterManager Properties AssetExporters Gets the asset exporter dictionary. Declaration public static Dictionary<Type, IAssetExporter> AssetExporters { get; } Property Value Type Description Dictionary<Type, IAssetExporter> AssetTypes Gets the asset types. Declaration public static Dictionary<string, Type> AssetTypes { get; } Property Value Type Description Dictionary<string, Type> Methods ExtractAssetItems(IAssetWithDirectory) Extracts all the asset items of the content directory. Declaration public static List<AssetItem> ExtractAssetItems(IAssetWithDirectory parentAsset) Parameters Type Name Description IAssetWithDirectory parentAsset The parent asset. Returns Type Description List<AssetItem> The directory metafile. ExtractAssets(ContentDirectory) Extracts all the asset items of the content directory. Declaration public static DirectoryMetaFile ExtractAssets(ContentDirectory parentDirectory) Parameters Type Name Description ContentDirectory parentDirectory The content directory. Returns Type Description DirectoryMetaFile The directory metafile. GetProjectContent(string) Gets the contents of a project. Declaration public static ContentDirectory GetProjectContent(string rootPath) Parameters Type Name Description string rootPath The root directory path. Returns Type Description ContentDirectory The root content directory. ImportAsset(ContentElement) Imports an asset. Declaration public static IAssetMetaFile ImportAsset(ContentElement assetElement) Parameters Type Name Description ContentElement assetElement The asset element. Returns Type Description IAssetMetaFile The asset metafile of the asset. ImportAssetItem(ContentElement, IAssetWithDirectory) Imports an asset item. Declaration public static AssetItem ImportAssetItem(ContentElement assetElement, IAssetWithDirectory parentAsset) Parameters Type Name Description ContentElement assetElement The content element of the asset. IAssetWithDirectory parentAsset The container parent asset (usually a directory). Returns Type Description AssetItem The AssetItem object representing the asset. MetaFileFromSource(IAssetSource, ContentFile) Gets a metafile from a source object. Declaration public static IAssetMetaFile MetaFileFromSource(IAssetSource source, ContentFile sourceFile) Parameters Type Name Description IAssetSource source The source object. ContentFile sourceFile The source file. Returns Type Description IAssetMetaFile The metafile. ReadAsset(ContentFile) Reads an asset meta file from a content file. Declaration public static IAssetMetaFile ReadAsset(ContentFile file) Parameters Type Name Description ContentFile file The file. Returns Type Description IAssetMetaFile The deserialized meta file asset. WriteAsset(IAssetMetaFile, string, ContentDirectory) Writes a metafile info into a file. Declaration public static ContentFile WriteAsset(IAssetMetaFile asset, string name, ContentDirectory directory) Parameters Type Name Description IAssetMetaFile asset The asset meta file. string name The name of the file. ContentDirectory directory The target directory. Returns Type Description ContentFile The content file. WriteAsset<T>(T, string, ContentDirectory) Writes a metafile info into a file. Declaration public static ContentFile WriteAsset<T>(T asset, string name, ContentDirectory directory) where T : IAssetMetaFile Parameters Type Name Description T asset The asset meta file. string name The name of the file. ContentDirectory directory The target directory. Returns Type Description ContentFile The content file. Type Parameters Name Description T The asset generic type. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.AssetItem.html": {
    "href": "api/Evergine.Assets.Exporters.AssetItem.html",
    "title": "Class AssetItem | Evergine Doc",
    "keywords": "Class AssetItem Class representing an asset item. It manages all the files of an asset (its metafile and its source file or directory) and offers a unified set of methods. Inheritance object AssetItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class AssetItem Constructors AssetItem(ContentFile, IAssetWithDirectory, IAssetMetaFile) Initializes a new instance of the AssetItem class. Declaration public AssetItem(ContentFile file, IAssetWithDirectory parent, IAssetMetaFile asset) Parameters Type Name Description ContentFile file The content file of the .winfo. IAssetWithDirectory parent The parent directory asset. IAssetMetaFile asset The asset. Properties Asset Gets or sets the asset info of the item. Declaration public IAssetMetaFile Asset { get; set; } Property Value Type Description IAssetMetaFile Id Gets the asset Id. Declaration public Guid Id { get; } Property Value Type Description Guid MetaFile Gets the file location of the .winfo file. Declaration public ContentFile MetaFile { get; } Property Value Type Description ContentFile Name Gets the name of the asset without the (.winfo) extension. For example: texture.jpg.wtex => texture.jpg. Declaration public string Name { get; } Property Value Type Description string ParentDirectory Gets the parent directory. Declaration public IAssetWithDirectory ParentDirectory { get; } Property Value Type Description IAssetWithDirectory Type Gets the type of the asset. Declaration public Type Type { get; } Property Value Type Description Type Methods Delete() Deletes the asset. Declaration public Task Delete() Returns Type Description Task Awaitable task for the operation. Export(ExportContext) Exports the asset into a directory. Declaration public Task<ExportResult> Export(ExportContext exportContext) Parameters Type Name Description ExportContext exportContext The export context. Returns Type Description Task<ExportResult> Awaitable task returning the export result. Save() Saves the asset. Declaration public Task Save() Returns Type Description Task Awaitable task for the operation. SetName(string) Sets the asset name. Declaration public bool SetName(string name) Parameters Type Name Description string name The new name. Returns Type Description bool True if the name could be changed. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.AssetMetafile-2.html": {
    "href": "api/Evergine.Assets.Exporters.AssetMetafile-2.html",
    "title": "Class AssetMetafile<TProfile, TExporter> | Evergine Doc",
    "keywords": "Class AssetMetafile<TProfile, TExporter> The asset file class. Inheritance object IdentifiableObject AssetMetafile<TProfile, TExporter> AssetMetaFileWithDirectory<TProfile, TExporter> AssetMetaFileWithSource<TSource, TProfile, TExporter> AssetMetaFileWithSourceAndDirectory<TSource, TProfile, TExporter> CustomTextureMetaFile FrameBufferMetaFile MaterialMetaFile ParticlesMetaFile PostProcessingGraphMetaFile RenderLayerMetaFile SamplerMetaFile Implements IAssetMetaFile Inherited Members IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public abstract class AssetMetafile<TProfile, TExporter> : IdentifiableObject, IAssetMetaFile where TProfile : AssetProfile where TExporter : IAssetExporter Type Parameters Name Description TProfile The profile type. TExporter The output type. Constructors AssetMetafile(TProfile) Initializes a new instance of the AssetMetafile<TProfile, TExporter> class. Declaration public AssetMetafile(TProfile defaultProfile) Parameters Type Name Description TProfile defaultProfile the default profile. Properties DefaultProfile Gets or sets the default profile. Declaration [EvergineMember] public TProfile DefaultProfile { get; protected set; } Property Value Type Description TProfile ExportAsRaw Gets or sets a value indicating whether this assets will be exported as raw. Declaration public virtual bool ExportAsRaw { get; set; } Property Value Type Description bool Exporter Gets or sets the exporter. Declaration public TExporter Exporter { get; protected set; } Property Value Type Description TExporter ExtensionExported Gets the extension. Declaration public string ExtensionExported { get; } Property Value Type Description string ExtensionMetafile Gets the extension. Declaration public abstract string ExtensionMetafile { get; } Property Value Type Description string Name Gets or sets the asset name. Declaration public string Name { get; set; } Property Value Type Description string Profiles Gets the asset profiles. Declaration [EvergineMember] public IReadOnlyDictionary<string, TProfile> Profiles { get; } Property Value Type Description IReadOnlyDictionary<string, TProfile> Methods AddProfile(string, TProfile) Adds a profile to the asset. Declaration public void AddProfile(string name, TProfile profile) Parameters Type Name Description string name The profile name. TProfile profile The profile object. Export(ExportContext) Exports the meta file. Declaration public Task<ExportResult> Export(ExportContext exportContext) Parameters Type Name Description ExportContext exportContext The export context. Returns Type Description Task<ExportResult> An awaitable task of the operation, with the export result. GetExportOutputPath(ExportContext) Gets the export output path. Declaration public string GetExportOutputPath(ExportContext exportContext) Parameters Type Name Description ExportContext exportContext The export context. Returns Type Description string The export output path. GetProfile(string) Gets the asset profile object from its name. Declaration public TProfile GetProfile(string profileName) Parameters Type Name Description string profileName The profile name. Returns Type Description TProfile The profile object. GetProfileOrDefault(string) Gets the specified profile from the metafile, or default profile. Declaration public TProfile GetProfileOrDefault(string name) Parameters Type Name Description string name The profile name. Returns Type Description TProfile The specified profile or default. RemoveProfile(string) Removes a profile from the asset. Declaration public void RemoveProfile(string name) Parameters Type Name Description string name The name of the profile to remove. Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.AssetMetaFileWithDirectory-2.html": {
    "href": "api/Evergine.Assets.Exporters.AssetMetaFileWithDirectory-2.html",
    "title": "Class AssetMetaFileWithDirectory<TProfile, TExporter> | Evergine Doc",
    "keywords": "Class AssetMetaFileWithDirectory<TProfile, TExporter> An asset with a resource element. Inheritance object IdentifiableObject AssetMetafile<TProfile, TExporter> AssetMetaFileWithDirectory<TProfile, TExporter> DirectoryMetaFile EffectMetaFile ReflectionProbeMetaFile Implements IAssetWithDirectory IAssetMetaFile Inherited Members AssetMetafile<TProfile, TExporter>.ExtensionMetafile AssetMetafile<TProfile, TExporter>.ExtensionExported AssetMetafile<TProfile, TExporter>.Name AssetMetafile<TProfile, TExporter>.ExportAsRaw AssetMetafile<TProfile, TExporter>.DefaultProfile AssetMetafile<TProfile, TExporter>.Profiles AssetMetafile<TProfile, TExporter>.Exporter AssetMetafile<TProfile, TExporter>.GetProfile(string) AssetMetafile<TProfile, TExporter>.AddProfile(string, TProfile) AssetMetafile<TProfile, TExporter>.RemoveProfile(string) AssetMetafile<TProfile, TExporter>.GetProfileOrDefault(string) AssetMetafile<TProfile, TExporter>.Export(ExportContext) AssetMetafile<TProfile, TExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public abstract class AssetMetaFileWithDirectory<TProfile, TExporter> : AssetMetafile<TProfile, TExporter>, IAssetWithDirectory, IAssetMetaFile where TProfile : AssetProfile where TExporter : IAssetExporter Type Parameters Name Description TProfile The profile class. TExporter The exporter class. Constructors AssetMetaFileWithDirectory(ContentDirectory, TProfile) Initializes a new instance of the AssetMetaFileWithDirectory<TProfile, TExporter> class. Declaration public AssetMetaFileWithDirectory(ContentDirectory assetDirectory, TProfile defaultProfile) Parameters Type Name Description ContentDirectory assetDirectory The source directory. TProfile defaultProfile the default profile. Properties Assets Gets the contained assets. Declaration public List<AssetItem> Assets { get; } Property Value Type Description List<AssetItem> SourceDirectory Gets or sets the resource file. Declaration public ContentDirectory SourceDirectory { get; set; } Property Value Type Description ContentDirectory SourceDirectoryName Gets the name of the directory that this asset should manage. Declaration public virtual string SourceDirectoryName { get; } Property Value Type Description string Methods AddAssetItem(AssetItem) Adds the asset item to the directory. Declaration public void AddAssetItem(AssetItem assetItem) Parameters Type Name Description AssetItem assetItem The asset item. ChecksDirectoryIntegrity(ContentDirectory) Checks the integrity of this asset. A common behavior is to check if the source directory is available. Declaration public virtual bool ChecksDirectoryIntegrity(ContentDirectory parentDirectory) Parameters Type Name Description ContentDirectory parentDirectory The parent directory of this asset. Returns Type Description bool True if this assets pass the integrity check. EnumerateAllAssets() Enumerates all assets in this directory and its children directory. Declaration public virtual IEnumerable<AssetItem> EnumerateAllAssets() Returns Type Description IEnumerable<AssetItem> All assets in this directory and its children directory. FindAssetItem(string) Gets an asset contained in the directory by its name. Declaration public AssetItem FindAssetItem(string name) Parameters Type Name Description string name The asset name. Returns Type Description AssetItem The asset item. FindAssetItem(string, Type, bool) Gets an asset contained in the directory by its name. Declaration public AssetItem FindAssetItem(string name, Type type, bool recursive) Parameters Type Name Description string name The asset name. Type type The type of the asset. bool recursive if the search is recursive. Returns Type Description AssetItem The asset item. FindAssetItem<T>(string, bool) Gets an asset contained in the directory by its name. Declaration public AssetItem FindAssetItem<T>(string name, bool recursive = false) where T : IAssetMetaFile Parameters Type Name Description string name The asset name. bool recursive if the search is recursive. Returns Type Description AssetItem The asset item. Type Parameters Name Description T The type of the asset. FindAssetItems(Type) Gets an asset contained in the directory by its name. Declaration public List<AssetItem> FindAssetItems(Type type) Parameters Type Name Description Type type The type of the asset. Returns Type Description List<AssetItem> The asset item. FindAssetItems<T>() Gets an asset contained in the directory by its name. Declaration public List<AssetItem> FindAssetItems<T>() where T : IAssetMetaFile Returns Type Description List<AssetItem> The asset item. Type Parameters Name Description T The type of the asset. Implements IAssetWithDirectory IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.AssetMetaFileWithSource-3.html": {
    "href": "api/Evergine.Assets.Exporters.AssetMetaFileWithSource-3.html",
    "title": "Class AssetMetaFileWithSource<TSource, TProfile, TExporter> | Evergine Doc",
    "keywords": "Class AssetMetaFileWithSource<TSource, TProfile, TExporter> An asset with a source element. Inheritance object IdentifiableObject AssetMetafile<TProfile, TExporter> AssetMetaFileWithSource<TSource, TProfile, TExporter> FileMetaFile FontMetaFile ModelMetaFile PrefabMetaFile SoundMetaFile TextureMetaFile Implements IAssetWithSource IAssetMetaFile Inherited Members AssetMetafile<TProfile, TExporter>.ExtensionMetafile AssetMetafile<TProfile, TExporter>.ExtensionExported AssetMetafile<TProfile, TExporter>.Name AssetMetafile<TProfile, TExporter>.ExportAsRaw AssetMetafile<TProfile, TExporter>.DefaultProfile AssetMetafile<TProfile, TExporter>.Profiles AssetMetafile<TProfile, TExporter>.Exporter AssetMetafile<TProfile, TExporter>.GetProfile(string) AssetMetafile<TProfile, TExporter>.AddProfile(string, TProfile) AssetMetafile<TProfile, TExporter>.RemoveProfile(string) AssetMetafile<TProfile, TExporter>.GetProfileOrDefault(string) AssetMetafile<TProfile, TExporter>.Export(ExportContext) AssetMetafile<TProfile, TExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public abstract class AssetMetaFileWithSource<TSource, TProfile, TExporter> : AssetMetafile<TProfile, TExporter>, IAssetWithSource, IAssetMetaFile where TSource : AssetSource where TProfile : AssetProfile where TExporter : IAssetExporter Type Parameters Name Description TSource The resource asset. TProfile The profile class. TExporter The exporter class. Constructors AssetMetaFileWithSource(TSource, TProfile) Initializes a new instance of the AssetMetaFileWithSource<TSource, TProfile, TExporter> class. Declaration public AssetMetaFileWithSource(TSource resource, TProfile defaultProfile) Parameters Type Name Description TSource resource the resource. TProfile defaultProfile the default profile. Properties NeedsToImportData Gets a value indicating whether the source data needs to be imported when exporting. Declaration public virtual bool NeedsToImportData { get; } Property Value Type Description bool Source Gets or sets the asset resource. Declaration public TSource Source { get; set; } Property Value Type Description TSource SourceFile Gets or sets the resource file. Declaration public ContentFile SourceFile { get; set; } Property Value Type Description ContentFile Implements IAssetWithSource IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.AssetMetaFileWithSourceAndDirectory-3.html": {
    "href": "api/Evergine.Assets.Exporters.AssetMetaFileWithSourceAndDirectory-3.html",
    "title": "Class AssetMetaFileWithSourceAndDirectory<TSource, TProfile, TExporter> | Evergine Doc",
    "keywords": "Class AssetMetaFileWithSourceAndDirectory<TSource, TProfile, TExporter> An asset with a source element. Inheritance object IdentifiableObject AssetMetafile<TProfile, TExporter> AssetMetaFileWithSourceAndDirectory<TSource, TProfile, TExporter> SceneMetaFile Implements IAssetWithSource IAssetWithDirectory IAssetMetaFile Inherited Members AssetMetafile<TProfile, TExporter>.ExtensionMetafile AssetMetafile<TProfile, TExporter>.ExtensionExported AssetMetafile<TProfile, TExporter>.Name AssetMetafile<TProfile, TExporter>.ExportAsRaw AssetMetafile<TProfile, TExporter>.DefaultProfile AssetMetafile<TProfile, TExporter>.Profiles AssetMetafile<TProfile, TExporter>.Exporter AssetMetafile<TProfile, TExporter>.GetProfile(string) AssetMetafile<TProfile, TExporter>.AddProfile(string, TProfile) AssetMetafile<TProfile, TExporter>.RemoveProfile(string) AssetMetafile<TProfile, TExporter>.GetProfileOrDefault(string) AssetMetafile<TProfile, TExporter>.Export(ExportContext) AssetMetafile<TProfile, TExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public abstract class AssetMetaFileWithSourceAndDirectory<TSource, TProfile, TExporter> : AssetMetafile<TProfile, TExporter>, IAssetWithSource, IAssetWithDirectory, IAssetMetaFile where TSource : AssetSource where TProfile : AssetProfile where TExporter : IAssetExporter Type Parameters Name Description TSource The resource asset. TProfile The profile class. TExporter The exporter class. Constructors AssetMetaFileWithSourceAndDirectory(TSource, ContentDirectory, TProfile) Initializes a new instance of the AssetMetaFileWithSourceAndDirectory<TSource, TProfile, TExporter> class. Declaration public AssetMetaFileWithSourceAndDirectory(TSource resource, ContentDirectory assetDirectory, TProfile defaultProfile) Parameters Type Name Description TSource resource the resource. ContentDirectory assetDirectory The asset directory. TProfile defaultProfile the default profile. Properties Assets Gets the contained assets. Declaration public List<AssetItem> Assets { get; } Property Value Type Description List<AssetItem> NeedsToImportData Gets a value indicating whether the source data needs to be imported when exporting. Declaration public virtual bool NeedsToImportData { get; } Property Value Type Description bool Source Gets or sets the asset resource. Declaration public TSource Source { get; set; } Property Value Type Description TSource SourceDirectory Gets or sets the resource file. Declaration public ContentDirectory SourceDirectory { get; set; } Property Value Type Description ContentDirectory SourceDirectoryName Gets the name of the directory that this asset should manage. Declaration public virtual string SourceDirectoryName { get; } Property Value Type Description string SourceFile Gets or sets the resource file. Declaration public ContentFile SourceFile { get; set; } Property Value Type Description ContentFile Methods AddAssetItem(AssetItem) Adds the asset item to the directory. Declaration public void AddAssetItem(AssetItem assetItem) Parameters Type Name Description AssetItem assetItem The asset item. ChecksDirectoryIntegrity(ContentDirectory) Checks the integrity of this asset. A common behavior is to check if the source directory is available. Declaration public virtual bool ChecksDirectoryIntegrity(ContentDirectory parentDirectory) Parameters Type Name Description ContentDirectory parentDirectory The parent directory of this asset. Returns Type Description bool True if this assets pass the integrity check. EnumerateAllAssets() Enumerates all assets in this directory and its children directory. Declaration public virtual IEnumerable<AssetItem> EnumerateAllAssets() Returns Type Description IEnumerable<AssetItem> All assets in this directory and its children directory. FindAssetItem(string) Gets an asset contained in the directory by its name. Declaration public AssetItem FindAssetItem(string name) Parameters Type Name Description string name The asset name. Returns Type Description AssetItem The asset item. FindAssetItem(string, Type, bool) Gets an asset contained in the directory by its name. Declaration public AssetItem FindAssetItem(string name, Type type, bool recursive) Parameters Type Name Description string name The asset name. Type type The type of the asset. bool recursive if the search is recursive. Returns Type Description AssetItem The asset item. FindAssetItem<T>(string, bool) Gets an asset contained in the directory by its name. Declaration public AssetItem FindAssetItem<T>(string name, bool recursive = false) where T : IAssetMetaFile Parameters Type Name Description string name The asset name. bool recursive if the search is recursive. Returns Type Description AssetItem The asset item. Type Parameters Name Description T The type of the asset. FindAssetItems(Type) Gets an asset contained in the directory by its name. Declaration public List<AssetItem> FindAssetItems(Type type) Parameters Type Name Description Type type The type of the asset. Returns Type Description List<AssetItem> The asset item. FindAssetItems<T>() Gets an asset contained in the directory by its name. Declaration public List<AssetItem> FindAssetItems<T>() where T : IAssetMetaFile Returns Type Description List<AssetItem> The asset item. Type Parameters Name Description T The type of the asset. Implements IAssetWithSource IAssetWithDirectory IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.AssetProfile.html": {
    "href": "api/Evergine.Assets.Exporters.AssetProfile.html",
    "title": "Class AssetProfile | Evergine Doc",
    "keywords": "Class AssetProfile Class that represents an asset profile. Inheritance object AssetProfile CustomTextureProfile DirectoryProfile EffectProfile FileProfile FontProfile FrameBufferProfile MaterialProfile ModelProfile ParticlesProfile PostProcessingGraphProfile PrefabProfile ReflectionProbeProfile RenderLayerProfile SamplerProfile SceneProfile SoundProfile TextureProfile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public abstract class AssetProfile Fields DefaultName The default profile name. Declaration public static readonly string DefaultName Field Value Type Description string Name Gets or sets The profile name. Declaration public string Name Field Value Type Description string Properties ExcludeAsset Gets or sets a value indicating whether this asset is exclude in profile or not. Declaration public bool ExcludeAsset { get; set; } Property Value Type Description bool Platform Gets or sets the profile platform. Declaration public PlatformType Platform { get; set; } Property Value Type Description PlatformType Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.BaseAssetExporter-2.html": {
    "href": "api/Evergine.Assets.Exporters.BaseAssetExporter-2.html",
    "title": "Class BaseAssetExporter<TAsset, TProfile> | Evergine Doc",
    "keywords": "Class BaseAssetExporter<TAsset, TProfile> The base abstract Asset Exporter class. Inheritance object BaseAssetExporter<TAsset, TProfile> AssetExporter<TAsset, TProfile> DirectoryExporter FileExporter PrefabExporter SceneExporter Implements IAssetExporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public abstract class BaseAssetExporter<TAsset, TProfile> : IAssetExporter where TAsset : IAssetMetaFile where TProfile : AssetProfile Type Parameters Name Description TAsset The generic asset metafile type. TProfile The generic profile asset type. Properties Extension Gets the asset export extension. Declaration public abstract string Extension { get; } Property Value Type Description string Methods BaseExport(TAsset, TProfile, ExportContext) Exports the asset. Declaration public Task<ExportResult> BaseExport(TAsset asset, TProfile profile, ExportContext exportContext) Parameters Type Name Description TAsset asset The Asset to export. TProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> The export result. ExportOutputFile(TAsset, TProfile, ExportContext) Exports the assets. Declaration protected abstract Task<ExportResult> ExportOutputFile(TAsset asset, TProfile profile, ExportContext exportContext) Parameters Type Name Description TAsset asset The asset meta file. TProfile profile The profile object. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> Awaitable task of the operation with the result of the export process. GetExportFilePath(TAsset, TProfile, ExportContext) Gets the export file path. Declaration public abstract string GetExportFilePath(TAsset asset, TProfile profile, ExportContext exportContext) Parameters Type Name Description TAsset asset The asset. TProfile profile The profile. ExportContext exportContext The export context. Returns Type Description string The export file path. Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.CustomTextureExporter.html": {
    "href": "api/Evergine.Assets.Exporters.CustomTextureExporter.html",
    "title": "Class CustomTextureExporter | Evergine Doc",
    "keywords": "Class CustomTextureExporter The custom texture exporter. Inheritance object BaseAssetExporter<CustomTextureMetaFile, CustomTextureProfile> AssetExporter<CustomTextureMetaFile, CustomTextureProfile> CustomTextureExporter Implements IAssetExporter Inherited Members AssetExporter<CustomTextureMetaFile, CustomTextureProfile>.GetExportFilePath(CustomTextureMetaFile, CustomTextureProfile, ExportContext) AssetExporter<CustomTextureMetaFile, CustomTextureProfile>.ExportOutputFile(CustomTextureMetaFile, CustomTextureProfile, ExportContext) AssetExporter<CustomTextureMetaFile, CustomTextureProfile>.GenerateAssetParts(CustomTextureMetaFile, CustomTextureProfile, ExportContext) BaseAssetExporter<CustomTextureMetaFile, CustomTextureProfile>.Extension BaseAssetExporter<CustomTextureMetaFile, CustomTextureProfile>.BaseExport(CustomTextureMetaFile, CustomTextureProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class CustomTextureExporter : AssetExporter<CustomTextureMetaFile, CustomTextureProfile>, IAssetExporter Properties Extension Gets the texture export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<CustomTextureMetaFile, CustomTextureProfile>.Extension Methods GenerateAssetParts(CustomTextureMetaFile, CustomTextureProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(CustomTextureMetaFile metafile, CustomTextureProfile profile, ExportContext exportContext) Parameters Type Name Description CustomTextureMetaFile metafile The meta file. CustomTextureProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<CustomTextureMetaFile, CustomTextureProfile>.GenerateAssetParts(CustomTextureMetaFile, CustomTextureProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.CustomTextureMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.CustomTextureMetaFile.html",
    "title": "Class CustomTextureMetaFile | Evergine Doc",
    "keywords": "Class CustomTextureMetaFile The custom texture meta file class. Inheritance object IdentifiableObject AssetMetafile<CustomTextureProfile, CustomTextureExporter> CustomTextureMetaFile Implements IAssetMetaFile Inherited Members AssetMetafile<CustomTextureProfile, CustomTextureExporter>.ExtensionMetafile AssetMetafile<CustomTextureProfile, CustomTextureExporter>.ExtensionExported AssetMetafile<CustomTextureProfile, CustomTextureExporter>.Name AssetMetafile<CustomTextureProfile, CustomTextureExporter>.ExportAsRaw AssetMetafile<CustomTextureProfile, CustomTextureExporter>.DefaultProfile AssetMetafile<CustomTextureProfile, CustomTextureExporter>.Profiles AssetMetafile<CustomTextureProfile, CustomTextureExporter>.Exporter AssetMetafile<CustomTextureProfile, CustomTextureExporter>.GetProfile(string) AssetMetafile<CustomTextureProfile, CustomTextureExporter>.AddProfile(string, CustomTextureProfile) AssetMetafile<CustomTextureProfile, CustomTextureExporter>.RemoveProfile(string) AssetMetafile<CustomTextureProfile, CustomTextureExporter>.GetProfileOrDefault(string) AssetMetafile<CustomTextureProfile, CustomTextureExporter>.Export(ExportContext) AssetMetafile<CustomTextureProfile, CustomTextureExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class CustomTextureMetaFile : AssetMetafile<CustomTextureProfile, CustomTextureExporter>, IAssetMetaFile Constructors CustomTextureMetaFile() Initializes a new instance of the CustomTextureMetaFile class. Declaration public CustomTextureMetaFile() CustomTextureMetaFile(TextureDescription) Initializes a new instance of the CustomTextureMetaFile class. Declaration public CustomTextureMetaFile(TextureDescription textureDescription) Parameters Type Name Description TextureDescription textureDescription Texture description instance. Fields Extension The Sampler meta file extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the sampler extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<CustomTextureProfile, CustomTextureExporter>.ExtensionMetafile Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.CustomTextureProfile.html": {
    "href": "api/Evergine.Assets.Exporters.CustomTextureProfile.html",
    "title": "Class CustomTextureProfile | Evergine Doc",
    "keywords": "Class CustomTextureProfile The custom texture profile class. Inheritance object AssetProfile CustomTextureProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class CustomTextureProfile : AssetProfile Constructors CustomTextureProfile() Initializes a new instance of the CustomTextureProfile class. Declaration public CustomTextureProfile() CustomTextureProfile(TextureDescription) Initializes a new instance of the CustomTextureProfile class. Declaration public CustomTextureProfile(TextureDescription textureDescription) Parameters Type Name Description TextureDescription textureDescription The texture desription. Fields TextureInfo The texture info. Declaration public TextureInfoPart TextureInfo Field Value Type Description TextureInfoPart Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.DirectoryExporter.html": {
    "href": "api/Evergine.Assets.Exporters.DirectoryExporter.html",
    "title": "Class DirectoryExporter | Evergine Doc",
    "keywords": "Class DirectoryExporter The directory exporter class. Inheritance object BaseAssetExporter<DirectoryMetaFile, DirectoryProfile> DirectoryExporter Implements IAssetExporter Inherited Members BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>.Extension BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>.GetExportFilePath(DirectoryMetaFile, DirectoryProfile, ExportContext) BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>.BaseExport(DirectoryMetaFile, DirectoryProfile, ExportContext) BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>.ExportOutputFile(DirectoryMetaFile, DirectoryProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class DirectoryExporter : BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>, IAssetExporter Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>.Extension Methods ExportOutputFile(DirectoryMetaFile, DirectoryProfile, ExportContext) Exports the assets. Declaration protected override Task<ExportResult> ExportOutputFile(DirectoryMetaFile asset, DirectoryProfile profile, ExportContext exportContext) Parameters Type Name Description DirectoryMetaFile asset The asset meta file. DirectoryProfile profile The profile object. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> Awaitable task of the operation with the result of the export process. Overrides BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>.ExportOutputFile(DirectoryMetaFile, DirectoryProfile, ExportContext) GetExportFilePath(DirectoryMetaFile, DirectoryProfile, ExportContext) Gets the export file path. Declaration public override string GetExportFilePath(DirectoryMetaFile asset, DirectoryProfile profile, ExportContext exportContext) Parameters Type Name Description DirectoryMetaFile asset The asset. DirectoryProfile profile The profile. ExportContext exportContext The export context. Returns Type Description string The export file path. Overrides BaseAssetExporter<DirectoryMetaFile, DirectoryProfile>.GetExportFilePath(DirectoryMetaFile, DirectoryProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.DirectoryMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.DirectoryMetaFile.html",
    "title": "Class DirectoryMetaFile | Evergine Doc",
    "keywords": "Class DirectoryMetaFile The directory meta file class. Inheritance object IdentifiableObject AssetMetafile<DirectoryProfile, DirectoryExporter> AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter> DirectoryMetaFile Implements IAssetWithDirectory IAssetMetaFile Inherited Members AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.SourceDirectoryName AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.SourceDirectory AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.Assets AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.FindAssetItem(string) AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.FindAssetItem<T>(string, bool) AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.FindAssetItem(string, Type, bool) AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.EnumerateAllAssets() AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.FindAssetItems<T>() AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.FindAssetItems(Type) AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.AddAssetItem(AssetItem) AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.ChecksDirectoryIntegrity(ContentDirectory) AssetMetafile<DirectoryProfile, DirectoryExporter>.ExtensionMetafile AssetMetafile<DirectoryProfile, DirectoryExporter>.ExtensionExported AssetMetafile<DirectoryProfile, DirectoryExporter>.Name AssetMetafile<DirectoryProfile, DirectoryExporter>.ExportAsRaw AssetMetafile<DirectoryProfile, DirectoryExporter>.DefaultProfile AssetMetafile<DirectoryProfile, DirectoryExporter>.Profiles AssetMetafile<DirectoryProfile, DirectoryExporter>.Exporter AssetMetafile<DirectoryProfile, DirectoryExporter>.GetProfile(string) AssetMetafile<DirectoryProfile, DirectoryExporter>.AddProfile(string, DirectoryProfile) AssetMetafile<DirectoryProfile, DirectoryExporter>.RemoveProfile(string) AssetMetafile<DirectoryProfile, DirectoryExporter>.GetProfileOrDefault(string) AssetMetafile<DirectoryProfile, DirectoryExporter>.Export(ExportContext) AssetMetafile<DirectoryProfile, DirectoryExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class DirectoryMetaFile : AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>, IAssetWithDirectory, IAssetMetaFile Constructors DirectoryMetaFile() Initializes a new instance of the DirectoryMetaFile class. Declaration public DirectoryMetaFile() DirectoryMetaFile(ContentDirectory) Initializes a new instance of the DirectoryMetaFile class. Declaration public DirectoryMetaFile(ContentDirectory assetDirectory) Parameters Type Name Description ContentDirectory assetDirectory The directory. Fields Extension The texture extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the file extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<DirectoryProfile, DirectoryExporter>.ExtensionMetafile Methods EnumerateAllAssets() Enumerates all assets in this directory and its children directory. Declaration public override IEnumerable<AssetItem> EnumerateAllAssets() Returns Type Description IEnumerable<AssetItem> All assets in this directory and its children directory. Overrides AssetMetaFileWithDirectory<DirectoryProfile, DirectoryExporter>.EnumerateAllAssets() Implements IAssetWithDirectory IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.DirectoryProfile.html": {
    "href": "api/Evergine.Assets.Exporters.DirectoryProfile.html",
    "title": "Class DirectoryProfile | Evergine Doc",
    "keywords": "Class DirectoryProfile The directory profile class. Inheritance object AssetProfile DirectoryProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class DirectoryProfile : AssetProfile Constructors DirectoryProfile() Initializes a new instance of the DirectoryProfile class. Declaration public DirectoryProfile() Properties OutputName Gets or sets the output name. Declaration public string OutputName { get; set; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.EffectExporter.html": {
    "href": "api/Evergine.Assets.Exporters.EffectExporter.html",
    "title": "Class EffectExporter | Evergine Doc",
    "keywords": "Class EffectExporter Effect exporter class. Inheritance object BaseAssetExporter<EffectMetaFile, EffectProfile> AssetExporter<EffectMetaFile, EffectProfile> EffectExporter Implements IAssetExporter Inherited Members AssetExporter<EffectMetaFile, EffectProfile>.GetExportFilePath(EffectMetaFile, EffectProfile, ExportContext) AssetExporter<EffectMetaFile, EffectProfile>.ExportOutputFile(EffectMetaFile, EffectProfile, ExportContext) AssetExporter<EffectMetaFile, EffectProfile>.GenerateAssetParts(EffectMetaFile, EffectProfile, ExportContext) BaseAssetExporter<EffectMetaFile, EffectProfile>.Extension BaseAssetExporter<EffectMetaFile, EffectProfile>.BaseExport(EffectMetaFile, EffectProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class EffectExporter : AssetExporter<EffectMetaFile, EffectProfile>, IAssetExporter Fields CompiledDirectory The compiled shader directory name. Declaration public static readonly string CompiledDirectory Field Value Type Description string SourceDirectory The sources directory name. Declaration public static readonly string SourceDirectory Field Value Type Description string Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<EffectMetaFile, EffectProfile>.Extension Methods GenerateAssetParts(EffectMetaFile, EffectProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(EffectMetaFile asset, EffectProfile profile, ExportContext exportContext) Parameters Type Name Description EffectMetaFile asset EffectProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<EffectMetaFile, EffectProfile>.GenerateAssetParts(EffectMetaFile, EffectProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.EffectMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.EffectMetaFile.html",
    "title": "Class EffectMetaFile | Evergine Doc",
    "keywords": "Class EffectMetaFile Effect asset class. Inheritance object IdentifiableObject AssetMetafile<EffectProfile, EffectExporter> AssetMetaFileWithDirectory<EffectProfile, EffectExporter> EffectMetaFile Implements IAssetWithDirectory IAssetMetaFile Inherited Members AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.SourceDirectoryName AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.SourceDirectory AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.Assets AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.FindAssetItem(string) AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.FindAssetItem<T>(string, bool) AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.FindAssetItem(string, Type, bool) AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.EnumerateAllAssets() AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.FindAssetItems<T>() AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.FindAssetItems(Type) AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.AddAssetItem(AssetItem) AssetMetaFileWithDirectory<EffectProfile, EffectExporter>.ChecksDirectoryIntegrity(ContentDirectory) AssetMetafile<EffectProfile, EffectExporter>.ExtensionMetafile AssetMetafile<EffectProfile, EffectExporter>.ExtensionExported AssetMetafile<EffectProfile, EffectExporter>.Name AssetMetafile<EffectProfile, EffectExporter>.ExportAsRaw AssetMetafile<EffectProfile, EffectExporter>.DefaultProfile AssetMetafile<EffectProfile, EffectExporter>.Profiles AssetMetafile<EffectProfile, EffectExporter>.Exporter AssetMetafile<EffectProfile, EffectExporter>.GetProfile(string) AssetMetafile<EffectProfile, EffectExporter>.AddProfile(string, EffectProfile) AssetMetafile<EffectProfile, EffectExporter>.RemoveProfile(string) AssetMetafile<EffectProfile, EffectExporter>.GetProfileOrDefault(string) AssetMetafile<EffectProfile, EffectExporter>.Export(ExportContext) AssetMetafile<EffectProfile, EffectExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class EffectMetaFile : AssetMetaFileWithDirectory<EffectProfile, EffectExporter>, IAssetWithDirectory, IAssetMetaFile Constructors EffectMetaFile() Initializes a new instance of the EffectMetaFile class. Declaration public EffectMetaFile() EffectMetaFile(ContentDirectory) Initializes a new instance of the EffectMetaFile class. Declaration public EffectMetaFile(ContentDirectory assetDirectory) Parameters Type Name Description ContentDirectory assetDirectory Effect directory. Fields Extension The effect extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the file extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<EffectProfile, EffectExporter>.ExtensionMetafile Implements IAssetWithDirectory IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.EffectProfile.html": {
    "href": "api/Evergine.Assets.Exporters.EffectProfile.html",
    "title": "Class EffectProfile | Evergine Doc",
    "keywords": "Class EffectProfile Effect profile class. Inheritance object AssetProfile EffectProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class EffectProfile : AssetProfile Fields Compile If the asset should pre-compile the effect. Declaration public EffectProfileCompile Compile Field Value Type Description EffectProfileCompile GraphicsBackend The graphics backend. Declaration public EffectProfileGraphicsBackend GraphicsBackend Field Value Type Description EffectProfileGraphicsBackend MandatoryCombinations Specify mandatory combinations that must be compiled. Example1: All Example2: A-B,B-C,... Declaration public string MandatoryCombinations Field Value Type Description string Properties CompileAllCombinations Gets a value indicating whether mandatory combinations contains tag All. Declaration public bool CompileAllCombinations { get; } Property Value Type Description bool Methods GetCompileParameter(ProjectProfile) Gets a value indicating whether the effect must be compiled. If the proterty value is ByPlatform the value comes from the specified project profile. Declaration public bool GetCompileParameter(ProjectProfile projectProfile) Parameters Type Name Description ProjectProfile projectProfile The project profile. Returns Type Description bool A value indicating whether the effect must be compiled. GetGraphicsBackend(ProjectProfile) Gets the graphics backend of the profile. If the proterty value is ByPlatform the value comes from the specified project profile. Declaration public GraphicsBackend GetGraphicsBackend(ProjectProfile projectProfile) Parameters Type Name Description ProjectProfile projectProfile The project profile. Returns Type Description GraphicsBackend The graphics backend of the profile. GetMandatoryCombinations(string[][]) Gets string array list of mandatory combinations. Declaration public List<string[]> GetMandatoryCombinations(string[][] projectProfileCombinations) Parameters Type Name Description string[][] projectProfileCombinations Project profile directive combinations. Returns Type Description List<string[]> mandatory combinations. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.EffectProfileCompile.html": {
    "href": "api/Evergine.Assets.Exporters.EffectProfileCompile.html",
    "title": "Enum EffectProfileCompile | Evergine Doc",
    "keywords": "Enum EffectProfileCompile Specify a value indicating whether the effect will be compiled. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public enum EffectProfileCompile : byte Fields Name Description ByPlatform Value specified by project profile. No Do not compile effect. Yes Compile effect. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.EffectProfileGraphicsBackend.html": {
    "href": "api/Evergine.Assets.Exporters.EffectProfileGraphicsBackend.html",
    "title": "Enum EffectProfileGraphicsBackend | Evergine Doc",
    "keywords": "Enum EffectProfileGraphicsBackend The specify graphics backend used by the effect profile. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public enum EffectProfileGraphicsBackend : byte Fields Name Description ByPlatform Graphics backend specified by project profile. DirectX11 DirectX 11 DirectX12 DirectX 12 Metal Metal 2.0 OpenGL OpenGL 4 OpenGLES OpenGL ES 3.0 Vulkan Vulkan 1.1 WebGL1 WebGL 1.0 WebGL2 WebGL 2.0 WebGPU WebGPU 1.0 Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ExportContext.html": {
    "href": "api/Evergine.Assets.Exporters.ExportContext.html",
    "title": "Class ExportContext | Evergine Doc",
    "keywords": "Class ExportContext Context for export process. Inheritance object ExportContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ExportContext Constructors ExportContext(string, ProjectProfile, ContentDirectory, ContentDirectory) Initializes a new instance of the ExportContext class. Declaration public ExportContext(string profileName, ProjectProfile projectProfile, ContentDirectory outputDirectory, ContentDirectory contentDirectory) Parameters Type Name Description string profileName The export profile name. ProjectProfile projectProfile The project profile. ContentDirectory outputDirectory The output directory. ContentDirectory contentDirectory The project root content directory. ExportContext(string, ProjectProfile, ContentDirectory, ContentDirectory[]) Initializes a new instance of the ExportContext class. Declaration public ExportContext(string profileName, ProjectProfile projectProfile, ContentDirectory outputDirectory, ContentDirectory[] contentDirectories) Parameters Type Name Description string profileName The export profile name. ProjectProfile projectProfile The project profile. ContentDirectory outputDirectory The output directory. ContentDirectory[] contentDirectories The project root content directories. ExportContext(string, string, ProjectProfile, ContentDirectory, ContentDirectory[]) Initializes a new instance of the ExportContext class. Declaration public ExportContext(string weprojFilePath, string profileName, ProjectProfile projectProfile, ContentDirectory outputDirectory, ContentDirectory[] contentDirectories) Parameters Type Name Description string weprojFilePath The Evergine project file path. string profileName The export profile name. ProjectProfile projectProfile The project profile. ContentDirectory outputDirectory The output directory. ContentDirectory[] contentDirectories The project root content directories. Properties Contents Gets the project root content directories. Declaration public ContentDirectory[] Contents { get; } Property Value Type Description ContentDirectory[] EvergineProjectFilePath Gets the Evergine project file path (weproj). Declaration public string EvergineProjectFilePath { get; } Property Value Type Description string Output Gets the export directory, where the export output will be placed. Declaration public ContentDirectory Output { get; } Property Value Type Description ContentDirectory ProfileName Gets the profile name used by the export. This value can be null or a non existing profile, and the default profile must be used. Declaration public string ProfileName { get; } Property Value Type Description string ProjectProfile Gets the export project profile. Declaration public ProjectProfile ProjectProfile { get; } Property Value Type Description ProjectProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ExportResult.html": {
    "href": "api/Evergine.Assets.Exporters.ExportResult.html",
    "title": "Class ExportResult | Evergine Doc",
    "keywords": "Class ExportResult A class representing the export result. Inheritance object ExportResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ExportResult Constructors ExportResult(bool, ContentElement) Initializes a new instance of the ExportResult class. Declaration public ExportResult(bool succeeded, ContentElement outputElement) Parameters Type Name Description bool succeeded If the export was successful. ContentElement outputElement The output file. ExportResult(bool, ContentElement, List<AssetPart>) Initializes a new instance of the ExportResult class. Declaration public ExportResult(bool succeeded, ContentElement outputElement, List<AssetPart> assetParts) Parameters Type Name Description bool succeeded If the export was successful. ContentElement outputElement The output file. List<AssetPart> assetParts The asset parts. ExportResult(bool, ContentElement, List<AssetPart>, DateTime) Initializes a new instance of the ExportResult class. Declaration public ExportResult(bool succeeded, ContentElement outputElement, List<AssetPart> assetParts, DateTime exportTime) Parameters Type Name Description bool succeeded If the export was successful. ContentElement outputElement The output file. List<AssetPart> assetParts The asset parts. DateTime exportTime The export time. ExportResult(bool, ContentElement, DateTime) Initializes a new instance of the ExportResult class. Declaration public ExportResult(bool succeeded, ContentElement outputElement, DateTime exportTime) Parameters Type Name Description bool succeeded If the export was successful. ContentElement outputElement The output file. DateTime exportTime The export time. ExportResult(Exception) Initializes a new instance of the ExportResult class. Declaration public ExportResult(Exception exception) Parameters Type Name Description Exception exception The exception. Fields AssetParts The asset parts. Declaration public List<AssetPart> AssetParts Field Value Type Description List<AssetPart> Exception Gets the export exception (if there is one). Declaration public Exception Exception Field Value Type Description Exception ExportTime Gets the export time. Declaration public DateTime ExportTime Field Value Type Description DateTime OutputElement Gets the output export file. Declaration public ContentElement OutputElement Field Value Type Description ContentElement Succeded Gets a value indicating whether the export was a success. Declaration public bool Succeded Field Value Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FileExporter.html": {
    "href": "api/Evergine.Assets.Exporters.FileExporter.html",
    "title": "Class FileExporter | Evergine Doc",
    "keywords": "Class FileExporter The file exporter class. Inheritance object BaseAssetExporter<IAssetMetaFile, AssetProfile> FileExporter Implements IAssetExporter Inherited Members BaseAssetExporter<IAssetMetaFile, AssetProfile>.Extension BaseAssetExporter<IAssetMetaFile, AssetProfile>.GetExportFilePath(IAssetMetaFile, AssetProfile, ExportContext) BaseAssetExporter<IAssetMetaFile, AssetProfile>.BaseExport(IAssetMetaFile, AssetProfile, ExportContext) BaseAssetExporter<IAssetMetaFile, AssetProfile>.ExportOutputFile(IAssetMetaFile, AssetProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FileExporter : BaseAssetExporter<IAssetMetaFile, AssetProfile>, IAssetExporter Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<IAssetMetaFile, AssetProfile>.Extension Methods ExportOutputFile(IAssetMetaFile, AssetProfile, ExportContext) Exports the assets. Declaration protected override Task<ExportResult> ExportOutputFile(IAssetMetaFile asset, AssetProfile profile, ExportContext exportContext) Parameters Type Name Description IAssetMetaFile asset The asset meta file. AssetProfile profile The profile object. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> Awaitable task of the operation with the result of the export process. Overrides BaseAssetExporter<IAssetMetaFile, AssetProfile>.ExportOutputFile(IAssetMetaFile, AssetProfile, ExportContext) GetExportFilePath(IAssetMetaFile, AssetProfile, ExportContext) Gets the export file path. Declaration public override string GetExportFilePath(IAssetMetaFile asset, AssetProfile profile, ExportContext exportContext) Parameters Type Name Description IAssetMetaFile asset The asset. AssetProfile profile The profile. ExportContext exportContext The export context. Returns Type Description string The export file path. Overrides BaseAssetExporter<IAssetMetaFile, AssetProfile>.GetExportFilePath(IAssetMetaFile, AssetProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FileMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.FileMetaFile.html",
    "title": "Class FileMetaFile | Evergine Doc",
    "keywords": "Class FileMetaFile the File Metafile. Inheritance object IdentifiableObject AssetMetafile<FileProfile, FileExporter> AssetMetaFileWithSource<FileSource, FileProfile, FileExporter> FileMetaFile Implements IAssetWithSource IAssetMetaFile Inherited Members AssetMetaFileWithSource<FileSource, FileProfile, FileExporter>.Source AssetMetaFileWithSource<FileSource, FileProfile, FileExporter>.SourceFile AssetMetaFileWithSource<FileSource, FileProfile, FileExporter>.NeedsToImportData AssetMetafile<FileProfile, FileExporter>.ExtensionMetafile AssetMetafile<FileProfile, FileExporter>.ExtensionExported AssetMetafile<FileProfile, FileExporter>.Name AssetMetafile<FileProfile, FileExporter>.ExportAsRaw AssetMetafile<FileProfile, FileExporter>.DefaultProfile AssetMetafile<FileProfile, FileExporter>.Profiles AssetMetafile<FileProfile, FileExporter>.Exporter AssetMetafile<FileProfile, FileExporter>.GetProfile(string) AssetMetafile<FileProfile, FileExporter>.AddProfile(string, FileProfile) AssetMetafile<FileProfile, FileExporter>.RemoveProfile(string) AssetMetafile<FileProfile, FileExporter>.GetProfileOrDefault(string) AssetMetafile<FileProfile, FileExporter>.Export(ExportContext) AssetMetafile<FileProfile, FileExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FileMetaFile : AssetMetaFileWithSource<FileSource, FileProfile, FileExporter>, IAssetWithSource, IAssetMetaFile Constructors FileMetaFile() Initializes a new instance of the FileMetaFile class. Declaration public FileMetaFile() FileMetaFile(FileSource) Initializes a new instance of the FileMetaFile class. Declaration public FileMetaFile(FileSource resource) Parameters Type Name Description FileSource resource The resource. Fields Extension The texture extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExportAsRaw Gets or sets a value indicating whether this assets will be exported as raw. Declaration public override bool ExportAsRaw { get; set; } Property Value Type Description bool Overrides AssetMetafile<FileProfile, FileExporter>.ExportAsRaw ExtensionMetafile Gets the file extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<FileProfile, FileExporter>.ExtensionMetafile NeedsToImportData Gets a value indicating whether the source data needs to be imported when exporting. Declaration public override bool NeedsToImportData { get; } Property Value Type Description bool Overrides AssetMetaFileWithSource<FileSource, FileProfile, FileExporter>.NeedsToImportData Implements IAssetWithSource IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FileProfile.html": {
    "href": "api/Evergine.Assets.Exporters.FileProfile.html",
    "title": "Class FileProfile | Evergine Doc",
    "keywords": "Class FileProfile The file profile class. Inheritance object AssetProfile FileProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FileProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FontExporter.html": {
    "href": "api/Evergine.Assets.Exporters.FontExporter.html",
    "title": "Class FontExporter | Evergine Doc",
    "keywords": "Class FontExporter The font exporter class. Inheritance object BaseAssetExporter<FontMetaFile, FontProfile> AssetExporter<FontMetaFile, FontProfile> FontExporter Implements IAssetExporter Inherited Members AssetExporter<FontMetaFile, FontProfile>.GetExportFilePath(FontMetaFile, FontProfile, ExportContext) AssetExporter<FontMetaFile, FontProfile>.ExportOutputFile(FontMetaFile, FontProfile, ExportContext) AssetExporter<FontMetaFile, FontProfile>.GenerateAssetParts(FontMetaFile, FontProfile, ExportContext) BaseAssetExporter<FontMetaFile, FontProfile>.Extension BaseAssetExporter<FontMetaFile, FontProfile>.BaseExport(FontMetaFile, FontProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FontExporter : AssetExporter<FontMetaFile, FontProfile>, IAssetExporter Fields FontCache The font cache location. Declaration public const string FontCache = \"Cache/Fonts\" Field Value Type Description string Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<FontMetaFile, FontProfile>.Extension Methods GenerateAssetParts(FontMetaFile, FontProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(FontMetaFile metafile, FontProfile profile, ExportContext exportContext) Parameters Type Name Description FontMetaFile metafile The meta file. FontProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<FontMetaFile, FontProfile>.GenerateAssetParts(FontMetaFile, FontProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FontMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.FontMetaFile.html",
    "title": "Class FontMetaFile | Evergine Doc",
    "keywords": "Class FontMetaFile The Font Metafile class. Inheritance object IdentifiableObject AssetMetafile<FontProfile, FontExporter> AssetMetaFileWithSource<FontSource, FontProfile, FontExporter> FontMetaFile Implements IAssetWithSource IAssetMetaFile Inherited Members AssetMetaFileWithSource<FontSource, FontProfile, FontExporter>.Source AssetMetaFileWithSource<FontSource, FontProfile, FontExporter>.SourceFile AssetMetaFileWithSource<FontSource, FontProfile, FontExporter>.NeedsToImportData AssetMetafile<FontProfile, FontExporter>.ExtensionMetafile AssetMetafile<FontProfile, FontExporter>.ExtensionExported AssetMetafile<FontProfile, FontExporter>.Name AssetMetafile<FontProfile, FontExporter>.ExportAsRaw AssetMetafile<FontProfile, FontExporter>.DefaultProfile AssetMetafile<FontProfile, FontExporter>.Profiles AssetMetafile<FontProfile, FontExporter>.Exporter AssetMetafile<FontProfile, FontExporter>.GetProfile(string) AssetMetafile<FontProfile, FontExporter>.AddProfile(string, FontProfile) AssetMetafile<FontProfile, FontExporter>.RemoveProfile(string) AssetMetafile<FontProfile, FontExporter>.GetProfileOrDefault(string) AssetMetafile<FontProfile, FontExporter>.Export(ExportContext) AssetMetafile<FontProfile, FontExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FontMetaFile : AssetMetaFileWithSource<FontSource, FontProfile, FontExporter>, IAssetWithSource, IAssetMetaFile Constructors FontMetaFile() Initializes a new instance of the FontMetaFile class. Declaration public FontMetaFile() FontMetaFile(FontSource) Initializes a new instance of the FontMetaFile class. Declaration public FontMetaFile(FontSource resource) Parameters Type Name Description FontSource resource Font source. Fields Extension The font extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the file extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<FontProfile, FontExporter>.ExtensionMetafile NeedsToImportData Gets a value indicating whether the source data needs to be imported when exporting. Declaration public override bool NeedsToImportData { get; } Property Value Type Description bool Overrides AssetMetaFileWithSource<FontSource, FontProfile, FontExporter>.NeedsToImportData Implements IAssetWithSource IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FontProfile.html": {
    "href": "api/Evergine.Assets.Exporters.FontProfile.html",
    "title": "Class FontProfile | Evergine Doc",
    "keywords": "Class FontProfile The font profile class. Inheritance object AssetProfile FontProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FontProfile : AssetProfile Constructors FontProfile() Initializes a new instance of the FontProfile class. Declaration public FontProfile() FontProfile(FontSource) Initializes a new instance of the FontProfile class. Declaration public FontProfile(FontSource source) Parameters Type Name Description FontSource source The font source. Fields DefaultCharset Default charset for fonts atlas generation. Declaration public const string DefaultCharset = \"[' ', '~']\" Field Value Type Description string Properties Charset Gets or sets the charset include. Declaration public string Charset { get; set; } Property Value Type Description string MinGlyphSize Gets or sets the minimum glyph size. Default = 32 pixels. Declaration public int MinGlyphSize { get; set; } Property Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FrameBufferExporter.html": {
    "href": "api/Evergine.Assets.Exporters.FrameBufferExporter.html",
    "title": "Class FrameBufferExporter | Evergine Doc",
    "keywords": "Class FrameBufferExporter The framebuffer exporter class. Inheritance object BaseAssetExporter<FrameBufferMetaFile, FrameBufferProfile> AssetExporter<FrameBufferMetaFile, FrameBufferProfile> FrameBufferExporter Implements IAssetExporter Inherited Members AssetExporter<FrameBufferMetaFile, FrameBufferProfile>.GetExportFilePath(FrameBufferMetaFile, FrameBufferProfile, ExportContext) AssetExporter<FrameBufferMetaFile, FrameBufferProfile>.ExportOutputFile(FrameBufferMetaFile, FrameBufferProfile, ExportContext) AssetExporter<FrameBufferMetaFile, FrameBufferProfile>.GenerateAssetParts(FrameBufferMetaFile, FrameBufferProfile, ExportContext) BaseAssetExporter<FrameBufferMetaFile, FrameBufferProfile>.Extension BaseAssetExporter<FrameBufferMetaFile, FrameBufferProfile>.BaseExport(FrameBufferMetaFile, FrameBufferProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FrameBufferExporter : AssetExporter<FrameBufferMetaFile, FrameBufferProfile>, IAssetExporter Properties Extension Gets the asset export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<FrameBufferMetaFile, FrameBufferProfile>.Extension Methods GenerateAssetParts(FrameBufferMetaFile, FrameBufferProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(FrameBufferMetaFile metafile, FrameBufferProfile profile, ExportContext exportContext) Parameters Type Name Description FrameBufferMetaFile metafile The meta file. FrameBufferProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<FrameBufferMetaFile, FrameBufferProfile>.GenerateAssetParts(FrameBufferMetaFile, FrameBufferProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FrameBufferMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.FrameBufferMetaFile.html",
    "title": "Class FrameBufferMetaFile | Evergine Doc",
    "keywords": "Class FrameBufferMetaFile The framebuffer meta file. Inheritance object IdentifiableObject AssetMetafile<FrameBufferProfile, FrameBufferExporter> FrameBufferMetaFile Implements IAssetMetaFile Inherited Members AssetMetafile<FrameBufferProfile, FrameBufferExporter>.ExtensionMetafile AssetMetafile<FrameBufferProfile, FrameBufferExporter>.ExtensionExported AssetMetafile<FrameBufferProfile, FrameBufferExporter>.Name AssetMetafile<FrameBufferProfile, FrameBufferExporter>.ExportAsRaw AssetMetafile<FrameBufferProfile, FrameBufferExporter>.DefaultProfile AssetMetafile<FrameBufferProfile, FrameBufferExporter>.Profiles AssetMetafile<FrameBufferProfile, FrameBufferExporter>.Exporter AssetMetafile<FrameBufferProfile, FrameBufferExporter>.GetProfile(string) AssetMetafile<FrameBufferProfile, FrameBufferExporter>.AddProfile(string, FrameBufferProfile) AssetMetafile<FrameBufferProfile, FrameBufferExporter>.RemoveProfile(string) AssetMetafile<FrameBufferProfile, FrameBufferExporter>.GetProfileOrDefault(string) AssetMetafile<FrameBufferProfile, FrameBufferExporter>.Export(ExportContext) AssetMetafile<FrameBufferProfile, FrameBufferExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FrameBufferMetaFile : AssetMetafile<FrameBufferProfile, FrameBufferExporter>, IAssetMetaFile Constructors FrameBufferMetaFile() Initializes a new instance of the FrameBufferMetaFile class. Declaration public FrameBufferMetaFile() FrameBufferMetaFile(FrameBuffer) Initializes a new instance of the FrameBufferMetaFile class. Declaration public FrameBufferMetaFile(FrameBuffer frameBuffer) Parameters Type Name Description FrameBuffer frameBuffer The framebuffer. Fields Extension The FrameBuffer asset metafile format. Declaration public static readonly string Extension Field Value Type Description string FrameBufferInfo The framebuffer info. Declaration public FrameBufferInfoPart FrameBufferInfo Field Value Type Description FrameBufferInfoPart Properties ExtensionMetafile Gets the extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<FrameBufferProfile, FrameBufferExporter>.ExtensionMetafile Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.FrameBufferProfile.html": {
    "href": "api/Evergine.Assets.Exporters.FrameBufferProfile.html",
    "title": "Class FrameBufferProfile | Evergine Doc",
    "keywords": "Class FrameBufferProfile The framebuffer profile. Inheritance object AssetProfile FrameBufferProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class FrameBufferProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.html": {
    "href": "api/Evergine.Assets.Exporters.html",
    "title": "Namespace Evergine.Assets.Exporters | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Exporters Classes AssetExporterManager The asset exporter manager class. AssetExporter<TAsset, TProfile> The asset Exporter class. AssetItem Class representing an asset item. It manages all the files of an asset (its metafile and its source file or directory) and offers a unified set of methods. AssetMetaFileWithDirectory<TProfile, TExporter> An asset with a resource element. AssetMetaFileWithSourceAndDirectory<TSource, TProfile, TExporter> An asset with a source element. AssetMetaFileWithSource<TSource, TProfile, TExporter> An asset with a source element. AssetMetafile<TProfile, TExporter> The asset file class. AssetProfile Class that represents an asset profile. BaseAssetExporter<TAsset, TProfile> The base abstract Asset Exporter class. CustomTextureExporter The custom texture exporter. CustomTextureMetaFile The custom texture meta file class. CustomTextureProfile The custom texture profile class. DirectoryExporter The directory exporter class. DirectoryMetaFile The directory meta file class. DirectoryProfile The directory profile class. EffectExporter Effect exporter class. EffectMetaFile Effect asset class. EffectProfile Effect profile class. ExportContext Context for export process. ExportResult A class representing the export result. FileExporter The file exporter class. FileMetaFile the File Metafile. FileProfile The file profile class. FontExporter The font exporter class. FontMetaFile The Font Metafile class. FontProfile The font profile class. FrameBufferExporter The framebuffer exporter class. FrameBufferMetaFile The framebuffer meta file. FrameBufferProfile The framebuffer profile. InvalidMsdfCharsetDefinitionException Exception being thrown for invalid MSDF charset definitions. MaterialExporter Material exporter class. MaterialMetaFile Material meta file class. MaterialProfile Material profile class. ModelExporter The model exporter. ModelMetaFile The model metafile class. ModelProfile The model profile class. ParticlesExporter Material exporter class. ParticlesMetaFile Particle system meta file class. ParticlesProfile Material profile class. PostProcessingGraphExporter The post-processing exporter class. PostProcessingGraphMetaFile Post-processing graph meta file. PostProcessingGraphProfile The post-processing graph profile class. ReflectionProbeExporter The texture exporter class. ReflectionProbeExtension The texture asset helper class. ReflectionProbeMetaFile The Texture Metafile class. ReflectionProbeProfile The Reflection Probe Profile class. RenderLayerExporter The render layer exporter class. RenderLayerMetaFile The render layer meta file class. RenderLayerProfile The render layer profile class. SamplerExporter The Sampler exporter class. SamplerMetaFile Sampler meta file. SamplerProfile The sampler profile class. SceneExporter The scene exporter class. SceneMetaFile The Scene meta file class. SceneProfile The scene profile class. SoundExporter The sound exporter class. SoundMetaFile The Sound Metafile class. SoundProfile The sound profile. StringArrayComparer Compare to string arrays. TextureExporter The texture exporter class. TextureMetaFile The Texture Metafile class. TextureProfile The Texture Profile class. Interfaces IAssetExporter The asset exporter interface. IAssetMetaFile Interface representing the asset metafile. IAssetWithDirectory Interface representing an asset meta file managing a directory. (Directory, Effect, etc.) IAssetWithSource Interface representing an asset metafile managing a source file. (texture, model, etc.) Enums EffectProfileCompile Specify a value indicating whether the effect will be compiled. EffectProfileGraphicsBackend The specify graphics backend used by the effect profile. SoundProfile.ChannelFormats The channel formats enum. SoundProfile.SampleRateModes The sample rate modes enum. TextureMetaFile.NinePatchTypes Nine patch texture type. TextureProfile.TextureOutputFormat Texture Output Format. TextureProfile.TextureScalingType Texture Scaling Type."
  },
  "api/Evergine.Assets.Exporters.IAssetExporter.html": {
    "href": "api/Evergine.Assets.Exporters.IAssetExporter.html",
    "title": "Interface IAssetExporter | Evergine Doc",
    "keywords": "Interface IAssetExporter The asset exporter interface. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public interface IAssetExporter Properties Extension Gets the file export extension. Declaration string Extension { get; } Property Value Type Description string Methods BaseExport(IAssetMetaFile, AssetProfile, ExportContext) Base export method. Declaration Task<ExportResult> BaseExport(IAssetMetaFile asset, AssetProfile profile, ExportContext exportContext) Parameters Type Name Description IAssetMetaFile asset The asset meta file. AssetProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> An awaitable task of the operation, with the export result. GetExportFilePath(IAssetMetaFile, AssetProfile, ExportContext) Gets the export file path. Declaration string GetExportFilePath(IAssetMetaFile asset, AssetProfile profile, ExportContext exportContext) Parameters Type Name Description IAssetMetaFile asset The asset. AssetProfile profile The profile. ExportContext exportContext The export context. Returns Type Description string The export file path. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.IAssetMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.IAssetMetaFile.html",
    "title": "Interface IAssetMetaFile | Evergine Doc",
    "keywords": "Interface IAssetMetaFile Interface representing the asset metafile. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public interface IAssetMetaFile Properties DefaultProfile Gets the default profile. Declaration AssetProfile DefaultProfile { get; } Property Value Type Description AssetProfile ExportAsRaw Gets or sets a value indicating whether this assets will be exported as raw. Declaration bool ExportAsRaw { get; set; } Property Value Type Description bool Exporter Gets the asset exporter. Declaration IAssetExporter Exporter { get; } Property Value Type Description IAssetExporter ExtensionExported Gets the extension of the exported asset. Declaration string ExtensionExported { get; } Property Value Type Description string ExtensionMetafile Gets the extension of the asset metafile. Declaration string ExtensionMetafile { get; } Property Value Type Description string Id Gets the asset id. Declaration Guid Id { get; } Property Value Type Description Guid Name Gets or sets the asset name. Declaration string Name { get; set; } Property Value Type Description string Profiles Gets the asset profiles. Declaration IReadOnlyDictionary<string, AssetProfile> Profiles { get; } Property Value Type Description IReadOnlyDictionary<string, AssetProfile> Methods AddProfile(string, AssetProfile) Adds a profile. Declaration void AddProfile(string name, AssetProfile profile) Parameters Type Name Description string name The profile name. AssetProfile profile The profile instance. Export(ExportContext) Exports the meta file. Declaration Task<ExportResult> Export(ExportContext exportContext) Parameters Type Name Description ExportContext exportContext The export context. Returns Type Description Task<ExportResult> An awaitable task of the operation, with the export result. GetExportOutputPath(ExportContext) Gets the export output path. Declaration string GetExportOutputPath(ExportContext exportContext) Parameters Type Name Description ExportContext exportContext The export context. Returns Type Description string The export output path. GetProfileOrDefault(string) Gets the specified profile from the metafile, or default profile. Declaration AssetProfile GetProfileOrDefault(string name) Parameters Type Name Description string name The profile name. Returns Type Description AssetProfile The specified profile or default. RemoveProfile(string) Removes a profile from the metafile. Declaration void RemoveProfile(string name) Parameters Type Name Description string name The profile name. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.IAssetWithDirectory.html": {
    "href": "api/Evergine.Assets.Exporters.IAssetWithDirectory.html",
    "title": "Interface IAssetWithDirectory | Evergine Doc",
    "keywords": "Interface IAssetWithDirectory Interface representing an asset meta file managing a directory. (Directory, Effect, etc.) Inherited Members IAssetMetaFile.Id IAssetMetaFile.Name IAssetMetaFile.ExportAsRaw IAssetMetaFile.Exporter IAssetMetaFile.DefaultProfile IAssetMetaFile.Profiles IAssetMetaFile.AddProfile(string, AssetProfile) IAssetMetaFile.RemoveProfile(string) IAssetMetaFile.GetProfileOrDefault(string) IAssetMetaFile.Export(ExportContext) IAssetMetaFile.GetExportOutputPath(ExportContext) IAssetMetaFile.ExtensionMetafile IAssetMetaFile.ExtensionExported Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public interface IAssetWithDirectory : IAssetMetaFile Properties Assets Gets the contained assets. Declaration List<AssetItem> Assets { get; } Property Value Type Description List<AssetItem> SourceDirectory Gets or sets the resource file. Declaration ContentDirectory SourceDirectory { get; set; } Property Value Type Description ContentDirectory SourceDirectoryName Gets the name of the directory that this asset should manage. Declaration string SourceDirectoryName { get; } Property Value Type Description string Methods AddAssetItem(AssetItem) Adds the asset item to the directory. Declaration void AddAssetItem(AssetItem assetItem) Parameters Type Name Description AssetItem assetItem The asset item. ChecksDirectoryIntegrity(ContentDirectory) Checks the integrity of this asset. A common behavior is to check if the source directory is available. Declaration bool ChecksDirectoryIntegrity(ContentDirectory parentDirectory) Parameters Type Name Description ContentDirectory parentDirectory The parent directory of this asset. Returns Type Description bool True if this assets pass the integrity check. EnumerateAllAssets() Enumerates all assets in this directory and its children directory. Declaration IEnumerable<AssetItem> EnumerateAllAssets() Returns Type Description IEnumerable<AssetItem> All assets in this directory and its children directory. FindAssetItem(string) Gets an asset contained in the directory by its name. Declaration AssetItem FindAssetItem(string name) Parameters Type Name Description string name The asset name. Returns Type Description AssetItem The asset item. FindAssetItem(string, Type, bool) Gets an asset contained in the directory by its name. Declaration AssetItem FindAssetItem(string name, Type type, bool recursive = false) Parameters Type Name Description string name The asset name. Type type The type of the asset. bool recursive If the find is recursive. Returns Type Description AssetItem The asset item. FindAssetItem<T>(string, bool) Gets an asset contained in the directory by its name. Declaration AssetItem FindAssetItem<T>(string name, bool recursive = false) where T : IAssetMetaFile Parameters Type Name Description string name The asset name. bool recursive If the find is recursive. Returns Type Description AssetItem The asset item. Type Parameters Name Description T The type of the asset. FindAssetItems(Type) Gets an asset contained in the directory by its name. Declaration List<AssetItem> FindAssetItems(Type type) Parameters Type Name Description Type type The type of the asset. Returns Type Description List<AssetItem> The asset item. FindAssetItems<T>() Gets an asset contained in the directory by its name. Declaration List<AssetItem> FindAssetItems<T>() where T : IAssetMetaFile Returns Type Description List<AssetItem> The asset item. Type Parameters Name Description T The type of the asset. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.IAssetWithSource.html": {
    "href": "api/Evergine.Assets.Exporters.IAssetWithSource.html",
    "title": "Interface IAssetWithSource | Evergine Doc",
    "keywords": "Interface IAssetWithSource Interface representing an asset metafile managing a source file. (texture, model, etc.) Inherited Members IAssetMetaFile.Id IAssetMetaFile.Name IAssetMetaFile.ExportAsRaw IAssetMetaFile.Exporter IAssetMetaFile.DefaultProfile IAssetMetaFile.Profiles IAssetMetaFile.AddProfile(string, AssetProfile) IAssetMetaFile.RemoveProfile(string) IAssetMetaFile.GetProfileOrDefault(string) IAssetMetaFile.Export(ExportContext) IAssetMetaFile.GetExportOutputPath(ExportContext) IAssetMetaFile.ExtensionMetafile IAssetMetaFile.ExtensionExported Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public interface IAssetWithSource : IAssetMetaFile Properties NeedsToImportData Gets a value indicating whether the source data needs to be imported when exporting. Declaration bool NeedsToImportData { get; } Property Value Type Description bool Source Gets or sets the asset resource info. Declaration IAssetSource Source { get; set; } Property Value Type Description IAssetSource SourceFile Gets or sets the resource file. Declaration ContentFile SourceFile { get; set; } Property Value Type Description ContentFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.InvalidMsdfCharsetDefinitionException.html": {
    "href": "api/Evergine.Assets.Exporters.InvalidMsdfCharsetDefinitionException.html",
    "title": "Class InvalidMsdfCharsetDefinitionException | Evergine Doc",
    "keywords": "Class InvalidMsdfCharsetDefinitionException Exception being thrown for invalid MSDF charset definitions. Inheritance object Exception InvalidMsdfCharsetDefinitionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax [Serializable] public class InvalidMsdfCharsetDefinitionException : Exception, ISerializable Constructors InvalidMsdfCharsetDefinitionException() Initializes a new instance of the InvalidMsdfCharsetDefinitionException class. Declaration public InvalidMsdfCharsetDefinitionException() InvalidMsdfCharsetDefinitionException(SerializationInfo, StreamingContext) Initializes a new instance of the InvalidMsdfCharsetDefinitionException class. Declaration protected InvalidMsdfCharsetDefinitionException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. InvalidMsdfCharsetDefinitionException(string) Initializes a new instance of the InvalidMsdfCharsetDefinitionException class. Declaration public InvalidMsdfCharsetDefinitionException(string message) Parameters Type Name Description string message The message that describes the error. InvalidMsdfCharsetDefinitionException(string, Exception) Initializes a new instance of the InvalidMsdfCharsetDefinitionException class. Declaration public InvalidMsdfCharsetDefinitionException(string message, Exception inner) Parameters Type Name Description string message The message that describes the error. Exception inner The exception that is the cause of the current exception. Implements ISerializable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.MaterialExporter.html": {
    "href": "api/Evergine.Assets.Exporters.MaterialExporter.html",
    "title": "Class MaterialExporter | Evergine Doc",
    "keywords": "Class MaterialExporter Material exporter class. Inheritance object BaseAssetExporter<MaterialMetaFile, MaterialProfile> AssetExporter<MaterialMetaFile, MaterialProfile> MaterialExporter Implements IAssetExporter Inherited Members AssetExporter<MaterialMetaFile, MaterialProfile>.GetExportFilePath(MaterialMetaFile, MaterialProfile, ExportContext) AssetExporter<MaterialMetaFile, MaterialProfile>.ExportOutputFile(MaterialMetaFile, MaterialProfile, ExportContext) AssetExporter<MaterialMetaFile, MaterialProfile>.GenerateAssetParts(MaterialMetaFile, MaterialProfile, ExportContext) BaseAssetExporter<MaterialMetaFile, MaterialProfile>.Extension BaseAssetExporter<MaterialMetaFile, MaterialProfile>.BaseExport(MaterialMetaFile, MaterialProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class MaterialExporter : AssetExporter<MaterialMetaFile, MaterialProfile>, IAssetExporter Properties Extension Gets the material export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<MaterialMetaFile, MaterialProfile>.Extension Methods GenerateAssetParts(MaterialMetaFile, MaterialProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(MaterialMetaFile metafile, MaterialProfile profile, ExportContext exportContext) Parameters Type Name Description MaterialMetaFile metafile The meta file. MaterialProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<MaterialMetaFile, MaterialProfile>.GenerateAssetParts(MaterialMetaFile, MaterialProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.MaterialMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.MaterialMetaFile.html",
    "title": "Class MaterialMetaFile | Evergine Doc",
    "keywords": "Class MaterialMetaFile Material meta file class. Inheritance object IdentifiableObject AssetMetafile<MaterialProfile, MaterialExporter> MaterialMetaFile Implements IAssetMetaFile Inherited Members AssetMetafile<MaterialProfile, MaterialExporter>.ExtensionMetafile AssetMetafile<MaterialProfile, MaterialExporter>.ExtensionExported AssetMetafile<MaterialProfile, MaterialExporter>.Name AssetMetafile<MaterialProfile, MaterialExporter>.ExportAsRaw AssetMetafile<MaterialProfile, MaterialExporter>.DefaultProfile AssetMetafile<MaterialProfile, MaterialExporter>.Profiles AssetMetafile<MaterialProfile, MaterialExporter>.Exporter AssetMetafile<MaterialProfile, MaterialExporter>.GetProfile(string) AssetMetafile<MaterialProfile, MaterialExporter>.AddProfile(string, MaterialProfile) AssetMetafile<MaterialProfile, MaterialExporter>.RemoveProfile(string) AssetMetafile<MaterialProfile, MaterialExporter>.GetProfileOrDefault(string) AssetMetafile<MaterialProfile, MaterialExporter>.Export(ExportContext) AssetMetafile<MaterialProfile, MaterialExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class MaterialMetaFile : AssetMetafile<MaterialProfile, MaterialExporter>, IAssetMetaFile Constructors MaterialMetaFile() Initializes a new instance of the MaterialMetaFile class. Declaration public MaterialMetaFile() MaterialMetaFile(Material) Initializes a new instance of the MaterialMetaFile class. Declaration public MaterialMetaFile(Material material) Parameters Type Name Description Material material Material instance. Fields Extension The Material extension. Declaration public static readonly string Extension Field Value Type Description string MaterialInfo The Material info part. Declaration public MaterialInfoPart MaterialInfo Field Value Type Description MaterialInfoPart Properties ExtensionMetafile Gets the material extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<MaterialProfile, MaterialExporter>.ExtensionMetafile Methods UpdateFromMaterial(Material) Updates the metafile from a material. Declaration public void UpdateFromMaterial(Material material) Parameters Type Name Description Material material The target material. Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.MaterialProfile.html": {
    "href": "api/Evergine.Assets.Exporters.MaterialProfile.html",
    "title": "Class MaterialProfile | Evergine Doc",
    "keywords": "Class MaterialProfile Material profile class. Inheritance object AssetProfile MaterialProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class MaterialProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ModelExporter.html": {
    "href": "api/Evergine.Assets.Exporters.ModelExporter.html",
    "title": "Class ModelExporter | Evergine Doc",
    "keywords": "Class ModelExporter The model exporter. Inheritance object BaseAssetExporter<ModelMetaFile, ModelProfile> AssetExporter<ModelMetaFile, ModelProfile> ModelExporter Implements IAssetExporter Inherited Members AssetExporter<ModelMetaFile, ModelProfile>.GetExportFilePath(ModelMetaFile, ModelProfile, ExportContext) AssetExporter<ModelMetaFile, ModelProfile>.ExportOutputFile(ModelMetaFile, ModelProfile, ExportContext) AssetExporter<ModelMetaFile, ModelProfile>.GenerateAssetParts(ModelMetaFile, ModelProfile, ExportContext) BaseAssetExporter<ModelMetaFile, ModelProfile>.Extension BaseAssetExporter<ModelMetaFile, ModelProfile>.BaseExport(ModelMetaFile, ModelProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ModelExporter : AssetExporter<ModelMetaFile, ModelProfile>, IAssetExporter Properties Extension Gets the asset export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<ModelMetaFile, ModelProfile>.Extension Methods GenerateAssetParts(ModelMetaFile, ModelProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(ModelMetaFile asset, ModelProfile profile, ExportContext exportContext) Parameters Type Name Description ModelMetaFile asset ModelProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<ModelMetaFile, ModelProfile>.GenerateAssetParts(ModelMetaFile, ModelProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ModelMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.ModelMetaFile.html",
    "title": "Class ModelMetaFile | Evergine Doc",
    "keywords": "Class ModelMetaFile The model metafile class. Inheritance object IdentifiableObject AssetMetafile<ModelProfile, ModelExporter> AssetMetaFileWithSource<ModelSource, ModelProfile, ModelExporter> ModelMetaFile Implements IAssetWithSource IAssetMetaFile Inherited Members AssetMetaFileWithSource<ModelSource, ModelProfile, ModelExporter>.Source AssetMetaFileWithSource<ModelSource, ModelProfile, ModelExporter>.SourceFile AssetMetaFileWithSource<ModelSource, ModelProfile, ModelExporter>.NeedsToImportData AssetMetafile<ModelProfile, ModelExporter>.ExtensionMetafile AssetMetafile<ModelProfile, ModelExporter>.ExtensionExported AssetMetafile<ModelProfile, ModelExporter>.Name AssetMetafile<ModelProfile, ModelExporter>.ExportAsRaw AssetMetafile<ModelProfile, ModelExporter>.DefaultProfile AssetMetafile<ModelProfile, ModelExporter>.Profiles AssetMetafile<ModelProfile, ModelExporter>.Exporter AssetMetafile<ModelProfile, ModelExporter>.GetProfile(string) AssetMetafile<ModelProfile, ModelExporter>.AddProfile(string, ModelProfile) AssetMetafile<ModelProfile, ModelExporter>.RemoveProfile(string) AssetMetafile<ModelProfile, ModelExporter>.GetProfileOrDefault(string) AssetMetafile<ModelProfile, ModelExporter>.Export(ExportContext) AssetMetafile<ModelProfile, ModelExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ModelMetaFile : AssetMetaFileWithSource<ModelSource, ModelProfile, ModelExporter>, IAssetWithSource, IAssetMetaFile Constructors ModelMetaFile() Initializes a new instance of the ModelMetaFile class. Declaration public ModelMetaFile() ModelMetaFile(ModelSource) Initializes a new instance of the ModelMetaFile class. Declaration public ModelMetaFile(ModelSource resource) Parameters Type Name Description ModelSource resource The resource. Fields Extension The texture extension. Declaration public static readonly string Extension Field Value Type Description string Properties Clips Gets or sets the animations. Declaration public List<AnimationClipModel> Clips { get; set; } Property Value Type Description List<AnimationClipModel> ExportAnimations Gets or sets a value indicating whether this instance is animated. Declaration public bool ExportAnimations { get; set; } Property Value Type Description bool ExtensionMetafile Gets the model meta file extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<ModelProfile, ModelExporter>.ExtensionMetafile GenerateTangentSpace Gets or sets a value indicating whether [generate tangent space]. Declaration public bool GenerateTangentSpace { get; set; } Property Value Type Description bool SwapWindingOrder Gets or sets a value indicating whether [swap winding order]. Declaration public bool SwapWindingOrder { get; set; } Property Value Type Description bool Implements IAssetWithSource IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ModelProfile.html": {
    "href": "api/Evergine.Assets.Exporters.ModelProfile.html",
    "title": "Class ModelProfile | Evergine Doc",
    "keywords": "Class ModelProfile The model profile class. Inheritance object AssetProfile ModelProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ModelProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ParticlesExporter.html": {
    "href": "api/Evergine.Assets.Exporters.ParticlesExporter.html",
    "title": "Class ParticlesExporter | Evergine Doc",
    "keywords": "Class ParticlesExporter Material exporter class. Inheritance object BaseAssetExporter<ParticlesMetaFile, ParticlesProfile> AssetExporter<ParticlesMetaFile, ParticlesProfile> ParticlesExporter Implements IAssetExporter Inherited Members AssetExporter<ParticlesMetaFile, ParticlesProfile>.GetExportFilePath(ParticlesMetaFile, ParticlesProfile, ExportContext) AssetExporter<ParticlesMetaFile, ParticlesProfile>.ExportOutputFile(ParticlesMetaFile, ParticlesProfile, ExportContext) AssetExporter<ParticlesMetaFile, ParticlesProfile>.GenerateAssetParts(ParticlesMetaFile, ParticlesProfile, ExportContext) BaseAssetExporter<ParticlesMetaFile, ParticlesProfile>.Extension BaseAssetExporter<ParticlesMetaFile, ParticlesProfile>.BaseExport(ParticlesMetaFile, ParticlesProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ParticlesExporter : AssetExporter<ParticlesMetaFile, ParticlesProfile>, IAssetExporter Properties Extension Gets the material export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<ParticlesMetaFile, ParticlesProfile>.Extension Methods GenerateAssetParts(ParticlesMetaFile, ParticlesProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(ParticlesMetaFile metafile, ParticlesProfile profile, ExportContext exportContext) Parameters Type Name Description ParticlesMetaFile metafile The meta file. ParticlesProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<ParticlesMetaFile, ParticlesProfile>.GenerateAssetParts(ParticlesMetaFile, ParticlesProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ParticlesMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.ParticlesMetaFile.html",
    "title": "Class ParticlesMetaFile | Evergine Doc",
    "keywords": "Class ParticlesMetaFile Particle system meta file class. Inheritance object IdentifiableObject AssetMetafile<ParticlesProfile, ParticlesExporter> ParticlesMetaFile Implements IAssetMetaFile Inherited Members AssetMetafile<ParticlesProfile, ParticlesExporter>.ExtensionMetafile AssetMetafile<ParticlesProfile, ParticlesExporter>.ExtensionExported AssetMetafile<ParticlesProfile, ParticlesExporter>.Name AssetMetafile<ParticlesProfile, ParticlesExporter>.ExportAsRaw AssetMetafile<ParticlesProfile, ParticlesExporter>.DefaultProfile AssetMetafile<ParticlesProfile, ParticlesExporter>.Profiles AssetMetafile<ParticlesProfile, ParticlesExporter>.Exporter AssetMetafile<ParticlesProfile, ParticlesExporter>.GetProfile(string) AssetMetafile<ParticlesProfile, ParticlesExporter>.AddProfile(string, ParticlesProfile) AssetMetafile<ParticlesProfile, ParticlesExporter>.RemoveProfile(string) AssetMetafile<ParticlesProfile, ParticlesExporter>.GetProfileOrDefault(string) AssetMetafile<ParticlesProfile, ParticlesExporter>.Export(ExportContext) AssetMetafile<ParticlesProfile, ParticlesExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ParticlesMetaFile : AssetMetafile<ParticlesProfile, ParticlesExporter>, IAssetMetaFile Constructors ParticlesMetaFile() Initializes a new instance of the ParticlesMetaFile class. Declaration public ParticlesMetaFile() ParticlesMetaFile(params ParticleEmitterDescription[]) Initializes a new instance of the ParticlesMetaFile class. Declaration public ParticlesMetaFile(params ParticleEmitterDescription[] emitters) Parameters Type Name Description ParticleEmitterDescription[] emitters The particle system emitters. ParticlesMetaFile(IEnumerable<ParticleEmitterDescription>) Initializes a new instance of the ParticlesMetaFile class. Declaration public ParticlesMetaFile(IEnumerable<ParticleEmitterDescription> emitters) Parameters Type Name Description IEnumerable<ParticleEmitterDescription> emitters The particle system emitters. Fields Emitters The particle system emitters. Declaration public List<ParticleEmitterDescription> Emitters Field Value Type Description List<ParticleEmitterDescription> Extension The Material extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the material extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<ParticlesProfile, ParticlesExporter>.ExtensionMetafile Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ParticlesProfile.html": {
    "href": "api/Evergine.Assets.Exporters.ParticlesProfile.html",
    "title": "Class ParticlesProfile | Evergine Doc",
    "keywords": "Class ParticlesProfile Material profile class. Inheritance object AssetProfile ParticlesProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ParticlesProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.PostProcessingGraphExporter.html": {
    "href": "api/Evergine.Assets.Exporters.PostProcessingGraphExporter.html",
    "title": "Class PostProcessingGraphExporter | Evergine Doc",
    "keywords": "Class PostProcessingGraphExporter The post-processing exporter class. Inheritance object BaseAssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile> AssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile> PostProcessingGraphExporter Implements IAssetExporter Inherited Members AssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>.GetExportFilePath(PostProcessingGraphMetaFile, PostProcessingGraphProfile, ExportContext) AssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>.ExportOutputFile(PostProcessingGraphMetaFile, PostProcessingGraphProfile, ExportContext) AssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>.GenerateAssetParts(PostProcessingGraphMetaFile, PostProcessingGraphProfile, ExportContext) BaseAssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>.Extension BaseAssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>.BaseExport(PostProcessingGraphMetaFile, PostProcessingGraphProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class PostProcessingGraphExporter : AssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>, IAssetExporter Properties Extension Gets the post-processing stack export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>.Extension Methods GenerateAssetParts(PostProcessingGraphMetaFile, PostProcessingGraphProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(PostProcessingGraphMetaFile metafile, PostProcessingGraphProfile profile, ExportContext exportContext) Parameters Type Name Description PostProcessingGraphMetaFile metafile The meta file. PostProcessingGraphProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<PostProcessingGraphMetaFile, PostProcessingGraphProfile>.GenerateAssetParts(PostProcessingGraphMetaFile, PostProcessingGraphProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.PostProcessingGraphMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.PostProcessingGraphMetaFile.html",
    "title": "Class PostProcessingGraphMetaFile | Evergine Doc",
    "keywords": "Class PostProcessingGraphMetaFile Post-processing graph meta file. Inheritance object IdentifiableObject AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter> PostProcessingGraphMetaFile Implements IAssetMetaFile Inherited Members AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.ExtensionMetafile AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.ExtensionExported AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.Name AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.ExportAsRaw AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.DefaultProfile AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.Profiles AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.Exporter AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.GetProfile(string) AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.AddProfile(string, PostProcessingGraphProfile) AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.RemoveProfile(string) AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.GetProfileOrDefault(string) AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.Export(ExportContext) AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class PostProcessingGraphMetaFile : AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>, IAssetMetaFile Constructors PostProcessingGraphMetaFile() Initializes a new instance of the PostProcessingGraphMetaFile class. Declaration public PostProcessingGraphMetaFile() PostProcessingGraphMetaFile(PostProcessingGraphDescription) Initializes a new instance of the PostProcessingGraphMetaFile class. Declaration public PostProcessingGraphMetaFile(PostProcessingGraphDescription graphDescription) Parameters Type Name Description PostProcessingGraphDescription graphDescription The post-processing graph instance. Fields Extension The post-processing graph meta file extension. Declaration public static readonly string Extension Field Value Type Description string PostProcessingGraphInfo The post-processing graph info. Declaration public PostProcessingGraphInfoPart PostProcessingGraphInfo Field Value Type Description PostProcessingGraphInfoPart Properties ExtensionMetafile Gets the extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<PostProcessingGraphProfile, PostProcessingGraphExporter>.ExtensionMetafile Methods UpdatePostProcessingGraph(PostProcessingGraphDescription) Updates the post-processing graph. Declaration public void UpdatePostProcessingGraph(PostProcessingGraphDescription graphDescription) Parameters Type Name Description PostProcessingGraphDescription graphDescription New post-processing graph. Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.PostProcessingGraphProfile.html": {
    "href": "api/Evergine.Assets.Exporters.PostProcessingGraphProfile.html",
    "title": "Class PostProcessingGraphProfile | Evergine Doc",
    "keywords": "Class PostProcessingGraphProfile The post-processing graph profile class. Inheritance object AssetProfile PostProcessingGraphProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class PostProcessingGraphProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.Prefab.html": {
    "href": "api/Evergine.Assets.Exporters.Prefab.html",
    "title": "Namespace Evergine.Assets.Exporters.Prefab | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Exporters.Prefab Classes PrefabExporter The prefab asset exporter. PrefabMetaFile The prefab asset metafile. PrefabProfile The prefab profile."
  },
  "api/Evergine.Assets.Exporters.Prefab.PrefabExporter.html": {
    "href": "api/Evergine.Assets.Exporters.Prefab.PrefabExporter.html",
    "title": "Class PrefabExporter | Evergine Doc",
    "keywords": "Class PrefabExporter The prefab asset exporter. Inheritance object BaseAssetExporter<PrefabMetaFile, PrefabProfile> PrefabExporter Implements IAssetExporter Inherited Members BaseAssetExporter<PrefabMetaFile, PrefabProfile>.Extension BaseAssetExporter<PrefabMetaFile, PrefabProfile>.GetExportFilePath(PrefabMetaFile, PrefabProfile, ExportContext) BaseAssetExporter<PrefabMetaFile, PrefabProfile>.BaseExport(PrefabMetaFile, PrefabProfile, ExportContext) BaseAssetExporter<PrefabMetaFile, PrefabProfile>.ExportOutputFile(PrefabMetaFile, PrefabProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters.Prefab Assembly: Evergine.Assets.dll Syntax public class PrefabExporter : BaseAssetExporter<PrefabMetaFile, PrefabProfile>, IAssetExporter Properties Extension Gets the asset export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<PrefabMetaFile, PrefabProfile>.Extension Methods ExportOutputFile(PrefabMetaFile, PrefabProfile, ExportContext) Exports the assets. Declaration protected override Task<ExportResult> ExportOutputFile(PrefabMetaFile asset, PrefabProfile profile, ExportContext exportContext) Parameters Type Name Description PrefabMetaFile asset The asset meta file. PrefabProfile profile The profile object. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> Awaitable task of the operation with the result of the export process. Overrides BaseAssetExporter<PrefabMetaFile, PrefabProfile>.ExportOutputFile(PrefabMetaFile, PrefabProfile, ExportContext) GetExportFilePath(PrefabMetaFile, PrefabProfile, ExportContext) Gets the export file path. Declaration public override string GetExportFilePath(PrefabMetaFile asset, PrefabProfile profile, ExportContext exportContext) Parameters Type Name Description PrefabMetaFile asset The asset. PrefabProfile profile The profile. ExportContext exportContext The export context. Returns Type Description string The export file path. Overrides BaseAssetExporter<PrefabMetaFile, PrefabProfile>.GetExportFilePath(PrefabMetaFile, PrefabProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.Prefab.PrefabMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.Prefab.PrefabMetaFile.html",
    "title": "Class PrefabMetaFile | Evergine Doc",
    "keywords": "Class PrefabMetaFile The prefab asset metafile. Inheritance object IdentifiableObject AssetMetafile<PrefabProfile, PrefabExporter> AssetMetaFileWithSource<PrefabSource, PrefabProfile, PrefabExporter> PrefabMetaFile Implements IAssetWithSource IAssetMetaFile Inherited Members AssetMetaFileWithSource<PrefabSource, PrefabProfile, PrefabExporter>.Source AssetMetaFileWithSource<PrefabSource, PrefabProfile, PrefabExporter>.SourceFile AssetMetaFileWithSource<PrefabSource, PrefabProfile, PrefabExporter>.NeedsToImportData AssetMetafile<PrefabProfile, PrefabExporter>.ExtensionMetafile AssetMetafile<PrefabProfile, PrefabExporter>.ExtensionExported AssetMetafile<PrefabProfile, PrefabExporter>.Name AssetMetafile<PrefabProfile, PrefabExporter>.ExportAsRaw AssetMetafile<PrefabProfile, PrefabExporter>.DefaultProfile AssetMetafile<PrefabProfile, PrefabExporter>.Profiles AssetMetafile<PrefabProfile, PrefabExporter>.Exporter AssetMetafile<PrefabProfile, PrefabExporter>.GetProfile(string) AssetMetafile<PrefabProfile, PrefabExporter>.AddProfile(string, PrefabProfile) AssetMetafile<PrefabProfile, PrefabExporter>.RemoveProfile(string) AssetMetafile<PrefabProfile, PrefabExporter>.GetProfileOrDefault(string) AssetMetafile<PrefabProfile, PrefabExporter>.Export(ExportContext) AssetMetafile<PrefabProfile, PrefabExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters.Prefab Assembly: Evergine.Assets.dll Syntax public class PrefabMetaFile : AssetMetaFileWithSource<PrefabSource, PrefabProfile, PrefabExporter>, IAssetWithSource, IAssetMetaFile Constructors PrefabMetaFile() Initializes a new instance of the PrefabMetaFile class. Declaration public PrefabMetaFile() PrefabMetaFile(PrefabSource) Initializes a new instance of the PrefabMetaFile class. Declaration public PrefabMetaFile(PrefabSource source) Parameters Type Name Description PrefabSource source The prefab source. Fields Extension The Prefab extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<PrefabProfile, PrefabExporter>.ExtensionMetafile PrefabData Gets the prefab data part. Declaration [EvergineMember] public PrefabDataPart PrefabData { get; } Property Value Type Description PrefabDataPart Implements IAssetWithSource IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.Prefab.PrefabProfile.html": {
    "href": "api/Evergine.Assets.Exporters.Prefab.PrefabProfile.html",
    "title": "Class PrefabProfile | Evergine Doc",
    "keywords": "Class PrefabProfile The prefab profile. Inheritance object AssetProfile PrefabProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters.Prefab Assembly: Evergine.Assets.dll Syntax public class PrefabProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ReflectionProbeExporter.html": {
    "href": "api/Evergine.Assets.Exporters.ReflectionProbeExporter.html",
    "title": "Class ReflectionProbeExporter | Evergine Doc",
    "keywords": "Class ReflectionProbeExporter The texture exporter class. Inheritance object BaseAssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile> AssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile> ReflectionProbeExporter Implements IAssetExporter Inherited Members AssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>.GetExportFilePath(ReflectionProbeMetaFile, ReflectionProbeProfile, ExportContext) AssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>.ExportOutputFile(ReflectionProbeMetaFile, ReflectionProbeProfile, ExportContext) AssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>.GenerateAssetParts(ReflectionProbeMetaFile, ReflectionProbeProfile, ExportContext) BaseAssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>.Extension BaseAssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>.BaseExport(ReflectionProbeMetaFile, ReflectionProbeProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ReflectionProbeExporter : AssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>, IAssetExporter Fields IrradianceSuffix The irradiance suffix name. Declaration protected static readonly string IrradianceSuffix Field Value Type Description string RadianceSuffix The radiance suffix name. Declaration protected static readonly string RadianceSuffix Field Value Type Description string Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>.Extension Methods GenerateAssetParts(ReflectionProbeMetaFile, ReflectionProbeProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(ReflectionProbeMetaFile metafile, ReflectionProbeProfile profile, ExportContext exportContext) Parameters Type Name Description ReflectionProbeMetaFile metafile The meta file. ReflectionProbeProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<ReflectionProbeMetaFile, ReflectionProbeProfile>.GenerateAssetParts(ReflectionProbeMetaFile, ReflectionProbeProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ReflectionProbeExtension.html": {
    "href": "api/Evergine.Assets.Exporters.ReflectionProbeExtension.html",
    "title": "Class ReflectionProbeExtension | Evergine Doc",
    "keywords": "Class ReflectionProbeExtension The texture asset helper class. Inheritance object ReflectionProbeExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public static class ReflectionProbeExtension Methods AssetExists(ReflectionProbe, ContentDirectory, string) Indicates whether scene reflection probe file was generated. Declaration public static bool AssetExists(this ReflectionProbe reflectionProbe, ContentDirectory parentDirectory, string name) Parameters Type Name Description ReflectionProbe reflectionProbe The reflection probe to save. ContentDirectory parentDirectory The parent directory to save. string name The name of the asset. Returns Type Description bool True whether the scene reflection probe file was generated or False in otherwise. SaveAsset(ReflectionProbe, GraphicsContext, ContentDirectory, string) Save a texture in a file. Declaration public static void SaveAsset(this ReflectionProbe reflectionProbe, GraphicsContext context, ContentDirectory parentDirectory, string name) Parameters Type Name Description ReflectionProbe reflectionProbe The reflection probe to save. GraphicsContext context The graphics context. ContentDirectory parentDirectory The parent directory to save. string name The name of the asset."
  },
  "api/Evergine.Assets.Exporters.ReflectionProbeMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.ReflectionProbeMetaFile.html",
    "title": "Class ReflectionProbeMetaFile | Evergine Doc",
    "keywords": "Class ReflectionProbeMetaFile The Texture Metafile class. Inheritance object IdentifiableObject AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter> AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter> ReflectionProbeMetaFile Implements IAssetWithDirectory IAssetMetaFile Inherited Members AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.SourceDirectoryName AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.SourceDirectory AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.Assets AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.FindAssetItem(string) AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.FindAssetItem<T>(string, bool) AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.FindAssetItem(string, Type, bool) AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.EnumerateAllAssets() AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.FindAssetItems<T>() AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.FindAssetItems(Type) AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.AddAssetItem(AssetItem) AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>.ChecksDirectoryIntegrity(ContentDirectory) AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.ExtensionMetafile AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.ExtensionExported AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.Name AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.ExportAsRaw AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.DefaultProfile AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.Profiles AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.Exporter AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.GetProfile(string) AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.AddProfile(string, ReflectionProbeProfile) AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.RemoveProfile(string) AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.GetProfileOrDefault(string) AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.Export(ExportContext) AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ReflectionProbeMetaFile : AssetMetaFileWithDirectory<ReflectionProbeProfile, ReflectionProbeExporter>, IAssetWithDirectory, IAssetMetaFile Constructors ReflectionProbeMetaFile() Initializes a new instance of the ReflectionProbeMetaFile class. Declaration public ReflectionProbeMetaFile() ReflectionProbeMetaFile(ContentDirectory) Initializes a new instance of the ReflectionProbeMetaFile class. Declaration public ReflectionProbeMetaFile(ContentDirectory assetDirectory) Parameters Type Name Description ContentDirectory assetDirectory The asset directory. Fields Extension The texture extension. Declaration public static readonly string Extension Field Value Type Description string SHCoefficients The Spherical Harmonics coeficients. Declaration public Vector4[] SHCoefficients Field Value Type Description Vector4[] Properties ExtensionMetafile Gets the file extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<ReflectionProbeProfile, ReflectionProbeExporter>.ExtensionMetafile Implements IAssetWithDirectory IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.ReflectionProbeProfile.html": {
    "href": "api/Evergine.Assets.Exporters.ReflectionProbeProfile.html",
    "title": "Class ReflectionProbeProfile | Evergine Doc",
    "keywords": "Class ReflectionProbeProfile The Reflection Probe Profile class. Inheritance object AssetProfile ReflectionProbeProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class ReflectionProbeProfile : AssetProfile Constructors ReflectionProbeProfile() Initializes a new instance of the ReflectionProbeProfile class. Declaration public ReflectionProbeProfile() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.RenderLayerExporter.html": {
    "href": "api/Evergine.Assets.Exporters.RenderLayerExporter.html",
    "title": "Class RenderLayerExporter | Evergine Doc",
    "keywords": "Class RenderLayerExporter The render layer exporter class. Inheritance object BaseAssetExporter<RenderLayerMetaFile, RenderLayerProfile> AssetExporter<RenderLayerMetaFile, RenderLayerProfile> RenderLayerExporter Implements IAssetExporter Inherited Members AssetExporter<RenderLayerMetaFile, RenderLayerProfile>.GetExportFilePath(RenderLayerMetaFile, RenderLayerProfile, ExportContext) AssetExporter<RenderLayerMetaFile, RenderLayerProfile>.ExportOutputFile(RenderLayerMetaFile, RenderLayerProfile, ExportContext) AssetExporter<RenderLayerMetaFile, RenderLayerProfile>.GenerateAssetParts(RenderLayerMetaFile, RenderLayerProfile, ExportContext) BaseAssetExporter<RenderLayerMetaFile, RenderLayerProfile>.Extension BaseAssetExporter<RenderLayerMetaFile, RenderLayerProfile>.BaseExport(RenderLayerMetaFile, RenderLayerProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class RenderLayerExporter : AssetExporter<RenderLayerMetaFile, RenderLayerProfile>, IAssetExporter Properties Extension Gets the render layer export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<RenderLayerMetaFile, RenderLayerProfile>.Extension Methods GenerateAssetParts(RenderLayerMetaFile, RenderLayerProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(RenderLayerMetaFile metafile, RenderLayerProfile profile, ExportContext exportContext) Parameters Type Name Description RenderLayerMetaFile metafile The meta file. RenderLayerProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<RenderLayerMetaFile, RenderLayerProfile>.GenerateAssetParts(RenderLayerMetaFile, RenderLayerProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.RenderLayerMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.RenderLayerMetaFile.html",
    "title": "Class RenderLayerMetaFile | Evergine Doc",
    "keywords": "Class RenderLayerMetaFile The render layer meta file class. Inheritance object IdentifiableObject AssetMetafile<RenderLayerProfile, RenderLayerExporter> RenderLayerMetaFile Implements IAssetMetaFile Inherited Members AssetMetafile<RenderLayerProfile, RenderLayerExporter>.ExtensionMetafile AssetMetafile<RenderLayerProfile, RenderLayerExporter>.ExtensionExported AssetMetafile<RenderLayerProfile, RenderLayerExporter>.Name AssetMetafile<RenderLayerProfile, RenderLayerExporter>.ExportAsRaw AssetMetafile<RenderLayerProfile, RenderLayerExporter>.DefaultProfile AssetMetafile<RenderLayerProfile, RenderLayerExporter>.Profiles AssetMetafile<RenderLayerProfile, RenderLayerExporter>.Exporter AssetMetafile<RenderLayerProfile, RenderLayerExporter>.GetProfile(string) AssetMetafile<RenderLayerProfile, RenderLayerExporter>.AddProfile(string, RenderLayerProfile) AssetMetafile<RenderLayerProfile, RenderLayerExporter>.RemoveProfile(string) AssetMetafile<RenderLayerProfile, RenderLayerExporter>.GetProfileOrDefault(string) AssetMetafile<RenderLayerProfile, RenderLayerExporter>.Export(ExportContext) AssetMetafile<RenderLayerProfile, RenderLayerExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class RenderLayerMetaFile : AssetMetafile<RenderLayerProfile, RenderLayerExporter>, IAssetMetaFile Constructors RenderLayerMetaFile() Initializes a new instance of the RenderLayerMetaFile class. Declaration public RenderLayerMetaFile() RenderLayerMetaFile(RenderLayerDescription) Initializes a new instance of the RenderLayerMetaFile class. Declaration public RenderLayerMetaFile(RenderLayerDescription renderLayerDescription) Parameters Type Name Description RenderLayerDescription renderLayerDescription The render layer description for the asset. Fields Extension The Render Layer metafile extension. Declaration public static readonly string Extension Field Value Type Description string RenderLayerInfo The Render Layer info. Declaration public RenderLayerInfoPart RenderLayerInfo Field Value Type Description RenderLayerInfoPart Properties ExtensionMetafile Gets the extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<RenderLayerProfile, RenderLayerExporter>.ExtensionMetafile Methods UpdateRenderLayerDescription(RenderLayerDescription) Updates the render layer description. Declaration public void UpdateRenderLayerDescription(RenderLayerDescription renderLayerDescription) Parameters Type Name Description RenderLayerDescription renderLayerDescription The render layer description. Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.RenderLayerProfile.html": {
    "href": "api/Evergine.Assets.Exporters.RenderLayerProfile.html",
    "title": "Class RenderLayerProfile | Evergine Doc",
    "keywords": "Class RenderLayerProfile The render layer profile class. Inheritance object AssetProfile RenderLayerProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class RenderLayerProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SamplerExporter.html": {
    "href": "api/Evergine.Assets.Exporters.SamplerExporter.html",
    "title": "Class SamplerExporter | Evergine Doc",
    "keywords": "Class SamplerExporter The Sampler exporter class. Inheritance object BaseAssetExporter<SamplerMetaFile, SamplerProfile> AssetExporter<SamplerMetaFile, SamplerProfile> SamplerExporter Implements IAssetExporter Inherited Members AssetExporter<SamplerMetaFile, SamplerProfile>.GetExportFilePath(SamplerMetaFile, SamplerProfile, ExportContext) AssetExporter<SamplerMetaFile, SamplerProfile>.ExportOutputFile(SamplerMetaFile, SamplerProfile, ExportContext) AssetExporter<SamplerMetaFile, SamplerProfile>.GenerateAssetParts(SamplerMetaFile, SamplerProfile, ExportContext) BaseAssetExporter<SamplerMetaFile, SamplerProfile>.Extension BaseAssetExporter<SamplerMetaFile, SamplerProfile>.BaseExport(SamplerMetaFile, SamplerProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SamplerExporter : AssetExporter<SamplerMetaFile, SamplerProfile>, IAssetExporter Properties Extension Gets the sampler export extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<SamplerMetaFile, SamplerProfile>.Extension Methods GenerateAssetParts(SamplerMetaFile, SamplerProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(SamplerMetaFile metafile, SamplerProfile profile, ExportContext exportContext) Parameters Type Name Description SamplerMetaFile metafile The meta file. SamplerProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<SamplerMetaFile, SamplerProfile>.GenerateAssetParts(SamplerMetaFile, SamplerProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SamplerMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.SamplerMetaFile.html",
    "title": "Class SamplerMetaFile | Evergine Doc",
    "keywords": "Class SamplerMetaFile Sampler meta file. Inheritance object IdentifiableObject AssetMetafile<SamplerProfile, SamplerExporter> SamplerMetaFile Implements IAssetMetaFile Inherited Members AssetMetafile<SamplerProfile, SamplerExporter>.ExtensionMetafile AssetMetafile<SamplerProfile, SamplerExporter>.ExtensionExported AssetMetafile<SamplerProfile, SamplerExporter>.Name AssetMetafile<SamplerProfile, SamplerExporter>.ExportAsRaw AssetMetafile<SamplerProfile, SamplerExporter>.DefaultProfile AssetMetafile<SamplerProfile, SamplerExporter>.Profiles AssetMetafile<SamplerProfile, SamplerExporter>.Exporter AssetMetafile<SamplerProfile, SamplerExporter>.GetProfile(string) AssetMetafile<SamplerProfile, SamplerExporter>.AddProfile(string, SamplerProfile) AssetMetafile<SamplerProfile, SamplerExporter>.RemoveProfile(string) AssetMetafile<SamplerProfile, SamplerExporter>.GetProfileOrDefault(string) AssetMetafile<SamplerProfile, SamplerExporter>.Export(ExportContext) AssetMetafile<SamplerProfile, SamplerExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SamplerMetaFile : AssetMetafile<SamplerProfile, SamplerExporter>, IAssetMetaFile Constructors SamplerMetaFile() Initializes a new instance of the SamplerMetaFile class. Declaration public SamplerMetaFile() SamplerMetaFile(SamplerStateDescription) Initializes a new instance of the SamplerMetaFile class. Declaration public SamplerMetaFile(SamplerStateDescription samplerDescription) Parameters Type Name Description SamplerStateDescription samplerDescription SamplerState instance. Fields Extension The Sampler meta file extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the sampler extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<SamplerProfile, SamplerExporter>.ExtensionMetafile Implements IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SamplerProfile.html": {
    "href": "api/Evergine.Assets.Exporters.SamplerProfile.html",
    "title": "Class SamplerProfile | Evergine Doc",
    "keywords": "Class SamplerProfile The sampler profile class. Inheritance object AssetProfile SamplerProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SamplerProfile : AssetProfile Constructors SamplerProfile() Initializes a new instance of the SamplerProfile class. Declaration public SamplerProfile() SamplerProfile(SamplerStateDescription) Initializes a new instance of the SamplerProfile class. Declaration public SamplerProfile(SamplerStateDescription samplerDescription) Parameters Type Name Description SamplerStateDescription samplerDescription Sampler State Description. Fields SamplerInfo The sampler info. Declaration public SamplerInfoPart SamplerInfo Field Value Type Description SamplerInfoPart Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SceneExporter.html": {
    "href": "api/Evergine.Assets.Exporters.SceneExporter.html",
    "title": "Class SceneExporter | Evergine Doc",
    "keywords": "Class SceneExporter The scene exporter class. Inheritance object BaseAssetExporter<SceneMetaFile, SceneProfile> SceneExporter Implements IAssetExporter Inherited Members BaseAssetExporter<SceneMetaFile, SceneProfile>.Extension BaseAssetExporter<SceneMetaFile, SceneProfile>.GetExportFilePath(SceneMetaFile, SceneProfile, ExportContext) BaseAssetExporter<SceneMetaFile, SceneProfile>.BaseExport(SceneMetaFile, SceneProfile, ExportContext) BaseAssetExporter<SceneMetaFile, SceneProfile>.ExportOutputFile(SceneMetaFile, SceneProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SceneExporter : BaseAssetExporter<SceneMetaFile, SceneProfile>, IAssetExporter Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<SceneMetaFile, SceneProfile>.Extension Methods ExportOutputFile(SceneMetaFile, SceneProfile, ExportContext) Exports the assets. Declaration protected override Task<ExportResult> ExportOutputFile(SceneMetaFile asset, SceneProfile profile, ExportContext exportContext) Parameters Type Name Description SceneMetaFile asset The asset meta file. SceneProfile profile The profile object. ExportContext exportContext The export context. Returns Type Description Task<ExportResult> Awaitable task of the operation with the result of the export process. Overrides BaseAssetExporter<SceneMetaFile, SceneProfile>.ExportOutputFile(SceneMetaFile, SceneProfile, ExportContext) GetExportFilePath(SceneMetaFile, SceneProfile, ExportContext) Gets the export file path. Declaration public override string GetExportFilePath(SceneMetaFile asset, SceneProfile profile, ExportContext exportContext) Parameters Type Name Description SceneMetaFile asset The asset. SceneProfile profile The profile. ExportContext exportContext The export context. Returns Type Description string The export file path. Overrides BaseAssetExporter<SceneMetaFile, SceneProfile>.GetExportFilePath(SceneMetaFile, SceneProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SceneMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.SceneMetaFile.html",
    "title": "Class SceneMetaFile | Evergine Doc",
    "keywords": "Class SceneMetaFile The Scene meta file class. Inheritance object IdentifiableObject AssetMetafile<SceneProfile, SceneExporter> AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter> SceneMetaFile Implements IAssetWithSource IAssetWithDirectory IAssetMetaFile Inherited Members AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.SourceDirectoryName AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.Source AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.SourceFile AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.SourceDirectory AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.Assets AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.NeedsToImportData AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.FindAssetItem(string) AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.FindAssetItem<T>(string, bool) AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.FindAssetItem(string, Type, bool) AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.EnumerateAllAssets() AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.FindAssetItems<T>() AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.FindAssetItems(Type) AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.AddAssetItem(AssetItem) AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.ChecksDirectoryIntegrity(ContentDirectory) AssetMetafile<SceneProfile, SceneExporter>.ExtensionMetafile AssetMetafile<SceneProfile, SceneExporter>.ExtensionExported AssetMetafile<SceneProfile, SceneExporter>.Name AssetMetafile<SceneProfile, SceneExporter>.ExportAsRaw AssetMetafile<SceneProfile, SceneExporter>.DefaultProfile AssetMetafile<SceneProfile, SceneExporter>.Profiles AssetMetafile<SceneProfile, SceneExporter>.Exporter AssetMetafile<SceneProfile, SceneExporter>.GetProfile(string) AssetMetafile<SceneProfile, SceneExporter>.AddProfile(string, SceneProfile) AssetMetafile<SceneProfile, SceneExporter>.RemoveProfile(string) AssetMetafile<SceneProfile, SceneExporter>.GetProfileOrDefault(string) AssetMetafile<SceneProfile, SceneExporter>.Export(ExportContext) AssetMetafile<SceneProfile, SceneExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SceneMetaFile : AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>, IAssetWithSource, IAssetWithDirectory, IAssetMetaFile Constructors SceneMetaFile() Initializes a new instance of the SceneMetaFile class. Declaration public SceneMetaFile() SceneMetaFile(SceneSource) Initializes a new instance of the SceneMetaFile class. Declaration public SceneMetaFile(SceneSource sceneSource) Parameters Type Name Description SceneSource sceneSource The scene source. Fields Extension The meta file extension. Declaration public static readonly string Extension Field Value Type Description string InstancedEntities The name of the file with all the entities instanced. Declaration public static readonly string InstancedEntities Field Value Type Description string Properties ExtensionMetafile Gets the extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<SceneProfile, SceneExporter>.ExtensionMetafile NeedsToImportData Gets a value indicating whether the source data needs to be imported when exporting. Declaration public override bool NeedsToImportData { get; } Property Value Type Description bool Overrides AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.NeedsToImportData Methods ChecksDirectoryIntegrity(ContentDirectory) Checks the integrity of this asset. A common behavior is to check if the source directory is available. Declaration public override bool ChecksDirectoryIntegrity(ContentDirectory parentDirectory) Parameters Type Name Description ContentDirectory parentDirectory The parent directory of this asset. Returns Type Description bool True if this assets pass the integrity check. Overrides AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.ChecksDirectoryIntegrity(ContentDirectory) EnumerateAllAssets() Enumerates all assets in this directory and its children directory. Declaration public override IEnumerable<AssetItem> EnumerateAllAssets() Returns Type Description IEnumerable<AssetItem> All assets in this directory and its children directory. Overrides AssetMetaFileWithSourceAndDirectory<SceneSource, SceneProfile, SceneExporter>.EnumerateAllAssets() Implements IAssetWithSource IAssetWithDirectory IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SceneProfile.html": {
    "href": "api/Evergine.Assets.Exporters.SceneProfile.html",
    "title": "Class SceneProfile | Evergine Doc",
    "keywords": "Class SceneProfile The scene profile class. Inheritance object AssetProfile SceneProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SceneProfile : AssetProfile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SoundExporter.html": {
    "href": "api/Evergine.Assets.Exporters.SoundExporter.html",
    "title": "Class SoundExporter | Evergine Doc",
    "keywords": "Class SoundExporter The sound exporter class. Inheritance object BaseAssetExporter<SoundMetaFile, SoundProfile> AssetExporter<SoundMetaFile, SoundProfile> SoundExporter Implements IAssetExporter Inherited Members AssetExporter<SoundMetaFile, SoundProfile>.GetExportFilePath(SoundMetaFile, SoundProfile, ExportContext) AssetExporter<SoundMetaFile, SoundProfile>.ExportOutputFile(SoundMetaFile, SoundProfile, ExportContext) AssetExporter<SoundMetaFile, SoundProfile>.GenerateAssetParts(SoundMetaFile, SoundProfile, ExportContext) BaseAssetExporter<SoundMetaFile, SoundProfile>.Extension BaseAssetExporter<SoundMetaFile, SoundProfile>.BaseExport(SoundMetaFile, SoundProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SoundExporter : AssetExporter<SoundMetaFile, SoundProfile>, IAssetExporter Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<SoundMetaFile, SoundProfile>.Extension Methods GenerateAssetParts(SoundMetaFile, SoundProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(SoundMetaFile metafile, SoundProfile profile, ExportContext exportContext) Parameters Type Name Description SoundMetaFile metafile The meta file. SoundProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<SoundMetaFile, SoundProfile>.GenerateAssetParts(SoundMetaFile, SoundProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SoundMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.SoundMetaFile.html",
    "title": "Class SoundMetaFile | Evergine Doc",
    "keywords": "Class SoundMetaFile The Sound Metafile class. Inheritance object IdentifiableObject AssetMetafile<SoundProfile, SoundExporter> AssetMetaFileWithSource<SoundSource, SoundProfile, SoundExporter> SoundMetaFile Implements IAssetWithSource IAssetMetaFile Inherited Members AssetMetaFileWithSource<SoundSource, SoundProfile, SoundExporter>.Source AssetMetaFileWithSource<SoundSource, SoundProfile, SoundExporter>.SourceFile AssetMetaFileWithSource<SoundSource, SoundProfile, SoundExporter>.NeedsToImportData AssetMetafile<SoundProfile, SoundExporter>.ExtensionMetafile AssetMetafile<SoundProfile, SoundExporter>.ExtensionExported AssetMetafile<SoundProfile, SoundExporter>.Name AssetMetafile<SoundProfile, SoundExporter>.ExportAsRaw AssetMetafile<SoundProfile, SoundExporter>.DefaultProfile AssetMetafile<SoundProfile, SoundExporter>.Profiles AssetMetafile<SoundProfile, SoundExporter>.Exporter AssetMetafile<SoundProfile, SoundExporter>.GetProfile(string) AssetMetafile<SoundProfile, SoundExporter>.AddProfile(string, SoundProfile) AssetMetafile<SoundProfile, SoundExporter>.RemoveProfile(string) AssetMetafile<SoundProfile, SoundExporter>.GetProfileOrDefault(string) AssetMetafile<SoundProfile, SoundExporter>.Export(ExportContext) AssetMetafile<SoundProfile, SoundExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SoundMetaFile : AssetMetaFileWithSource<SoundSource, SoundProfile, SoundExporter>, IAssetWithSource, IAssetMetaFile Constructors SoundMetaFile() Initializes a new instance of the SoundMetaFile class. Declaration public SoundMetaFile() SoundMetaFile(SoundSource) Initializes a new instance of the SoundMetaFile class. Declaration public SoundMetaFile(SoundSource resource) Parameters Type Name Description SoundSource resource The resource. Fields Extension The metafile extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<SoundProfile, SoundExporter>.ExtensionMetafile Implements IAssetWithSource IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SoundProfile.ChannelFormats.html": {
    "href": "api/Evergine.Assets.Exporters.SoundProfile.ChannelFormats.html",
    "title": "Enum SoundProfile.ChannelFormats | Evergine Doc",
    "keywords": "Enum SoundProfile.ChannelFormats The channel formats enum. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public enum SoundProfile.ChannelFormats Fields Name Description Mono Mono channel. Stereo Stereo channel. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SoundProfile.html": {
    "href": "api/Evergine.Assets.Exporters.SoundProfile.html",
    "title": "Class SoundProfile | Evergine Doc",
    "keywords": "Class SoundProfile The sound profile. Inheritance object AssetProfile SoundProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class SoundProfile : AssetProfile Properties ChannelFormat Gets or sets the Channel format. Declaration public SoundProfile.ChannelFormats ChannelFormat { get; set; } Property Value Type Description SoundProfile.ChannelFormats Encoding Gets or sets the encoding used for the audio data samples. Declaration public WaveFormatEncodings Encoding { get; set; } Property Value Type Description WaveFormatEncodings Frequency Gets the sample rate, in Hertz (Hz), of audio wave data. Declaration public int Frequency { get; } Property Value Type Description int SampleRateMode Gets or sets the SampleRate mode. Declaration public SoundProfile.SampleRateModes SampleRateMode { get; set; } Property Value Type Description SoundProfile.SampleRateModes Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.SoundProfile.SampleRateModes.html": {
    "href": "api/Evergine.Assets.Exporters.SoundProfile.SampleRateModes.html",
    "title": "Enum SoundProfile.SampleRateModes | Evergine Doc",
    "keywords": "Enum SoundProfile.SampleRateModes The sample rate modes enum. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public enum SoundProfile.SampleRateModes Fields Name Description High The high quality rate. 44100 Low The low quality rate. 22050 Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.StringArrayComparer.html": {
    "href": "api/Evergine.Assets.Exporters.StringArrayComparer.html",
    "title": "Class StringArrayComparer | Evergine Doc",
    "keywords": "Class StringArrayComparer Compare to string arrays. Inheritance object StringArrayComparer Implements IEqualityComparer<string[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class StringArrayComparer : IEqualityComparer<string[]> Methods Equals(string[], string[]) Compare to string arrays method. Declaration public bool Equals(string[] x, string[] y) Parameters Type Name Description string[] x string array 1. string[] y string array 2. Returns Type Description bool Return true whether two list are equals and false in otherwise. GetHashCode(string[]) Gets the hash code. Declaration public int GetHashCode(string[] obj) Parameters Type Name Description string[] obj string array. Returns Type Description int The hash code. Implements IEqualityComparer<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.TextureExporter.html": {
    "href": "api/Evergine.Assets.Exporters.TextureExporter.html",
    "title": "Class TextureExporter | Evergine Doc",
    "keywords": "Class TextureExporter The texture exporter class. Inheritance object BaseAssetExporter<TextureMetaFile, TextureProfile> AssetExporter<TextureMetaFile, TextureProfile> TextureExporter Implements IAssetExporter Inherited Members AssetExporter<TextureMetaFile, TextureProfile>.GetExportFilePath(TextureMetaFile, TextureProfile, ExportContext) AssetExporter<TextureMetaFile, TextureProfile>.ExportOutputFile(TextureMetaFile, TextureProfile, ExportContext) AssetExporter<TextureMetaFile, TextureProfile>.GenerateAssetParts(TextureMetaFile, TextureProfile, ExportContext) BaseAssetExporter<TextureMetaFile, TextureProfile>.Extension BaseAssetExporter<TextureMetaFile, TextureProfile>.BaseExport(TextureMetaFile, TextureProfile, ExportContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class TextureExporter : AssetExporter<TextureMetaFile, TextureProfile>, IAssetExporter Properties Extension Gets the exporter file extension. Declaration public override string Extension { get; } Property Value Type Description string Overrides BaseAssetExporter<TextureMetaFile, TextureProfile>.Extension Methods GenerateAssetParts(TextureMetaFile, TextureProfile, ExportContext) Exports the asset. Declaration protected override Task<List<AssetPart>> GenerateAssetParts(TextureMetaFile metafile, TextureProfile profile, ExportContext exportContext) Parameters Type Name Description TextureMetaFile metafile The meta file. TextureProfile profile The profile. ExportContext exportContext The export context. Returns Type Description Task<List<AssetPart>> The export result. Overrides AssetExporter<TextureMetaFile, TextureProfile>.GenerateAssetParts(TextureMetaFile, TextureProfile, ExportContext) Implements IAssetExporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.TextureMetaFile.html": {
    "href": "api/Evergine.Assets.Exporters.TextureMetaFile.html",
    "title": "Class TextureMetaFile | Evergine Doc",
    "keywords": "Class TextureMetaFile The Texture Metafile class. Inheritance object IdentifiableObject AssetMetafile<TextureProfile, TextureExporter> AssetMetaFileWithSource<TextureSource, TextureProfile, TextureExporter> TextureMetaFile Implements IAssetWithSource IAssetMetaFile Inherited Members AssetMetaFileWithSource<TextureSource, TextureProfile, TextureExporter>.Source AssetMetaFileWithSource<TextureSource, TextureProfile, TextureExporter>.SourceFile AssetMetaFileWithSource<TextureSource, TextureProfile, TextureExporter>.NeedsToImportData AssetMetafile<TextureProfile, TextureExporter>.ExtensionMetafile AssetMetafile<TextureProfile, TextureExporter>.ExtensionExported AssetMetafile<TextureProfile, TextureExporter>.Name AssetMetafile<TextureProfile, TextureExporter>.ExportAsRaw AssetMetafile<TextureProfile, TextureExporter>.DefaultProfile AssetMetafile<TextureProfile, TextureExporter>.Profiles AssetMetafile<TextureProfile, TextureExporter>.Exporter AssetMetafile<TextureProfile, TextureExporter>.GetProfile(string) AssetMetafile<TextureProfile, TextureExporter>.AddProfile(string, TextureProfile) AssetMetafile<TextureProfile, TextureExporter>.RemoveProfile(string) AssetMetafile<TextureProfile, TextureExporter>.GetProfileOrDefault(string) AssetMetafile<TextureProfile, TextureExporter>.Export(ExportContext) AssetMetafile<TextureProfile, TextureExporter>.GetExportOutputPath(ExportContext) IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class TextureMetaFile : AssetMetaFileWithSource<TextureSource, TextureProfile, TextureExporter>, IAssetWithSource, IAssetMetaFile Constructors TextureMetaFile() Initializes a new instance of the TextureMetaFile class. Declaration public TextureMetaFile() TextureMetaFile(TextureSource) Initializes a new instance of the TextureMetaFile class. Declaration public TextureMetaFile(TextureSource resource) Parameters Type Name Description TextureSource resource Texture source. Fields Extension The texture extension. Declaration public static readonly string Extension Field Value Type Description string Properties ExtensionMetafile Gets the file extension. Declaration public override string ExtensionMetafile { get; } Property Value Type Description string Overrides AssetMetafile<TextureProfile, TextureExporter>.ExtensionMetafile GenerateMipMaps Gets or sets a value indicating whether the generate mip maps. Declaration public bool GenerateMipMaps { get; set; } Property Value Type Description bool NinePatchType Gets or sets the nine patch type. Declaration public TextureMetaFile.NinePatchTypes NinePatchType { get; set; } Property Value Type Description TextureMetaFile.NinePatchTypes PremultipliedAlpha Gets or sets a value indicating whether the premultiplied alpha. Declaration public bool PremultipliedAlpha { get; set; } Property Value Type Description bool SamplerID Gets or sets the associated sampler. Declaration public Guid SamplerID { get; set; } Property Value Type Description Guid Implements IAssetWithSource IAssetMetaFile Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.TextureMetaFile.NinePatchTypes.html": {
    "href": "api/Evergine.Assets.Exporters.TextureMetaFile.NinePatchTypes.html",
    "title": "Enum TextureMetaFile.NinePatchTypes | Evergine Doc",
    "keywords": "Enum TextureMetaFile.NinePatchTypes Nine patch texture type. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public enum TextureMetaFile.NinePatchTypes Fields Name Description FromTexture The texture will be processed as a ninepatch texture. Scalable and fill areas will be extracted from the texture file None The texture will not be processed as a ninepatch texture Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.TextureProfile.html": {
    "href": "api/Evergine.Assets.Exporters.TextureProfile.html",
    "title": "Class TextureProfile | Evergine Doc",
    "keywords": "Class TextureProfile The Texture Profile class. Inheritance object AssetProfile TextureProfile Inherited Members AssetProfile.DefaultName AssetProfile.Name AssetProfile.ExcludeAsset AssetProfile.Platform object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public class TextureProfile : AssetProfile Constructors TextureProfile() Initializes a new instance of the TextureProfile class. Declaration public TextureProfile() TextureProfile(TextureSource) Initializes a new instance of the TextureProfile class. Declaration public TextureProfile(TextureSource textureSource = null) Parameters Type Name Description TextureSource textureSource texture source. Fields ExportedItem The exported file. Declaration public ContentFile ExportedItem Field Value Type Description ContentFile PixelFormat Gets or sets the output form. Declaration public PixelFormat PixelFormat Field Value Type Description PixelFormat ScaledHeight Gets or sets the scaled height. Declaration [RenderPropertyAsInput(MinLimit = 1)] public uint ScaledHeight Field Value Type Description uint ScaledPercentage Gets or sets the scaled percentage. Declaration [RenderPropertyAsFInput(MinLimit = 0.1, MaxLimit = 2, AsSlider = true, DesiredChange = 0.1, DesiredLargeChange = 0.2)] public float ScaledPercentage Field Value Type Description float ScaledWidth Gets or sets the scaled height. Declaration [RenderPropertyAsInput(MinLimit = 1)] public uint ScaledWidth Field Value Type Description uint ScalingType Gets or sets the scaling type. Declaration public TextureProfile.TextureScalingType ScalingType Field Value Type Description TextureProfile.TextureScalingType Methods GetOutputSize(TextureMetaFile, out uint, out uint) Gets the output size of the texture profile. Declaration public void GetOutputSize(TextureMetaFile asset, out uint width, out uint height) Parameters Type Name Description TextureMetaFile asset The asset meta file. uint width The with result. uint height The height result. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.TextureProfile.TextureOutputFormat.html": {
    "href": "api/Evergine.Assets.Exporters.TextureProfile.TextureOutputFormat.html",
    "title": "Enum TextureProfile.TextureOutputFormat | Evergine Doc",
    "keywords": "Enum TextureProfile.TextureOutputFormat Texture Output Format. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public enum TextureProfile.TextureOutputFormat Fields Name Description AlphaCompressionFormat Alpha compression Color16Bit 16 bits Color32Bit 32 bits NonAlphaCompressionFormat Non alpha compression Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Exporters.TextureProfile.TextureScalingType.html": {
    "href": "api/Evergine.Assets.Exporters.TextureProfile.TextureScalingType.html",
    "title": "Enum TextureProfile.TextureScalingType | Evergine Doc",
    "keywords": "Enum TextureProfile.TextureScalingType Texture Scaling Type. Namespace: Evergine.Assets.Exporters Assembly: Evergine.Assets.dll Syntax public enum TextureProfile.TextureScalingType Fields Name Description Freeform Free form scaling Original Use the original size Percentage Percentage scaling PowerOfTwo The closest power of two SquarePowerOfTwo THe closest square power of two Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.KTX.html": {
    "href": "api/Evergine.Assets.Extensions.KTX.html",
    "title": "Namespace Evergine.Assets.Extensions.KTX | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Extensions.KTX Classes KTXArrayElement For each array_element in numberOfArrayElements. KTXFace For each face in numberOfFaces. KTXKeyValuePair The KTX key value pair class. KTXMipmapLevel For each mipmap level in numberOfMipmapLevels. KTXTexture https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec. Structs KTXHeader KTX header description. https://www.khronos.org/registry/OpenGL/specs/gl/glspec44.core.pdf."
  },
  "api/Evergine.Assets.Extensions.KTX.KTXArrayElement.html": {
    "href": "api/Evergine.Assets.Extensions.KTX.KTXArrayElement.html",
    "title": "Class KTXArrayElement | Evergine Doc",
    "keywords": "Class KTXArrayElement For each array_element in numberOfArrayElements. Inheritance object KTXArrayElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Extensions.KTX Assembly: Evergine.Assets.dll Syntax public class KTXArrayElement Constructors KTXArrayElement(KTXFace[]) Initializes a new instance of the KTXArrayElement class. Declaration public KTXArrayElement(KTXFace[] faces) Parameters Type Name Description KTXFace[] faces The ktx faces. Properties Faces Gets the KTX faces. Declaration public KTXFace[] Faces { get; } Property Value Type Description KTXFace[] Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.KTX.KTXFace.html": {
    "href": "api/Evergine.Assets.Extensions.KTX.KTXFace.html",
    "title": "Class KTXFace | Evergine Doc",
    "keywords": "Class KTXFace For each face in numberOfFaces. Inheritance object KTXFace Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Extensions.KTX Assembly: Evergine.Assets.dll Syntax public class KTXFace Constructors KTXFace(byte[]) Initializes a new instance of the KTXFace class. Declaration public KTXFace(byte[] data) Parameters Type Name Description byte[] data The ktx face data. Properties Data Gets the ktx face data. Declaration public byte[] Data { get; } Property Value Type Description byte[] Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.KTX.KTXHeader.html": {
    "href": "api/Evergine.Assets.Extensions.KTX.KTXHeader.html",
    "title": "Struct KTXHeader | Evergine Doc",
    "keywords": "Struct KTXHeader KTX header description. https://www.khronos.org/registry/OpenGL/specs/gl/glspec44.core.pdf. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Assets.Extensions.KTX Assembly: Evergine.Assets.dll Syntax public struct KTXHeader Fields bytesOfKeyValueData An arbitrary number of key/value pairs may follow the header. This can be used to encode any arbitrary data. The bytesOfKeyValueData field indicates the total number of bytes of key/value data including all keyAndValueByteSize fields, all keyAndValue fields, and all valuePadding fields. The file offset of the first imageSize field is located at the file offset of the bytesOfKeyValueData field plus the value of the bytesOfKeyValueData field plus 4. Declaration public uint bytesOfKeyValueData Field Value Type Description uint endianness endianness contains the number 0x04030201 written as a 32 bit integer. If the file is little endian then this is represented as the bytes 0x01 0x02 0x03 0x04. If the file is big endian then this is represented as the bytes 0x04 0x03 0x02 0x01. When reading endianness as a 32 bit integer produces the value 0x04030201 then the endianness of the file matches the the endianness of the program that is reading the file and no conversion is necessary. When reading endianness as a 32 bit integer produces the value 0x01020304 then the endianness of the file is opposite the endianness of the program that is reading the file, and in that case the program reading the file must endian convert all header bytes to the endianness of the program (i.e. a little endian program must convert from big endian, and a big endian program must convert to little endian). Declaration public uint endianness Field Value Type Description uint glBaseInternalformat For both compressed and uncompressed textures, glBaseInternalFormat specifies the base internal format of the texture, usually one of the values from table 8.11 of the OpenGL 4.4 specification [OPENGL44] (RGB, RGBA, ALPHA, etc.). For uncompressed textures, this value will be the same as glFormat and is used as the internalformat parameter when loading into a context that does not support sized formats, such as an unextended OpenGL ES 2.0 context. Declaration public uint glBaseInternalformat Field Value Type Description uint glFormat For compressed textures, glFormat must equal 0. For uncompressed textures, glFormat specifies the format parameter passed to glTex{,Sub}Image*D, usually one of the values from table 8.3 of the OpenGL 4.4 specification [OPENGL44] (RGB, RGBA, BGRA, etc.) Declaration public uint glFormat Field Value Type Description uint glInternalFormat For compressed textures, glInternalFormat must equal the compressed internal format, usually one of the values from table 8.14 of the OpenGL 4.4 specification [OPENGL44]. For uncompressed textures, glInternalFormat specifies the internalformat parameter passed to glTexStorageD or glTexImageD, usually one of the sized internal formats from tables 8.12 & 8.13 of the OpenGL 4.4 specification [OPENGL44]. The sized format should be chosen to match the bit depth of the data provided. glInternalFormat is used when loading both compressed and uncompressed textures, except when loading into a context that does not support sized formats, such as an unextended OpenGL ES 2.0 context where the internalformat parameter is required to have the same value as the format parameter. Declaration public uint glInternalFormat Field Value Type Description uint glType For compressed textures, glType must equal 0. For uncompressed textures, glType specifies the type parameter passed to glTex{,Sub}Image*D, usually one of the values from table 8.2 of the OpenGL 4.4 specification [OPENGL44] (UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5, etc.) Declaration public uint glType Field Value Type Description uint glTypeSize glTypeSize specifies the data type size that should be used when endianness conversion is required for the texture data stored in the file. If glType is not 0, this should be the size in bytes corresponding to glType. For texture data which does not depend on platform endianness, including compressed texture data, glTypeSize must equal 1. Declaration public uint glTypeSize Field Value Type Description uint numberOfArrayElements numberOfArrayElements specifies the number of array elements. If the texture is not an array texture, numberOfArrayElements must equal 0. Declaration public uint numberOfArrayElements Field Value Type Description uint numberOfFaces numberOfFaces specifies the number of cubemap faces. For cubemaps and cubemap arrays this should be 6. For non cubemaps this should be 1. Cube map faces are stored in the order: +X, -X, +Y, -Y, +Z, -Z. Declaration public uint numberOfFaces Field Value Type Description uint numberOfMipmapLevels numberOfMipmapLevels must equal 1 for non-mipmapped textures. For mipmapped textures, it equals the number of mipmaps. Mipmaps are stored in order from largest size to smallest size. The first mipmap level is always level 0. A KTX file does not need to contain a complete mipmap pyramid. If numberOfMipmapLevels equals 0, it indicates that a full mipmap pyramid should be generated from level 0 at load time (this is usually not allowed for compressed formats). Declaration public uint numberOfMipmapLevels Field Value Type Description uint pixelDepth The size of the texture image for level 0, in pixels. No rounding to block sizes should be applied for block compressed textures. For 1D textures pixelHeight and pixelDepth must be 0. For 2D and cube textures pixelDepth must be 0. Declaration public uint pixelDepth Field Value Type Description uint pixelHeight The size of the texture image for level 0, in pixels. No rounding to block sizes should be applied for block compressed textures. For 1D textures pixelHeight and pixelDepth must be 0. For 2D and cube textures pixelDepth must be 0. Declaration public uint pixelHeight Field Value Type Description uint pixelWidth The size of the texture image for level 0, in pixels. No rounding to block sizes should be applied for block compressed textures. For 1D textures pixelHeight and pixelDepth must be 0. For 2D and cube textures pixelDepth must be 0. Declaration public uint pixelWidth Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.KTX.KTXKeyValuePair.html": {
    "href": "api/Evergine.Assets.Extensions.KTX.KTXKeyValuePair.html",
    "title": "Class KTXKeyValuePair | Evergine Doc",
    "keywords": "Class KTXKeyValuePair The KTX key value pair class. Inheritance object KTXKeyValuePair Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Extensions.KTX Assembly: Evergine.Assets.dll Syntax public class KTXKeyValuePair Constructors KTXKeyValuePair(string, byte[]) Initializes a new instance of the KTXKeyValuePair class. Declaration public KTXKeyValuePair(string key, byte[] value) Parameters Type Name Description string key The pair key. byte[] value The pair value. Properties Key Gets the key. Declaration public string Key { get; } Property Value Type Description string Value Gets the data value. Declaration public byte[] Value { get; } Property Value Type Description byte[] Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.KTX.KTXMipmapLevel.html": {
    "href": "api/Evergine.Assets.Extensions.KTX.KTXMipmapLevel.html",
    "title": "Class KTXMipmapLevel | Evergine Doc",
    "keywords": "Class KTXMipmapLevel For each mipmap level in numberOfMipmapLevels. Inheritance object KTXMipmapLevel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Extensions.KTX Assembly: Evergine.Assets.dll Syntax public class KTXMipmapLevel Constructors KTXMipmapLevel(uint, uint, uint, uint, uint, KTXArrayElement[]) Initializes a new instance of the KTXMipmapLevel class. Declaration public KTXMipmapLevel(uint width, uint height, uint depth, uint totalSize, uint arraySliceSize, KTXArrayElement[] slices) Parameters Type Name Description uint width The width. uint height The height. uint depth The depth. uint totalSize The total size. uint arraySliceSize The array slize size. KTXArrayElement[] slices The slices. Properties ArrayElementSize Gets the array element size. Declaration public uint ArrayElementSize { get; } Property Value Type Description uint ArrayElements Getsthe array elements. Declaration public KTXArrayElement[] ArrayElements { get; } Property Value Type Description KTXArrayElement[] Depth Gets the mipmap depth. Declaration public uint Depth { get; } Property Value Type Description uint Height Gets the mipmap height. Declaration public uint Height { get; } Property Value Type Description uint TotalSize Gets the mipmap total size. Declaration public uint TotalSize { get; } Property Value Type Description uint Width Gets the mip map width. Declaration public uint Width { get; } Property Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.KTX.KTXTexture.html": {
    "href": "api/Evergine.Assets.Extensions.KTX.KTXTexture.html",
    "title": "Class KTXTexture | Evergine Doc",
    "keywords": "Class KTXTexture https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec. Inheritance object KTXTexture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Extensions.KTX Assembly: Evergine.Assets.dll Syntax public class KTXTexture Constructors KTXTexture(KTXHeader, KTXKeyValuePair[], KTXMipmapLevel[]) Initializes a new instance of the KTXTexture class. Declaration public KTXTexture(KTXHeader header, KTXKeyValuePair[] keyValuePairs, KTXMipmapLevel[] mipmaps) Parameters Type Name Description KTXHeader header The ktx header. KTXKeyValuePair[] keyValuePairs The key value pairs. KTXMipmapLevel[] mipmaps The mipmaps. Properties Header Gets the KTX Header. Declaration public KTXHeader Header { get; } Property Value Type Description KTXHeader KeyValuePairs Gets the KTX keyvalue pairs. Declaration public KTXKeyValuePair[] KeyValuePairs { get; } Property Value Type Description KTXKeyValuePair[] Mipmaps Gets the KTX mipmaps. Declaration public KTXMipmapLevel[] Mipmaps { get; } Property Value Type Description KTXMipmapLevel[] Methods Load(BinaryReader, bool) Loads the texture. Declaration public static KTXTexture Load(BinaryReader reader, bool readKeyValuePairs) Parameters Type Name Description BinaryReader reader The binary reader. bool readKeyValuePairs The key value pairs. Returns Type Description KTXTexture The KTX texture. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.TexDmp.html": {
    "href": "api/Evergine.Assets.Extensions.TexDmp.html",
    "title": "Namespace Evergine.Assets.Extensions.TexDmp | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Extensions.TexDmp Classes TexDmpTexture Texture dump loader/writer. Structs TexDmpDataBox Tex Dump databox."
  },
  "api/Evergine.Assets.Extensions.TexDmp.TexDmpDataBox.html": {
    "href": "api/Evergine.Assets.Extensions.TexDmp.TexDmpDataBox.html",
    "title": "Struct TexDmpDataBox | Evergine Doc",
    "keywords": "Struct TexDmpDataBox Tex Dump databox. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Assets.Extensions.TexDmp Assembly: Evergine.Assets.dll Syntax public struct TexDmpDataBox Fields Data The data array. Declaration public byte[] Data Field Value Type Description byte[] RowPitch Gets the number of bytes per row. Declaration public uint RowPitch Field Value Type Description uint SlicePitch Gets the number of bytes per slice (for a 3D texture, a slice is a 2D image). Declaration public uint SlicePitch Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Extensions.TexDmp.TexDmpTexture.html": {
    "href": "api/Evergine.Assets.Extensions.TexDmp.TexDmpTexture.html",
    "title": "Class TexDmpTexture | Evergine Doc",
    "keywords": "Class TexDmpTexture Texture dump loader/writer. Inheritance object TexDmpTexture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Extensions.TexDmp Assembly: Evergine.Assets.dll Syntax public class TexDmpTexture Fields Id Texture Id. Declaration public Guid Id Field Value Type Description Guid SamplerId The sampler state Id. Declaration public Guid? SamplerId Field Value Type Description Guid? SubResources The texture data per subresource. Declaration public TexDmpDataBox[] SubResources Field Value Type Description TexDmpDataBox[] TextureDescription The texture description. Declaration public TextureDescription TextureDescription Field Value Type Description TextureDescription Methods Load(BinaryReader, bool) Loads the texture. Declaration public static TexDmpTexture Load(BinaryReader reader, bool onlyHeader) Parameters Type Name Description BinaryReader reader The binary reader. bool onlyHeader Read only the header. Returns Type Description TexDmpTexture The KTX texture. Write(GraphicsContext, BinaryWriter, Texture) Loads the texture. Declaration public static void Write(GraphicsContext graphicsContext, BinaryWriter writer, Texture texture) Parameters Type Name Description GraphicsContext graphicsContext The graphics context. BinaryWriter writer The binary writer. Texture texture The KTX texture. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.html": {
    "href": "api/Evergine.Assets.html",
    "title": "Namespace Evergine.Assets | Evergine Doc",
    "keywords": "Namespace Evergine.Assets Classes TextureAssetHelper The texture asset helper class. TextureExtension The texture extension methods class."
  },
  "api/Evergine.Assets.Importers.Audio.html": {
    "href": "api/Evergine.Assets.Importers.Audio.html",
    "title": "Namespace Evergine.Assets.Importers.Audio | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Importers.Audio Classes Mp3Importer The MP3 asset importer class. NAudioHelpers The NAudio Helper and extension class. NAudioImporter The NAudio importer abstract class. OGGImporter The OGG importer class. WavImporter Imports a WAV file to be used by Evergine."
  },
  "api/Evergine.Assets.Importers.Audio.Mp3Importer.html": {
    "href": "api/Evergine.Assets.Importers.Audio.Mp3Importer.html",
    "title": "Class Mp3Importer | Evergine Doc",
    "keywords": "Class Mp3Importer The MP3 asset importer class. Inheritance object AAssetImporter<SoundSource> NAudioImporter Mp3Importer Implements IAssetImporter Inherited Members NAudioImporter.ImportHeader(Stream, out SoundSource) NAudioImporter.ImportData(Stream, SoundSource, bool) AAssetImporter<SoundSource>.ImportSource(Stream, bool, bool) AAssetImporter<SoundSource>.GenerateAdditionalAssets(Stream, SoundSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers.Audio Assembly: Evergine.Assets.dll Syntax public class Mp3Importer : NAudioImporter, IAssetImporter Fields FileExtension The mp3 source extension. Declaration public static readonly string FileExtension Field Value Type Description string Properties Extensions Gets the importer file extensions. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.SoundSource>.Extensions Methods CreateWaveStream(Stream) Creates the wave stream of the sound file. Declaration protected override WaveStream CreateWaveStream(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description WaveStream The wave stream. Overrides NAudioImporter.CreateWaveStream(Stream) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.Audio.NAudioHelpers.html": {
    "href": "api/Evergine.Assets.Importers.Audio.NAudioHelpers.html",
    "title": "Class NAudioHelpers | Evergine Doc",
    "keywords": "Class NAudioHelpers The NAudio Helper and extension class. Inheritance object NAudioHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers.Audio Assembly: Evergine.Assets.dll Syntax public static class NAudioHelpers Methods GetDataStream(IWaveProvider) Gets the data stream of a wave provider. Declaration public static MemoryStream GetDataStream(this IWaveProvider waveProvider) Parameters Type Name Description IWaveProvider waveProvider The wave provider. Returns Type Description MemoryStream The Memory stream. ToEvergineFormat(WaveFormat) Converts to Evergine Wave format. Declaration public static WaveFormat ToEvergineFormat(this WaveFormat waveFormat) Parameters Type Name Description WaveFormat waveFormat The NAudio wave format. Returns Type Description WaveFormat The Evergine Wave Format. ToNAudioWaveFormat(WaveFormat) Converts to NAudio wave format. Declaration public static WaveFormat ToNAudioWaveFormat(this WaveFormat waveFormat) Parameters Type Name Description WaveFormat waveFormat The wave format. Returns Type Description WaveFormat NAudio wave format."
  },
  "api/Evergine.Assets.Importers.Audio.NAudioImporter.html": {
    "href": "api/Evergine.Assets.Importers.Audio.NAudioImporter.html",
    "title": "Class NAudioImporter | Evergine Doc",
    "keywords": "Class NAudioImporter The NAudio importer abstract class. Inheritance object AAssetImporter<SoundSource> NAudioImporter Mp3Importer OGGImporter WavImporter Implements IAssetImporter Inherited Members AAssetImporter<SoundSource>.Extensions AAssetImporter<SoundSource>.ImportSource(Stream, bool, bool) AAssetImporter<SoundSource>.GenerateAdditionalAssets(Stream, SoundSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers.Audio Assembly: Evergine.Assets.dll Syntax public abstract class NAudioImporter : AAssetImporter<SoundSource>, IAssetImporter Methods CreateWaveStream(Stream) Creates the wave stream of the sound file. Declaration protected abstract WaveStream CreateWaveStream(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description WaveStream The wave stream. ImportData(Stream, SoundSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, SoundSource source, bool rawData) Parameters Type Name Description Stream stream The stream. SoundSource source bool rawData Overrides AAssetImporter<SoundSource>.ImportData(Stream, SoundSource, bool) ImportHeader(Stream, out SoundSource) Import the asset header. Declaration public override void ImportHeader(Stream stream, out SoundSource source) Parameters Type Name Description Stream stream The stream. SoundSource source Overrides AAssetImporter<SoundSource>.ImportHeader(Stream, out SoundSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.Audio.OGGImporter.html": {
    "href": "api/Evergine.Assets.Importers.Audio.OGGImporter.html",
    "title": "Class OGGImporter | Evergine Doc",
    "keywords": "Class OGGImporter The OGG importer class. Inheritance object AAssetImporter<SoundSource> NAudioImporter OGGImporter Implements IAssetImporter Inherited Members NAudioImporter.ImportHeader(Stream, out SoundSource) NAudioImporter.ImportData(Stream, SoundSource, bool) AAssetImporter<SoundSource>.ImportSource(Stream, bool, bool) AAssetImporter<SoundSource>.GenerateAdditionalAssets(Stream, SoundSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers.Audio Assembly: Evergine.Assets.dll Syntax public class OGGImporter : NAudioImporter, IAssetImporter Fields FileExtension The Importer source file extension. Declaration public static readonly string FileExtension Field Value Type Description string Properties Extensions Gets the importer file extensions. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.SoundSource>.Extensions Methods CreateWaveStream(Stream) Creates the wave stream of the sound file. Declaration protected override WaveStream CreateWaveStream(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description WaveStream The wave stream. Overrides NAudioImporter.CreateWaveStream(Stream) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.Audio.WavImporter.html": {
    "href": "api/Evergine.Assets.Importers.Audio.WavImporter.html",
    "title": "Class WavImporter | Evergine Doc",
    "keywords": "Class WavImporter Imports a WAV file to be used by Evergine. Inheritance object AAssetImporter<SoundSource> NAudioImporter WavImporter Implements IAssetImporter Inherited Members NAudioImporter.ImportHeader(Stream, out SoundSource) NAudioImporter.ImportData(Stream, SoundSource, bool) AAssetImporter<SoundSource>.ImportSource(Stream, bool, bool) AAssetImporter<SoundSource>.GenerateAdditionalAssets(Stream, SoundSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers.Audio Assembly: Evergine.Assets.dll Syntax public class WavImporter : NAudioImporter, IAssetImporter Remarks Supported input formats: 8, 16, 24 and 32 bits PCM Unsupported ones: A-Lau and Mu-Lau PCM. Fields FileExtension The importer file extension. Declaration public static readonly string FileExtension Field Value Type Description string Properties Extensions Gets the importer file extensions. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.SoundSource>.Extensions Methods CreateWaveStream(Stream) Creates the wave stream of the sound file. Declaration protected override WaveStream CreateWaveStream(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description WaveStream The wave stream. Overrides NAudioImporter.CreateWaveStream(Stream) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.DDSImporter.html": {
    "href": "api/Evergine.Assets.Importers.DDSImporter.html",
    "title": "Class DDSImporter | Evergine Doc",
    "keywords": "Class DDSImporter The DDS Importer class. Inheritance object AAssetImporter<TextureSource> DDSImporter Implements IAssetImporter Inherited Members AAssetImporter<TextureSource>.ImportSource(Stream, bool, bool) AAssetImporter<TextureSource>.GenerateAdditionalAssets(Stream, TextureSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers Assembly: Evergine.Assets.dll Syntax public class DDSImporter : AAssetImporter<TextureSource>, IAssetImporter Properties Extensions Gets the importer extension. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.TextureSource>.Extensions Methods ImportData(Stream, TextureSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, TextureSource source, bool rawAsset) Parameters Type Name Description Stream stream The stream. TextureSource source bool rawAsset The asset is loaded as raw asset. Overrides AAssetImporter<TextureSource>.ImportData(Stream, TextureSource, bool) ImportHeader(Stream, out TextureSource) Decode DDS Header. Declaration public override void ImportHeader(Stream stream, out TextureSource source) Parameters Type Name Description Stream stream Image stream. TextureSource source Image description. Overrides AAssetImporter<TextureSource>.ImportHeader(Stream, out TextureSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.FBXImporter.html": {
    "href": "api/Evergine.Assets.Importers.FBXImporter.html",
    "title": "Class FBXImporter | Evergine Doc",
    "keywords": "Class FBXImporter Tge FBX importer class. Inheritance object AAssetImporter<ModelSource> GLTFImporter FBXImporter Implements IAssetImporter Inherited Members AAssetImporter<ModelSource>.ImportSource(Stream, bool, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers Assembly: Evergine.Assets.dll Syntax public class FBXImporter : GLTFImporter, IAssetImporter Fields GltfExtension The Gltf extension. Declaration public const string GltfExtension = \".glb\" Field Value Type Description string GltfModelCache The gltf cache location. Declaration public const string GltfModelCache = \"Cache/Gltf\" Field Value Type Description string Properties Extensions Gets the importer extension. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides GLTFImporter.Extensions Methods ConvertToGLTF() Gets a value indicating whether the asset needs to be converted to GLTF before. Declaration protected Stream ConvertToGLTF() Returns Type Description Stream The FBX stream. ConvertToGLTF(string, string) Convert this file to GLTF. Declaration public void ConvertToGLTF(string assetPath, string gltfPath) Parameters Type Name Description string assetPath The asset path. string gltfPath The gltf path. GenerateAdditionalAssets(Stream, ModelSource) Indicates if this assets requires additional assets. Declaration public override bool GenerateAdditionalAssets(Stream stream, ModelSource resource) Parameters Type Name Description Stream stream The asset stream. ModelSource resource The current resource. Returns Type Description bool If the asset require additional assets. Overrides GLTFImporter.GenerateAdditionalAssets(Stream, ModelSource) ImportData(Stream, ModelSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, ModelSource resource, bool rawData) Parameters Type Name Description Stream stream The stream. ModelSource resource The output data. bool rawData Overrides GLTFImporter.ImportData(Stream, ModelSource, bool) ImportHeader(Stream, out ModelSource) Import the asset header. Declaration public override void ImportHeader(Stream stream, out ModelSource resource) Parameters Type Name Description Stream stream The stream. ModelSource resource The output header. Overrides GLTFImporter.ImportHeader(Stream, out ModelSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.Font.FontImporter.html": {
    "href": "api/Evergine.Assets.Importers.Font.FontImporter.html",
    "title": "Class FontImporter | Evergine Doc",
    "keywords": "Class FontImporter The Font importer. Inheritance object AAssetImporter<FontSource> FontImporter Implements IAssetImporter Inherited Members AAssetImporter<FontSource>.ImportSource(Stream, bool, bool) AAssetImporter<FontSource>.GenerateAdditionalAssets(Stream, FontSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers.Font Assembly: Evergine.Assets.dll Syntax public class FontImporter : AAssetImporter<FontSource>, IAssetImporter Properties Extensions Gets the importer file extensions. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.FontSource>.Extensions Methods ImportData(Stream, FontSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, FontSource resource, bool rawAsset = false) Parameters Type Name Description Stream stream The stream. FontSource resource The output data. bool rawAsset The asset is loaded as raw asset. Overrides AAssetImporter<FontSource>.ImportData(Stream, FontSource, bool) ImportHeader(Stream, out FontSource) Import the asset header. Declaration public override void ImportHeader(Stream stream, out FontSource resource) Parameters Type Name Description Stream stream The stream. FontSource resource The output header. Overrides AAssetImporter<FontSource>.ImportHeader(Stream, out FontSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.Font.html": {
    "href": "api/Evergine.Assets.Importers.Font.html",
    "title": "Namespace Evergine.Assets.Importers.Font | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Importers.Font Classes FontImporter The Font importer."
  },
  "api/Evergine.Assets.Importers.GLTFImporter.html": {
    "href": "api/Evergine.Assets.Importers.GLTFImporter.html",
    "title": "Class GLTFImporter | Evergine Doc",
    "keywords": "Class GLTFImporter The GLTF importer class. Inheritance object AAssetImporter<ModelSource> GLTFImporter FBXImporter Implements IAssetImporter Inherited Members AAssetImporter<ModelSource>.ImportSource(Stream, bool, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers Assembly: Evergine.Assets.dll Syntax public class GLTFImporter : AAssetImporter<ModelSource>, IAssetImporter Properties Extensions Gets the importer extension. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.ModelSource>.Extensions Methods GenerateAdditionalAssets(Stream, ModelSource) Indicates if this assets requires additional assets. Declaration public override bool GenerateAdditionalAssets(Stream stream, ModelSource resource) Parameters Type Name Description Stream stream The asset stream. ModelSource resource The current resource. Returns Type Description bool If the asset require additional assets. Overrides AAssetImporter<ModelSource>.GenerateAdditionalAssets(Stream, ModelSource) ImportData(Stream, ModelSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, ModelSource source, bool rawAsset) Parameters Type Name Description Stream stream The stream. ModelSource source bool rawAsset The asset is loaded as raw asset. Overrides AAssetImporter<ModelSource>.ImportData(Stream, ModelSource, bool) ImportHeader(Stream, out ModelSource) Import the asset header. Declaration public override void ImportHeader(Stream stream, out ModelSource resource) Parameters Type Name Description Stream stream The stream. ModelSource resource The output header. Overrides AAssetImporter<ModelSource>.ImportHeader(Stream, out ModelSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.GltfModel.GltfImporterContext.html": {
    "href": "api/Evergine.Assets.Importers.GltfModel.GltfImporterContext.html",
    "title": "Class GltfImporterContext | Evergine Doc",
    "keywords": "Class GltfImporterContext The GLTF Importer context. Inheritance object DisposableObject GltfImporterContext Implements IDisposable Inherited Members DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers.GltfModel Assembly: Evergine.Assets.dll Syntax public class GltfImporterContext : DisposableObject, IDisposable Constructors GltfImporterContext(string, string, Stream) Initializes a new instance of the GltfImporterContext class. Declaration public GltfImporterContext(string gltfFile, string gltfTargetPath, Stream stream) Parameters Type Name Description string gltfFile The asset path. string gltfTargetPath The gltf environment path. Stream stream The stream. Fields Framerates The most common available framerates. Declaration public static float[] Framerates Field Value Type Description float[] Methods CalculateEmbeddedDirectory() Calculates the embedded directory. Declaration public string CalculateEmbeddedDirectory() Returns Type Description string The embedded directory path. Destroy() Destroy all resources of this instance. Declaration protected override void Destroy() Overrides Evergine.Framework.DisposableObject.Destroy() EmbeddedAssets(ModelSource) Process the embedded assets of the gltf. Declaration public bool EmbeddedAssets(ModelSource resource) Parameters Type Name Description ModelSource resource The model resource. Returns Type Description bool True if there were embedded assets handled. False otherwise. ProcessData(ModelSource) Process this model. Declaration public void ProcessData(ModelSource resource) Parameters Type Name Description ModelSource resource The model resource. ProcessResource() Process this model. Declaration public ModelSource ProcessResource() Returns Type Description ModelSource The model source of the GLTF file. VertexUsageFromString(string, out ElementSemanticType, out uint) Gets the vertex usafe from string. Declaration public static void VertexUsageFromString(string semantic, out ElementSemanticType usage, out uint usageIndex) Parameters Type Name Description string semantic The semantic. ElementSemanticType usage The usage. uint usageIndex The usage index. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.GltfModel.html": {
    "href": "api/Evergine.Assets.Importers.GltfModel.html",
    "title": "Namespace Evergine.Assets.Importers.GltfModel | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Importers.GltfModel Classes GltfImporterContext The GLTF Importer context."
  },
  "api/Evergine.Assets.Importers.HDRImporter.html": {
    "href": "api/Evergine.Assets.Importers.HDRImporter.html",
    "title": "Class HDRImporter | Evergine Doc",
    "keywords": "Class HDRImporter The HDR Importer class. Inheritance object AAssetImporter<TextureSource> HDRImporter Implements IAssetImporter Inherited Members AAssetImporter<TextureSource>.ImportSource(Stream, bool, bool) AAssetImporter<TextureSource>.GenerateAdditionalAssets(Stream, TextureSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers Assembly: Evergine.Assets.dll Syntax public class HDRImporter : AAssetImporter<TextureSource>, IAssetImporter Properties Extensions Gets the importer extension. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.TextureSource>.Extensions Methods ImportData(Stream, TextureSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, TextureSource source, bool rawAsset) Parameters Type Name Description Stream stream The stream. TextureSource source bool rawAsset The asset is loaded as raw asset. Overrides AAssetImporter<TextureSource>.ImportData(Stream, TextureSource, bool) ImportHeader(Stream, out TextureSource) Decode TGA Header. Declaration public override void ImportHeader(Stream stream, out TextureSource source) Parameters Type Name Description Stream stream Image stream. TextureSource source Image description. Overrides AAssetImporter<TextureSource>.ImportHeader(Stream, out TextureSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.html": {
    "href": "api/Evergine.Assets.Importers.html",
    "title": "Namespace Evergine.Assets.Importers | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Importers Classes DDSImporter The DDS Importer class. FBXImporter Tge FBX importer class. GLTFImporter The GLTF importer class. HDRImporter The HDR Importer class. ImageSharpImporter The image sharp importer. KTXImporter KTX File Format decoder https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2. TexDmpImporter Custom format used to dump Evergine Textures to file."
  },
  "api/Evergine.Assets.Importers.ImageSharpImporter.html": {
    "href": "api/Evergine.Assets.Importers.ImageSharpImporter.html",
    "title": "Class ImageSharpImporter | Evergine Doc",
    "keywords": "Class ImageSharpImporter The image sharp importer. Inheritance object AAssetImporter<TextureSource> ImageSharpImporter Implements IAssetImporter Inherited Members AAssetImporter<TextureSource>.ImportSource(Stream, bool, bool) AAssetImporter<TextureSource>.GenerateAdditionalAssets(Stream, TextureSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers Assembly: Evergine.Assets.dll Syntax public class ImageSharpImporter : AAssetImporter<TextureSource>, IAssetImporter Properties Extensions Gets the importer file extensions. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.TextureSource>.Extensions Methods ImportData(Stream, TextureSource, bool) Decode Image data using ImageSharp library. Declaration public override void ImportData(Stream stream, TextureSource source, bool rawAsset) Parameters Type Name Description Stream stream Binary reader. TextureSource source Image Description. bool rawAsset The asset is loaded as raw asset. Overrides AAssetImporter<TextureSource>.ImportData(Stream, TextureSource, bool) ImportHeader(Stream, out TextureSource) Decode Image Header using ImageSharp library. Declaration public override void ImportHeader(Stream stream, out TextureSource source) Parameters Type Name Description Stream stream Image stream. TextureSource source Image description. Overrides AAssetImporter<TextureSource>.ImportHeader(Stream, out TextureSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.KTXImporter.html": {
    "href": "api/Evergine.Assets.Importers.KTXImporter.html",
    "title": "Class KTXImporter | Evergine Doc",
    "keywords": "Class KTXImporter KTX File Format decoder https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2. Inheritance object AAssetImporter<TextureSource> KTXImporter Implements IAssetImporter Inherited Members AAssetImporter<TextureSource>.ImportSource(Stream, bool, bool) AAssetImporter<TextureSource>.GenerateAdditionalAssets(Stream, TextureSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers Assembly: Evergine.Assets.dll Syntax public class KTXImporter : AAssetImporter<TextureSource>, IAssetImporter Properties Extensions Gets the importer extension. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.TextureSource>.Extensions Methods ImportData(Stream, TextureSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, TextureSource source, bool rawAsset) Parameters Type Name Description Stream stream The stream. TextureSource source bool rawAsset The asset is loaded as raw asset. Overrides AAssetImporter<TextureSource>.ImportData(Stream, TextureSource, bool) ImportHeader(Stream, out TextureSource) Decode TGA Header. Declaration public override void ImportHeader(Stream stream, out TextureSource source) Parameters Type Name Description Stream stream Image stream. TextureSource source Texture Source. Overrides AAssetImporter<TextureSource>.ImportHeader(Stream, out TextureSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Importers.TexDmpImporter.html": {
    "href": "api/Evergine.Assets.Importers.TexDmpImporter.html",
    "title": "Class TexDmpImporter | Evergine Doc",
    "keywords": "Class TexDmpImporter Custom format used to dump Evergine Textures to file. Inheritance object AAssetImporter<TextureSource> TexDmpImporter Implements IAssetImporter Inherited Members AAssetImporter<TextureSource>.ImportSource(Stream, bool, bool) AAssetImporter<TextureSource>.GenerateAdditionalAssets(Stream, TextureSource) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Importers Assembly: Evergine.Assets.dll Syntax public class TexDmpImporter : AAssetImporter<TextureSource>, IAssetImporter Properties Extensions Gets the importer extension. Declaration public override string[] Extensions { get; } Property Value Type Description string[] Overrides Evergine.Framework.Assets.Importers.AAssetImporter<Evergine.Framework.Assets.TextureSource>.Extensions Methods ImportData(Stream, TextureSource, bool) Import the asset data. Declaration public override void ImportData(Stream stream, TextureSource source, bool rawAsset) Parameters Type Name Description Stream stream The stream. TextureSource source bool rawAsset The asset is loaded as raw asset. Overrides AAssetImporter<TextureSource>.ImportData(Stream, TextureSource, bool) ImportHeader(Stream, out TextureSource) Decode TGA Header. Declaration public override void ImportHeader(Stream stream, out TextureSource source) Parameters Type Name Description Stream stream Image stream. TextureSource source Texture Source. Overrides AAssetImporter<TextureSource>.ImportHeader(Stream, out TextureSource) Implements Evergine.Framework.Assets.Importers.IAssetImporter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.TextureAssetHelper.html": {
    "href": "api/Evergine.Assets.TextureAssetHelper.html",
    "title": "Class TextureAssetHelper | Evergine Doc",
    "keywords": "Class TextureAssetHelper The texture asset helper class. Inheritance object TextureAssetHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets Assembly: Evergine.Assets.dll Syntax public class TextureAssetHelper Methods FillDataPartFromImage(Image<Rgba32>, TextureDataPart, bool) Fills the data part from ImageSharp image. Declaration public static void FillDataPartFromImage(Image<Rgba32> image, TextureDataPart dataPart, bool premultiplyAlpha) Parameters Type Name Description Image<Rgba32> image The image. TextureDataPart dataPart The data part. bool premultiplyAlpha Premultiply the alpha. FillDataPartFromImage(Image<Rgba32>, TextureDataPart, int, int, bool) Fills the data part from ImageSharp image. Declaration public static void FillDataPartFromImage(Image<Rgba32> image, TextureDataPart dataPart, int textureIndex, int mipmapIndex, bool premultiplyAlpha) Parameters Type Name Description Image<Rgba32> image The image. TextureDataPart dataPart The data part. int textureIndex Index of the texture. int mipmapIndex Index of the mipmap. bool premultiplyAlpha Premultiply the alpha. PremultiplyAlpha(ref Span<Rgba32>) Premultiplies the alpha of the texture. Declaration public static void PremultiplyAlpha(ref Span<Rgba32> pixels) Parameters Type Name Description Span<Rgba32> pixels The pixels of the texture. TextureDataFromAsset(TextureMetaFile, TextureInfoPart) Generates the TextureDataPart object from a texture meta file and a textureInfo. Declaration public static TextureDataPart TextureDataFromAsset(TextureMetaFile textureMeta, TextureInfoPart outTexInfo) Parameters Type Name Description TextureMetaFile textureMeta The texture metafile. TextureInfoPart outTexInfo The texture info part. Returns Type Description TextureDataPart The result TextureDataPart object. TextureInfoFromAsset(TextureMetaFile, TextureProfile) Gets an exported TextureInfo part from an asset. Declaration public static TextureInfoPart TextureInfoFromAsset(TextureMetaFile texture, TextureProfile profile) Parameters Type Name Description TextureMetaFile texture The texture metafile. TextureProfile profile The desired profile. Returns Type Description TextureInfoPart The result texture info part from the asset. TextureInfoFromAsset(TextureMetaFile, string) Gets an exported TextureInfo part from an asset. Declaration public static TextureInfoPart TextureInfoFromAsset(TextureMetaFile texture, string profileName) Parameters Type Name Description TextureMetaFile texture The texture metafile. string profileName The desired profile name. Returns Type Description TextureInfoPart The result texture info part from the asset. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.TextureExtension.html": {
    "href": "api/Evergine.Assets.TextureExtension.html",
    "title": "Class TextureExtension | Evergine Doc",
    "keywords": "Class TextureExtension The texture extension methods class. Inheritance object TextureExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets Assembly: Evergine.Assets.dll Syntax public static class TextureExtension Methods SafeToStream(Texture, GraphicsContext) Take a snapshot of the texture. Declaration public static Stream SafeToStream(this Texture texture, GraphicsContext context) Parameters Type Name Description Texture texture The Texture. GraphicsContext context The GraphicsContext to save. Returns Type Description Stream A Stream with the snapshot in jpg. SaveToFile(Texture, GraphicsContext, string) Save a texture in a file. Declaration public static void SaveToFile(this Texture texture, GraphicsContext context, string outputPath) Parameters Type Name Description Texture texture The Texture. GraphicsContext context The GraphicsContext to save. string outputPath The path for the out put file."
  },
  "api/Evergine.Assets.Utils.AssetsCache.html": {
    "href": "api/Evergine.Assets.Utils.AssetsCache.html",
    "title": "Class AssetsCache | Evergine Doc",
    "keywords": "Class AssetsCache Helper class for assets cache file. Inheritance object AssetsCache Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Utils Assembly: Evergine.Assets.dll Syntax public class AssetsCache : IDisposable Constructors AssetsCache(ExportContext) Initializes a new instance of the AssetsCache class. Declaration public AssetsCache(ExportContext exportContext) Parameters Type Name Description ExportContext exportContext The export context. Properties CacheFilePath Gets the cache file path. Declaration public string CacheFilePath { get; } Property Value Type Description string Methods Add(AssetItem, ExportResult) Adds the specified asset item. Declaration public void Add(AssetItem assetItem, ExportResult exportResult) Parameters Type Name Description AssetItem assetItem The asset item. ExportResult exportResult The asset export result. Dispose() Declaration public void Dispose() Exists(AssetItem, out string) Checks if the asset export exists in the output directory and the hash is valid. Declaration public bool Exists(AssetItem assetItem, out string exportOutput) Parameters Type Name Description AssetItem assetItem The asset item. string exportOutput The export output file. Returns Type Description bool true if the asset export exists in the output directory and the hash is valid; otherwise, return false. Invalidate(AssetItem) Invalidates the cache information of the specified asset. Declaration public bool Invalidate(AssetItem assetItem) Parameters Type Name Description AssetItem assetItem The asset item. Returns Type Description bool true if the asset export exists in the cache and the information has been invalidated; otherwise, return false. Save() Saves this instance. Declaration public void Save() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Utils.Hasher.html": {
    "href": "api/Evergine.Assets.Utils.Hasher.html",
    "title": "Class Hasher | Evergine Doc",
    "keywords": "Class Hasher Helper class to calculate hashes. Inheritance object Hasher Implements IHasher IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Assets.Utils Assembly: Evergine.Assets.dll Syntax public class Hasher : IHasher, IDisposable Constructors Hasher() Initializes a new instance of the Hasher class. Declaration public Hasher() Properties WeProjFileInfo Gets or sets the weprojFileInfo. Declaration public FileInfo WeProjFileInfo { get; set; } Property Value Type Description FileInfo Methods CalculateFileHash(AssetItem) Calculate the hash for an AssetItem. Declaration public string CalculateFileHash(AssetItem assetItem) Parameters Type Name Description AssetItem assetItem The AssetItem. Returns Type Description string The hash. ComputeElementHash(ContentElement) Calculate the hash for a ContentElement. Declaration public string ComputeElementHash(ContentElement element) Parameters Type Name Description ContentElement element The ContentElement. Returns Type Description string The hash. ComputeHash(string, string) Calculate the hash for a file in a relative path. Declaration public string ComputeHash(string filePath, string relative) Parameters Type Name Description string filePath The file path. string relative The relative. Returns Type Description string The hash. Dispose() Declaration public void Dispose() Implements IHasher IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Assets.Utils.html": {
    "href": "api/Evergine.Assets.Utils.html",
    "title": "Namespace Evergine.Assets.Utils | Evergine Doc",
    "keywords": "Namespace Evergine.Assets.Utils Classes AssetsCache Helper class for assets cache file. Hasher Helper class to calculate hashes. Interfaces IHasher This interfaces defines a Hasher."
  },
  "api/Evergine.Assets.Utils.IHasher.html": {
    "href": "api/Evergine.Assets.Utils.IHasher.html",
    "title": "Interface IHasher | Evergine Doc",
    "keywords": "Interface IHasher This interfaces defines a Hasher. Namespace: Evergine.Assets.Utils Assembly: Evergine.Assets.dll Syntax public interface IHasher Properties WeProjFileInfo Gets or sets the weprojFileInfo. Declaration FileInfo WeProjFileInfo { get; set; } Property Value Type Description FileInfo Methods CalculateFileHash(AssetItem) Calculate the file hash. Declaration string CalculateFileHash(AssetItem assetItem) Parameters Type Name Description AssetItem assetItem The asset item. Returns Type Description string The hash. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletAbstractGeneric6DofJoint3D-3.html": {
    "href": "api/Evergine.Bullet.BulletAbstractGeneric6DofJoint3D-3.html",
    "title": "Class BulletAbstractGeneric6DofJoint3D<T, K, J> | Evergine Doc",
    "keywords": "Class BulletAbstractGeneric6DofJoint3D<T, K, J> The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<T, K> BulletAbstractGeneric6DofJoint3D<T, K, J> BulletGeneric6DofJoint3D BulletGeneric6DofSpringJoint3D Implements IJoint3D IDisposable Inherited Members BulletJoint3D<T, K>.joint BulletJoint3D<T, K>.def BulletJoint3D<T, K>.BreakingImpulseThreshold BulletJoint3D<T, K>.InternalJoint BulletJoint3D<T, K>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public abstract class BulletAbstractGeneric6DofJoint3D<T, K, J> : BulletJoint3D<T, K>, IJoint3D, IDisposable where T : Generic6DofConstraint where K : GenericAbstract6DofJointDef3D<J> where J : IGeneric6DofJoint3D Type Parameters Name Description T The bullet constraint type. K The def type. J The joint interface. Constructors BulletAbstractGeneric6DofJoint3D(BulletPhysicManager3D, K) Initializes a new instance of the BulletAbstractGeneric6DofJoint3D<T, K, J> class. Declaration public BulletAbstractGeneric6DofJoint3D(BulletPhysicManager3D simulation, K def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. K def The definition. Properties AngularLowerLimit Gets or sets the angular lower limit. Declaration public Vector3 AngularLowerLimit { get; set; } Property Value Type Description Vector3 AngularUpperLimit Gets or sets the angular upper limit. Declaration public Vector3 AngularUpperLimit { get; set; } Property Value Type Description Vector3 Flags Gets the flags. Declaration public int Flags { get; } Property Value Type Description int FrameOffsetA Gets the frame offset A. Declaration public Matrix4x4 FrameOffsetA { get; } Property Value Type Description Matrix4x4 FrameOffsetB Gets the frame offset B. Declaration public Matrix4x4 FrameOffsetB { get; } Property Value Type Description Matrix4x4 LinearLowerLimit Gets or sets the linear lower limit. Declaration public Vector3 LinearLowerLimit { get; set; } Property Value Type Description Vector3 LinearUpperLimit Gets or sets the linear upper limit. Declaration public Vector3 LinearUpperLimit { get; set; } Property Value Type Description Vector3 UseFrameOffset Gets or sets a value indicating whether the frame offsets are enabled. Declaration public bool UseFrameOffset { get; set; } Property Value Type Description bool UseLinearReferenceFrameA Gets or sets a value indicating whether the joint use A as a Frame reference. Declaration public bool UseLinearReferenceFrameA { get; set; } Property Value Type Description bool Methods CreateJoint() Instantiate joint. Declaration protected override T CreateJoint() Returns Type Description T The new joint. Overrides BulletJoint3D<T, K>.CreateJoint() GetAngle(DOFType) Gets the angle of the axis. Declaration public float GetAngle(DOFType axisIndex) Parameters Type Name Description DOFType axisIndex Axis index 0:X 1:Y 2:Z. Returns Type Description float The angle. GetAxis(DOFType) Gets the axis. Declaration public Vector3 GetAxis(DOFType axisIndex) Parameters Type Name Description DOFType axisIndex Axis index 0:X 1:Y 2:Z. Returns Type Description Vector3 The axis. IsLimited(DOFType) Checks if an axis is limited. Declaration public bool IsLimited(DOFType axisIndex) Parameters Type Name Description DOFType axisIndex Axis index 0:X 1:Y 2:Z. Returns Type Description bool if the axis is limited. SetAxis(Vector3, Vector3) Set axis. Declaration public void SetAxis(Vector3 axis1, Vector3 axis2) Parameters Type Name Description Vector3 axis1 The axis 1. Vector3 axis2 The axis 2. SetFrames(Matrix4x4, Matrix4x4) Set frames. Declaration public void SetFrames(Matrix4x4 frameA, Matrix4x4 frameB) Parameters Type Name Description Matrix4x4 frameA The frame A. Matrix4x4 frameB The frame B. SetLimit(DOFType, float, float) Sets the axis. Declaration public void SetLimit(DOFType axis, float low, float high) Parameters Type Name Description DOFType axis Axis index 0:X 1:Y 2:Z. float low The low limit. float high The high limit. Implements Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletBoxCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletBoxCollider3D.html",
    "title": "Class BulletBoxCollider3D | Evergine Doc",
    "keywords": "Class BulletBoxCollider3D The BulletBoxCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<BoxShape> BulletBoxCollider3D Implements IBoxColliderShape3D IColliderShape3D IDisposable Inherited Members BulletCollider3D<BoxShape>.LocalScaling BulletCollider3D<BoxShape>.InternalCollider BulletCollider3D<BoxShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletBoxCollider3D : BulletCollider3D<BoxShape>, IBoxColliderShape3D, IColliderShape3D, IDisposable Constructors BulletBoxCollider3D() Initializes a new instance of the BulletBoxCollider3D class. Declaration public BulletBoxCollider3D() Properties Size Gets or sets the size of the box collider. Declaration public Vector3 Size { get; set; } Property Value Type Description Vector3 Methods InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() RefreshMargin() Refresh margin. Declaration protected override void RefreshMargin() Overrides BulletCollider3D.RefreshMargin() Implements Evergine.Framework.Physics3D.IBoxColliderShape3D Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCapsuleCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletCapsuleCollider3D.html",
    "title": "Class BulletCapsuleCollider3D | Evergine Doc",
    "keywords": "Class BulletCapsuleCollider3D The BulletCapsuleCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<CapsuleShape> BulletCapsuleCollider3D Implements ICapsuleColliderShape3D IColliderShape3D IDisposable Inherited Members BulletCollider3D<CapsuleShape>.LocalScaling BulletCollider3D<CapsuleShape>.InternalCollider BulletCollider3D<CapsuleShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletCapsuleCollider3D : BulletCollider3D<CapsuleShape>, ICapsuleColliderShape3D, IColliderShape3D, IDisposable Constructors BulletCapsuleCollider3D() Initializes a new instance of the BulletCapsuleCollider3D class. Declaration public BulletCapsuleCollider3D() Properties Height Gets or sets the height of the capsule. Declaration public float Height { get; set; } Property Value Type Description float Radius Gets or sets the radius of the capsule. Declaration public float Radius { get; set; } Property Value Type Description float Methods InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() Implements Evergine.Framework.Physics3D.ICapsuleColliderShape3D Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCharacterController3D.html": {
    "href": "api/Evergine.Bullet.BulletCharacterController3D.html",
    "title": "Class BulletCharacterController3D | Evergine Doc",
    "keywords": "Class BulletCharacterController3D The BulletCollisionObject3D implements Bullet collision object for Evergine. Inheritance object BulletPhysicAction3D BulletCharacterController3D Implements IDisposable ICharacterController3D IPhysicAction3D Inherited Members BulletPhysicAction3D.UserData BulletPhysicAction3D.InternalController object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletCharacterController3D : BulletPhysicAction3D, IDisposable, ICharacterController3D, IPhysicAction3D Constructors BulletCharacterController3D(BulletPhysicManager3D, BulletGhostBody3D, float) Initializes a new instance of the BulletCharacterController3D class. Declaration public BulletCharacterController3D(BulletPhysicManager3D simulation3D, BulletGhostBody3D ghostBody, float stepHeigh) Parameters Type Name Description BulletPhysicManager3D simulation3D The bullet world. BulletGhostBody3D ghostBody The definition of static body. float stepHeigh The step heigh. Properties FallSpeed Gets or sets the fall speed. Declaration public float FallSpeed { get; set; } Property Value Type Description float Gravity Gets or sets the character gravity. Declaration public float Gravity { get; set; } Property Value Type Description float JumpSpeed Gets or sets the jump speed. Declaration public float JumpSpeed { get; set; } Property Value Type Description float MaxSlope Gets or sets the max slope. Declaration public float MaxSlope { get; set; } Property Value Type Description float OnGround Gets a value indicating whether this character is on the ground. Declaration public bool OnGround { get; } Property Value Type Description bool StepHeight Gets or sets the fall speed. Declaration public float StepHeight { get; set; } Property Value Type Description float Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides BulletPhysicAction3D.Dispose() Jump() Jumps this character. Declaration public void Jump() Jump(Vector3) Jumps this character. Declaration public void Jump(Vector3 jumpDirection) Parameters Type Name Description Vector3 jumpDirection The direction. SetVelocity(Vector3) Sets the character velocity. Declaration public void SetVelocity(Vector3 velocity) Parameters Type Name Description Vector3 velocity The velociy vector. Teleport(Vector3) Teleports the specified character. Declaration public void Teleport(Vector3 newPosition) Parameters Type Name Description Vector3 newPosition The new position. Implements IDisposable Evergine.Framework.Physics3D.ICharacterController3D Evergine.Framework.Physics3D.IPhysicAction3D Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCollider3D-1.html": {
    "href": "api/Evergine.Bullet.BulletCollider3D-1.html",
    "title": "Class BulletCollider3D<T> | Evergine Doc",
    "keywords": "Class BulletCollider3D<T> The BulletCollider3D is a base class for all 3D colliders implemented by Bullet. Inheritance object BulletCollider3D BulletCollider3D<T> BulletBoxCollider3D BulletCapsuleCollider3D BulletCompoundCollider3D BulletConeCollider3D BulletConvexHullCollider3D BulletCylinderCollider3D BulletEmptyCollider3D BulletMeshCollider3D BulletSphereCollider3D Implements IColliderShape3D IDisposable Inherited Members BulletCollider3D.offset BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin BulletCollider3D.InternalRefreshShapeDimension() BulletCollider3D.FireOnShapeInstanceChanged() BulletCollider3D.ColliderOffsetTransformChanged(object, EventArgs) BulletCollider3D.RefreshMargin() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public abstract class BulletCollider3D<T> : BulletCollider3D, IColliderShape3D, IDisposable where T : CollisionShape Type Parameters Name Description T The Bullet collision shape type. Properties InternalCollider Gets the internal collider. Declaration public override object InternalCollider { get; } Property Value Type Description object Overrides BulletCollider3D.InternalCollider LocalScaling Gets or setsthe local scaling. Declaration public override Vector3 LocalScaling { get; set; } Property Value Type Description Vector3 Overrides BulletCollider3D.LocalScaling Methods Dispose() Dispose this collider 3D instance. Declaration public override void Dispose() Overrides BulletCollider3D.Dispose() TestPointByInsideMethod(ref Vector3, float) Test if a point is inside of that shape. Declaration protected bool TestPointByInsideMethod(ref Vector3 point, float tolerance) Parameters Type Name Description Vector3 point The point in world coordinates. float tolerance The tolerance factor. Returns Type Description bool True if this point is inside the shape. TestPointByRayCast(ref Vector3, float) Test if a point is inside of that shape. Declaration protected bool TestPointByRayCast(ref Vector3 point, float tolerance) Parameters Type Name Description Vector3 point The point in world coordinates. float tolerance The tolerance factor. Returns Type Description bool True if this point is inside the shape. Implements Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletCollider3D.html",
    "title": "Class BulletCollider3D | Evergine Doc",
    "keywords": "Class BulletCollider3D The BulletCollider3D is a base class for all 3D colliders implemented by Bullet. Inheritance object BulletCollider3D BulletCollider3D<T> Implements IColliderShape3D IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public abstract class BulletCollider3D : IColliderShape3D, IDisposable Fields offset The position offset. Declaration protected Vector3 offset Field Value Type Description Vector3 Properties ColliderComponent Gets or sets collider component. This is usually the component that has created this collider shape. Declaration public Collider3D ColliderComponent { get; set; } Property Value Type Description Collider3D InternalCollider Gets the internal collider. Declaration public abstract object InternalCollider { get; } Property Value Type Description object LocalScaling Gets or sets the local scaling. Declaration public abstract Vector3 LocalScaling { get; set; } Property Value Type Description Vector3 Margin Gets or sets the collision margin of this shape. Declaration public virtual float Margin { get; set; } Property Value Type Description float OffsetTransform Gets or sets the center of the collider. Declaration public Matrix4x4 OffsetTransform { get; set; } Property Value Type Description Matrix4x4 Methods ColliderOffsetTransformChanged(object, EventArgs) Refresh the offset transform of the collider. Declaration protected virtual void ColliderOffsetTransformChanged(object sender, EventArgs e) Parameters Type Name Description object sender The collider. EventArgs e The arguments. Dispose() Dispose this collider 3D instance. Declaration public virtual void Dispose() FireOnShapeInstanceChanged() Fire OnShapeInstanceChanged event. Declaration protected void FireOnShapeInstanceChanged() InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected abstract void InternalRefreshShapeDimension() RefreshMargin() Refresh margin. Declaration protected virtual void RefreshMargin() Implements Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCollisionInfo3D.html": {
    "href": "api/Evergine.Bullet.BulletCollisionInfo3D.html",
    "title": "Class BulletCollisionInfo3D | Evergine Doc",
    "keywords": "Class BulletCollisionInfo3D The collision info 3d implementation for bullet. Inheritance object CollisionInfo3D BulletCollisionInfo3D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletCollisionInfo3D : CollisionInfo3D Fields ManifoldId The manifold index. Declaration public int ManifoldId Field Value Type Description int Properties Id Gets the contact info id. Declaration public override int Id { get; } Property Value Type Description int Overrides Evergine.Framework.Physics3D.CollisionInfo3D.Id NumContacts Gets the number of contacts. Declaration public override int NumContacts { get; } Property Value Type Description int Overrides Evergine.Framework.Physics3D.CollisionInfo3D.NumContacts OtherBody Gets the Collider B. Declaration public override PhysicBody3D OtherBody { get; } Property Value Type Description PhysicBody3D Overrides Evergine.Framework.Physics3D.CollisionInfo3D.OtherBody State Gets the collision state. Declaration public override CollisionInfo3DState State { get; } Property Value Type Description CollisionInfo3DState Overrides Evergine.Framework.Physics3D.CollisionInfo3D.State ThisBody Gets the Collider A. Declaration public override PhysicBody3D ThisBody { get; } Property Value Type Description PhysicBody3D Overrides Evergine.Framework.Physics3D.CollisionInfo3D.ThisBody Methods GetContact(int, out ContactPoint3D) Gets the contact point at the specific index. Declaration public override bool GetContact(int index, out ContactPoint3D contact) Parameters Type Name Description int index The index of the contact to retrieve. ContactPoint3D contact The retrieved contact. Returns Type Description bool True if the contact has been susccessfully retrieved. Overrides CollisionInfo3D.GetContact(int, out ContactPoint3D) GetContacts(ContactPoint3D[]) Retrieve all contact points for this collision. Declaration public override int GetContacts(ContactPoint3D[] contacts) Parameters Type Name Description ContactPoint3D[] contacts Array of contacts used to retrieve the results. Returns Type Description int The number of contacts retrieveed in the array. Overrides Evergine.Framework.Physics3D.CollisionInfo3D.GetContacts(Evergine.Framework.Physics3D.ContactPoint3D[]) GetContacts(ICollection<ContactPoint3D>) Retrieve all contact points for this collision. Declaration public override void GetContacts(ICollection<ContactPoint3D> contacts) Parameters Type Name Description ICollection<ContactPoint3D> contacts A collection of contacts used to retrieve the results. Overrides CollisionInfo3D.GetContacts(ICollection<ContactPoint3D>) Remarks The collection is not cleared. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCollisionInfoPool.html": {
    "href": "api/Evergine.Bullet.BulletCollisionInfoPool.html",
    "title": "Class BulletCollisionInfoPool | Evergine Doc",
    "keywords": "Class BulletCollisionInfoPool Collision Manifold. Inheritance object ObjectPool<BulletCollisionInfo3D> BulletCollisionInfoPool Inherited Members ObjectPool<BulletCollisionInfo3D>.Size ObjectPool<BulletCollisionInfo3D>.Clear() ObjectPool<BulletCollisionInfo3D>.Get() ObjectPool<BulletCollisionInfo3D>.Return(BulletCollisionInfo3D) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletCollisionInfoPool : ObjectPool<BulletCollisionInfo3D> Constructors BulletCollisionInfoPool(BulletPhysicManager3D) Initializes a new instance of the BulletCollisionInfoPool class. Declaration public BulletCollisionInfoPool(BulletPhysicManager3D physicManager) Parameters Type Name Description BulletPhysicManager3D physicManager The associated physic manager. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCompoundCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletCompoundCollider3D.html",
    "title": "Class BulletCompoundCollider3D | Evergine Doc",
    "keywords": "Class BulletCompoundCollider3D The BulletSphereCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<CompoundShape> BulletCompoundCollider3D Implements IColliderShape3D IDisposable Inherited Members BulletCollider3D<CompoundShape>.LocalScaling BulletCollider3D<CompoundShape>.InternalCollider BulletCollider3D<CompoundShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletCompoundCollider3D : BulletCollider3D<CompoundShape>, IColliderShape3D, IDisposable Constructors BulletCompoundCollider3D(BulletPhysicBody3D) Initializes a new instance of the BulletCompoundCollider3D class. Declaration public BulletCompoundCollider3D(BulletPhysicBody3D body) Parameters Type Name Description BulletPhysicBody3D body The physic associated body. Methods AddCollider(BulletCollider3D) Add collider. Declaration public void AddCollider(BulletCollider3D collider) Parameters Type Name Description BulletCollider3D collider The collider. InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() RemoveCollider(BulletCollider3D) Remove collider. Declaration public void RemoveCollider(BulletCollider3D collider) Parameters Type Name Description BulletCollider3D collider The collider to remove. Implements Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletConeCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletConeCollider3D.html",
    "title": "Class BulletConeCollider3D | Evergine Doc",
    "keywords": "Class BulletConeCollider3D The BulletConeCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<ConeShape> BulletConeCollider3D Implements IConeColliderShape3D IColliderShape3D IDisposable Inherited Members BulletCollider3D<ConeShape>.LocalScaling BulletCollider3D<ConeShape>.InternalCollider BulletCollider3D<ConeShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletConeCollider3D : BulletCollider3D<ConeShape>, IConeColliderShape3D, IColliderShape3D, IDisposable Constructors BulletConeCollider3D() Initializes a new instance of the BulletConeCollider3D class. Declaration public BulletConeCollider3D() Properties Height Gets or sets the height of the capsule. Declaration public float Height { get; set; } Property Value Type Description float Radius Gets or sets the radius of the capsule. Declaration public float Radius { get; set; } Property Value Type Description float Methods InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() Implements Evergine.Framework.Physics3D.IConeColliderShape3D Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletConeTwistJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletConeTwistJoint3D.html",
    "title": "Class BulletConeTwistJoint3D | Evergine Doc",
    "keywords": "Class BulletConeTwistJoint3D The BulletConeTwistJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D> BulletConeTwistJoint3D Implements IConeTwistJoint3D IJoint3D IDisposable Inherited Members BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D>.joint BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D>.def BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D>.BreakingImpulseThreshold BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D>.InternalJoint BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletConeTwistJoint3D : BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D>, IConeTwistJoint3D, IJoint3D, IDisposable Constructors BulletConeTwistJoint3D(BulletPhysicManager3D, ConeTwistJointDef3D) Initializes a new instance of the BulletConeTwistJoint3D class. Declaration public BulletConeTwistJoint3D(BulletPhysicManager3D simulation, ConeTwistJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. ConeTwistJointDef3D def The definition. Properties AFrame Gets the Reference frame on Body A. Declaration public Matrix4x4 AFrame { get; } Property Value Type Description Matrix4x4 AngularOnly Gets or sets a value indicating whether only affects angular movement to the joint. Declaration public bool AngularOnly { get; set; } Property Value Type Description bool BFrame Gets the Reference frame on Body B. Declaration public Matrix4x4 BFrame { get; } Property Value Type Description Matrix4x4 Damping Gets or sets the damping value. Declaration public float Damping { get; set; } Property Value Type Description float FixThresh Gets or sets the fix thresh. Declaration public float FixThresh { get; set; } Property Value Type Description float Flags Gets the hinge flags. Declaration public int Flags { get; } Property Value Type Description int FrameOffsetA Gets the frame offset for body A. Declaration public Matrix4x4 FrameOffsetA { get; } Property Value Type Description Matrix4x4 FrameOffsetB Gets the frame offset for body B. Declaration public Matrix4x4 FrameOffsetB { get; } Property Value Type Description Matrix4x4 IsMaxMotorImpulseNormalized Gets a value indicating whether this motor impulse is normalized. Declaration public bool IsMaxMotorImpulseNormalized { get; } Property Value Type Description bool IsMotorEnabled Gets or sets a value indicating whether this motor is enabled. Declaration public bool IsMotorEnabled { get; set; } Property Value Type Description bool IsPastSwingLimit Gets a value indicating whether the swing limit is past. Declaration public bool IsPastSwingLimit { get; } Property Value Type Description bool LimitSoftness Gets the limit softness. Declaration public float LimitSoftness { get; } Property Value Type Description float MaxMotorImpulse Gets or sets and sets maximum motor impulse. Declaration public float MaxMotorImpulse { get; set; } Property Value Type Description float MotorTarget Gets or sets the motor target. Declaration public Quaternion MotorTarget { get; set; } Property Value Type Description Quaternion RelaxationFactor Gets the relaxation factor. Declaration public float RelaxationFactor { get; } Property Value Type Description float SolveSwingLimit Gets the swing solve limit. Declaration public int SolveSwingLimit { get; } Property Value Type Description int SolveTwistLimit Gets the twist solve limit. Declaration public int SolveTwistLimit { get; } Property Value Type Description int SwingSpan1 Gets the swing span 1. Declaration public float SwingSpan1 { get; } Property Value Type Description float SwingSpan2 Gets the swing span 2. Declaration public float SwingSpan2 { get; } Property Value Type Description float TwistLimitSign Gets or sets sign of twist limit. Declaration public float TwistLimitSign { get; set; } Property Value Type Description float TwistSpan Gets the twist span. Declaration public float TwistSpan { get; } Property Value Type Description float Methods CreateJoint() Instantiate joint. Declaration protected override ConeTwistConstraint CreateJoint() Returns Type Description ConeTwistConstraint The new joint. Overrides BulletJoint3D<ConeTwistConstraint, ConeTwistJointDef3D>.CreateJoint() SetFrames(Matrix4x4, Matrix4x4) Set frames. Declaration public void SetFrames(Matrix4x4 frameA, Matrix4x4 frameB) Parameters Type Name Description Matrix4x4 frameA The frame A. Matrix4x4 frameB The frame B. SetLimit(float, float, float, float, float, float) Set limits. Declaration public void SetLimit(float swingSpan1, float swingSpan2, float twistSpan, float softness = 1, float biasFactor = 0.3, float relaxationFactor = 1) Parameters Type Name Description float swingSpan1 The swing span 1. float swingSpan2 The swing span 2. float twistSpan The twist span. float softness How much the hinge rotates for a given force. float biasFactor offset for the relaxed rotation of the hinge. float relaxationFactor How much force is applied internally to bring the hinge in its central rotation. SetMaxMotorImpulseNormalized(float) Sets the max motor impulse normalized. Declaration public void SetMaxMotorImpulseNormalized(float impulse) Parameters Type Name Description float impulse The impulse. SetMotorTargetInConstraintSpace(Quaternion) Set the motor target in constraint space. Declaration public void SetMotorTargetInConstraintSpace(Quaternion target) Parameters Type Name Description Quaternion target The target orientation. Implements Evergine.Framework.Physics3D.IConeTwistJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletContactManager.html": {
    "href": "api/Evergine.Bullet.BulletContactManager.html",
    "title": "Class BulletContactManager | Evergine Doc",
    "keywords": "Class BulletContactManager Collision Manifold. Inheritance object DisposableObject BulletContactManager Implements IDisposable Inherited Members DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletContactManager : DisposableObject, IDisposable Constructors BulletContactManager(BulletPhysicManager3D) Initializes a new instance of the BulletContactManager class. Declaration public BulletContactManager(BulletPhysicManager3D physicManager) Parameters Type Name Description BulletPhysicManager3D physicManager The standard manager. Fields CollisionInfoPool The collision info pool. Declaration public readonly BulletCollisionInfoPool CollisionInfoPool Field Value Type Description BulletCollisionInfoPool Methods Destroy() Destroy all resources of this instance. Declaration protected override void Destroy() Overrides Evergine.Framework.DisposableObject.Destroy() ProcessCollisions() Process collisions. Declaration public void ProcessCollisions() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletContactPoint3D.html": {
    "href": "api/Evergine.Bullet.BulletContactPoint3D.html",
    "title": "Struct BulletContactPoint3D | Evergine Doc",
    "keywords": "Struct BulletContactPoint3D Contact point between 2 colliders. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public struct BulletContactPoint3D Fields BodyA Collider A. Declaration public readonly IntPtr BodyA Field Value Type Description IntPtr BodyB Collider B. Declaration public readonly IntPtr BodyB Field Value Type Description IntPtr ContactPoint3D The Distance. Declaration public InternalContactPoint3D ContactPoint3D Field Value Type Description InternalContactPoint3D IndexA The Index of A collider. Declaration public readonly int IndexA Field Value Type Description int IndexB The Index of B collider. Declaration public readonly int IndexB Field Value Type Description int PartIdA The PartId of A collider. Declaration public readonly int PartIdA Field Value Type Description int PartIdB The PartId of B collider. Declaration public readonly int PartIdB Field Value Type Description int Properties ShapeIdA Gets the Id of the shape A. Declaration public int ShapeIdA { get; } Property Value Type Description int ShapeIdB Gets the Id of the shape B. Declaration public int ShapeIdB { get; } Property Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletConvexHullCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletConvexHullCollider3D.html",
    "title": "Class BulletConvexHullCollider3D | Evergine Doc",
    "keywords": "Class BulletConvexHullCollider3D The BulletConvexHullCollider3D implements Bullet convex hull collider. Inheritance object BulletCollider3D BulletCollider3D<ConvexHullShape> BulletConvexHullCollider3D Implements IMeshColliderShape3D IColliderShape3D IDisposable Inherited Members BulletCollider3D<ConvexHullShape>.InternalCollider BulletCollider3D<ConvexHullShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletConvexHullCollider3D : BulletCollider3D<ConvexHullShape>, IMeshColliderShape3D, IColliderShape3D, IDisposable Constructors BulletConvexHullCollider3D(Mesh) Initializes a new instance of the BulletConvexHullCollider3D class. Declaration public BulletConvexHullCollider3D(Mesh mesh) Parameters Type Name Description Mesh mesh The mesh. Properties Convex Gets or sets a value indicating whether we need to create a convex shape from the mesh. Declaration public bool Convex { get; set; } Property Value Type Description bool LocalScaling Gets or setsthe local scaling. Declaration public override Vector3 LocalScaling { get; set; } Property Value Type Description Vector3 Overrides BulletCollider3D<ConvexHullShape>.LocalScaling Mesh Gets or sets the mesh of the shape. Declaration public Mesh Mesh { get; set; } Property Value Type Description Mesh Size Gets or sets the local scaling. Declaration public Vector3 Size { get; set; } Property Value Type Description Vector3 Methods InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() Implements Evergine.Framework.Physics3D.IMeshColliderShape3D Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletCylinderCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletCylinderCollider3D.html",
    "title": "Class BulletCylinderCollider3D | Evergine Doc",
    "keywords": "Class BulletCylinderCollider3D The BulletCapsuleCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<CylinderShape> BulletCylinderCollider3D Implements ICylinderColliderShape3D IColliderShape3D IDisposable Inherited Members BulletCollider3D<CylinderShape>.LocalScaling BulletCollider3D<CylinderShape>.InternalCollider BulletCollider3D<CylinderShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletCylinderCollider3D : BulletCollider3D<CylinderShape>, ICylinderColliderShape3D, IColliderShape3D, IDisposable Constructors BulletCylinderCollider3D() Initializes a new instance of the BulletCylinderCollider3D class. Declaration public BulletCylinderCollider3D() Properties Height Gets or sets the height of the capsule. Declaration public float Height { get; set; } Property Value Type Description float Radius Gets or sets the radius of the capsule. Declaration public float Radius { get; set; } Property Value Type Description float Methods InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() Implements Evergine.Framework.Physics3D.ICylinderColliderShape3D Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletDebugDraw3D.html": {
    "href": "api/Evergine.Bullet.BulletDebugDraw3D.html",
    "title": "Class BulletDebugDraw3D | Evergine Doc",
    "keywords": "Class BulletDebugDraw3D Bullet debug draw instance. Inheritance object BulletObject BulletDisposableObject EvergineDebugDraw BulletDebugDraw3D Implements IDisposable Inherited Members EvergineDebugDraw.Dispose(bool) EvergineDebugDraw.Reset() EvergineDebugDraw.DumpDrawCommands() EvergineDebugDraw.DrawLine(Vector3, Vector3, Vector3) EvergineDebugDraw.DrawLine(ref Vector3, ref Vector3, ref Vector3, ref Vector3) EvergineDebugDraw.DrawAabb(ref Vector3, ref Vector3, ref Vector3) EvergineDebugDraw.DrawArc(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, ref Vector3, bool, float) EvergineDebugDraw.DrawBox(ref Vector3, ref Vector3, ref Vector3) EvergineDebugDraw.DrawBox(ref Vector3, ref Vector3, ref Matrix4x4, ref Vector3) EvergineDebugDraw.DrawCapsule(float, float, int, ref Matrix4x4, ref Vector3) EvergineDebugDraw.DrawCone(float, float, int, ref Matrix4x4, ref Vector3) EvergineDebugDraw.DrawContactPoint(ref Vector3, ref Vector3, float, int, ref Vector3) EvergineDebugDraw.DrawCylinder(float, float, int, ref Matrix4x4, ref Vector3) EvergineDebugDraw.DrawPlane(ref Vector3, float, ref Matrix4x4, ref Vector3) EvergineDebugDraw.DrawSphere(ref Vector3, float, ref Vector3) EvergineDebugDraw.DrawSpherePatch(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, float, ref Vector3) EvergineDebugDraw.DrawSpherePatch(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, float, ref Vector3, float) EvergineDebugDraw.DrawTriangle(ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, float) EvergineDebugDraw.DrawTriangle(ref Vector3, ref Vector3, ref Vector3, ref Vector3, float) EvergineDebugDraw.DrawTransform(ref Matrix4x4, float) EvergineDebugDraw.PlaneSpace1(ref Vector3, out Vector3, out Vector3) EvergineDebugDraw.DebugMode EvergineDebugDraw.DefaultColors BulletDisposableObject.InitializeUserOwned(IntPtr) BulletDisposableObject.InitializeSubObject(IntPtr, BulletObject) BulletDisposableObject.Dispose() BulletDisposableObject.IsDisposed BulletObject.Initialize(IntPtr) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletDebugDraw3D : EvergineDebugDraw, IDisposable Constructors BulletDebugDraw3D() Initializes a new instance of the BulletDebugDraw3D class. Declaration public BulletDebugDraw3D() Fields ImplementationInstance the debug draw instance. Declaration public ISimulationDebugDraw3D ImplementationInstance Field Value Type Description ISimulationDebugDraw3D Properties Aabb Gets or sets the debug color of an AABB of an object. Declaration public Color Aabb { get; set; } Property Value Type Description Color ActiveObject Gets or sets the debug color of an Active Object. Declaration public Color ActiveObject { get; set; } Property Value Type Description Color ContactPoint Gets or sets the debug color of an AABB of a contact point. Declaration public Color ContactPoint { get; set; } Property Value Type Description Color DeactivatedObject Gets or sets the debug color of an Deactivated Object. Declaration public Color DeactivatedObject { get; set; } Property Value Type Description Color DisabledDeactivationObject Gets or sets the debug color of an disabled object that is going to disable its deactivation. Declaration public Color DisabledDeactivationObject { get; set; } Property Value Type Description Color DisabledSimulationObject Gets or sets the debug color of a disabled simulation object. Declaration public Color DisabledSimulationObject { get; set; } Property Value Type Description Color IsActive Gets a value indicating whether this debug draw is active. Declaration public bool IsActive { get; } Property Value Type Description bool WantsDeactivationObject Gets or sets the debug color of an Object to ve deactivate. Declaration public Color WantsDeactivationObject { get; set; } Property Value Type Description Color Methods Draw3DText(ref Vector3, string) Declaration public override void Draw3DText(ref Vector3 location, string textString) Parameters Type Name Description Vector3 location string textString Overrides EvergineDebugDraw.Draw3DText(ref Vector3, string) DrawLine(ref Vector3, ref Vector3, ref Vector3) Declaration public override void DrawLine(ref Vector3 from, ref Vector3 to, ref Vector3 color) Parameters Type Name Description Vector3 from Vector3 to Vector3 color Overrides EvergineDebugDraw.DrawLine(ref Vector3, ref Vector3, ref Vector3) DrawSphere(float, ref Matrix4x4, ref Vector3) Declaration public override void DrawSphere(float radius, ref Matrix4x4 transform, ref Vector3 color) Parameters Type Name Description float radius Matrix4x4 transform Vector3 color Overrides EvergineDebugDraw.DrawSphere(float, ref Matrix4x4, ref Vector3) ReportErrorWarning(string) Declaration public override void ReportErrorWarning(string warningString) Parameters Type Name Description string warningString Overrides EvergineDebugDraw.ReportErrorWarning(string) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletEmptyCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletEmptyCollider3D.html",
    "title": "Class BulletEmptyCollider3D | Evergine Doc",
    "keywords": "Class BulletEmptyCollider3D The BulletEmptyCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<EmptyShape> BulletEmptyCollider3D Implements IColliderShape3D IDisposable Inherited Members BulletCollider3D<EmptyShape>.LocalScaling BulletCollider3D<EmptyShape>.InternalCollider BulletCollider3D<EmptyShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletEmptyCollider3D : BulletCollider3D<EmptyShape>, IColliderShape3D, IDisposable Constructors BulletEmptyCollider3D() Initializes a new instance of the BulletEmptyCollider3D class. Declaration public BulletEmptyCollider3D() Methods InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() Implements Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletFixedJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletFixedJoint3D.html",
    "title": "Class BulletFixedJoint3D | Evergine Doc",
    "keywords": "Class BulletFixedJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<FixedConstraint, FixedJointDef3D> BulletFixedJoint3D Implements IFixedJoint3D IJoint3D IDisposable Inherited Members BulletJoint3D<FixedConstraint, FixedJointDef3D>.joint BulletJoint3D<FixedConstraint, FixedJointDef3D>.def BulletJoint3D<FixedConstraint, FixedJointDef3D>.BreakingImpulseThreshold BulletJoint3D<FixedConstraint, FixedJointDef3D>.InternalJoint BulletJoint3D<FixedConstraint, FixedJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletFixedJoint3D : BulletJoint3D<FixedConstraint, FixedJointDef3D>, IFixedJoint3D, IJoint3D, IDisposable Constructors BulletFixedJoint3D(BulletPhysicManager3D, FixedJointDef3D) Initializes a new instance of the BulletFixedJoint3D class. Declaration public BulletFixedJoint3D(BulletPhysicManager3D simulation, FixedJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. FixedJointDef3D def The definition. Properties FrameOffsetA Gets the frame offset for body A. Declaration public Matrix4x4 FrameOffsetA { get; } Property Value Type Description Matrix4x4 FrameOffsetB Gets the frame offset for body B. Declaration public Matrix4x4 FrameOffsetB { get; } Property Value Type Description Matrix4x4 Methods CreateJoint() Instantiate joint. Declaration protected override FixedConstraint CreateJoint() Returns Type Description FixedConstraint The new joint. Overrides BulletJoint3D<FixedConstraint, FixedJointDef3D>.CreateJoint() SetFrames(Matrix4x4, Matrix4x4) Set frames. Declaration public void SetFrames(Matrix4x4 frameA, Matrix4x4 frameB) Parameters Type Name Description Matrix4x4 frameA The frame A. Matrix4x4 frameB The frame B. Implements Evergine.Framework.Physics3D.IFixedJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletGearJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletGearJoint3D.html",
    "title": "Class BulletGearJoint3D | Evergine Doc",
    "keywords": "Class BulletGearJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<GearConstraint, GearJointDef3D> BulletGearJoint3D Implements IGearJoint3D IJoint3D IDisposable Inherited Members BulletJoint3D<GearConstraint, GearJointDef3D>.joint BulletJoint3D<GearConstraint, GearJointDef3D>.def BulletJoint3D<GearConstraint, GearJointDef3D>.BreakingImpulseThreshold BulletJoint3D<GearConstraint, GearJointDef3D>.InternalJoint BulletJoint3D<GearConstraint, GearJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletGearJoint3D : BulletJoint3D<GearConstraint, GearJointDef3D>, IGearJoint3D, IJoint3D, IDisposable Constructors BulletGearJoint3D(BulletPhysicManager3D, GearJointDef3D) Initializes a new instance of the BulletGearJoint3D class. Declaration public BulletGearJoint3D(BulletPhysicManager3D simulation, GearJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. GearJointDef3D def The definition. Properties AxisInA Gets or sets the axis in A. Declaration public Vector3 AxisInA { get; set; } Property Value Type Description Vector3 AxisInB Gets or sets the axis in B. Declaration public Vector3 AxisInB { get; set; } Property Value Type Description Vector3 Ratio Gets or sets the A:B gear ratio. Declaration public float Ratio { get; set; } Property Value Type Description float Methods CreateJoint() Instantiate joint. Declaration protected override GearConstraint CreateJoint() Returns Type Description GearConstraint The new joint. Overrides BulletJoint3D<GearConstraint, GearJointDef3D>.CreateJoint() Implements Evergine.Framework.Physics3D.IGearJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletGeneric6DofJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletGeneric6DofJoint3D.html",
    "title": "Class BulletGeneric6DofJoint3D | Evergine Doc",
    "keywords": "Class BulletGeneric6DofJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<Generic6DofConstraint, Generic6DofJointDef3D> BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D> BulletGeneric6DofJoint3D Implements IGeneric6DofJoint3D IJoint3D IDisposable Inherited Members BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.AngularLowerLimit BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.AngularUpperLimit BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.LinearLowerLimit BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.LinearUpperLimit BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.FrameOffsetA BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.FrameOffsetB BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.Flags BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.UseFrameOffset BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.UseLinearReferenceFrameA BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.SetAxis(Vector3, Vector3) BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.SetFrames(Matrix4x4, Matrix4x4) BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.SetLimit(DOFType, float, float) BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.GetAngle(DOFType) BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.GetAxis(DOFType) BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.IsLimited(DOFType) BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>.CreateJoint() BulletJoint3D<Generic6DofConstraint, Generic6DofJointDef3D>.joint BulletJoint3D<Generic6DofConstraint, Generic6DofJointDef3D>.def BulletJoint3D<Generic6DofConstraint, Generic6DofJointDef3D>.BreakingImpulseThreshold BulletJoint3D<Generic6DofConstraint, Generic6DofJointDef3D>.InternalJoint BulletJoint3D<Generic6DofConstraint, Generic6DofJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletGeneric6DofJoint3D : BulletAbstractGeneric6DofJoint3D<Generic6DofConstraint, Generic6DofJointDef3D, IGeneric6DofJoint3D>, IGeneric6DofJoint3D, IJoint3D, IDisposable Constructors BulletGeneric6DofJoint3D(BulletPhysicManager3D, Generic6DofJointDef3D) Initializes a new instance of the BulletGeneric6DofJoint3D class. Declaration public BulletGeneric6DofJoint3D(BulletPhysicManager3D simulation, Generic6DofJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. Generic6DofJointDef3D def The definition. Implements Evergine.Framework.Physics3D.IGeneric6DofJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletGeneric6DofSpringJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletGeneric6DofSpringJoint3D.html",
    "title": "Class BulletGeneric6DofSpringJoint3D | Evergine Doc",
    "keywords": "Class BulletGeneric6DofSpringJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D> BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D> BulletGeneric6DofSpringJoint3D Implements IGeneric6DofSpringJoint3D IGeneric6DofJoint3D IJoint3D IDisposable Inherited Members BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.AngularLowerLimit BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.AngularUpperLimit BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.LinearLowerLimit BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.LinearUpperLimit BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.FrameOffsetA BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.FrameOffsetB BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.Flags BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.UseFrameOffset BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.UseLinearReferenceFrameA BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.SetAxis(Vector3, Vector3) BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.SetFrames(Matrix4x4, Matrix4x4) BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.SetLimit(DOFType, float, float) BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.GetAngle(DOFType) BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.GetAxis(DOFType) BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.IsLimited(DOFType) BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.CreateJoint() BulletJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D>.joint BulletJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D>.def BulletJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D>.BreakingImpulseThreshold BulletJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D>.InternalJoint BulletJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletGeneric6DofSpringJoint3D : BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>, IGeneric6DofSpringJoint3D, IGeneric6DofJoint3D, IJoint3D, IDisposable Constructors BulletGeneric6DofSpringJoint3D(BulletPhysicManager3D, Generic6DofSpringJointDef3D) Initializes a new instance of the BulletGeneric6DofSpringJoint3D class. Declaration public BulletGeneric6DofSpringJoint3D(BulletPhysicManager3D simulation, Generic6DofSpringJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. Generic6DofSpringJointDef3D def The definition. Methods CreateJoint() Instantiate joint. Declaration protected override Generic6DofSpringConstraint CreateJoint() Returns Type Description Generic6DofSpringConstraint The new joint. Overrides BulletAbstractGeneric6DofJoint3D<Generic6DofSpringConstraint, Generic6DofSpringJointDef3D, IGeneric6DofSpringJoint3D>.CreateJoint() EnableSpring(DOFType, bool) Enable or disable the spring. Declaration public void EnableSpring(DOFType index, bool isEnabled) Parameters Type Name Description DOFType index DOF index. bool isEnabled Is enabled or not the spring. SetDamping(DOFType, float) Sets the spring damping. Declaration public void SetDamping(DOFType index, float damping) Parameters Type Name Description DOFType index DOF index. float damping The damping. SetEquilibriumPoint(DOFType, float) Sets the spring equilibrium point. Declaration public void SetEquilibriumPoint(DOFType index, float equilibriumPoint) Parameters Type Name Description DOFType index DOF index. float equilibriumPoint The equilibriumPoint. SetStiffness(DOFType, float) Setsa the spring stiffness. Declaration public void SetStiffness(DOFType index, float stiffness) Parameters Type Name Description DOFType index DOF index. float stiffness The stiffness. Implements Evergine.Framework.Physics3D.IGeneric6DofSpringJoint3D Evergine.Framework.Physics3D.IGeneric6DofJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletGhostBody3D.html": {
    "href": "api/Evergine.Bullet.BulletGhostBody3D.html",
    "title": "Class BulletGhostBody3D | Evergine Doc",
    "keywords": "Class BulletGhostBody3D The BulletGhostBody3D implements Bullet ghost object for Evergine. Inheritance object DisposableObject BulletPhysicBody3D BulletGhostBody3D Implements IGhostBody3D IPhysicBody3D IDisposable Inherited Members BulletPhysicBody3D.InternalBody BulletPhysicBody3D.BodyComponent BulletPhysicBody3D.IsSensor BulletPhysicBody3D.Friction BulletPhysicBody3D.Restitution BulletPhysicBody3D.Flags BulletPhysicBody3D.Transform BulletPhysicBody3D.ColliderShapes BulletPhysicBody3D.AnisotropicFriction BulletPhysicBody3D.CcdMotionThreshold BulletPhysicBody3D.CcdSweptSphereRadius BulletPhysicBody3D.CompanionId BulletPhysicBody3D.ContactDamping BulletPhysicBody3D.ContactProcessingThreshold BulletPhysicBody3D.ContactStiffness BulletPhysicBody3D.DeactivationTime BulletPhysicBody3D.HasContactResponse BulletPhysicBody3D.HitFraction BulletPhysicBody3D.InterpolationAngularVelocity BulletPhysicBody3D.InterpolationLinearVelocity BulletPhysicBody3D.InterpolationWorldTransform BulletPhysicBody3D.IsActive BulletPhysicBody3D.IslandTag BulletPhysicBody3D.IsKinematicObject BulletPhysicBody3D.IsStaticObject BulletPhysicBody3D.IsStaticOrKinematicObject BulletPhysicBody3D.RollingFriction BulletPhysicBody3D.SpinningFriction BulletPhysicBody3D.CollisionCategories BulletPhysicBody3D.MaskBits BulletPhysicBody3D.AddColliderShape(IColliderShape3D) BulletPhysicBody3D.RemoveColliderShape(IColliderShape3D) BulletPhysicBody3D.GetColliderShapeByIndex(int) BulletPhysicBody3D.GetColliderShapeIndex(BulletCollider3D) BulletPhysicBody3D.SetTransform(Vector3, Quaternion, Vector3) DisposableObject.Disposed DisposableObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletGhostBody3D : BulletPhysicBody3D, IGhostBody3D, IPhysicBody3D, IDisposable Constructors BulletGhostBody3D(BulletPhysicManager3D, GhostBodyDef3D) Initializes a new instance of the BulletGhostBody3D class. Declaration public BulletGhostBody3D(BulletPhysicManager3D simulation3D, GhostBodyDef3D bodyDef) Parameters Type Name Description BulletPhysicManager3D simulation3D The bullet world. GhostBodyDef3D bodyDef The definition of static body. Methods InstantiateCollisionObject(PhysicBodyDef3D) Create the rigid body. Declaration protected override void InstantiateCollisionObject(PhysicBodyDef3D bodyDef) Parameters Type Name Description PhysicBodyDef3D bodyDef The body definition. Overrides BulletPhysicBody3D.InstantiateCollisionObject(PhysicBodyDef3D) Implements Evergine.Framework.Physics3D.IGhostBody3D Evergine.Framework.Physics3D.IPhysicBody3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletHingeJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletHingeJoint3D.html",
    "title": "Class BulletHingeJoint3D | Evergine Doc",
    "keywords": "Class BulletHingeJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<HingeConstraint, HingeJointDef3D> BulletHingeJoint3D Implements IHingeJoint3D IJoint3D IDisposable Inherited Members BulletJoint3D<HingeConstraint, HingeJointDef3D>.joint BulletJoint3D<HingeConstraint, HingeJointDef3D>.def BulletJoint3D<HingeConstraint, HingeJointDef3D>.BreakingImpulseThreshold BulletJoint3D<HingeConstraint, HingeJointDef3D>.InternalJoint BulletJoint3D<HingeConstraint, HingeJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletHingeJoint3D : BulletJoint3D<HingeConstraint, HingeJointDef3D>, IHingeJoint3D, IJoint3D, IDisposable Constructors BulletHingeJoint3D(BulletPhysicManager3D, HingeJointDef3D) Initializes a new instance of the BulletHingeJoint3D class. Declaration public BulletHingeJoint3D(BulletPhysicManager3D simulation, HingeJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. HingeJointDef3D def The definition. Properties AFrame Gets the Reference frame on Body A. Declaration public Matrix4x4 AFrame { get; } Property Value Type Description Matrix4x4 AngularOnly Gets or sets a value indicating whether only affects angular movement to the joint. Declaration public bool AngularOnly { get; set; } Property Value Type Description bool BFrame Gets the Reference frame on Body B. Declaration public Matrix4x4 BFrame { get; } Property Value Type Description Matrix4x4 EnableMotor Gets or sets a value indicating whether the motor is enabled. Declaration public bool EnableMotor { get; set; } Property Value Type Description bool Flags Gets the hinge flags. Declaration public int Flags { get; } Property Value Type Description int FrameOffsetA Gets the frame offset for body A. Declaration public Matrix4x4 FrameOffsetA { get; } Property Value Type Description Matrix4x4 FrameOffsetB Gets the frame offset for body B. Declaration public Matrix4x4 FrameOffsetB { get; } Property Value Type Description Matrix4x4 HasLimit Gets a value indicating whether this joint has limits. Declaration public bool HasLimit { get; } Property Value Type Description bool HingeAngle Gets the angle of the joint. Declaration public float HingeAngle { get; } Property Value Type Description float LimitBiasFactor Gets the Limit bias factor. Declaration public float LimitBiasFactor { get; } Property Value Type Description float LimitRelaxationFactor Gets the limit relaxation factor. Declaration public float LimitRelaxationFactor { get; } Property Value Type Description float LimitSign Gets the limit sign. Declaration public float LimitSign { get; } Property Value Type Description float LimitSoftness Gets the limit softness. Declaration public float LimitSoftness { get; } Property Value Type Description float LowerLimit Gets the lower limit. Declaration public float LowerLimit { get; } Property Value Type Description float MaxMotorImpulse Gets or sets and sets maximum motor impulse. Declaration public float MaxMotorImpulse { get; set; } Property Value Type Description float MotorTargetVelocity Gets the max motor target velocity. Declaration public float MotorTargetVelocity { get; } Property Value Type Description float SolveLimit Gets the solve limit. Declaration public int SolveLimit { get; } Property Value Type Description int UpperLimit Gets the upper limit. Declaration public float UpperLimit { get; } Property Value Type Description float UseFrameOffset Gets or sets a value indicating whether the frame offsets are enabled. Declaration public bool UseFrameOffset { get; set; } Property Value Type Description bool UseReferenceFrameA Gets or sets a value indicating whether the joint use A as a Frame reference. Declaration public bool UseReferenceFrameA { get; set; } Property Value Type Description bool Methods CreateJoint() Instantiate joint. Declaration protected override HingeConstraint CreateJoint() Returns Type Description HingeConstraint The new joint. Overrides BulletJoint3D<HingeConstraint, HingeJointDef3D>.CreateJoint() EnableAngularMotor(bool, float, float) Enable angular motor. Declaration public void EnableAngularMotor(bool motorEnabled, float targetVelocity, float maxMotorImpulse) Parameters Type Name Description bool motorEnabled Motor enabled. float targetVelocity Target velocity. float maxMotorImpulse Max motor impulse. SetAxis(Vector3) Set axis. Declaration public void SetAxis(Vector3 axis) Parameters Type Name Description Vector3 axis The axis. SetFrames(Matrix4x4, Matrix4x4) Set frames. Declaration public void SetFrames(Matrix4x4 frameA, Matrix4x4 frameB) Parameters Type Name Description Matrix4x4 frameA The frame A. Matrix4x4 frameB The frame B. SetLimit(float, float, float, float, float) Set limits. Declaration public void SetLimit(float low, float high, float softness, float biasFactor, float relaxationFactor) Parameters Type Name Description float low The low limit. float high The high limit. float softness How much the hinge rotates for a given force. float biasFactor offset for the relaxed rotation of the hinge. float relaxationFactor How much force is applied internally to bring the hinge in its central rotation. SetMotorTarget(Quaternion, float) Set motor target. Declaration public void SetMotorTarget(Quaternion qAinB, float deltaTime) Parameters Type Name Description Quaternion qAinB Quaternion of A in B. float deltaTime The delta time. SetMotorTarget(float, float) Set motor target. Declaration public void SetMotorTarget(float targetAngle, float deltaTime) Parameters Type Name Description float targetAngle The target angle. float deltaTime The delta time. Implements Evergine.Framework.Physics3D.IHingeJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletJoint3D-2.html": {
    "href": "api/Evergine.Bullet.BulletJoint3D-2.html",
    "title": "Class BulletJoint3D<T, K> | Evergine Doc",
    "keywords": "Class BulletJoint3D<T, K> The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<T, K> BulletAbstractGeneric6DofJoint3D<T, K, J> BulletConeTwistJoint3D BulletFixedJoint3D BulletGearJoint3D BulletHingeJoint3D BulletPointToPointJoint3D BulletSliderJoint3D Implements IJoint3D IDisposable Inherited Members BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public abstract class BulletJoint3D<T, K> : BulletJoint3D, IJoint3D, IDisposable where T : TypedConstraint where K : JointDef3D Type Parameters Name Description T The Bullet joint type. K The interface joint definition type. Constructors BulletJoint3D(BulletPhysicManager3D, K) Initializes a new instance of the BulletJoint3D<T, K> class. Declaration public BulletJoint3D(BulletPhysicManager3D simulation, K def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. K def The joint definition. Fields def The interface joint definition. Declaration protected K def Field Value Type Description K joint The Bullet joint. Declaration protected T joint Field Value Type Description T Properties BreakingImpulseThreshold Gets or sets the amount of force that a joint can take before break. Declaration public override float BreakingImpulseThreshold { get; set; } Property Value Type Description float Overrides BulletJoint3D.BreakingImpulseThreshold InternalJoint Gets the Bullet internal joint. Declaration public override object InternalJoint { get; } Property Value Type Description object Overrides BulletJoint3D.InternalJoint Methods CreateJoint() Instantiate joint. Declaration protected abstract T CreateJoint() Returns Type Description T The new joint. Implements Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletJoint3D.html",
    "title": "Class BulletJoint3D | Evergine Doc",
    "keywords": "Class BulletJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<T, K> Implements IJoint3D IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public abstract class BulletJoint3D : IJoint3D, IDisposable Constructors BulletJoint3D(BulletPhysicManager3D) Initializes a new instance of the BulletJoint3D class. Declaration public BulletJoint3D(BulletPhysicManager3D simulation) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. Fields simulation The simulation object. Declaration protected BulletPhysicManager3D simulation Field Value Type Description BulletPhysicManager3D Properties AppliedImpulse Gets the applied impulse. Declaration public float AppliedImpulse { get; } Property Value Type Description float BodyA Gets the first body attached to this joint. Declaration public IRigidBody3D BodyA { get; } Property Value Type Description IRigidBody3D BodyB Gets the second body attached to this joint. Declaration public IRigidBody3D BodyB { get; } Property Value Type Description IRigidBody3D BreakingImpulseThreshold Gets or sets the amount of force that a joint can take before break. Declaration public abstract float BreakingImpulseThreshold { get; set; } Property Value Type Description float DebugDrawSize Gets or sets the debug draw size of the joint. Declaration public float DebugDrawSize { get; set; } Property Value Type Description float InternalJoint Gets the Bullet internal joint. Declaration public abstract object InternalJoint { get; } Property Value Type Description object IsEnabled Gets or sets a value indicating whether this joint is active. Declaration public bool IsEnabled { get; set; } Property Value Type Description bool JointFeedback Gets the Joint feedback. Declaration public IJointFeedback3D JointFeedback { get; } Property Value Type Description IJointFeedback3D NeedsFeedback Gets or sets a value indicating whether the application needs to obtain feedback. Declaration public bool NeedsFeedback { get; set; } Property Value Type Description bool OverrideNumSolverIterations Gets or sets the Override the number of solver iterations. Declaration public int OverrideNumSolverIterations { get; set; } Property Value Type Description int Methods Dispose() Dispose this collider 3D instance. Declaration public virtual void Dispose() Events OnBroke Event fired when the joint is broken Declaration public event OnBrokeEventHandler OnBroke Event Type Type Description OnBrokeEventHandler Implements Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletJointFeedback3D.html": {
    "href": "api/Evergine.Bullet.BulletJointFeedback3D.html",
    "title": "Class BulletJointFeedback3D | Evergine Doc",
    "keywords": "Class BulletJointFeedback3D The BulletJointFeedback3D is a base class for all 3D joints feedback implemented by Bullet. Inheritance object BulletJointFeedback3D Implements IJointFeedback3D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletJointFeedback3D : IJointFeedback3D Constructors BulletJointFeedback3D(BulletJoint3D) Initializes a new instance of the BulletJointFeedback3D class. Declaration public BulletJointFeedback3D(BulletJoint3D joint) Parameters Type Name Description BulletJoint3D joint The joint. Properties AppliedForceBodyA Gets the Applied force to body A. Declaration public Vector3 AppliedForceBodyA { get; } Property Value Type Description Vector3 AppliedForceBodyB Gets the Applied force to body B. Declaration public Vector3 AppliedForceBodyB { get; } Property Value Type Description Vector3 AppliedTorqueBodyA Gets the Applied torque to body A. Declaration public Vector3 AppliedTorqueBodyA { get; } Property Value Type Description Vector3 AppliedTorqueBodyB Gets the Applied torque to body B. Declaration public Vector3 AppliedTorqueBodyB { get; } Property Value Type Description Vector3 Implements Evergine.Framework.Physics3D.IJointFeedback3D Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletManifold.html": {
    "href": "api/Evergine.Bullet.BulletManifold.html",
    "title": "Struct BulletManifold | Evergine Doc",
    "keywords": "Struct BulletManifold Collision Manifold. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public struct BulletManifold Fields BodyA The Body A. Declaration public BulletPhysicBody3D BodyA Field Value Type Description BulletPhysicBody3D BodyB The Body B. Declaration public BulletPhysicBody3D BodyB Field Value Type Description BulletPhysicBody3D CollisionInfoA The collision info for object A. Declaration public BulletCollisionInfo3D CollisionInfoA Field Value Type Description BulletCollisionInfo3D CollisionInfoB The collision info for object B. Declaration public BulletCollisionInfo3D CollisionInfoB Field Value Type Description BulletCollisionInfo3D Id The index of the manifold. Declaration public int Id Field Value Type Description int NumContacts The number of contacts. Declaration public int NumContacts Field Value Type Description int Methods Reset(BulletContactManager) Reset this manifold instance. Declaration public void Reset(BulletContactManager contactManager) Parameters Type Name Description BulletContactManager contactManager The contact manager. SetData(ref BulletManifoldInternal, BulletContactManager) Set de data to this manifold. Declaration public void SetData(ref BulletManifoldInternal manifoldInternal, BulletContactManager contactManager) Parameters Type Name Description BulletManifoldInternal manifoldInternal The manifold internal. BulletContactManager contactManager The contact manager. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletManifoldInternal.html": {
    "href": "api/Evergine.Bullet.BulletManifoldInternal.html",
    "title": "Struct BulletManifoldInternal | Evergine Doc",
    "keywords": "Struct BulletManifoldInternal Contact point between 2 colliders. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public struct BulletManifoldInternal Fields BodyA Body A. Declaration public IntPtr BodyA Field Value Type Description IntPtr BodyB Body B. Declaration public IntPtr BodyB Field Value Type Description IntPtr Id The index of the manifold. Declaration public int Id Field Value Type Description int NumContacts The number of contacts. Declaration public int NumContacts Field Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletMeshCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletMeshCollider3D.html",
    "title": "Class BulletMeshCollider3D | Evergine Doc",
    "keywords": "Class BulletMeshCollider3D The BulletBoxCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<ScaledBvhTriangleMeshShape> BulletMeshCollider3D Implements IMeshColliderShape3D IColliderShape3D IDisposable Inherited Members BulletCollider3D<ScaledBvhTriangleMeshShape>.InternalCollider BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletMeshCollider3D : BulletCollider3D<ScaledBvhTriangleMeshShape>, IMeshColliderShape3D, IColliderShape3D, IDisposable Constructors BulletMeshCollider3D(Mesh) Initializes a new instance of the BulletMeshCollider3D class. Declaration public BulletMeshCollider3D(Mesh mesh) Parameters Type Name Description Mesh mesh The mesh. Properties Convex Gets or sets a value indicating whether we need to create a convex shape from the mesh. Declaration public bool Convex { get; set; } Property Value Type Description bool LocalScaling Gets or setsthe local scaling. Declaration public override Vector3 LocalScaling { get; set; } Property Value Type Description Vector3 Overrides BulletCollider3D<ScaledBvhTriangleMeshShape>.LocalScaling Mesh Gets or sets the mesh of the shape. Declaration public Mesh Mesh { get; set; } Property Value Type Description Mesh Size Gets or sets the local scaling. Declaration public Vector3 Size { get; set; } Property Value Type Description Vector3 Methods Dispose() Dispose this collider 3D instance. Declaration public override void Dispose() Overrides BulletCollider3D<ScaledBvhTriangleMeshShape>.Dispose() InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() Implements Evergine.Framework.Physics3D.IMeshColliderShape3D Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletPhysicAction3D.html": {
    "href": "api/Evergine.Bullet.BulletPhysicAction3D.html",
    "title": "Class BulletPhysicAction3D | Evergine Doc",
    "keywords": "Class BulletPhysicAction3D The BulletCollisionObject3D implements Bullet collision object for Evergine. Inheritance object BulletPhysicAction3D BulletCharacterController3D Implements IPhysicAction3D IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public abstract class BulletPhysicAction3D : IPhysicAction3D, IDisposable Constructors BulletPhysicAction3D(BulletPhysicManager3D) Initializes a new instance of the BulletPhysicAction3D class. Declaration public BulletPhysicAction3D(BulletPhysicManager3D simulation3D) Parameters Type Name Description BulletPhysicManager3D simulation3D The bullet world. Properties InternalController Gets the internal body. Declaration public object InternalController { get; } Property Value Type Description object UserData Gets or sets the user data. Declaration public object UserData { get; set; } Property Value Type Description object Methods Dispose() Dispose this instance. Declaration public virtual void Dispose() Implements Evergine.Framework.Physics3D.IPhysicAction3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletPhysicBody3D.html": {
    "href": "api/Evergine.Bullet.BulletPhysicBody3D.html",
    "title": "Class BulletPhysicBody3D | Evergine Doc",
    "keywords": "Class BulletPhysicBody3D The BulletPhysicBody3D implements Bullet physic object for Evergine. Inheritance object DisposableObject BulletPhysicBody3D BulletGhostBody3D BulletRigidBody3D BulletStaticBody3D Implements IPhysicBody3D IDisposable Inherited Members DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public abstract class BulletPhysicBody3D : DisposableObject, IPhysicBody3D, IDisposable Constructors BulletPhysicBody3D(BulletPhysicManager3D, PhysicBodyDef3D) Initializes a new instance of the BulletPhysicBody3D class. Declaration public BulletPhysicBody3D(BulletPhysicManager3D simulation3D, PhysicBodyDef3D bodyDef) Parameters Type Name Description BulletPhysicManager3D simulation3D The bullet world. PhysicBodyDef3D bodyDef The definition of static body. Fields EmptyCollider The empty shape. Declaration protected static BulletEmptyCollider3D EmptyCollider Field Value Type Description BulletEmptyCollider3D bodyComponent The user data. Declaration protected PhysicBody3D bodyComponent Field Value Type Description PhysicBody3D bodyDef Rigid body definition. Declaration protected PhysicBodyDef3D bodyDef Field Value Type Description PhysicBodyDef3D collider The single collider. Declaration protected BulletCollider3D collider Field Value Type Description BulletCollider3D colliders Colliders set. Declaration protected HashSet<BulletCollider3D> colliders Field Value Type Description HashSet<BulletCollider3D> collisionCategories The collision flags. Declaration protected CollisionCategory3D collisionCategories Field Value Type Description CollisionCategory3D hasOffset This body has an offset applied. Declaration protected bool hasOffset Field Value Type Description bool maskBits The mask bits. Declaration protected CollisionCategory3D maskBits Field Value Type Description CollisionCategory3D offsetScale The offset scale. Declaration protected Vector3 offsetScale Field Value Type Description Vector3 Properties AnisotropicFriction Gets or sets the anisotropic friction. Declaration public Vector3 AnisotropicFriction { get; set; } Property Value Type Description Vector3 BodyComponent Gets or sets physic body component. This is usually the component that has created this physic body. Declaration public PhysicBody3D BodyComponent { get; set; } Property Value Type Description PhysicBody3D CcdMotionThreshold Gets or sets the CCD motion threshold. Declaration public float CcdMotionThreshold { get; set; } Property Value Type Description float Remarks CCD motion clamping activates for convex objects that exceed a (squared to avoid taking square roots) velocity threshold. By default this threshold is zero, which means this feature is disabled for rigid bodies. CcdSweptSphereRadius Gets or sets the CCD swept shere radius. Declaration public float CcdSweptSphereRadius { get; set; } Property Value Type Description float Remarks CCD works on an embedded sphere of radius, make sure this radius is embedded inside the convex objects, preferably smaller. Collider Gets or sets the associated collider. Declaration protected BulletCollider3D Collider { get; set; } Property Value Type Description BulletCollider3D ColliderShapes Gets the colliders enumerable. Declaration public IEnumerable<IColliderShape3D> ColliderShapes { get; } Property Value Type Description IEnumerable<IColliderShape3D> CollisionCategories Gets or sets the collision category bits. Declaration public CollisionCategory3D CollisionCategories { get; set; } Property Value Type Description CollisionCategory3D CompanionId Gets or sets the Companion ID. Declaration public int CompanionId { get; set; } Property Value Type Description int CompoundCollider Gets or sets the compound collider. Declaration protected BulletCompoundCollider3D CompoundCollider { get; set; } Property Value Type Description BulletCompoundCollider3D ContactDamping Gets the contact damping. Declaration public float ContactDamping { get; } Property Value Type Description float ContactProcessingThreshold Gets or sets the contact processing threshold. Declaration public float ContactProcessingThreshold { get; set; } Property Value Type Description float ContactStiffness Gets the contact stiffness. Declaration public float ContactStiffness { get; } Property Value Type Description float DeactivationTime Gets or sets the deactivation time. Declaration public float DeactivationTime { get; set; } Property Value Type Description float Flags Gets or sets the rigid body flags. Declaration public StaticBody3DFlags Flags { get; set; } Property Value Type Description StaticBody3DFlags Friction Gets or sets the friction of the rigid body. Declaration public float Friction { get; set; } Property Value Type Description float HasContactResponse Gets a value indicating whether has contact response. Declaration public bool HasContactResponse { get; } Property Value Type Description bool HitFraction Gets or sets the hit fraction. Declaration public float HitFraction { get; set; } Property Value Type Description float InternalBody Gets the internal body. Declaration public object InternalBody { get; } Property Value Type Description object InterpolationAngularVelocity Gets or sets the angular velocity interpolated. Declaration public Vector3 InterpolationAngularVelocity { get; set; } Property Value Type Description Vector3 InterpolationLinearVelocity Gets or sets the linear velocity interpolated. Declaration public Vector3 InterpolationLinearVelocity { get; set; } Property Value Type Description Vector3 InterpolationWorldTransform Gets or sets the world transform interpolated. Declaration public Matrix4x4 InterpolationWorldTransform { get; set; } Property Value Type Description Matrix4x4 IsActive Gets a value indicating whether this body is active. Declaration public bool IsActive { get; } Property Value Type Description bool IsKinematicObject Gets a value indicating whether this body is kinematic. Declaration public virtual bool IsKinematicObject { get; } Property Value Type Description bool IsSensor Gets or sets a value indicating whether this body collects contact information but never generates a collision response. Declaration public bool IsSensor { get; set; } Property Value Type Description bool IsStaticObject Gets a value indicating whether this body is static. Declaration public virtual bool IsStaticObject { get; } Property Value Type Description bool IsStaticOrKinematicObject Gets a value indicating whether this body is kinematic or kinematic. Declaration public bool IsStaticOrKinematicObject { get; } Property Value Type Description bool IslandTag Gets or sets the island tag. Declaration public int IslandTag { get; set; } Property Value Type Description int MaskBits Gets or sets the collision mask bits. Declaration public CollisionCategory3D MaskBits { get; set; } Property Value Type Description CollisionCategory3D Restitution Gets or sets the restitution of the rigid body. Declaration public float Restitution { get; set; } Property Value Type Description float RollingFriction Gets or sets the rolling friction. Declaration public float RollingFriction { get; set; } Property Value Type Description float SpinningFriction Gets or sets the spinning fraction. Declaration public float SpinningFriction { get; set; } Property Value Type Description float Transform Gets the world transform of the body. Declaration public Matrix4x4 Transform { get; } Property Value Type Description Matrix4x4 Methods AddColliderShape(IColliderShape3D) Add collider shape to the body. Declaration public virtual void AddColliderShape(IColliderShape3D shape) Parameters Type Name Description IColliderShape3D shape The shape. BaseAddToWorld() Add this body to the world simulation. Declaration protected virtual void BaseAddToWorld() BaseInstantiateCollisionObject(PhysicBodyDef3D) Base method of physic body instantiation. Declaration protected void BaseInstantiateCollisionObject(PhysicBodyDef3D bodyDef) Parameters Type Name Description PhysicBodyDef3D bodyDef The body definition. BaseRemoveFromWorld() Remove physic body from simulation world. Declaration protected virtual void BaseRemoveFromWorld() ComputeTransform(ref Vector3, ref Quaternion, out Matrix4x4) Compute a transform from translation and orientation. It applies the world scale. Declaration protected void ComputeTransform(ref Vector3 position, ref Quaternion orientation, out Matrix4x4 transform) Parameters Type Name Description Vector3 position The position. Quaternion orientation The orientation. Matrix4x4 transform The transform. Destroy() Destroy all resources of this instance. Declaration protected override void Destroy() Overrides Evergine.Framework.DisposableObject.Destroy() GetColliderShapeByIndex(int) Gets collider shape by index. Declaration public IColliderShape3D GetColliderShapeByIndex(int index) Parameters Type Name Description int index The index. Returns Type Description IColliderShape3D The collider shape. GetColliderShapeIndex(BulletCollider3D) Gets shpae index of the specified collider. Declaration public int GetColliderShapeIndex(BulletCollider3D shape) Parameters Type Name Description BulletCollider3D shape The collider shape. Returns Type Description int The index. InstantiateCollisionObject(PhysicBodyDef3D) Create the rigid body. Declaration protected abstract void InstantiateCollisionObject(PhysicBodyDef3D bodyDef) Parameters Type Name Description PhysicBodyDef3D bodyDef The body definition. RemoveColliderShape(IColliderShape3D) Remove collider shape to the body. Declaration public virtual void RemoveColliderShape(IColliderShape3D shape) Parameters Type Name Description IColliderShape3D shape The shape to remove. SetTransform(Vector3, Quaternion, Vector3) Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior. Declaration public virtual void SetTransform(Vector3 position, Quaternion orientation, Vector3 scale) Parameters Type Name Description Vector3 position the world position of the body's local origin. Quaternion orientation the world rotation as a quaternion. Vector3 scale the world scale. Implements Evergine.Framework.Physics3D.IPhysicBody3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletPhysicManager3D.html": {
    "href": "api/Evergine.Bullet.BulletPhysicManager3D.html",
    "title": "Class BulletPhysicManager3D | Evergine Doc",
    "keywords": "Class BulletPhysicManager3D The Simulation3D class manages all 3D physics entities. Inheritance object IdentifiableObject DependencyObject AttachableObject SceneManager UpdatableSceneManager PhysicManager3D BulletPhysicManager3D Implements IDependencyObject Inherited Members PhysicManager3D.RenderManager PhysicManager3D.PhysicComponentList PhysicManager3D.PerformPhysicSteps PhysicManager3D.OnLoaded() PhysicManager3D.OnDetach() PhysicManager3D.ContactTest(IPhysicBody3D, ICollection<ContactPoint3D>) PhysicManager3D.ContactPairTest(IPhysicBody3D, IPhysicBody3D, ICollection<ContactPoint3D>) PhysicManager3D.AddPhysicComponent(Behavior) PhysicManager3D.RemovePhysicComponent(Behavior) PhysicManager3D.OnCameraRender(object, DrawContext) SceneManager.Managers SceneManager.Scene SceneManager.OnActivated() SceneManager.Start() SceneManager.OnDeactivated() SceneManager.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletPhysicManager3D : PhysicManager3D, IDependencyObject Constructors BulletPhysicManager3D() Initializes a new instance of the BulletPhysicManager3D class. Declaration public BulletPhysicManager3D() Fields ExecutionState Gets or sets the execution state. Declaration public ExecutionState ExecutionState Field Value Type Description ExecutionState Properties ApplySpeculativeContactRestitution Gets or sets a value indicating whether you want to apply the speculative contact restitution. Declaration public override bool ApplySpeculativeContactRestitution { get; set; } Property Value Type Description bool Overrides Evergine.Framework.Managers.PhysicManager3D.ApplySpeculativeContactRestitution BulletDebugDraw Gets the instance that is responsible to draw debug physic lines. Declaration public BulletDebugDraw3D BulletDebugDraw { get; } Property Value Type Description BulletDebugDraw3D DrawFlags Gets or sets the debug draw flags. Declaration public override DebugDrawFlags DrawFlags { get; set; } Property Value Type Description DebugDrawFlags Overrides Evergine.Framework.Managers.PhysicManager3D.DrawFlags FixedTimeStep Gets or sets the resolution of physics simulation. Default value of 1/60, or 60fps. Declaration public override float FixedTimeStep { get; set; } Property Value Type Description float Overrides Evergine.Framework.Managers.PhysicManager3D.FixedTimeStep Gravity Gets or sets the global gravity vector. Declaration public override Vector3 Gravity { get; set; } Property Value Type Description Vector3 Overrides Evergine.Framework.Managers.PhysicManager3D.Gravity InternalWorld Gets the internal native world instance. Declaration public override object InternalWorld { get; } Property Value Type Description object Overrides Evergine.Framework.Managers.PhysicManager3D.InternalWorld MaxSubSteps Gets or sets the maximum number of substeps that Physics3D is allowed to perform every step. Declaration public override int MaxSubSteps { get; set; } Property Value Type Description int Overrides Evergine.Framework.Managers.PhysicManager3D.MaxSubSteps PhysicWorldResolution Gets or sets the resolution of the physic world. Changing this value does not affect the size or positions of Evergine entities. It only affects internally in the physic world. By default, the resolution of the world is 1. This means that 1 unit in Evergine is equal to 1 unit in physic world. Changing to 10 indicates that 1 unit in Evergine is equivalent to 10 units in the physic world. We reconmend to increase this value up to 10 if your physic bodies usually has size of centimeters. Declaration public override float PhysicWorldResolution { get; set; } Property Value Type Description float Overrides Evergine.Framework.Managers.PhysicManager3D.PhysicWorldResolution Methods AddPhysicBody(IPhysicBody3D) Add the physic body to the simulation world. Declaration public override void AddPhysicBody(IPhysicBody3D body) Parameters Type Name Description IPhysicBody3D body The body. Overrides Evergine.Framework.Managers.PhysicManager3D.AddPhysicBody(Evergine.Framework.Physics3D.IPhysicBody3D) ContactPairTest(IPhysicBody3D, IPhysicBody3D, IColliderShape3D, IColliderShape3D, ICollection<ContactPoint3D>) The contact test query perform a collision test against the specified physic object. Declaration public override int ContactPairTest(IPhysicBody3D physicBodyA, IPhysicBody3D physicBodyB, IColliderShape3D colliderShapeA, IColliderShape3D colliderShapeB, ICollection<ContactPoint3D> contactPointCollection) Parameters Type Name Description IPhysicBody3D physicBodyA The first physic body to detect contact. IPhysicBody3D physicBodyB The second physic body to detect contact. IColliderShape3D colliderShapeA The collider on bodyA to test. IColliderShape3D colliderShapeB The collider on bodyB to test. ICollection<ContactPoint3D> contactPointCollection Returns Type Description int The number of contacts detected. Overrides PhysicManager3D.ContactPairTest(IPhysicBody3D, IPhysicBody3D, IColliderShape3D, IColliderShape3D, ICollection<ContactPoint3D>) ContactTest(IPhysicBody3D, IColliderShape3D, ICollection<ContactPoint3D>) The contact test query perform a collision test against all overlapping objects in the physic world. Declaration public override int ContactTest(IPhysicBody3D physicBody, IColliderShape3D colliderShape, ICollection<ContactPoint3D> contactPointCollection) Parameters Type Name Description IPhysicBody3D physicBody The physic body to detect contact. IColliderShape3D colliderShape ICollection<ContactPoint3D> contactPointCollection Returns Type Description int The number of contacts detected. Overrides PhysicManager3D.ContactTest(IPhysicBody3D, IColliderShape3D, ICollection<ContactPoint3D>) Remarks resultsOutput is not cleared. ConvexSweepTest(IColliderShape3D, ref Matrix4x4, ref Matrix4x4, CollisionCategory3D) Sweep test using a collider shape and stops at the first hit. Declaration public override HitResult3D ConvexSweepTest(IColliderShape3D colliderShape, ref Matrix4x4 from, ref Matrix4x4 to, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description IColliderShape3D colliderShape The collider shape. Matrix4x4 from The from matrix. Matrix4x4 to The to matrix. CollisionCategory3D filterMask The collision category to hit the ray. Returns Type Description HitResult3D The hit result. Overrides PhysicManager3D.ConvexSweepTest(IColliderShape3D, ref Matrix4x4, ref Matrix4x4, CollisionCategory3D) ConvexSweepTestAll(IColliderShape3D, ref Matrix4x4, ref Matrix4x4, ICollection<HitResult3D>, CollisionCategory3D) Sweep test using a collider shape and stops at the first hit. Declaration public override void ConvexSweepTestAll(IColliderShape3D colliderShape, ref Matrix4x4 from, ref Matrix4x4 to, ICollection<HitResult3D> resultsOutput, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description IColliderShape3D colliderShape The collider shape. Matrix4x4 from The from matrix. Matrix4x4 to The to matrix. ICollection<HitResult3D> resultsOutput The collection where the contact results will be included. CollisionCategory3D filterMask The collision category to hit the ray. Overrides PhysicManager3D.ConvexSweepTestAll(IColliderShape3D, ref Matrix4x4, ref Matrix4x4, ICollection<HitResult3D>, CollisionCategory3D) CreateColliderShape<T>(params object[]) Instantiate a new Collider shape. Declaration public override T CreateColliderShape<T>(params object[] param) where T : IColliderShape3D Parameters Type Name Description object[] param Collider parameters. Returns Type Description T The new collider shape. Type Parameters Name Description T The ColliderShape type. Overrides PhysicManager3D.CreateColliderShape<T>(params object[]) CreateJoint<T, J>(J) Creates a Joint. Declaration public override T CreateJoint<T, J>(J jointDef) where T : IJoint3D where J : JointDef3D<T> Parameters Type Name Description J jointDef The joint definition instance. Returns Type Description T The new joint instance. Type Parameters Name Description T The Joint type. J The Joint definition type. Overrides Evergine.Framework.Managers.PhysicManager3D.CreateJoint<T, J>(J) CreatePhysicAction<T>(params object[]) Create a physic action instance (character, vehicle controllers...) Declaration public override T CreatePhysicAction<T>(params object[] param) where T : IPhysicAction3D Parameters Type Name Description object[] param The initialization parameters. Returns Type Description T The created instance. Type Parameters Name Description T The type of the physic action. Overrides PhysicManager3D.CreatePhysicAction<T>(params object[]) CreatePhysicBody<T, J>(J) Creates a StaticBody 3D. Declaration public override T CreatePhysicBody<T, J>(J bodyDef) where T : IPhysicBody3D where J : PhysicBodyDef3D<T> Parameters Type Name Description J bodyDef Body definition. Returns Type Description T The static body instance. Type Parameters Name Description T The physic body interface. J The body definition class. Overrides Evergine.Framework.Managers.PhysicManager3D.CreatePhysicBody<T, J>(J) DebugDraw() Draw the debug information. Declaration public override void DebugDraw() Overrides Evergine.Framework.Managers.PhysicManager3D.DebugDraw() Destroy() Destroy this object. Declaration public override void Destroy() Overrides Evergine.Framework.AttachableObject.Destroy() Dispose() Dispose the bullet world. Declaration public void Dispose() Initialize() Initialize the bullet simulation. Declaration protected void Initialize() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Managers.PhysicManager3D.OnAttached() Pause() Pause the world. Declaration public void Pause() PointTest(IColliderShape3D, ref Vector3) Test if a point is inside a physic body. Declaration public override bool PointTest(IColliderShape3D shape, ref Vector3 position) Parameters Type Name Description IColliderShape3D shape Vector3 position The position to test in world coordinates. Returns Type Description bool If this position is inside this body. Overrides PhysicManager3D.PointTest(IColliderShape3D, ref Vector3) PointTest(IPhysicBody3D, ref Vector3) Test if a point is inside a physic body. Declaration public override bool PointTest(IPhysicBody3D physicBody, ref Vector3 position) Parameters Type Name Description IPhysicBody3D physicBody The physic body. Vector3 position The position to test in world coordinates. Returns Type Description bool If this position is inside this body. Overrides PhysicManager3D.PointTest(IPhysicBody3D, ref Vector3) RayCast(ref Ray, float, CollisionCategory3D) Raycast and stop at the first hit. Declaration public override HitResult3D RayCast(ref Ray ray, float rayDistance, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description Ray ray The ray. float rayDistance The distance to test. CollisionCategory3D filterMask The collision category to hit the ray. Returns Type Description HitResult3D The closest hit result. Overrides PhysicManager3D.RayCast(ref Ray, float, CollisionCategory3D) RayCast(ref RayStep, CollisionCategory3D) Raycast and stop at the first hit. Declaration public override HitResult3D RayCast(ref RayStep rayStep, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description RayStep rayStep The ray step. CollisionCategory3D filterMask The collision category to hit the ray. Returns Type Description HitResult3D The closest hit result. Overrides PhysicManager3D.RayCast(ref RayStep, CollisionCategory3D) RayCast(ref Vector3, ref Vector3, CollisionCategory3D) Raycast and stop at the first hit. Declaration public override HitResult3D RayCast(ref Vector3 from, ref Vector3 to, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description Vector3 from The start ray position. Vector3 to The ray ending. CollisionCategory3D filterMask The collision category to hit the ray. Returns Type Description HitResult3D The closest hit result. Overrides PhysicManager3D.RayCast(ref Vector3, ref Vector3, CollisionCategory3D) RayCastAll(ref Ray, float, ICollection<HitResult3D>, CollisionCategory3D) Raycast and gets all the hits. Declaration public override void RayCastAll(ref Ray ray, float rayDistance, ICollection<HitResult3D> resultsOutput, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description Ray ray The ray. float rayDistance The distance to test. ICollection<HitResult3D> resultsOutput The collection where the results will be included. CollisionCategory3D filterMask The collision category to hit the ray. Overrides PhysicManager3D.RayCastAll(ref Ray, float, ICollection<HitResult3D>, CollisionCategory3D) RayCastAll(ref RayStep, ICollection<HitResult3D>, CollisionCategory3D) Raycast and gets all the hits. Declaration public override void RayCastAll(ref RayStep rayStep, ICollection<HitResult3D> resultsOutput, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description RayStep rayStep The ray step. ICollection<HitResult3D> resultsOutput The collection where the results will be included. CollisionCategory3D filterMask The collision category to hit the ray. Overrides PhysicManager3D.RayCastAll(ref RayStep, ICollection<HitResult3D>, CollisionCategory3D) RayCastAll(ref Vector3, ref Vector3, ICollection<HitResult3D>, CollisionCategory3D) Raycast and gets all the hits. Declaration public override void RayCastAll(ref Vector3 from, ref Vector3 to, ICollection<HitResult3D> resultsOutput, CollisionCategory3D filterMask = CollisionCategory3D.All) Parameters Type Name Description Vector3 from The start ray position. Vector3 to The ray ending. ICollection<HitResult3D> resultsOutput The collection where the results will be included. CollisionCategory3D filterMask The collision category to hit the ray. Overrides PhysicManager3D.RayCastAll(ref Vector3, ref Vector3, ICollection<HitResult3D>, CollisionCategory3D) RemoveJoint(IJoint3D) Remove the joint from the physic world. Declaration public override void RemoveJoint(IJoint3D joint) Parameters Type Name Description IJoint3D joint The joint to remove. Overrides Evergine.Framework.Managers.PhysicManager3D.RemoveJoint(Evergine.Framework.Physics3D.IJoint3D) RemovePhysicAction(IPhysicAction3D) Remove the physic action. Declaration public override void RemovePhysicAction(IPhysicAction3D physicAction) Parameters Type Name Description IPhysicAction3D physicAction The physic action to remove. Overrides Evergine.Framework.Managers.PhysicManager3D.RemovePhysicAction(Evergine.Framework.Physics3D.IPhysicAction3D) RemovePhysicBody(IPhysicBody3D) Removes a RigidBody 3D from the world. Declaration public override void RemovePhysicBody(IPhysicBody3D body) Parameters Type Name Description IPhysicBody3D body The body to remove. Overrides Evergine.Framework.Managers.PhysicManager3D.RemovePhysicBody(Evergine.Framework.Physics3D.IPhysicBody3D) Resume() Resume the world. Declaration public void Resume() SetDebugDraw(ISimulationDebugDraw3D) Sets the debug draw of Simulation 2D. Declaration public override void SetDebugDraw(ISimulationDebugDraw3D debugDraw) Parameters Type Name Description ISimulationDebugDraw3D debugDraw The debug draw instance. Overrides Evergine.Framework.Managers.PhysicManager3D.SetDebugDraw(Evergine.Framework.Physics3D.ISimulationDebugDraw3D) Update(TimeSpan) Update this manager. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides UpdatableSceneManager.Update(TimeSpan) Events OnPhysicStep Event fired when the physics will do an step Declaration public override event EventHandler OnPhysicStep Event Type Type Description EventHandler Overrides Evergine.Framework.Managers.PhysicManager3D.OnPhysicStep Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletPointToPointJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletPointToPointJoint3D.html",
    "title": "Class BulletPointToPointJoint3D | Evergine Doc",
    "keywords": "Class BulletPointToPointJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D> BulletPointToPointJoint3D Implements IPointToPointJoint3D IJoint3D IDisposable Inherited Members BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D>.joint BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D>.def BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D>.BreakingImpulseThreshold BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D>.InternalJoint BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletPointToPointJoint3D : BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D>, IPointToPointJoint3D, IJoint3D, IDisposable Constructors BulletPointToPointJoint3D(BulletPhysicManager3D, PointToPointJointDef3D) Initializes a new instance of the BulletPointToPointJoint3D class. Declaration public BulletPointToPointJoint3D(BulletPhysicManager3D simulation, PointToPointJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. PointToPointJointDef3D def The definition. Properties LocalAnchorA Gets or sets the local anchor point relative to bodyA's origin. Declaration public Vector3 LocalAnchorA { get; set; } Property Value Type Description Vector3 LocalAnchorB Gets or sets the local anchor point relative to bodyB's origin. Declaration public Vector3 LocalAnchorB { get; set; } Property Value Type Description Vector3 Methods CreateJoint() Instantiate joint. Declaration protected override Point2PointConstraint CreateJoint() Returns Type Description Point2PointConstraint The new joint. Overrides BulletJoint3D<Point2PointConstraint, PointToPointJointDef3D>.CreateJoint() Implements Evergine.Framework.Physics3D.IPointToPointJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletRaycastResult.html": {
    "href": "api/Evergine.Bullet.BulletRaycastResult.html",
    "title": "Struct BulletRaycastResult | Evergine Doc",
    "keywords": "Struct BulletRaycastResult Raycast result from bullet. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public struct BulletRaycastResult Fields Body Collider A. Declaration public readonly IntPtr Body Field Value Type Description IntPtr HitFraction The hit fraction. Declaration public readonly float HitFraction Field Value Type Description float Normal The normal. Declaration public readonly Vector3 Normal Field Value Type Description Vector3 Point The point. Declaration public readonly Vector3 Point Field Value Type Description Vector3 ShapePart The Shape part. Declaration public readonly int ShapePart Field Value Type Description int TriangleIndex The Triangle index. Declaration public readonly int TriangleIndex Field Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletRayTestManager.html": {
    "href": "api/Evergine.Bullet.BulletRayTestManager.html",
    "title": "Class BulletRayTestManager | Evergine Doc",
    "keywords": "Class BulletRayTestManager Evergine raycast callback. Inheritance object BulletRayTestManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletRayTestManager Constructors BulletRayTestManager(BulletPhysicManager3D) Initializes a new instance of the BulletRayTestManager class. Declaration public BulletRayTestManager(BulletPhysicManager3D simulation) Parameters Type Name Description BulletPhysicManager3D simulation The simulation. Fields simulation The simulation. Declaration protected BulletPhysicManager3D simulation Field Value Type Description BulletPhysicManager3D Methods AllConvexTest(BulletCollider3D, ref Matrix4x4, ref Matrix4x4, CollisionCategory3D, ICollection<HitResult3D>) Process the raycast. Declaration public void AllConvexTest(BulletCollider3D castShape, ref Matrix4x4 from, ref Matrix4x4 to, CollisionCategory3D filterMask, ICollection<HitResult3D> resultList) Parameters Type Name Description BulletCollider3D castShape The shape to cast. Matrix4x4 from The from vector. Matrix4x4 to The to vector. CollisionCategory3D filterMask The filter mask. ICollection<HitResult3D> resultList The result. AllRaycast(ref Vector3, ref Vector3, CollisionCategory3D, ICollection<HitResult3D>) Process the raycast. Declaration public void AllRaycast(ref Vector3 from, ref Vector3 to, CollisionCategory3D filterMask, ICollection<HitResult3D> resultList) Parameters Type Name Description Vector3 from The from vector. Vector3 to The to vector. CollisionCategory3D filterMask The filter mask. ICollection<HitResult3D> resultList The collection where the results will be included. ClosestConvexTest(BulletCollider3D, ref Matrix4x4, ref Matrix4x4, CollisionCategory3D, out HitResult3D) Process the raycast. Declaration public void ClosestConvexTest(BulletCollider3D castShape, ref Matrix4x4 from, ref Matrix4x4 to, CollisionCategory3D filterMask, out HitResult3D result) Parameters Type Name Description BulletCollider3D castShape The shape to cast. Matrix4x4 from The from vector. Matrix4x4 to The to vector. CollisionCategory3D filterMask The filter mask. HitResult3D result The result. ClosestRaycast(ref Vector3, ref Vector3, CollisionCategory3D, out HitResult3D) Process the raycast. Declaration public void ClosestRaycast(ref Vector3 from, ref Vector3 to, CollisionCategory3D filterMask, out HitResult3D result) Parameters Type Name Description Vector3 from The from vector. Vector3 to The to vector. CollisionCategory3D filterMask The filter mask. HitResult3D result The result. FillHitResult(BulletRaycastResult*, bool, out HitResult3D) Fill hit info struct. Declaration protected void FillHitResult(BulletRaycastResult* rayResult, bool normalInWorldSpace, out HitResult3D result) Parameters Type Name Description BulletRaycastResult* rayResult The ray result. bool normalInWorldSpace The normal in world space. HitResult3D result The hit result. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletRigidBody3D.html": {
    "href": "api/Evergine.Bullet.BulletRigidBody3D.html",
    "title": "Class BulletRigidBody3D | Evergine Doc",
    "keywords": "Class BulletRigidBody3D The Bullet3DRigidBody implements Bullet rigid body for Evergine. Inheritance object DisposableObject BulletPhysicBody3D BulletRigidBody3D Implements IRigidBody3D IPhysicBody3D IDisposable Inherited Members BulletPhysicBody3D.InternalBody BulletPhysicBody3D.BodyComponent BulletPhysicBody3D.IsSensor BulletPhysicBody3D.Friction BulletPhysicBody3D.Restitution BulletPhysicBody3D.Flags BulletPhysicBody3D.Transform BulletPhysicBody3D.ColliderShapes BulletPhysicBody3D.AnisotropicFriction BulletPhysicBody3D.CcdMotionThreshold BulletPhysicBody3D.CcdSweptSphereRadius BulletPhysicBody3D.CompanionId BulletPhysicBody3D.ContactDamping BulletPhysicBody3D.ContactProcessingThreshold BulletPhysicBody3D.ContactStiffness BulletPhysicBody3D.DeactivationTime BulletPhysicBody3D.HasContactResponse BulletPhysicBody3D.HitFraction BulletPhysicBody3D.InterpolationAngularVelocity BulletPhysicBody3D.InterpolationLinearVelocity BulletPhysicBody3D.InterpolationWorldTransform BulletPhysicBody3D.IsActive BulletPhysicBody3D.IslandTag BulletPhysicBody3D.IsStaticOrKinematicObject BulletPhysicBody3D.RollingFriction BulletPhysicBody3D.SpinningFriction BulletPhysicBody3D.CollisionCategories BulletPhysicBody3D.MaskBits BulletPhysicBody3D.GetColliderShapeByIndex(int) BulletPhysicBody3D.GetColliderShapeIndex(BulletCollider3D) DisposableObject.Disposed DisposableObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletRigidBody3D : BulletPhysicBody3D, IRigidBody3D, IPhysicBody3D, IDisposable Constructors BulletRigidBody3D(BulletPhysicManager3D, RigidBodyDef3D) Initializes a new instance of the BulletRigidBody3D class. Declaration public BulletRigidBody3D(BulletPhysicManager3D simulation3D, RigidBodyDef3D rigidBodyDef) Parameters Type Name Description BulletPhysicManager3D simulation3D The bullet world. RigidBodyDef3D rigidBodyDef The definition of Rigid body. Properties Aabb Gets the bounding box. Declaration public BoundingBox Aabb { get; } Property Value Type Description BoundingBox ActivationState Gets or sets the activation state. Declaration public ActivationState ActivationState { get; set; } Property Value Type Description ActivationState AngularDamping Gets the Angular damping is use to reduce the angular velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large. Declaration public float AngularDamping { get; } Property Value Type Description float AngularFactor Gets or sets the angular factor. Declaration public Vector3 AngularFactor { get; set; } Property Value Type Description Vector3 AngularSleepingThreshold Gets the sleeping threshold for angular velocity. Declaration public float AngularSleepingThreshold { get; } Property Value Type Description float AngularVelocity Gets or sets the angular velocity. Declaration public Vector3 AngularVelocity { get; set; } Property Value Type Description Vector3 CenterOfMassPosition Gets the center of mass position. Declaration public Vector3 CenterOfMassPosition { get; } Property Value Type Description Vector3 CenterOfMassTransform Gets or sets the center of mass transformation. Declaration public Matrix4x4 CenterOfMassTransform { get; set; } Property Value Type Description Matrix4x4 Gravity Gets or sets the gravity applied to that rigid body. Declaration public Vector3 Gravity { get; set; } Property Value Type Description Vector3 InvInertiaDiagLocal Gets or sets the InvInertiaDiagLocal vector of the rigid body. Declaration public Vector3 InvInertiaDiagLocal { get; set; } Property Value Type Description Vector3 InvInertiaTensorWorld Gets the Inverse vector of the inertia tensor of the world. Declaration public Matrix4x4 InvInertiaTensorWorld { get; } Property Value Type Description Matrix4x4 InvMass Gets the inverse of the mass. Declaration public float InvMass { get; } Property Value Type Description float IsInWorld Gets a value indicating whether this body is in the world. Declaration public bool IsInWorld { get; } Property Value Type Description bool IsKinematicObject Gets a value indicating whether this body is kinematic. Declaration public override bool IsKinematicObject { get; } Property Value Type Description bool Overrides BulletPhysicBody3D.IsKinematicObject IsStaticObject Gets a value indicating whether this body is static. Declaration public override bool IsStaticObject { get; } Property Value Type Description bool Overrides BulletPhysicBody3D.IsStaticObject LinearDamping Gets the Linear damping is use to reduce the linear velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large. Declaration public float LinearDamping { get; } Property Value Type Description float LinearFactor Gets or sets the linear factor. Declaration public Vector3 LinearFactor { get; set; } Property Value Type Description Vector3 LinearSleepingThreshold Gets the sleeping threshold for linear velocity. Declaration public float LinearSleepingThreshold { get; } Property Value Type Description float LinearVelocity Gets or sets the linear velocity. Declaration public Vector3 LinearVelocity { get; set; } Property Value Type Description Vector3 LocalInertia Gets the local inertia. Declaration public Vector3 LocalInertia { get; } Property Value Type Description Vector3 Mass Gets or sets the rigid body mass. Declaration public float Mass { get; set; } Property Value Type Description float Orientation Gets the orientation. Declaration public Quaternion Orientation { get; } Property Value Type Description Quaternion RigidBodyFlags Gets or sets the rigid body flags. Declaration public RigidBody3DFlags RigidBodyFlags { get; set; } Property Value Type Description RigidBody3DFlags TotalForce Gets the total force applied to the rigid body. Declaration public Vector3 TotalForce { get; } Property Value Type Description Vector3 TotalTorque Gets the total torque applied to the rigid body. Declaration public Vector3 TotalTorque { get; } Property Value Type Description Vector3 Type Gets or sets the rigid. Declaration public RigidBodyType3D Type { get; set; } Property Value Type Description RigidBodyType3D Methods AddColliderShape(IColliderShape3D) Add collider shape to the body. Declaration public override void AddColliderShape(IColliderShape3D shape) Parameters Type Name Description IColliderShape3D shape The shape. Overrides BulletPhysicBody3D.AddColliderShape(IColliderShape3D) ApplyCentralForce(Vector3) Apply a central force to the rigid body. Declaration public void ApplyCentralForce(Vector3 force) Parameters Type Name Description Vector3 force The force. ApplyCentralImpulse(Vector3) Apply an impulse to the center of the rigid body. Declaration public void ApplyCentralImpulse(Vector3 impulse) Parameters Type Name Description Vector3 impulse The impulse. ApplyDamping(float) Apply the damping. Declaration public void ApplyDamping(float step) Parameters Type Name Description float step Delta time. ApplyForce(Vector3, Vector3) Apply a force to the rigid body. Declaration public void ApplyForce(Vector3 force, Vector3 relativePosition) Parameters Type Name Description Vector3 force The force vector. Vector3 relativePosition Relative poosition of the point where the force will be applied. ApplyGravity() Apply the gravity. Declaration public void ApplyGravity() ApplyImpulse(Vector3, Vector3) Apply an impulse to the rigid body. Declaration public void ApplyImpulse(Vector3 impulse, Vector3 relativePosition) Parameters Type Name Description Vector3 impulse The impulse. Vector3 relativePosition Relative poosition of the point where the force will be applied. ApplyTorque(Vector3) Apply a torque force to the rigid body. Declaration public void ApplyTorque(Vector3 torque) Parameters Type Name Description Vector3 torque The torque. ApplyTorqueImpulse(Vector3) Apply torque impulse to the rigid body. Declaration public void ApplyTorqueImpulse(Vector3 torque) Parameters Type Name Description Vector3 torque Torque impulse. BaseAddToWorld() Add this body to the world simulation. Declaration protected override void BaseAddToWorld() Overrides BulletPhysicBody3D.BaseAddToWorld() BaseRemoveFromWorld() Remove physic body from simulation world. Declaration protected override void BaseRemoveFromWorld() Overrides BulletPhysicBody3D.BaseRemoveFromWorld() ClearForces() Clear all forces applied to the rigid body. Declaration public void ClearForces() ComputeAngularImpulseDenominator(Vector3) Compute the angular impulse denominator. Declaration public float ComputeAngularImpulseDenominator(Vector3 axis) Parameters Type Name Description Vector3 axis The axis. Returns Type Description float The angular impulse denominator. ComputeGyroscopicForceExplicit(float) Compute the gyrocsopic forces explicit. Declaration public Vector3 ComputeGyroscopicForceExplicit(float step) Parameters Type Name Description float step The step. Returns Type Description Vector3 The Gyroscopic impulse. ComputeGyroscopicImpulseImplicit_Body(float) Compute the gyrocsopic impulse implicit by Body. Declaration public Vector3 ComputeGyroscopicImpulseImplicit_Body(float step) Parameters Type Name Description float step The step. Returns Type Description Vector3 The Gyroscopic impulse. ComputeGyroscopicImpulseImplicit_World(float) Compute the gyroscopic impulse implicit by world. Declaration public Vector3 ComputeGyroscopicImpulseImplicit_World(float step) Parameters Type Name Description float step The step. Returns Type Description Vector3 The Gyroscopic impulse. ComputeImpulseDenominator(Vector3, Vector3) Compute impulse dominator. Declaration public float ComputeImpulseDenominator(Vector3 pos, Vector3 normal) Parameters Type Name Description Vector3 pos The position. Vector3 normal The normal. Returns Type Description float The impulse denominator. GetVelocityInLocalPoint(Vector3) Gets the velocity in a local point of the rigid body. Declaration public Vector3 GetVelocityInLocalPoint(Vector3 relativePosition) Parameters Type Name Description Vector3 relativePosition The relative position. Returns Type Description Vector3 The velocity in the specified point. InstantiateCollisionObject(PhysicBodyDef3D) Create the rigid body. Declaration protected override void InstantiateCollisionObject(PhysicBodyDef3D bodyDef) Parameters Type Name Description PhysicBodyDef3D bodyDef The body definition. Overrides BulletPhysicBody3D.InstantiateCollisionObject(PhysicBodyDef3D) IntegrateVelocities(float) Integrate velocities. Declaration public void IntegrateVelocities(float step) Parameters Type Name Description float step Delta time. RemoveColliderShape(IColliderShape3D) Remove collider shape to the body. Declaration public override void RemoveColliderShape(IColliderShape3D shape) Parameters Type Name Description IColliderShape3D shape The shape to remove. Overrides BulletPhysicBody3D.RemoveColliderShape(IColliderShape3D) ResetMassProperty(float, Vector3) Reset the mass property. Declaration public void ResetMassProperty(float mass, Vector3 inertia) Parameters Type Name Description float mass The mass. Vector3 inertia The inertia. SetDamping(float, float) Set Damping values. Declaration public void SetDamping(float linearDamping, float angularDamping) Parameters Type Name Description float linearDamping Linear damping value. float angularDamping Angular damping value. SetSleepingThresholds(float, float) Set sleeping threshold values. Declaration public void SetSleepingThresholds(float linear, float angular) Parameters Type Name Description float linear Linear threshold value. float angular Angular threshold value. SetTransform(Vector3, Quaternion, Vector3) Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior. Declaration public override void SetTransform(Vector3 position, Quaternion orientation, Vector3 scale) Parameters Type Name Description Vector3 position the world position of the body's local origin. Quaternion orientation the world rotation as a quaternion. Vector3 scale the world scale. Overrides BulletPhysicBody3D.SetTransform(Vector3, Quaternion, Vector3) UpdateDeactivation(float) Update the deactivation. Declaration public void UpdateDeactivation(float step) Parameters Type Name Description float step The time step. UpdateInertiaTensor() Update the inertia tensor. Declaration public void UpdateInertiaTensor() WakeUp() Wake up the rigid body. Declaration public void WakeUp() WantsSleeping() Return if the entity need to sleep. Declaration public bool WantsSleeping() Returns Type Description bool The rigid body need to sleep. Implements Evergine.Framework.Physics3D.IRigidBody3D Evergine.Framework.Physics3D.IPhysicBody3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletSliderJoint3D.html": {
    "href": "api/Evergine.Bullet.BulletSliderJoint3D.html",
    "title": "Class BulletSliderJoint3D | Evergine Doc",
    "keywords": "Class BulletSliderJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. Inheritance object BulletJoint3D BulletJoint3D<SliderConstraint, SliderJointDef3D> BulletSliderJoint3D Implements ISliderJoint3D IJoint3D IDisposable Inherited Members BulletJoint3D<SliderConstraint, SliderJointDef3D>.joint BulletJoint3D<SliderConstraint, SliderJointDef3D>.def BulletJoint3D<SliderConstraint, SliderJointDef3D>.BreakingImpulseThreshold BulletJoint3D<SliderConstraint, SliderJointDef3D>.InternalJoint BulletJoint3D<SliderConstraint, SliderJointDef3D>.CreateJoint() BulletJoint3D.simulation BulletJoint3D.OnBroke BulletJoint3D.InternalJoint BulletJoint3D.BodyA BulletJoint3D.BodyB BulletJoint3D.AppliedImpulse BulletJoint3D.DebugDrawSize BulletJoint3D.NeedsFeedback BulletJoint3D.JointFeedback BulletJoint3D.OverrideNumSolverIterations BulletJoint3D.IsEnabled BulletJoint3D.BreakingImpulseThreshold BulletJoint3D.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class BulletSliderJoint3D : BulletJoint3D<SliderConstraint, SliderJointDef3D>, ISliderJoint3D, IJoint3D, IDisposable Constructors BulletSliderJoint3D(BulletPhysicManager3D, SliderJointDef3D) Initializes a new instance of the BulletSliderJoint3D class. Declaration public BulletSliderJoint3D(BulletPhysicManager3D simulation, SliderJointDef3D def) Parameters Type Name Description BulletPhysicManager3D simulation The bullet simulation instance. SliderJointDef3D def The definition. Properties AncorInA Gets the ancor in A. Declaration public Vector3 AncorInA { get; } Property Value Type Description Vector3 AncorInB Gets the ancor in B. Declaration public Vector3 AncorInB { get; } Property Value Type Description Vector3 AngularDepth Gets the angular depth. Declaration public float AngularDepth { get; } Property Value Type Description float AngularPosition Gets the angular position. Declaration public float AngularPosition { get; } Property Value Type Description float CalculatedTransformA Gets the calculated transform in A. Declaration public Matrix4x4 CalculatedTransformA { get; } Property Value Type Description Matrix4x4 CalculatedTransformB Gets the calculated transform in B. Declaration public Matrix4x4 CalculatedTransformB { get; } Property Value Type Description Matrix4x4 DampingDirAngular Gets or sets the damping direction angular. Declaration public float DampingDirAngular { get; set; } Property Value Type Description float DampingDirLinear Gets or sets the linear damping dir. Declaration public float DampingDirLinear { get; set; } Property Value Type Description float DampingLimAngular Gets or sets the angular damping lim. Declaration public float DampingLimAngular { get; set; } Property Value Type Description float DampingLimLinear Gets or sets the linear damping lim. Declaration public float DampingLimLinear { get; set; } Property Value Type Description float DampingOrthoAngular Gets or sets the angular damping ortho. Declaration public float DampingOrthoAngular { get; set; } Property Value Type Description float DampingOrthoLinear Gets or sets the linear damping ortho. Declaration public float DampingOrthoLinear { get; set; } Property Value Type Description float EnableAngularMotor Gets or sets a value indicating whether the motor is enabled. Declaration public bool EnableAngularMotor { get; set; } Property Value Type Description bool EnableFrameOffset Gets or sets a value indicating whether this joint use frame offsets. Declaration public bool EnableFrameOffset { get; set; } Property Value Type Description bool EnableLinearMotor Gets or sets a value indicating whether the motor is enabled. Declaration public bool EnableLinearMotor { get; set; } Property Value Type Description bool FrameOffsetA Gets the frame offset for body A. Declaration public Matrix4x4 FrameOffsetA { get; } Property Value Type Description Matrix4x4 FrameOffsetB Gets the frame offset for body B. Declaration public Matrix4x4 FrameOffsetB { get; } Property Value Type Description Matrix4x4 LinearDepth Gets the linear depth. Declaration public float LinearDepth { get; } Property Value Type Description float LinearPosition Gets the linear position. Declaration public float LinearPosition { get; } Property Value Type Description float LowerAngularLimit Gets or sets the Lower angular limit. Declaration public float LowerAngularLimit { get; set; } Property Value Type Description float LowerLinearLimit Gets or sets the Lower linear limit. Declaration public float LowerLinearLimit { get; set; } Property Value Type Description float MaxAngularMotorForce Gets or sets and sets maximum motor impulse. Declaration public float MaxAngularMotorForce { get; set; } Property Value Type Description float MaxLinearMotorForce Gets or sets and sets maximum motor impulse. Declaration public float MaxLinearMotorForce { get; set; } Property Value Type Description float RestitutionDirAngular Gets or sets the Restitution direction angular. Declaration public float RestitutionDirAngular { get; set; } Property Value Type Description float RestitutionDirLinear Gets or sets the linear Restitution dir. Declaration public float RestitutionDirLinear { get; set; } Property Value Type Description float RestitutionLimAngular Gets or sets the angular Restitution lim. Declaration public float RestitutionLimAngular { get; set; } Property Value Type Description float RestitutionLimLinear Gets or sets the linear Restitution lim. Declaration public float RestitutionLimLinear { get; set; } Property Value Type Description float RestitutionOrthoAngular Gets or sets the angular Restitution ortho. Declaration public float RestitutionOrthoAngular { get; set; } Property Value Type Description float RestitutionOrthoLinear Gets or sets the linear Restitution ortho. Declaration public float RestitutionOrthoLinear { get; set; } Property Value Type Description float SoftnessDirAngular Gets or sets the Softness direction angular. Declaration public float SoftnessDirAngular { get; set; } Property Value Type Description float SoftnessDirLinear Gets or sets the linear Softness dir. Declaration public float SoftnessDirLinear { get; set; } Property Value Type Description float SoftnessLimAngular Gets or sets the angular Softness lim. Declaration public float SoftnessLimAngular { get; set; } Property Value Type Description float SoftnessLimLinear Gets or sets the linear Softness lim. Declaration public float SoftnessLimLinear { get; set; } Property Value Type Description float SoftnessOrthoAngular Gets or sets the angular Softness ortho. Declaration public float SoftnessOrthoAngular { get; set; } Property Value Type Description float SoftnessOrthoLinear Gets or sets the linear Softness ortho. Declaration public float SoftnessOrthoLinear { get; set; } Property Value Type Description float TargetAngularMotorVelocity Gets or sets the max motor target velocity. Declaration public float TargetAngularMotorVelocity { get; set; } Property Value Type Description float TargetLinearMotorVelocity Gets or sets the max motor target velocity. Declaration public float TargetLinearMotorVelocity { get; set; } Property Value Type Description float UpperAngularLimit Gets or sets the Upper angular limit. Declaration public float UpperAngularLimit { get; set; } Property Value Type Description float UpperLinearLimit Gets or sets the Upper linear limit. Declaration public float UpperLinearLimit { get; set; } Property Value Type Description float UseAngularLimit Gets a value indicating whether Use angular limit. Declaration public bool UseAngularLimit { get; } Property Value Type Description bool UseLinearLimit Gets a value indicating whether Use angular limit. Declaration public bool UseLinearLimit { get; } Property Value Type Description bool Methods CalculateTransforms(Matrix4x4, Matrix4x4) Calculate the trasnform. Declaration public void CalculateTransforms(Matrix4x4 transA, Matrix4x4 transB) Parameters Type Name Description Matrix4x4 transA Transform for A. Matrix4x4 transB Transform for B. CreateJoint() Instantiate joint. Declaration protected override SliderConstraint CreateJoint() Returns Type Description SliderConstraint The new joint. Overrides BulletJoint3D<SliderConstraint, SliderJointDef3D>.CreateJoint() SetFrames(Matrix4x4, Matrix4x4) Set frames. Declaration public void SetFrames(Matrix4x4 frameA, Matrix4x4 frameB) Parameters Type Name Description Matrix4x4 frameA The frame A. Matrix4x4 frameB The frame B. Implements Evergine.Framework.Physics3D.ISliderJoint3D Evergine.Framework.Physics3D.IJoint3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletSphereCollider3D.html": {
    "href": "api/Evergine.Bullet.BulletSphereCollider3D.html",
    "title": "Class BulletSphereCollider3D | Evergine Doc",
    "keywords": "Class BulletSphereCollider3D The BulletSphereCollider3D implements Bullet rigid body for Evergine. Inheritance object BulletCollider3D BulletCollider3D<SphereShape> BulletSphereCollider3D Implements ISphereColliderShape3D IColliderShape3D IDisposable Inherited Members BulletCollider3D<SphereShape>.LocalScaling BulletCollider3D<SphereShape>.InternalCollider BulletCollider3D<SphereShape>.Dispose() BulletCollider3D.OffsetTransform BulletCollider3D.ColliderComponent BulletCollider3D.Margin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletSphereCollider3D : BulletCollider3D<SphereShape>, ISphereColliderShape3D, IColliderShape3D, IDisposable Constructors BulletSphereCollider3D() Initializes a new instance of the BulletSphereCollider3D class. Declaration public BulletSphereCollider3D() Properties Radius Gets or sets the sphere radius. Declaration public float Radius { get; set; } Property Value Type Description float Methods InternalRefreshShapeDimension() Refresh the shape dimensions. Declaration protected override void InternalRefreshShapeDimension() Overrides BulletCollider3D.InternalRefreshShapeDimension() RefreshMargin() Refresh the shape dimension. Declaration protected override void RefreshMargin() Overrides BulletCollider3D.RefreshMargin() Implements Evergine.Framework.Physics3D.ISphereColliderShape3D Evergine.Framework.Physics3D.IColliderShape3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.BulletStaticBody3D.html": {
    "href": "api/Evergine.Bullet.BulletStaticBody3D.html",
    "title": "Class BulletStaticBody3D | Evergine Doc",
    "keywords": "Class BulletStaticBody3D The BulletCollisionObject3D implements Bullet collision object for Evergine. Inheritance object DisposableObject BulletPhysicBody3D BulletStaticBody3D Implements IStaticBody3D IPhysicBody3D IDisposable Inherited Members BulletPhysicBody3D.InternalBody BulletPhysicBody3D.BodyComponent BulletPhysicBody3D.IsSensor BulletPhysicBody3D.Friction BulletPhysicBody3D.Restitution BulletPhysicBody3D.Flags BulletPhysicBody3D.Transform BulletPhysicBody3D.ColliderShapes BulletPhysicBody3D.AnisotropicFriction BulletPhysicBody3D.CcdMotionThreshold BulletPhysicBody3D.CcdSweptSphereRadius BulletPhysicBody3D.CompanionId BulletPhysicBody3D.ContactDamping BulletPhysicBody3D.ContactProcessingThreshold BulletPhysicBody3D.ContactStiffness BulletPhysicBody3D.DeactivationTime BulletPhysicBody3D.HasContactResponse BulletPhysicBody3D.HitFraction BulletPhysicBody3D.InterpolationAngularVelocity BulletPhysicBody3D.InterpolationLinearVelocity BulletPhysicBody3D.InterpolationWorldTransform BulletPhysicBody3D.IsActive BulletPhysicBody3D.IslandTag BulletPhysicBody3D.IsKinematicObject BulletPhysicBody3D.IsStaticObject BulletPhysicBody3D.IsStaticOrKinematicObject BulletPhysicBody3D.RollingFriction BulletPhysicBody3D.SpinningFriction BulletPhysicBody3D.CollisionCategories BulletPhysicBody3D.MaskBits BulletPhysicBody3D.AddColliderShape(IColliderShape3D) BulletPhysicBody3D.RemoveColliderShape(IColliderShape3D) BulletPhysicBody3D.GetColliderShapeByIndex(int) BulletPhysicBody3D.GetColliderShapeIndex(BulletCollider3D) BulletPhysicBody3D.SetTransform(Vector3, Quaternion, Vector3) DisposableObject.Disposed DisposableObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public sealed class BulletStaticBody3D : BulletPhysicBody3D, IStaticBody3D, IPhysicBody3D, IDisposable Constructors BulletStaticBody3D(BulletPhysicManager3D, StaticBodyDef3D) Initializes a new instance of the BulletStaticBody3D class. Declaration public BulletStaticBody3D(BulletPhysicManager3D simulation3D, StaticBodyDef3D bodyDef) Parameters Type Name Description BulletPhysicManager3D simulation3D The bullet world. StaticBodyDef3D bodyDef The definition of static body. Methods InstantiateCollisionObject(PhysicBodyDef3D) Create the rigid body. Declaration protected override void InstantiateCollisionObject(PhysicBodyDef3D bodyDef) Parameters Type Name Description PhysicBodyDef3D bodyDef The body definition. Overrides BulletPhysicBody3D.InstantiateCollisionObject(PhysicBodyDef3D) Implements Evergine.Framework.Physics3D.IStaticBody3D Evergine.Framework.Physics3D.IPhysicBody3D IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.CustomKinematicCharacterController.html": {
    "href": "api/Evergine.Bullet.CustomKinematicCharacterController.html",
    "title": "Class CustomKinematicCharacterController | Evergine Doc",
    "keywords": "Class CustomKinematicCharacterController Inheritance object CustomKinematicCharacterController Implements ICharacterController IAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class CustomKinematicCharacterController : ICharacterController, IAction Constructors CustomKinematicCharacterController(PairCachingGhostObject, ConvexShape, float, int) Declaration public CustomKinematicCharacterController(PairCachingGhostObject ghostObject, ConvexShape convexShape, float stepHeight, int upAxis = 1) Parameters Type Name Description PairCachingGhostObject ghostObject ConvexShape convexShape float stepHeight int upAxis Fields bounce_fix Declaration protected bool bounce_fix Field Value Type Description bool full_drop Declaration protected bool full_drop Field Value Type Description bool m_addedMargin Declaration protected float m_addedMargin Field Value Type Description float m_convexShape Declaration protected ConvexShape m_convexShape Field Value Type Description ConvexShape m_currentPosition Declaration protected Vector3 m_currentPosition Field Value Type Description Vector3 m_fallSpeed Declaration protected float m_fallSpeed Field Value Type Description float m_ghostObject Declaration protected PairCachingGhostObject m_ghostObject Field Value Type Description PairCachingGhostObject m_halfHeight Declaration protected float m_halfHeight Field Value Type Description float m_interpolateUp Declaration protected bool m_interpolateUp Field Value Type Description bool m_jumpSpeed Declaration protected float m_jumpSpeed Field Value Type Description float m_manifoldArray Declaration protected AlignedManifoldArray m_manifoldArray Field Value Type Description AlignedManifoldArray m_maxJumpHeight Declaration protected float m_maxJumpHeight Field Value Type Description float m_maxSlopeCosine Declaration protected float m_maxSlopeCosine Field Value Type Description float m_maxSlopeRadians Declaration protected float m_maxSlopeRadians Field Value Type Description float m_normalizedDirection Declaration protected Vector3 m_normalizedDirection Field Value Type Description Vector3 m_stepHeight Declaration protected float m_stepHeight Field Value Type Description float m_targetPosition Declaration protected Vector3 m_targetPosition Field Value Type Description Vector3 m_touchingContact Declaration protected bool m_touchingContact Field Value Type Description bool m_touchingNormal Declaration protected Vector3 m_touchingNormal Field Value Type Description Vector3 m_turnAngle Declaration protected float m_turnAngle Field Value Type Description float m_upAxis Declaration protected int m_upAxis Field Value Type Description int m_useGhostObjectSweepTest Declaration protected bool m_useGhostObjectSweepTest Field Value Type Description bool m_useWalkDirection Declaration protected bool m_useWalkDirection Field Value Type Description bool m_velocityTimeInterval Declaration protected float m_velocityTimeInterval Field Value Type Description float m_verticalOffset Declaration protected float m_verticalOffset Field Value Type Description float m_verticalVelocity Declaration protected float m_verticalVelocity Field Value Type Description float m_walkDirection Declaration protected Vector3 m_walkDirection Field Value Type Description Vector3 m_wasJumping Declaration protected bool m_wasJumping Field Value Type Description bool m_wasOnGround Declaration protected bool m_wasOnGround Field Value Type Description bool upAxisDirection Declaration protected static Vector3[] upAxisDirection Field Value Type Description Vector3[] Properties CanJump Declaration public bool CanJump { get; } Property Value Type Description bool GhostObject Declaration public PairCachingGhostObject GhostObject { get; } Property Value Type Description PairCachingGhostObject Gravity Declaration public float Gravity { get; set; } Property Value Type Description float MaxSlope Declaration public float MaxSlope { get; set; } Property Value Type Description float OnGround Declaration public bool OnGround { get; } Property Value Type Description bool Methods ComputeReflectionDirection(ref Vector3, ref Vector3) Declaration protected Vector3 ComputeReflectionDirection(ref Vector3 direction, ref Vector3 normal) Parameters Type Name Description Vector3 direction Vector3 normal Returns Type Description Vector3 DebugDraw(DebugDraw) Declaration public void DebugDraw(DebugDraw debugDrawer) Parameters Type Name Description DebugDraw debugDrawer GetNormalizedVector(ref Vector3) Declaration public static Vector3 GetNormalizedVector(ref Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 Jump() Declaration public void Jump() Jump(ref Vector3) Declaration public void Jump(ref Vector3 v) Parameters Type Name Description Vector3 v ParallelComponent(ref Vector3, ref Vector3) Declaration protected Vector3 ParallelComponent(ref Vector3 direction, ref Vector3 normal) Parameters Type Name Description Vector3 direction Vector3 normal Returns Type Description Vector3 PerpindicularComponent(ref Vector3, ref Vector3) Declaration protected Vector3 PerpindicularComponent(ref Vector3 direction, ref Vector3 normal) Parameters Type Name Description Vector3 direction Vector3 normal Returns Type Description Vector3 PlayerStep(CollisionWorld, float) Declaration public void PlayerStep(CollisionWorld collisionWorld, float dt) Parameters Type Name Description CollisionWorld collisionWorld float dt PreStep(CollisionWorld) Declaration public void PreStep(CollisionWorld collisionWorld) Parameters Type Name Description CollisionWorld collisionWorld RecoverFromPenetration(CollisionWorld) Declaration protected bool RecoverFromPenetration(CollisionWorld collisionWorld) Parameters Type Name Description CollisionWorld collisionWorld Returns Type Description bool Reset(CollisionWorld) Declaration public void Reset(CollisionWorld collisionWorld) Parameters Type Name Description CollisionWorld collisionWorld SetFallSpeed(float) Declaration public void SetFallSpeed(float fallSpeed) Parameters Type Name Description float fallSpeed SetJumpSpeed(float) Declaration public void SetJumpSpeed(float jumpSpeed) Parameters Type Name Description float jumpSpeed SetMaxJumpHeight(float) Declaration public void SetMaxJumpHeight(float maxJumpHeight) Parameters Type Name Description float maxJumpHeight SetUpAxis(int) Declaration public void SetUpAxis(int axis) Parameters Type Name Description int axis SetUpInterpolate(bool) Declaration public void SetUpInterpolate(bool v) Parameters Type Name Description bool v SetUseGhostSweepTest(bool) Declaration public void SetUseGhostSweepTest(bool useGhostObjectSweepTest) Parameters Type Name Description bool useGhostObjectSweepTest SetVelocityForTimeInterval(Vector3, float) Declaration public void SetVelocityForTimeInterval(Vector3 velocity, float timeInterval) Parameters Type Name Description Vector3 velocity float timeInterval SetVelocityForTimeInterval(ref Vector3, float) Declaration public void SetVelocityForTimeInterval(ref Vector3 velocity, float timeInterval) Parameters Type Name Description Vector3 velocity float timeInterval SetWalkDirection(Vector3) Declaration public virtual void SetWalkDirection(Vector3 walkDirection) Parameters Type Name Description Vector3 walkDirection SetWalkDirection(ref Vector3) Declaration public virtual void SetWalkDirection(ref Vector3 walkDirection) Parameters Type Name Description Vector3 walkDirection StepDown(CollisionWorld, float) Declaration protected void StepDown(CollisionWorld collisionWorld, float dt) Parameters Type Name Description CollisionWorld collisionWorld float dt StepForwardAndStrafe(CollisionWorld, ref Vector3) Declaration protected void StepForwardAndStrafe(CollisionWorld collisionWorld, ref Vector3 walkMove) Parameters Type Name Description CollisionWorld collisionWorld Vector3 walkMove StepUp(CollisionWorld) Declaration protected void StepUp(CollisionWorld collisionWorld) Parameters Type Name Description CollisionWorld collisionWorld UpdateAction(CollisionWorld, float) Declaration public virtual void UpdateAction(CollisionWorld collisionWorld, float deltaTime) Parameters Type Name Description CollisionWorld collisionWorld float deltaTime UpdateTargetPositionBasedOnCollision(ref Vector3, float, float) Declaration protected void UpdateTargetPositionBasedOnCollision(ref Vector3 hitNormal, float tangentMag, float normalMag) Parameters Type Name Description Vector3 hitNormal float tangentMag float normalMag Warp(ref Vector3) Declaration public void Warp(ref Vector3 origin) Parameters Type Name Description Vector3 origin Implements BulletSharp.ICharacterController BulletSharp.IAction Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.CustomKinematicClosestNotMeConvexResultCallback.html": {
    "href": "api/Evergine.Bullet.CustomKinematicClosestNotMeConvexResultCallback.html",
    "title": "Class CustomKinematicClosestNotMeConvexResultCallback | Evergine Doc",
    "keywords": "Class CustomKinematicClosestNotMeConvexResultCallback Inheritance object BulletObject BulletDisposableObject ConvexResultCallback ClosestConvexResultCallback CustomKinematicClosestNotMeConvexResultCallback Implements IDisposable Inherited Members ClosestConvexResultCallback.ConvexFromWorld ClosestConvexResultCallback.ConvexToWorld ClosestConvexResultCallback.HitCollisionObject ClosestConvexResultCallback.HitNormalWorld ClosestConvexResultCallback.HitPointWorld ConvexResultCallback.NeedsCollision(BroadphaseProxy) ConvexResultCallback.Dispose(bool) ConvexResultCallback.ClosestHitFraction ConvexResultCallback.CollisionFilterGroup ConvexResultCallback.CollisionFilterMask ConvexResultCallback.HasHit BulletDisposableObject.InitializeUserOwned(IntPtr) BulletDisposableObject.InitializeSubObject(IntPtr, BulletObject) BulletDisposableObject.Dispose() BulletDisposableObject.IsDisposed BulletObject.Initialize(IntPtr) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class CustomKinematicClosestNotMeConvexResultCallback : ClosestConvexResultCallback, IDisposable Constructors CustomKinematicClosestNotMeConvexResultCallback(CollisionObject, Vector3, float) Declaration public CustomKinematicClosestNotMeConvexResultCallback(CollisionObject me, Vector3 up, float minSlopeDot) Parameters Type Name Description CollisionObject me Vector3 up float minSlopeDot Fields _me Declaration protected CollisionObject _me Field Value Type Description CollisionObject _minSlopeDot Declaration protected float _minSlopeDot Field Value Type Description float _up Declaration protected Vector3 _up Field Value Type Description Vector3 Methods AddSingleResult(ref LocalConvexResult, bool) Declaration public override float AddSingleResult(ref LocalConvexResult convexResult, bool normalInWorldSpace) Parameters Type Name Description LocalConvexResult convexResult bool normalInWorldSpace Returns Type Description float Overrides ClosestConvexResultCallback.AddSingleResult(ref LocalConvexResult, bool) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.CustomKinematicClosestNotMeRayResultCallback.html": {
    "href": "api/Evergine.Bullet.CustomKinematicClosestNotMeRayResultCallback.html",
    "title": "Class CustomKinematicClosestNotMeRayResultCallback | Evergine Doc",
    "keywords": "Class CustomKinematicClosestNotMeRayResultCallback Inheritance object BulletObject BulletDisposableObject RayResultCallback ClosestRayResultCallback CustomKinematicClosestNotMeRayResultCallback Implements IDisposable Inherited Members ClosestRayResultCallback.RayFromWorld ClosestRayResultCallback.RayToWorld ClosestRayResultCallback.HitNormalWorld ClosestRayResultCallback.HitPointWorld RayResultCallback.NeedsCollision(BroadphaseProxy) RayResultCallback.Dispose(bool) RayResultCallback.ClosestHitFraction RayResultCallback.CollisionFilterGroup RayResultCallback.CollisionFilterMask RayResultCallback.CollisionObject RayResultCallback.Flags RayResultCallback.HasHit BulletDisposableObject.InitializeUserOwned(IntPtr) BulletDisposableObject.InitializeSubObject(IntPtr, BulletObject) BulletDisposableObject.Dispose() BulletDisposableObject.IsDisposed BulletObject.Initialize(IntPtr) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class CustomKinematicClosestNotMeRayResultCallback : ClosestRayResultCallback, IDisposable Constructors CustomKinematicClosestNotMeRayResultCallback(CollisionObject) Declaration public CustomKinematicClosestNotMeRayResultCallback(CollisionObject me) Parameters Type Name Description CollisionObject me Fields _me Declaration protected CollisionObject _me Field Value Type Description CollisionObject Methods AddSingleResult(ref LocalRayResult, bool) Declaration public override float AddSingleResult(ref LocalRayResult rayResult, bool normalInWorldSpace) Parameters Type Name Description LocalRayResult rayResult bool normalInWorldSpace Returns Type Description float Overrides ClosestRayResultCallback.AddSingleResult(ref LocalRayResult, bool) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.DllImportResolver.html": {
    "href": "api/Evergine.Bullet.DllImportResolver.html",
    "title": "Class DllImportResolver | Evergine Doc",
    "keywords": "Class DllImportResolver Inheritance object DllImportResolver Implements INativeLibraryRegisterMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Bullet Assembly: Evergine.Bullet.dll Syntax public class DllImportResolver : INativeLibraryRegisterMapping Methods TryGetLibraryNameFor(string, PlatformType, out string) Determines if a platform has a explicit library name for a given platform. Declaration public bool TryGetLibraryNameFor(string libraryName, PlatformType platform, out string platformLibraryName) Parameters Type Name Description string libraryName Library name. PlatformType platform Target platform. string platformLibraryName Platform specific library name. Returns Type Description bool True if there is an explicit mapping; false otherwise. Implements INativeLibraryRegisterMapping Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Bullet.html": {
    "href": "api/Evergine.Bullet.html",
    "title": "Namespace Evergine.Bullet | Evergine Doc",
    "keywords": "Namespace Evergine.Bullet Classes BulletAbstractGeneric6DofJoint3D<T, K, J> The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletBoxCollider3D The BulletBoxCollider3D implements Bullet rigid body for Evergine. BulletCapsuleCollider3D The BulletCapsuleCollider3D implements Bullet rigid body for Evergine. BulletCharacterController3D The BulletCollisionObject3D implements Bullet collision object for Evergine. BulletCollider3D The BulletCollider3D is a base class for all 3D colliders implemented by Bullet. BulletCollider3D<T> The BulletCollider3D is a base class for all 3D colliders implemented by Bullet. BulletCollisionInfo3D The collision info 3d implementation for bullet. BulletCollisionInfoPool Collision Manifold. BulletCompoundCollider3D The BulletSphereCollider3D implements Bullet rigid body for Evergine. BulletConeCollider3D The BulletConeCollider3D implements Bullet rigid body for Evergine. BulletConeTwistJoint3D The BulletConeTwistJoint3D is a base class for all 3D joints implemented by Bullet. BulletContactManager Collision Manifold. BulletConvexHullCollider3D The BulletConvexHullCollider3D implements Bullet convex hull collider. BulletCylinderCollider3D The BulletCapsuleCollider3D implements Bullet rigid body for Evergine. BulletDebugDraw3D Bullet debug draw instance. BulletEmptyCollider3D The BulletEmptyCollider3D implements Bullet rigid body for Evergine. BulletFixedJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletGearJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletGeneric6DofJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletGeneric6DofSpringJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletGhostBody3D The BulletGhostBody3D implements Bullet ghost object for Evergine. BulletHingeJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletJoint3D<T, K> The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletJointFeedback3D The BulletJointFeedback3D is a base class for all 3D joints feedback implemented by Bullet. BulletMeshCollider3D The BulletBoxCollider3D implements Bullet rigid body for Evergine. BulletPhysicAction3D The BulletCollisionObject3D implements Bullet collision object for Evergine. BulletPhysicBody3D The BulletPhysicBody3D implements Bullet physic object for Evergine. BulletPhysicManager3D The Simulation3D class manages all 3D physics entities. BulletPointToPointJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletRayTestManager Evergine raycast callback. BulletRigidBody3D The Bullet3DRigidBody implements Bullet rigid body for Evergine. BulletSliderJoint3D The BulletJoint3D is a base class for all 3D joints implemented by Bullet. BulletSphereCollider3D The BulletSphereCollider3D implements Bullet rigid body for Evergine. BulletStaticBody3D The BulletCollisionObject3D implements Bullet collision object for Evergine. CustomKinematicCharacterController CustomKinematicClosestNotMeConvexResultCallback CustomKinematicClosestNotMeRayResultCallback DllImportResolver Structs BulletContactPoint3D Contact point between 2 colliders. BulletManifold Collision Manifold. BulletManifoldInternal Contact point between 2 colliders. BulletRaycastResult Raycast result from bullet."
  },
  "api/Evergine.Common.AdapterType.html": {
    "href": "api/Evergine.Common.AdapterType.html",
    "title": "Enum AdapterType | Evergine Doc",
    "keywords": "Enum AdapterType Specifies the type of adapter. Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public enum AdapterType Fields Name Description DirectX Uses DirectX. OpenGL Uses OpenGL. OpenGLES User OpenGL ES. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.AssetType.html": {
    "href": "api/Evergine.Common.Attributes.AssetType.html",
    "title": "Enum AssetType | Evergine Doc",
    "keywords": "Enum AssetType Asset Type (Model, Material, Texture, etc..) Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax public enum AssetType Fields Name Description Cubemap Cubemap asset Entity The entity Font The font Material Material asset (ej. wmat) Model Model asset (ej .fbx ...) Prefab The prefab SkinnedModel The skinned model Sound Sound asset (ej. wav) Spritesheet Sprite sheet asset Texture Texture asset (ej. jpg, png ...) Unknown The unknown Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.Converters.FloatRadianToDegreeConverter.html": {
    "href": "api/Evergine.Common.Attributes.Converters.FloatRadianToDegreeConverter.html",
    "title": "Class FloatRadianToDegreeConverter | Evergine Doc",
    "keywords": "Class FloatRadianToDegreeConverter Radian to degree converter class. Inheritance object FloatRadianToDegreeConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes.Converters Assembly: Evergine.Common.dll Syntax public class FloatRadianToDegreeConverter : IConverter Methods Convert(object) Converts the specified value. Declaration public object Convert(object value) Parameters Type Name Description object value The value. Returns Type Description object The degrees. ConvertBack(object) Converts the back. Declaration public object ConvertBack(object value) Parameters Type Name Description object value The value. Returns Type Description object The radians. Implements IConverter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.Converters.html": {
    "href": "api/Evergine.Common.Attributes.Converters.html",
    "title": "Namespace Evergine.Common.Attributes.Converters | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Attributes.Converters Classes FloatRadianToDegreeConverter Radian to degree converter class. Vector3RadianToDegreeConverter Randian to degree converter class. Interfaces IConverter Interface Converter Source - Destination."
  },
  "api/Evergine.Common.Attributes.Converters.IConverter.html": {
    "href": "api/Evergine.Common.Attributes.Converters.IConverter.html",
    "title": "Interface IConverter | Evergine Doc",
    "keywords": "Interface IConverter Interface Converter Source - Destination. Namespace: Evergine.Common.Attributes.Converters Assembly: Evergine.Common.dll Syntax public interface IConverter Methods Convert(object) Convert source object to destination object. Declaration object Convert(object value) Parameters Type Name Description object value source object. Returns Type Description object destination object. ConvertBack(object) Convert destionation object. Declaration object ConvertBack(object value) Parameters Type Name Description object value destination object. Returns Type Description object source object. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.html": {
    "href": "api/Evergine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.html",
    "title": "Class Vector3RadianToDegreeConverter | Evergine Doc",
    "keywords": "Class Vector3RadianToDegreeConverter Randian to degree converter class. Inheritance object Vector3RadianToDegreeConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes.Converters Assembly: Evergine.Common.dll Syntax public class Vector3RadianToDegreeConverter : IConverter Methods Convert(object) Convert from radians vector3 to degrees vector3. Declaration public object Convert(object value) Parameters Type Name Description object value the radians. Returns Type Description object the degrees. ConvertBack(object) Convert from degrees vector3 to radians vector3. Declaration public object ConvertBack(object value) Parameters Type Name Description object value the degrees. Returns Type Description object the radians. Implements IConverter Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.DontRenderProperty.html": {
    "href": "api/Evergine.Common.Attributes.DontRenderProperty.html",
    "title": "Class DontRenderProperty | Evergine Doc",
    "keywords": "Class DontRenderProperty Don't Render Property attribute. Inheritance object Attribute DontRenderProperty Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class DontRenderProperty : Attribute Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.EvergineAssembly.html": {
    "href": "api/Evergine.Common.Attributes.EvergineAssembly.html",
    "title": "Class EvergineAssembly | Evergine Doc",
    "keywords": "Class EvergineAssembly Mark an assembly as a Evergine project assembly. Inheritance object Attribute EvergineAssembly Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class EvergineAssembly : Attribute Constructors EvergineAssembly() Initializes a new instance of the EvergineAssembly class. Declaration public EvergineAssembly() EvergineAssembly(EvergineAssemblyUsage) Initializes a new instance of the EvergineAssembly class. Declaration public EvergineAssembly(EvergineAssemblyUsage type) Parameters Type Name Description EvergineAssemblyUsage type The assembly usage. EvergineAssembly(string) Initializes a new instance of the EvergineAssembly class. Declaration public EvergineAssembly(string type) Parameters Type Name Description string type The assembly usage. Fields DefaultUsage The usage when this attribute is used without specify a usage value. Declaration public static EvergineAssemblyUsage DefaultUsage Field Value Type Description EvergineAssemblyUsage Properties Type Gets the assembly type. Declaration public EvergineAssemblyUsage Type { get; } Property Value Type Description EvergineAssemblyUsage Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.EvergineAssemblyUsage.html": {
    "href": "api/Evergine.Common.Attributes.EvergineAssemblyUsage.html",
    "title": "Enum EvergineAssemblyUsage | Evergine Doc",
    "keywords": "Enum EvergineAssemblyUsage The Evergine assembly usage type. Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax public enum EvergineAssemblyUsage Fields Name Description Core Evergine core assembly Editor Assembly for editor extensions Extension Extension assembly UserProject Assembly from an user project Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.EvergineAttributeBase.html": {
    "href": "api/Evergine.Common.Attributes.EvergineAttributeBase.html",
    "title": "Class EvergineAttributeBase | Evergine Doc",
    "keywords": "Class EvergineAttributeBase Class that represents a Evergine attribute. Inheritance object Attribute EvergineAttributeBase EvergineMemberAttribute IgnoreEvergineAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax public abstract class EvergineAttributeBase : Attribute Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.EvergineMemberAttribute.html": {
    "href": "api/Evergine.Common.Attributes.EvergineMemberAttribute.html",
    "title": "Class EvergineMemberAttribute | Evergine Doc",
    "keywords": "Class EvergineMemberAttribute Attribute that represents a member with specific settings. Inheritance object Attribute EvergineAttributeBase EvergineMemberAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class EvergineMemberAttribute : EvergineAttributeBase Constructors EvergineMemberAttribute() Initializes a new instance of the EvergineMemberAttribute class. Declaration public EvergineMemberAttribute() EvergineMemberAttribute(int) Initializes a new instance of the EvergineMemberAttribute class. Declaration public EvergineMemberAttribute(int order) Parameters Type Name Description int order The member order in the serialized structure. Properties Order Gets the order of the member. Declaration public int? Order { get; } Property Value Type Description int? Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.html": {
    "href": "api/Evergine.Common.Attributes.html",
    "title": "Namespace Evergine.Common.Attributes | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Attributes Classes DontRenderProperty Don't Render Property attribute. EvergineAssembly Mark an assembly as a Evergine project assembly. EvergineAttributeBase Class that represents a Evergine attribute. EvergineMemberAttribute Attribute that represents a member with specific settings. IgnoreEvergineAttribute Attribute class that represents a member of a class that shouldn't be serialized. MonoPInvokeCallbackAttribute Necessary for AOT ports of Mono. NameKey Attribute indicating a name key. RefreshEntityRequired Refresh entity required components attribute. RenderProperty Render property attribute. RenderPropertyAsFInput Render Property As Float Input attribute. RenderPropertyAsInput Render Property As Input. RenderPropertyAsList Render Property As List Attribute. RenderPropertyAsTextBox Render Property As TextBox input. RenderPropertyAsVector2Input Render Property As Float Input attribute. Enums AssetType Asset Type (Model, Material, Texture, etc..) EvergineAssemblyUsage The Evergine assembly usage type. RenderPosition The render position."
  },
  "api/Evergine.Common.Attributes.IgnoreEvergineAttribute.html": {
    "href": "api/Evergine.Common.Attributes.IgnoreEvergineAttribute.html",
    "title": "Class IgnoreEvergineAttribute | Evergine Doc",
    "keywords": "Class IgnoreEvergineAttribute Attribute class that represents a member of a class that shouldn't be serialized. Inheritance object Attribute EvergineAttributeBase IgnoreEvergineAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class IgnoreEvergineAttribute : EvergineAttributeBase Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.MonoPInvokeCallbackAttribute.html": {
    "href": "api/Evergine.Common.Attributes.MonoPInvokeCallbackAttribute.html",
    "title": "Class MonoPInvokeCallbackAttribute | Evergine Doc",
    "keywords": "Class MonoPInvokeCallbackAttribute Necessary for AOT ports of Mono. Inheritance object Attribute MonoPInvokeCallbackAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class MonoPInvokeCallbackAttribute : Attribute Constructors MonoPInvokeCallbackAttribute(Type) Initializes a new instance of the MonoPInvokeCallbackAttribute class. Declaration public MonoPInvokeCallbackAttribute(Type t) Parameters Type Name Description Type t The delegate type. Properties DelegateType Gets or sets the type of the delegate. Declaration public Type DelegateType { get; set; } Property Value Type Description Type Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.NameKey.html": {
    "href": "api/Evergine.Common.Attributes.NameKey.html",
    "title": "Class NameKey | Evergine Doc",
    "keywords": "Class NameKey Attribute indicating a name key. Inheritance object Attribute NameKey Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax public class NameKey : Attribute Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RefreshEntityRequired.html": {
    "href": "api/Evergine.Common.Attributes.RefreshEntityRequired.html",
    "title": "Class RefreshEntityRequired | Evergine Doc",
    "keywords": "Class RefreshEntityRequired Refresh entity required components attribute. Inheritance object Attribute RefreshEntityRequired Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class RefreshEntityRequired : Attribute Constructors RefreshEntityRequired() Initializes a new instance of the RefreshEntityRequired class. Declaration public RefreshEntityRequired() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RenderPosition.html": {
    "href": "api/Evergine.Common.Attributes.RenderPosition.html",
    "title": "Enum RenderPosition | Evergine Doc",
    "keywords": "Enum RenderPosition The render position. Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax public enum RenderPosition Fields Name Description Default The default End The ends Start The start Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RenderProperty.html": {
    "href": "api/Evergine.Common.Attributes.RenderProperty.html",
    "title": "Class RenderProperty | Evergine Doc",
    "keywords": "Class RenderProperty Render property attribute. Inheritance object Attribute RenderProperty RenderPropertyAsFInput RenderPropertyAsInput RenderPropertyAsList RenderPropertyAsTextBox RenderPropertyAsVector2Input Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class RenderProperty : Attribute Constructors RenderProperty() Initializes a new instance of the RenderProperty class. Declaration public RenderProperty() RenderProperty(Type) Initializes a new instance of the RenderProperty class. Declaration public RenderProperty(Type converterType) Parameters Type Name Description Type converterType the converter type. Fields AttachToTag The attach to tag. Declaration public int AttachToTag Field Value Type Description int AttachToValue The attach to object. Declaration public object AttachToValue Field Value Type Description object ConverterType Converter instance. Declaration public Type ConverterType Field Value Type Description Type CustomPropertyName Custom property name. Declaration public string CustomPropertyName Field Value Type Description string DefaultValue The default value. Optional. Declaration public object DefaultValue Field Value Type Description object Mask The mask. Declaration public int Mask Field Value Type Description int RenderPosition The render position. Declaration public RenderPosition RenderPosition Field Value Type Description RenderPosition ShowConditionFunction The property is shown if the contition is true. Declaration public string ShowConditionFunction Field Value Type Description string Tag The tag. Declaration public int Tag Field Value Type Description int Tooltip Information about the property when pointer is over of it. Declaration public string Tooltip Field Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RenderPropertyAsFInput.html": {
    "href": "api/Evergine.Common.Attributes.RenderPropertyAsFInput.html",
    "title": "Class RenderPropertyAsFInput | Evergine Doc",
    "keywords": "Class RenderPropertyAsFInput Render Property As Float Input attribute. Inheritance object Attribute RenderProperty RenderPropertyAsFInput Inherited Members RenderProperty.ConverterType RenderProperty.RenderPosition RenderProperty.Tag RenderProperty.AttachToTag RenderProperty.Mask RenderProperty.AttachToValue RenderProperty.Tooltip RenderProperty.CustomPropertyName RenderProperty.ShowConditionFunction RenderProperty.DefaultValue Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class RenderPropertyAsFInput : RenderProperty Constructors RenderPropertyAsFInput() Initializes a new instance of the RenderPropertyAsFInput class. Declaration public RenderPropertyAsFInput() RenderPropertyAsFInput(float) Initializes a new instance of the RenderPropertyAsFInput class. Declaration public RenderPropertyAsFInput(float minLimit) Parameters Type Name Description float minLimit Minimum value (Default float.MinValue). RenderPropertyAsFInput(float, float) Initializes a new instance of the RenderPropertyAsFInput class. Declaration public RenderPropertyAsFInput(float minLimit, float maxLimit) Parameters Type Name Description float minLimit Minimum value (Default float.MinValue). float maxLimit Maximum value (Default float.MaxValue). RenderPropertyAsFInput(Type) Initializes a new instance of the RenderPropertyAsFInput class. Declaration public RenderPropertyAsFInput(Type converterType) Parameters Type Name Description Type converterType the data converter type. RenderPropertyAsFInput(Type, float) Initializes a new instance of the RenderPropertyAsFInput class. Declaration public RenderPropertyAsFInput(Type converterType, float minLimit) Parameters Type Name Description Type converterType the data converter type. float minLimit Minimum value (Default float.MinValue). RenderPropertyAsFInput(Type, float, float) Initializes a new instance of the RenderPropertyAsFInput class. Declaration public RenderPropertyAsFInput(Type converterType, float minLimit, float maxLimit) Parameters Type Name Description Type converterType the data converter type. float minLimit Minimum value (Default float.MinValue). float maxLimit Maximum value (Default float.MaxValue). RenderPropertyAsFInput(Type, float, float, float) Initializes a new instance of the RenderPropertyAsFInput class. Declaration public RenderPropertyAsFInput(Type converterType, float minLimit, float maxLimit, float defaultValue) Parameters Type Name Description Type converterType the data converter type. float minLimit Minimum value (Default float.MinValue). float maxLimit Maximum value (Default float.MaxValue). float defaultValue default value (Default null). Fields AsSlider Show the property as slider. Declaration public bool AsSlider Field Value Type Description bool DesiredChange The desired value change. Zero for default behavior. Declaration public float DesiredChange Field Value Type Description float DesiredLargeChange The desired value large change. Zero for default behavior. Declaration public float DesiredLargeChange Field Value Type Description float MaxLimit Maximum value. Declaration public float MaxLimit Field Value Type Description float MinLimit Minimun value. Declaration public float MinLimit Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RenderPropertyAsInput.html": {
    "href": "api/Evergine.Common.Attributes.RenderPropertyAsInput.html",
    "title": "Class RenderPropertyAsInput | Evergine Doc",
    "keywords": "Class RenderPropertyAsInput Render Property As Input. Inheritance object Attribute RenderProperty RenderPropertyAsInput Inherited Members RenderProperty.ConverterType RenderProperty.RenderPosition RenderProperty.Tag RenderProperty.AttachToTag RenderProperty.Mask RenderProperty.AttachToValue RenderProperty.Tooltip RenderProperty.CustomPropertyName RenderProperty.ShowConditionFunction RenderProperty.DefaultValue Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class RenderPropertyAsInput : RenderProperty Constructors RenderPropertyAsInput() Initializes a new instance of the RenderPropertyAsInput class. Declaration public RenderPropertyAsInput() RenderPropertyAsInput(int) Initializes a new instance of the RenderPropertyAsInput class. Declaration public RenderPropertyAsInput(int minLimit) Parameters Type Name Description int minLimit Minimum value (Default int.MinValue). RenderPropertyAsInput(int, int) Initializes a new instance of the RenderPropertyAsInput class. Declaration public RenderPropertyAsInput(int minLimit, int maxLimit) Parameters Type Name Description int minLimit Minimum value (Default int.MinValue). int maxLimit Maximum value (Default int.MaxValue). RenderPropertyAsInput(Type) Initializes a new instance of the RenderPropertyAsInput class. Declaration public RenderPropertyAsInput(Type converterType) Parameters Type Name Description Type converterType the data converter type. RenderPropertyAsInput(Type, int) Initializes a new instance of the RenderPropertyAsInput class. Declaration public RenderPropertyAsInput(Type converterType, int minLimit) Parameters Type Name Description Type converterType the data converter type. int minLimit Minimum value (Default int.MinValue). RenderPropertyAsInput(Type, int, int) Initializes a new instance of the RenderPropertyAsInput class. Declaration public RenderPropertyAsInput(Type converterType, int minLimit, int maxLimit) Parameters Type Name Description Type converterType the data converter type. int minLimit Minimum value (Default int.MinValue). int maxLimit Maximum value (Default int.MaxValue). RenderPropertyAsInput(Type, int, int, int) Initializes a new instance of the RenderPropertyAsInput class. Declaration public RenderPropertyAsInput(Type converterType, int minLimit, int maxLimit, int defaultValue) Parameters Type Name Description Type converterType the data converter type. int minLimit Minimum value (Default float.MinValue). int maxLimit Maximum value (Default float.MaxValue). int defaultValue default value (Default null). Fields AsSlider Show the property as slider. Declaration public bool AsSlider Field Value Type Description bool DesiredChange The desired value change. Zero for default behavior. Declaration public int DesiredChange Field Value Type Description int DesiredLargeChange The desired value large change. Zero for default behavior. Declaration public int DesiredLargeChange Field Value Type Description int MaxLimit Maximum value. Declaration public int MaxLimit Field Value Type Description int MinLimit Minimun value. Declaration public int MinLimit Field Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RenderPropertyAsList.html": {
    "href": "api/Evergine.Common.Attributes.RenderPropertyAsList.html",
    "title": "Class RenderPropertyAsList | Evergine Doc",
    "keywords": "Class RenderPropertyAsList Render Property As List Attribute. Inheritance object Attribute RenderProperty RenderPropertyAsList Inherited Members RenderProperty.ConverterType RenderProperty.RenderPosition RenderProperty.Tag RenderProperty.AttachToTag RenderProperty.Mask RenderProperty.AttachToValue RenderProperty.Tooltip RenderProperty.CustomPropertyName RenderProperty.ShowConditionFunction RenderProperty.DefaultValue Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class RenderPropertyAsList : RenderProperty Constructors RenderPropertyAsList(bool, bool, bool, bool, string, string, string, string, string, string) Initializes a new instance of the RenderPropertyAsList class. Declaration public RenderPropertyAsList(bool isItemEditable = true, bool isReorderable = true, bool useNameKey = false, bool showOrder = false, string legend = null, string selectItemTitle = null, string itemsToSelect = null, string canDeleteItem = null, string onAddedItemAction = null, string onRemovedItemAction = null) Parameters Type Name Description bool isItemEditable If the items must be editable. bool isReorderable If the list is reorderable. bool useNameKey If the list use a key. bool showOrder If the list must show the element index. string legend The text to be presented in the legend area. string selectItemTitle The text showing in the item selector. string itemsToSelect Method name of the items to select. string canDeleteItem Method name of every item, telling wheter it can be deleted. string onAddedItemAction Optional method called (after) when a new item is added. string onRemovedItemAction Optional method called (after) when a new item is removed. Fields AddItemAction Optional method called (after) when a new item is added. Declaration public string AddItemAction Field Value Type Description string CanDeleteItem The property name of the item telling whether the item can be deleted or not. Declaration public string CanDeleteItem Field Value Type Description string IsItemEditable Gets or sets a value indicating whether this list item is editable. Declaration public bool IsItemEditable Field Value Type Description bool true if editable; otherwise, false. IsReorderable Gets or sets a value indicating whether the list is reorderable. Declaration public bool IsReorderable Field Value Type Description bool true if editable; otherwise, false. ItemsToSelect Gets the available items to insert. Declaration public string ItemsToSelect Field Value Type Description string Legend The legend of the widget. Declaration public string Legend Field Value Type Description string RemoveItemAction Optional method called (after) when a new item is removed. Declaration public string RemoveItemAction Field Value Type Description string SelectItemTitle The text that will show in the select item title (Only in case there are items to select). Declaration public string SelectItemTitle Field Value Type Description string ShowOrder If the order of the elements must be visible. Declaration public bool ShowOrder Field Value Type Description bool UseNameKey Value indicating whether the list has a key index. Declaration public bool UseNameKey Field Value Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RenderPropertyAsTextBox.html": {
    "href": "api/Evergine.Common.Attributes.RenderPropertyAsTextBox.html",
    "title": "Class RenderPropertyAsTextBox | Evergine Doc",
    "keywords": "Class RenderPropertyAsTextBox Render Property As TextBox input. Inheritance object Attribute RenderProperty RenderPropertyAsTextBox Inherited Members RenderProperty.ConverterType RenderProperty.RenderPosition RenderProperty.Tag RenderProperty.AttachToTag RenderProperty.Mask RenderProperty.AttachToValue RenderProperty.Tooltip RenderProperty.CustomPropertyName RenderProperty.ShowConditionFunction RenderProperty.DefaultValue Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class RenderPropertyAsTextBox : RenderProperty Constructors RenderPropertyAsTextBox() Initializes a new instance of the RenderPropertyAsTextBox class. Declaration public RenderPropertyAsTextBox() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Attributes.RenderPropertyAsVector2Input.html": {
    "href": "api/Evergine.Common.Attributes.RenderPropertyAsVector2Input.html",
    "title": "Class RenderPropertyAsVector2Input | Evergine Doc",
    "keywords": "Class RenderPropertyAsVector2Input Render Property As Float Input attribute. Inheritance object Attribute RenderProperty RenderPropertyAsVector2Input Inherited Members RenderProperty.ConverterType RenderProperty.RenderPosition RenderProperty.Tag RenderProperty.AttachToTag RenderProperty.Mask RenderProperty.AttachToValue RenderProperty.Tooltip RenderProperty.CustomPropertyName RenderProperty.ShowConditionFunction RenderProperty.DefaultValue Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Attributes Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class RenderPropertyAsVector2Input : RenderProperty Constructors RenderPropertyAsVector2Input() Initializes a new instance of the RenderPropertyAsVector2Input class. Declaration public RenderPropertyAsVector2Input() RenderPropertyAsVector2Input(float, float) Initializes a new instance of the RenderPropertyAsVector2Input class. Declaration public RenderPropertyAsVector2Input(float minX, float minY) Parameters Type Name Description float minX Minimum X. float minY Minimum Y. RenderPropertyAsVector2Input(float, float, float, float) Initializes a new instance of the RenderPropertyAsVector2Input class. Declaration public RenderPropertyAsVector2Input(float minX, float minY, float maxX, float maxY) Parameters Type Name Description float minX Minimum X. float minY Minimum Y. float maxX Maximum X. float maxY Maximum Y. RenderPropertyAsVector2Input(Type) Initializes a new instance of the RenderPropertyAsVector2Input class. Declaration public RenderPropertyAsVector2Input(Type converterType) Parameters Type Name Description Type converterType the data converter type. RenderPropertyAsVector2Input(Type, float, float) Initializes a new instance of the RenderPropertyAsVector2Input class. Declaration public RenderPropertyAsVector2Input(Type converterType, float minX, float minY) Parameters Type Name Description Type converterType the data converter type. float minX Minimum X. float minY Minimum Y. RenderPropertyAsVector2Input(Type, float, float, float, float) Initializes a new instance of the RenderPropertyAsVector2Input class. Declaration public RenderPropertyAsVector2Input(Type converterType, float minX, float minY, float maxX, float maxY) Parameters Type Name Description Type converterType the data converter type. float minX Minimum X. float minY Minimum Y. float maxX Maximum X. float maxY Maximum Y. Fields MaxX Maximum X. Declaration public float MaxX Field Value Type Description float MaxY Maximum Y. Declaration public float MaxY Field Value Type Description float MinX Minimun X. Declaration public float MinX Field Value Type Description float MinY Minimum Y. Declaration public float MinY Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.AudioBuffer.html": {
    "href": "api/Evergine.Common.Audio.AudioBuffer.html",
    "title": "Class AudioBuffer | Evergine Doc",
    "keywords": "Class AudioBuffer The Audio Buffer class. Inheritance object AudioBuffer ALAudioBuffer XAudioBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public abstract class AudioBuffer : ILoadable, IDisposable, IDependencyObject Properties Dependencies Gets the dependency list. Declaration public Lazy<List<IDependencyLink>> Dependencies { get; } Property Value Type Description Lazy<List<IDependencyLink>> Duration Gets the duration of this buffer data according to the Format. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan Format Gets the wave format of this buffer. Declaration public WaveFormat Format { get; } Property Value Type Description WaveFormat Id Gets or sets the asset Id. Declaration public Guid Id { get; set; } Property Value Type Description Guid The asset path. Length Gets the length of this buffer. Declaration public int Length { get; } Property Value Type Description int ReaderVersion Gets the reader version. Declaration public Version ReaderVersion { get; } Property Value Type Description Version The reader version. SampleCount Gets the number of samples contained inside the buffer according to the Format. Declaration public int SampleCount { get; } Property Value Type Description int State Gets the audio buffer State. Declaration public AudioBufferStates State { get; } Property Value Type Description AudioBufferStates Methods Dispose() Declaration public virtual void Dispose() Fill(Stream, int, WaveFormat) Reads the bytes from the specified stream and writes them to audio buffer. Declaration public void Fill(Stream stream, int byteCount, WaveFormat format) Parameters Type Name Description Stream stream The stream from which the contents will be copied. int byteCount Number of bytes to copy. WaveFormat format The format of the wave data. FillAsync(Stream, int, WaveFormat) Asynchronously reads the bytes from the specified stream and writes them to audio buffer, using a specified buffer size. Declaration public Task FillAsync(Stream stream, int bufferSize, WaveFormat format) Parameters Type Name Description Stream stream The stream from which the contents will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. WaveFormat format The format of the wave data. Returns Type Description Task A task that represents the asynchronous copy operation. Fill<TBuffer>(TBuffer[], int, int, WaveFormat) Reads the data from the specified buffer and writes them to audio buffer. Declaration public void Fill<TBuffer>(TBuffer[] buffer, int offset, int count, WaveFormat format) where TBuffer : struct Parameters Type Name Description TBuffer[] buffer The array of TBuffer data to write. int offset The offset in the array to read from. int count The number of TBuffer element to write to the memory location. WaveFormat format The format of the wave data. Type Parameters Name Description TBuffer Type of a data to write. InternalFill(Stream, int) Fills the audio buffer with a specific stream. Declaration protected abstract void InternalFill(Stream stream, int bufferSize) Parameters Type Name Description Stream stream The source stream. int bufferSize The buffer size. InternalFillAsync(Stream, int) Fills the audio buffer with a specific stream. Declaration protected abstract Task InternalFillAsync(Stream stream, int bufferSize) Parameters Type Name Description Stream stream The source stream. int bufferSize The buffer size. Returns Type Description Task Awaitable task of the operation. InternalFill<TBuffer>(TBuffer[], int, int) Fills the audio buffer with a specific buffer. Declaration protected abstract void InternalFill<TBuffer>(TBuffer[] buffer, int offset, int count) where TBuffer : struct Parameters Type Name Description TBuffer[] buffer The source buffer. int offset The source offset. int count The number of elements to be copied. Type Parameters Name Description TBuffer The type of the buffer data. Invalidate(ILoadable) Invalidates this instance and raise the Invalidated event with the new ILoadable instance. Declaration public void Invalidate(ILoadable newInstance) Parameters Type Name Description ILoadable newInstance The new ILoadable instance. ReleaseUnusedMemory() Release unused memory. Declaration public void ReleaseUnusedMemory() Events Invalidated Occurs when this instance has been invalidated and all references must be reloaded. Declaration public event EventHandler<ILoadable> Invalidated Event Type Type Description EventHandler<ILoadable> Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.AudioBufferEventArgs.html": {
    "href": "api/Evergine.Common.Audio.AudioBufferEventArgs.html",
    "title": "Class AudioBufferEventArgs | Evergine Doc",
    "keywords": "Class AudioBufferEventArgs Provides data for AudioBuffer related events. Inheritance object EventArgs AudioBufferEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public class AudioBufferEventArgs : EventArgs Constructors AudioBufferEventArgs(AudioBuffer) Initializes a new instance of the AudioBufferEventArgs class. Declaration public AudioBufferEventArgs(AudioBuffer buffer) Parameters Type Name Description AudioBuffer buffer The buffer associated with the event. Properties Buffer Gets the buffer associated with the event. Declaration public AudioBuffer Buffer { get; } Property Value Type Description AudioBuffer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.AudioBufferStates.html": {
    "href": "api/Evergine.Common.Audio.AudioBufferStates.html",
    "title": "Enum AudioBufferStates | Evergine Doc",
    "keywords": "Enum AudioBufferStates Describes the possible values of the property State. Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public enum AudioBufferStates Fields Name Description Disposed The buffer has been disposed and wave data removed from memory. The buffer cannot be changed or enqueued in a AudioSource at this time. Pending There is at least one AudioSource for which the buffer has been queued. The buffer cannot be disposed or changed at this time. Unused The buffer is not included in any queue for any AudioSource. In particular, the buffer is neither pending nor current for any source. The buffer can be disposed or changed at this time. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.AudioDevice.html": {
    "href": "api/Evergine.Common.Audio.AudioDevice.html",
    "title": "Class AudioDevice | Evergine Doc",
    "keywords": "Class AudioDevice Represents a audio output device. Inheritance object AudioDevice ALAudioDevice XAudioDevice Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public abstract class AudioDevice : IDisposable Constructors AudioDevice() Initializes a new instance of the AudioDevice class. Declaration public AudioDevice() Properties DefaultListener Gets the default listener used by Apply3D(AudioEmitter). Declaration public abstract AudioListener DefaultListener { get; } Property Value Type Description AudioListener MasterVolume Gets or sets the global audio volume. Default value is 1.0f. Declaration public float MasterVolume { get; set; } Property Value Type Description float Remarks Volume is ranging from 0.0f (silence) to 1.0f (full volume). Values beyond those limits are clamped. Methods CreateAudioBuffer() Creates an audio buffer. Declaration public abstract AudioBuffer CreateAudioBuffer() Returns Type Description AudioBuffer The result AudioBuffer object. CreateAudioSource(WaveFormat) Create a new AudioSource. Declaration public abstract AudioSource CreateAudioSource(WaveFormat format) Parameters Type Name Description WaveFormat format The format of the audio source. Returns Type Description AudioSource A new AudioSource instance. Dispose() Declaration public abstract void Dispose() SetMasterVolume(float) Sets the master volume of the device. Declaration protected abstract void SetMasterVolume(float volume) Parameters Type Name Description float volume The new volume. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.AudioEmitter.html": {
    "href": "api/Evergine.Common.Audio.AudioEmitter.html",
    "title": "Class AudioEmitter | Evergine Doc",
    "keywords": "Class AudioEmitter Represents a 3D audio emitter in the 3D world. This object, used in combination with an AudioListener, can simulate 3D audio localization effects for a given sound. For more details take a look at the Apply3D(AudioEmitter) function. Inheritance object AudioEmitter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public class AudioEmitter Constructors AudioEmitter() Initializes a new instance of the AudioEmitter class. Declaration public AudioEmitter() See Also Apply3D(AudioEmitter) AudioListener Fields Velocity The sound emitter velocity in the 3D world. Declaration public Vector3 Velocity Field Value Type Description Vector3 Remarks This is only used to calculate the doppler effect on the sound effect. See Also Apply3D(AudioEmitter) AudioListener WorldTransform The world transform of the sound emitter in the 3D world. Declaration public Matrix4x4 WorldTransform Field Value Type Description Matrix4x4 See Also Apply3D(AudioEmitter) AudioListener Properties ConeInnerAngle Gets or sets the inner cone angle in radians. This value must be within 0.0f to TwoPi. Declaration public float ConeInnerAngle { get; set; } Property Value Type Description float See Also Apply3D(AudioEmitter) AudioListener ConeOuterAngle Gets or sets the outer cone angle in radians. This value must be within ConeInnerAngle to TwoPi. Declaration public float ConeOuterAngle { get; set; } Property Value Type Description float See Also Apply3D(AudioEmitter) AudioListener ConeOuterVolume Gets or sets the volume scaler on/beyond outer cone. This value must be within 0.0f to 1.0f. Declaration public float ConeOuterVolume { get; set; } Property Value Type Description float See Also Apply3D(AudioEmitter) AudioListener DistanceScaleFactor Gets or sets the distance scale factor of the emitter. Declaration public float DistanceScaleFactor { get; set; } Property Value Type Description float See Also Apply3D(AudioEmitter) AudioListener Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object) See Also Apply3D(AudioEmitter) AudioListener"
  },
  "api/Evergine.Common.Audio.AudioListener.html": {
    "href": "api/Evergine.Common.Audio.AudioListener.html",
    "title": "Class AudioListener | Evergine Doc",
    "keywords": "Class AudioListener Class representing an audio listener. Inheritance object AudioListener ALAudioListener XAudioListener Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public abstract class AudioListener Constructors AudioListener() Initializes a new instance of the AudioListener class. Declaration public AudioListener() Properties DopplerFactor Gets or sets the Doppler effect factor. Declaration public float DopplerFactor { get; set; } Property Value Type Description float Velocity Gets or sets the sound listener velocity in the 3D world. Declaration public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Remarks This is only used to calculate the Doppler effect on the sound effect. WorldTransform Gets or sets the world transform of the sound listener in the 3D world. Declaration public Matrix4x4 WorldTransform { get; set; } Property Value Type Description Matrix4x4 Methods UpdateDopplerFactor(float) Updates the Doppler factor of this listener. Declaration protected abstract void UpdateDopplerFactor(float dopplerFactor) Parameters Type Name Description float dopplerFactor The new Doppler factor. UpdateVelocity(ref Vector3) Updates the velocity of this listener. Declaration protected abstract void UpdateVelocity(ref Vector3 velocity) Parameters Type Name Description Vector3 velocity The new velocity. UpdateWorldTransform(ref Matrix4x4) Updates the world transform of this listener. Declaration protected abstract void UpdateWorldTransform(ref Matrix4x4 worldTransform) Parameters Type Name Description Matrix4x4 worldTransform The new world transform matrix. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.AudioSource.html": {
    "href": "api/Evergine.Common.Audio.AudioSource.html",
    "title": "Class AudioSource | Evergine Doc",
    "keywords": "Class AudioSource The audio source class. Inheritance object AudioSource ALAudioSource XAudioSource Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public abstract class AudioSource : IDisposable Constructors AudioSource(WaveFormat) Initializes a new instance of the AudioSource class. Declaration public AudioSource(WaveFormat format) Parameters Type Name Description WaveFormat format The format of the audio data. Properties CurrentBuffer Gets the buffer at the beginning of the pending queue. Declaration public AudioBuffer CurrentBuffer { get; } Property Value Type Description AudioBuffer Format Gets the format of the audio data. Declaration public WaveFormat Format { get; } Property Value Type Description WaveFormat IsLooped Gets or sets a value indicating whether the sound should loop from beginning when it reaches the end. Default value is false. Declaration public bool IsLooped { get; set; } Property Value Type Description bool Pan Gets or sets the sound balance between left and right speaker. Default value is 0.0f. Declaration public float Pan { get; set; } Property Value Type Description float Remarks Panning is ranging from -1.0f (full left) to 1.0f (full right). 0.0f is centered. Values beyond this range are clamped. PendingBuffers Gets a enumerable that contains the buffers that are pending to be processed by this audio source including CurrentBuffer. Declaration public IEnumerable<AudioBuffer> PendingBuffers { get; } Property Value Type Description IEnumerable<AudioBuffer> PendingBuffersCount Gets the number of buffers that are pending to be processed by this audio source including CurrentBuffer. Declaration public int PendingBuffersCount { get; } Property Value Type Description int Pitch Gets or sets the pitch of the sound, might conflict with spatialized sound spatialization. Default value is 1.0f. Declaration public float Pitch { get; set; } Property Value Type Description float Remarks Pitch is ranging from Epsilon to MaxValue. Values beyond this range are clamped. Each reduction by 50 percent equals a pitch shift of -12 semitones(one octave reduction). Each doubling equals a pitch shift of 12 semitones(one octave increase). PlayPosition Gets the playback position. If IsLooped is active, the value will loop back to zero on every loop. Declaration public TimeSpan PlayPosition { get; } Property Value Type Description TimeSpan QueueDuration Gets the total duration of the buffers that are currently queued in this audio source. Declaration public TimeSpan QueueDuration { get; } Property Value Type Description TimeSpan QueuePlayPosition Gets or sets the playback position relative to the beginning of the PendingBuffers queue. Declaration public TimeSpan QueuePlayPosition { get; set; } Property Value Type Description TimeSpan Remarks QueuePosition is ranging from Zero to QueueDuration. Values beyond this range are clamped. When the audio source is in Stopped state and the value is higher than Zero the state will change to Paused. The position is relative to the beginning of all the queued buffers for the source, and any queued buffers traversed by a set value will raise the event BufferEnded. State Gets the state (playing, paused, or stopped) of the sound. Declaration public PlayState State { get; } Property Value Type Description PlayState Volume Gets or sets the global volume at which the sound is played. Default value is 1.0f. Declaration public float Volume { get; set; } Property Value Type Description float Remarks Volume is ranging from 0.0f (silence) to 1.0f (full volume). Values beyond those limits are clamped. Methods Apply3D(AudioEmitter) Sets the ·D properties of the Audio Source according to an audio emitter. Declaration public abstract void Apply3D(AudioEmitter emitter) Parameters Type Name Description AudioEmitter emitter The audio emitter. Dispose() Declaration public abstract void Dispose() EnqueueBuffer(AudioBuffer) Enqueues an audio buffer. Declaration public void EnqueueBuffer(AudioBuffer buffer) Parameters Type Name Description AudioBuffer buffer The audio buffer. FlushBuffers() Flush all the audio buffers. Declaration public abstract void FlushBuffers() GetPlayPosition() Gets the play TimeSpan position of the audio. Declaration protected abstract TimeSpan GetPlayPosition() Returns Type Description TimeSpan A TimeSpan with the current play position. GetQueuePlayPosition() Gets the Queue Play TimeSpan Position. Declaration protected abstract TimeSpan GetQueuePlayPosition() Returns Type Description TimeSpan A TimeSpan with the Queue Play Position. InternalEnqueueBuffer(AudioBuffer, out int?) Enqueues an audio buffer into the source. Declaration protected abstract void InternalEnqueueBuffer(AudioBuffer buffer, out int? index) Parameters Type Name Description AudioBuffer buffer The buffer to be enqueued. int? index Output variable containing the buffer index. InternalPause() Pauses the audio source. Declaration protected abstract void InternalPause() InternalPlay() Plays the audio source. Declaration protected abstract void InternalPlay() InternalStop() Stops the audio source. Declaration protected abstract void InternalStop() IsPaused() Checks if this audio source is paused. Declaration protected abstract bool IsPaused() Returns Type Description bool True if this audio source is pause. False otherwise. IsPlaying() Checks if the source is playing. Declaration protected abstract bool IsPlaying() Returns Type Description bool True if the audio source is playing. False otherwise. OnBufferProccessed(bool) Method called when an audio buffer has being processed. Declaration protected void OnBufferProccessed(bool isReused) Parameters Type Name Description bool isReused If the buffer must be reused. OnBufferStart() Method called when an audio buffer starts playing. Declaration protected void OnBufferStart() Pause() Pauses the audio source. Declaration public void Pause() Play() Plays the audio source. Declaration public void Play() SetLoop(bool) Sets a new value to indicate if the source is looped. Declaration protected abstract void SetLoop(bool isLooped) Parameters Type Name Description bool isLooped If the source must loop the sound. SetPan(float) Sets the pan of this audio source. Declaration protected abstract void SetPan(float pan) Parameters Type Name Description float pan The new pan. SetPitch(float) Sets the new pitch of this source. Declaration protected abstract void SetPitch(float pitch) Parameters Type Name Description float pitch The new pitch. SetQueuePlayPosition(TimeSpan) Sets the queue play TimeSpan position. Declaration protected abstract void SetQueuePlayPosition(TimeSpan position) Parameters Type Name Description TimeSpan position The new TimeSpan position. SetVolume(float) Sets the volume of this source. Declaration protected abstract void SetVolume(float volume) Parameters Type Name Description float volume The new volume. Stop() Stops the audio source. Declaration public void Stop() Events BufferEnded Occurs when this audio source finishes processing an enqueued AudioBuffer. Declaration public event EventHandler<AudioBufferEventArgs> BufferEnded Event Type Type Description EventHandler<AudioBufferEventArgs> BufferStarted Occurs when this audio source is about to start processing an enqueued AudioBuffer. Declaration public event EventHandler<AudioBufferEventArgs> BufferStarted Event Type Type Description EventHandler<AudioBufferEventArgs> Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.html": {
    "href": "api/Evergine.Common.Audio.html",
    "title": "Namespace Evergine.Common.Audio | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Audio Classes AudioBuffer The Audio Buffer class. AudioBufferEventArgs Provides data for AudioBuffer related events. AudioDevice Represents a audio output device. AudioEmitter Represents a 3D audio emitter in the 3D world. This object, used in combination with an AudioListener, can simulate 3D audio localization effects for a given sound. For more details take a look at the Apply3D(AudioEmitter) function. AudioListener Class representing an audio listener. AudioSource The audio source class. WaveFormat The format of the wave sound. Structs PlayRange Describes the range of audio samples to play, in time unit. Enums AudioBufferStates Describes the possible values of the property State. WaveFormatEncodings Describes the possible values of the property Encoding."
  },
  "api/Evergine.Common.Audio.PlayRange.html": {
    "href": "api/Evergine.Common.Audio.PlayRange.html",
    "title": "Struct PlayRange | Evergine Doc",
    "keywords": "Struct PlayRange Describes the range of audio samples to play, in time unit. Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public struct PlayRange Constructors PlayRange(TimeSpan, TimeSpan) Initializes a new instance of the PlayRange structure. Declaration public PlayRange(TimeSpan start, TimeSpan length) Parameters Type Name Description TimeSpan start The Stating time. TimeSpan length The Length of the audio extract to play. Fields Length The Length of the audio extract to play. Declaration public TimeSpan Length Field Value Type Description TimeSpan Start The Stating time. Declaration public TimeSpan Start Field Value Type Description TimeSpan Properties End Gets the Ending time. Declaration public TimeSpan End { get; } Property Value Type Description TimeSpan Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators operator ==(PlayRange, PlayRange) Compares whether two PlayRange instances are equal. Declaration public static bool operator ==(PlayRange a, PlayRange b) Parameters Type Name Description PlayRange a PlayRange instance on the left of the equal sign. PlayRange b PlayRange instance on the right of the equal sign. Returns Type Description bool true if the instances are equal; false otherwise. operator !=(PlayRange, PlayRange) Compares whether two PlayRange instances are not equal. Declaration public static bool operator !=(PlayRange a, PlayRange b) Parameters Type Name Description PlayRange a PlayRange instance on the left of the not equal sign. PlayRange b PlayRange instance on the right of the not equal sign. Returns Type Description bool true if the instances are not equal; false otherwise. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.WaveFormat.html": {
    "href": "api/Evergine.Common.Audio.WaveFormat.html",
    "title": "Class WaveFormat | Evergine Doc",
    "keywords": "Class WaveFormat The format of the wave sound. Inheritance object WaveFormat Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public class WaveFormat Constructors WaveFormat(bool, int, WaveFormatEncodings) Initializes a new instance of the WaveFormat class. Declaration public WaveFormat(bool isMono, int sampleRate = 44100, WaveFormatEncodings encoding = WaveFormatEncodings.PCM16) Parameters Type Name Description bool isMono If sound data is in mono (one channel) or stereo (two channels). int sampleRate Sample rate, in Hertz (Hz), of audio data. It must be between 8,000 Hz and 48,000 Hz. WaveFormatEncodings encoding The encoding used for the audio data samples. Fields Channels Gets the number of channels of audio wave data. Declaration public readonly int Channels Field Value Type Description int Encoding Gets the encoding used for the audio data samples. Declaration public readonly WaveFormatEncodings Encoding Field Value Type Description WaveFormatEncodings SampleRate Gets the sample rate, in Hertz (Hz), of audio wave data. Declaration public readonly int SampleRate Field Value Type Description int Properties AverageBytesPerSecond Gets the average number of bytes used per second. Declaration public int AverageBytesPerSecond { get; } Property Value Type Description int BitsPerSample Gets the size in bits for one sample. Declaration public int BitsPerSample { get; } Property Value Type Description int BlockAlign Gets the number of bytes for one sample including all channels. Declaration public int BlockAlign { get; } Property Value Type Description int Methods ConvertByteSizeToDuration(int) Gets the duration equivalent to the specified size in bytes of a wave buffer. Declaration public TimeSpan ConvertByteSizeToDuration(int sizeInBytes) Parameters Type Name Description int sizeInBytes The size in bytes of a wave buffer. Returns Type Description TimeSpan The duration as a TimeSpan equivalent to the specified size in bytes. ConvertByteSizeToSampleCount(int) Gets the size in bytes of a wave buffer equivalent to the specified number of samples. Declaration public int ConvertByteSizeToSampleCount(int sizeInBytes) Parameters Type Name Description int sizeInBytes The size in bytes of a wave buffer. Returns Type Description int The number of samples of a wave buffer equivalent to the specified duration. ConvertDurationToByteSize(TimeSpan) Gets the size in bytes of a wave buffer equivalent to the specified duration. Declaration public int ConvertDurationToByteSize(TimeSpan duration) Parameters Type Name Description TimeSpan duration The duration as a TimeSpan. Returns Type Description int The size of a wave buffer equivalent to the specified duration. ConvertDurationToSampleCount(TimeSpan) Gets the number of samples of a wave buffer equivalent to the specified duration. Declaration public int ConvertDurationToSampleCount(TimeSpan duration) Parameters Type Name Description TimeSpan duration The duration as a TimeSpan. Returns Type Description int The number of samples of a wave buffer equivalent to the specified duration. ConvertSampleCountToByteSize(int) Gets the size in bytes of a wave buffer equivalent to the specified number of samples. Declaration public int ConvertSampleCountToByteSize(int samplesCount) Parameters Type Name Description int samplesCount The number of samples. Returns Type Description int The size of a wave buffer equivalent to the specified number of samples. ConvertSampleCountToDuration(int) Gets the duration equivalent to the specified number of samples. Declaration public TimeSpan ConvertSampleCountToDuration(int samplesCount) Parameters Type Name Description int samplesCount The number of samples. Returns Type Description TimeSpan The duration as a TimeSpan equivalent to the specified number of samples. Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() IsAlignedByteSize(int) Gets a value indicating whether the specified byte size is block-aligned. Declaration public bool IsAlignedByteSize(int sizeInBytes) Parameters Type Name Description int sizeInBytes The size in bytes of a wave buffer. Returns Type Description bool true if the specified byte size is block-aligned; otherwise, false. IsValidSampleRate(int) Returns a value indicating whether a sample rate value is valid. Declaration public static bool IsValidSampleRate(int sampleRate) Parameters Type Name Description int sampleRate The sample rate, in Hertz (Hz). Returns Type Description bool true is the sample rate value is valid; otherwise, false. ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Extension Methods NAudioHelpers.ToNAudioWaveFormat(WaveFormat) DXExtensionsMethods.ToDXWaveFormat(WaveFormat) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Audio.WaveFormatEncodings.html": {
    "href": "api/Evergine.Common.Audio.WaveFormatEncodings.html",
    "title": "Enum WaveFormatEncodings | Evergine Doc",
    "keywords": "Enum WaveFormatEncodings Describes the possible values of the property Encoding. Namespace: Evergine.Common.Audio Assembly: Evergine.Common.dll Syntax public enum WaveFormatEncodings Fields Name Description PCM16 PCM 16 bits signed. PCM8 PCM 8 bits unsigned. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.BinaryReaderExtensions.html": {
    "href": "api/Evergine.Common.BinaryReaderExtensions.html",
    "title": "Class BinaryReaderExtensions | Evergine Doc",
    "keywords": "Class BinaryReaderExtensions Extension functions for reading Evergine data types with a BinaryReader. Inheritance object BinaryReaderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public static class BinaryReaderExtensions Methods ReadBoundingBox(BinaryReader) Reads a BoundingBox from the Binary Reader. Declaration public static BoundingBox ReadBoundingBox(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The Binary Reader. Returns Type Description BoundingBox A BoundingBox object. ReadByte4(BinaryReader) Reads the byte4. Declaration public static Byte4 ReadByte4(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Byte4 The result. ReadMatrix4x4(BinaryReader) Reads the matrix. Declaration public static Matrix4x4 ReadMatrix4x4(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Matrix4x4 The result. ReadMatrix4x4(BinaryReader, out Matrix4x4) Reads the matrix. Declaration public static void ReadMatrix4x4(this BinaryReader reader, out Matrix4x4 m) Parameters Type Name Description BinaryReader reader The reader. Matrix4x4 m The m. ReadMatrix4x4(BinaryReader, byte[], int, out Matrix4x4) Reads the matrix. Declaration public static void ReadMatrix4x4(this BinaryReader reader, byte[] data, int startIndex, out Matrix4x4 m) Parameters Type Name Description BinaryReader reader The reader. byte[] data The data. int startIndex The start index. Matrix4x4 m The m. ReadNullableBoundingBox(BinaryReader) Reads a nullable bounding box from a binary reader. Declaration public static BoundingBox? ReadNullableBoundingBox(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The binary reader. Returns Type Description BoundingBox? The read nullable bounding box. ReadPoint(BinaryReader) Reads the Point. Declaration public static Point ReadPoint(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Point The result. ReadQuaternion(BinaryReader) Reads the quaternion. Declaration public static Quaternion ReadQuaternion(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Quaternion The result. ReadQuaternion(BinaryReader, out Quaternion) Reads the quaternion. Declaration public static void ReadQuaternion(this BinaryReader reader, out Quaternion q) Parameters Type Name Description BinaryReader reader The reader. Quaternion q The output quaternion. ReadRectangle(BinaryReader) Reads the rectangle. Declaration public static Rectangle ReadRectangle(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Rectangle The result. ReadRectangleF(BinaryReader) Reads the rectangle. Declaration public static RectangleF ReadRectangleF(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description RectangleF The result. ReadVector2(BinaryReader) Reads the vector2. Declaration public static Vector2 ReadVector2(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Vector2 The result. ReadVector2(BinaryReader, out Vector2) Reads the quaternion. Declaration public static void ReadVector2(this BinaryReader reader, out Vector2 v) Parameters Type Name Description BinaryReader reader The reader. Vector2 v The output quaternion. ReadVector3(BinaryReader) Reads the vector3. Declaration public static Vector3 ReadVector3(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Vector3 The result. ReadVector3(BinaryReader, out Vector3) Reads the quaternion. Declaration public static void ReadVector3(this BinaryReader reader, out Vector3 v) Parameters Type Name Description BinaryReader reader The reader. Vector3 v The output quaternion. ReadVector4(BinaryReader) Reads the vector4. Declaration public static Vector4 ReadVector4(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader. Returns Type Description Vector4 The result. ReadVector4(BinaryReader, out Vector4) Reads the quaternion. Declaration public static void ReadVector4(this BinaryReader reader, out Vector4 v) Parameters Type Name Description BinaryReader reader The reader. Vector4 v The output quaternion. ReadVertexAttributes(BinaryReader) Reads the vertex attributes of a binary reader stream. Declaration public static Dictionary<string, int> ReadVertexAttributes(this BinaryReader reader) Parameters Type Name Description BinaryReader reader The binary reader. Returns Type Description Dictionary<string, int> The vertex attribute dictionary."
  },
  "api/Evergine.Common.BinaryWriterExtensions.html": {
    "href": "api/Evergine.Common.BinaryWriterExtensions.html",
    "title": "Class BinaryWriterExtensions | Evergine Doc",
    "keywords": "Class BinaryWriterExtensions Extension functions for writing Evergine data types with a BinaryWriter. Inheritance object BinaryWriterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public static class BinaryWriterExtensions Methods Write(BinaryWriter, BoundingBox) Writes a Bounding Box into a BinaryWriter. Declaration public static void Write(this BinaryWriter writer, BoundingBox boundingBox) Parameters Type Name Description BinaryWriter writer The BinaryWriter object. BoundingBox boundingBox The Bounding Box. Write(BinaryWriter, Byte4) Writes the byte4. Declaration public static void Write(this BinaryWriter writer, Byte4 b) Parameters Type Name Description BinaryWriter writer The writer. Byte4 b The byte. Write(BinaryWriter, Matrix4x4) Writes the matrix. Declaration public static void Write(this BinaryWriter writer, Matrix4x4 m) Parameters Type Name Description BinaryWriter writer The writer. Matrix4x4 m The matrix. Write(BinaryWriter, Point) Writes the Point. Declaration public static void Write(this BinaryWriter writer, Point v) Parameters Type Name Description BinaryWriter writer The writer. Point v The vector2. Write(BinaryWriter, Quaternion) Writes the vector4. Declaration public static void Write(this BinaryWriter writer, Quaternion q) Parameters Type Name Description BinaryWriter writer The writer. Quaternion q The quaternion. Write(BinaryWriter, Rectangle) Writes the rectangle. Declaration public static void Write(this BinaryWriter writer, Rectangle r) Parameters Type Name Description BinaryWriter writer The writer. Rectangle r The rectangle. Write(BinaryWriter, RectangleF) Writes the rectangle. Declaration public static void Write(this BinaryWriter writer, RectangleF r) Parameters Type Name Description BinaryWriter writer The writer. RectangleF r The rectangle. Write(BinaryWriter, Vector2) Writes the vector2. Declaration public static void Write(this BinaryWriter writer, Vector2 v) Parameters Type Name Description BinaryWriter writer The writer. Vector2 v The vector2. Write(BinaryWriter, Vector3) Writes the vector3. Declaration public static void Write(this BinaryWriter writer, Vector3 v) Parameters Type Name Description BinaryWriter writer The writer. Vector3 v The vector3. Write(BinaryWriter, Vector4) Writes the vector4. Declaration public static void Write(this BinaryWriter writer, Vector4 v) Parameters Type Name Description BinaryWriter writer The writer. Vector4 v The vector4. Write(BinaryWriter, Dictionary<string, int>) Writes a vertex attributes dictionary to the binary stream. Declaration public static void Write(this BinaryWriter writer, Dictionary<string, int> vertexAttributes) Parameters Type Name Description BinaryWriter writer The Binary Writer. Dictionary<string, int> vertexAttributes The vertex attribute dictionary. Write(BinaryWriter, BoundingBox?) Writes a nullable Bounding Box into a Binary Writer. Declaration public static void Write(this BinaryWriter writer, BoundingBox? boundingBox) Parameters Type Name Description BinaryWriter writer The Binary Writer. BoundingBox? boundingBox The nullable Bounding Box to be written."
  },
  "api/Evergine.Common.Collections.CheckDictionary-2.html": {
    "href": "api/Evergine.Common.Collections.CheckDictionary-2.html",
    "title": "Class CheckDictionary<K, V> | Evergine Doc",
    "keywords": "Class CheckDictionary<K, V> Dictionary implementation to detect when the collection is modified. Inheritance object CheckDictionary<K, V> Implements IDictionary<K, V> ICollection<KeyValuePair<K, V>> IEnumerable<KeyValuePair<K, V>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Collections Assembly: Evergine.Common.dll Syntax public class CheckDictionary<K, V> : IDictionary<K, V>, ICollection<KeyValuePair<K, V>>, IEnumerable<KeyValuePair<K, V>>, IEnumerable Type Parameters Name Description K Key type. V Value type. Constructors CheckDictionary() Initializes a new instance of the CheckDictionary<K, V> class. Declaration public CheckDictionary() Properties Changed Gets a value indicating whether this CheckDictionary<K, V> is changed. Declaration public bool Changed { get; } Property Value Type Description bool true if changed; otherwise, false. Count Gets the count. Declaration public int Count { get; } Property Value Type Description int The count. IsReadOnly Gets a value indicating whether this instance is read only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if this instance is read only; otherwise, false. this[K] Gets or sets the value with the specified key. Declaration public V this[K key] { get; set; } Parameters Type Name Description K key The key. Property Value Type Description V The value. Keys Gets the keys. Declaration public ICollection<K> Keys { get; } Property Value Type Description ICollection<K> The keys. Values Gets the values. Declaration public ICollection<V> Values { get; } Property Value Type Description ICollection<V> The values. Methods Add(KeyValuePair<K, V>) Adds the specified item. Declaration public void Add(KeyValuePair<K, V> item) Parameters Type Name Description KeyValuePair<K, V> item The item. Add(K, V) Adds the specified key. Declaration public void Add(K key, V value) Parameters Type Name Description K key The key. V value The value. Clear() Clears this instance. Declaration public void Clear() Contains(KeyValuePair<K, V>) Determines whether [contains] [the specified item]. Declaration public bool Contains(KeyValuePair<K, V> item) Parameters Type Name Description KeyValuePair<K, V> item The item. Returns Type Description bool true if [contains] [the specified item]; otherwise, false. ContainsKey(K) Determines whether the specified key contains key. Declaration public bool ContainsKey(K key) Parameters Type Name Description K key The key. Returns Type Description bool true if the specified key contains key; otherwise, false. CopyTo(KeyValuePair<K, V>[], int) Copies to. Declaration public void CopyTo(KeyValuePair<K, V>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<K, V>[] array The array. int arrayIndex Index of the array. GetEnumerator() Gets the enumerator. Declaration public IEnumerator<KeyValuePair<K, V>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<K, V>> the enumerator. Remove(KeyValuePair<K, V>) Removes the specified item. Declaration public bool Remove(KeyValuePair<K, V> item) Parameters Type Name Description KeyValuePair<K, V> item The item. Returns Type Description bool was removed. Remove(K) Removes the specified key. Declaration public bool Remove(K key) Parameters Type Name Description K key The key. Returns Type Description bool true if was suscessfully removed. TryGetValue(K, out V) Tries the get value. Declaration public bool TryGetValue(K key, out V value) Parameters Type Name Description K key The key. V value The value. Returns Type Description bool true if value was retourned. Implements IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Collections.FastList-1.Enumerator.html": {
    "href": "api/Evergine.Common.Collections.FastList-1.Enumerator.html",
    "title": "Struct FastList<T>.Enumerator | Evergine Doc",
    "keywords": "Struct FastList<T>.Enumerator A struct that represents the enumerator of the list. Implements IEnumerator<T> IDisposable IEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Collections Assembly: Evergine.Common.dll Syntax public struct FastList<T>.Enumerator : IEnumerator<T>, IDisposable, IEnumerator Properties Current Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description bool Implements IEnumerator<T> IDisposable IEnumerator Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Collections.FastList-1.html": {
    "href": "api/Evergine.Common.Collections.FastList-1.html",
    "title": "Class FastList<T> | Evergine Doc",
    "keywords": "Class FastList<T> List<T> implementation that let you access to the internal array. Inheritance object FastList<T> Implements IList<T> IReadOnlyList<T> IReadOnlyCollection<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Collections Assembly: Evergine.Common.dll Syntax public class FastList<T> : IList<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The elements type. Constructors FastList() Initializes a new instance of the FastList<T> class. Declaration public FastList() FastList(IEnumerable<T>) Initializes a new instance of the FastList<T> class. Declaration public FastList(IEnumerable<T> collection) Parameters Type Name Description IEnumerable<T> collection The item collection. FastList(int) Initializes a new instance of the FastList<T> class. Declaration public FastList(int capacity) Parameters Type Name Description int capacity The list capacity. Properties Capacity Gets or sets the list capacity. Declaration public int Capacity { get; set; } Property Value Type Description int Count Declaration public int Count { get; } Property Value Type Description int this[int] Declaration public T this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description T Items Gets the items. Declaration public T[] Items { get; } Property Value Type Description T[] Methods Add(T) Declaration public void Add(T item) Parameters Type Name Description T item AddRange(IEnumerable<T>) Adds a collection of elements to the list. Declaration public void AddRange(IEnumerable<T> collection) Parameters Type Name Description IEnumerable<T> collection The collection to be added. AsReadOnly() Returns the list as a ReadOnlyCollection. Declaration public ReadOnlyCollection<T> AsReadOnly() Returns Type Description ReadOnlyCollection<T> The ReadOnlyCollection object containing the items of the list. BinarySearch(int, int, T, IComparer<T>) Searches an item through the binary search method. Declaration public int BinarySearch(int index, int count, T item, IComparer<T> comparer) Parameters Type Name Description int index The starting index of the range to search. int count The length of the range to search. T item The object to search for. IComparer<T> comparer The comparer implementation to use when comparing elements. -or- null to use the comparable implementation of each element. Returns Type Description int The index of the specified value in the specified array, if value is found; otherwise, a negative number. BinarySearch(T) Searches an item through the binary search method. Declaration public int BinarySearch(T item) Parameters Type Name Description T item The object to search for. Returns Type Description int The index of the specified value in the specified array, if value is found; otherwise, a negative number. BinarySearch(T, IComparer<T>) Searches an item through the binary search method. Declaration public int BinarySearch(T item, IComparer<T> comparer) Parameters Type Name Description T item The object to search for. IComparer<T> comparer The comparer implementation to use when comparing elements. -or- null to use the comparable implementation of each element. Returns Type Description int The index of the specified value in the specified array, if value is found; otherwise, a negative number. Clear() Declaration public void Clear() Clear(bool) Clears this list with a fast-clear option. Declaration public void Clear(bool fastClear) Parameters Type Name Description bool fastClear if set to true this method only resets the count elements but doesn't clear items referenced already stored in the list. Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description bool CopyTo(int, T[], int, int) Copies the elements of this list to another array. Declaration public void CopyTo(int index, T[] array, int arrayIndex, int count) Parameters Type Name Description int index The starting index of this list. T[] array The destination array where the elements will be copied. int arrayIndex The starting index of the destination array. int count The amount of elements to be copied. CopyTo(T[]) Copies the elements of this list to another array. Declaration public void CopyTo(T[] array) Parameters Type Name Description T[] array The destination array where the elements of this list will be copied. CopyTo(T[], int) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array int arrayIndex EnsureCapacity(int) Increases the list capacity ensuring the minimum size provided. Declaration public void EnsureCapacity(int min) Parameters Type Name Description int min The minimum capacity. Exists(Predicate<T>) Checks if the list contains an item that satisfies the predicate. Declaration public bool Exists(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to be match. Returns Type Description bool True if exists an element that matches the predicate. False otherwise. Find(Predicate<T>) Finds the first item of this list that matches a predicate. Declaration public T Find(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to match. Returns Type Description T The item that matches the predicate. The default value otherwise. FindAll(Predicate<T>) Finds all the items of this list that matches a predicate. Declaration public FastList<T> FindAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to match. Returns Type Description FastList<T> A FastList containing the items that matches the predicate. FindIndex(int, int, Predicate<T>) Finds the index of the first item of the list that matches the predicate. Declaration public int FindIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description int startIndex The start index to search. int count The number of elements to search. Predicate<T> match The predicate to be match. Returns Type Description int The index of the match item if exists. A negative value otherwise. FindIndex(int, Predicate<T>) Finds the index of the first item of the list that matches the predicate. Declaration public int FindIndex(int startIndex, Predicate<T> match) Parameters Type Name Description int startIndex The start index to search. Predicate<T> match The predicate to be match. Returns Type Description int The index of the match item if exists. A negative value otherwise. FindIndex(Predicate<T>) Finds the index of the first item of the list that matches the predicate. Declaration public int FindIndex(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to be match. Returns Type Description int The index of the match item if exists. A negative value otherwise. FindLast(Predicate<T>) Finds the last item of this list that matches the predicate. Declaration public T FindLast(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to be match. Returns Type Description T The last item that matches the predicate.Its default value otherwise. FindLastIndex(int, int, Predicate<T>) Finds the index of the last item of this list that matches the predicate. Declaration public int FindLastIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description int startIndex The start index for the search. int count The number of items for the search. Predicate<T> match The predicate to be match. Returns Type Description int The index of the last item that matches the predicate if it exists. A negative value otherwise. FindLastIndex(int, Predicate<T>) Finds the index of the last item of this list that matches the predicate. Declaration public int FindLastIndex(int startIndex, Predicate<T> match) Parameters Type Name Description int startIndex The start index for the search. Predicate<T> match The predicate to be match. Returns Type Description int The index of the last item that matches the predicate if it exists. A negative value otherwise. FindLastIndex(Predicate<T>) Finds the index of the last item of this list that matches the predicate. Declaration public int FindLastIndex(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to be match. Returns Type Description int The index of the last item that matches the predicate if it exists. A negative value otherwise. ForEach(Action<T>) Executes an action for each item of this list. Declaration public void ForEach(Action<T> action) Parameters Type Name Description Action<T> action The action to be executed per element. GetEnumerator() Gets the list enumerator. Declaration public FastList<T>.Enumerator GetEnumerator() Returns Type Description FastList<T>.Enumerator The list enumerator. GetRange(int, int) Gets another FastList containing a range of the elements of this list. Declaration public FastList<T> GetRange(int index, int count) Parameters Type Name Description int index The start index. int count The range size. Returns Type Description FastList<T> A FastList containing a range of the elements of this list. IncreaseCapacity(int) Increases this list capacity. Declaration public void IncreaseCapacity(int amount) Parameters Type Name Description int amount The amount to be increased. IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description int IndexOf(T, int) Gets the index of an item in this list, starting in a specified index. Declaration public int IndexOf(T item, int index) Parameters Type Name Description T item The item to search. int index The start index. Returns Type Description int The index of the item if it exists in the list. A negative value otherwise. IndexOf(T, int, int) Gets the index of an item in this list, starting in a specified index. Declaration public int IndexOf(T item, int index, int count) Parameters Type Name Description T item The item to search. int index The start index. int count The number of elements to search. Returns Type Description int The index of the item if it exists in the list. A negative value otherwise. Insert(int, T) Declaration public void Insert(int index, T item) Parameters Type Name Description int index T item InsertRange(int, IEnumerable<T>) Inserts a collection of items in this list in a specified index. Declaration public void InsertRange(int index, IEnumerable<T> collection) Parameters Type Name Description int index The index of the insertion. IEnumerable<T> collection The item collection. LastIndexOf(T) Gets the last index of an item in this list. Declaration public int LastIndexOf(T item) Parameters Type Name Description T item The item to be searched. Returns Type Description int The index of the last item if it exists in the list. A negative value otherwise. LastIndexOf(T, int) Gets the last index of an item in this list. Declaration public int LastIndexOf(T item, int index) Parameters Type Name Description T item The item to be searched. int index The start index. Returns Type Description int The index of the last item if it exists in the list. A negative value otherwise. LastIndexOf(T, int, int) Gets the last index of an item in this list. Declaration public int LastIndexOf(T item, int index, int count) Parameters Type Name Description T item The item to be searched. int index The start index. int count The number of elements of the search. Returns Type Description int The index of the last item if it exists in the list. A negative value otherwise. Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description bool RemoveAll(Predicate<T>) Remove all the elements of this array that match the predicate. Declaration public int RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to be match. Returns Type Description int The number of items removed. RemoveAt(int) Declaration public void RemoveAt(int index) Parameters Type Name Description int index RemoveRange(int, int) Removes a range of items of this list. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description int index The start index to remove. int count The number of items to remove. Resize(int, bool) Resizes this list. Declaration public void Resize(int newSize, bool fastClear) Parameters Type Name Description int newSize The new list size. bool fastClear If we don't want to clear the inner array when resizing. Reverse() Reverses this list. Declaration public void Reverse() Reverse(int, int) Reverses a range of the list. Declaration public void Reverse(int index, int count) Parameters Type Name Description int index The start index. int count The number of elements for the operation. Sort() Sorts the list. Declaration public void Sort() Sort(IComparer<T>) Sorts the list. Declaration public void Sort(IComparer<T> comparer) Parameters Type Name Description IComparer<T> comparer The comparer used for the operation. Sort(int, int, IComparer<T>) Sorts the list. Declaration public void Sort(int index, int count, IComparer<T> comparer) Parameters Type Name Description int index The start item of the sort range. int count The number of items of the range to be sorted. IComparer<T> comparer The comparer used for the sorting. ToArray() Gets the list as array. Declaration public T[] ToArray() Returns Type Description T[] A new array containing all the items of the list. TrimExcess() Adjusts the capacity of the list to its current size. Declaration public void TrimExcess() TrueForAll(Predicate<T>) Checks if all the items of the list match a predicate. Declaration public bool TrueForAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The predicate to be match. Returns Type Description bool True if all the items of the list matches the predicate. False otherwise. Implements IList<T> IReadOnlyList<T> IReadOnlyCollection<T> ICollection<T> IEnumerable<T> IEnumerable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Collections.html": {
    "href": "api/Evergine.Common.Collections.html",
    "title": "Namespace Evergine.Common.Collections | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Collections Classes CheckDictionary<K, V> Dictionary implementation to detect when the collection is modified. FastList<T> List<T> implementation that let you access to the internal array. PriorityQueue<T> An implementation of a min-Priority Queue using a heap. Has O(1) .Contains()! See https://bitbucket.org/BlueRaja/high-speed-priority-queue-for-c/wiki/Getting%20Started for more information. SimpleCache<TKey, KValue> Simple cache implementation. Structs FastList<T>.Enumerator A struct that represents the enumerator of the list."
  },
  "api/Evergine.Common.Collections.PriorityQueue-1.html": {
    "href": "api/Evergine.Common.Collections.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Evergine Doc",
    "keywords": "Class PriorityQueue<T> An implementation of a min-Priority Queue using a heap. Has O(1) .Contains()! See https://bitbucket.org/BlueRaja/high-speed-priority-queue-for-c/wiki/Getting%20Started for more information. Inheritance object PriorityQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Collections Assembly: Evergine.Common.dll Syntax public sealed class PriorityQueue<T> where T : PriorityQueueNode Type Parameters Name Description T The values in the queue. Must implement the PriorityQueueNode interface. Constructors PriorityQueue(int) Initializes a new instance of the PriorityQueue<T> class. Declaration public PriorityQueue(int maxNodes) Parameters Type Name Description int maxNodes The max nodes ever allowed to be enqueued (going over this will cause an exception). Properties Count Gets the number of nodes. Declaration public int Count { get; } Property Value Type Description int The count. First Gets the head of the queue, without removing it (use Dequeue() for that). O(1). Declaration public T First { get; } Property Value Type Description T Returns the head of the queue, without removing it (use Dequeue() for that). O(1). Methods Clear() Clears this instance. Declaration public void Clear() Contains(T) Determines whether [contains] [the specified node]. Declaration public bool Contains(T node) Parameters Type Name Description T node The node. Returns Type Description bool True if contains the node, false in other case. Dequeue() Removes the head of the queue (node with highest priority; ties are broken by order of insertion), and returns it. O(log n). Declaration public T Dequeue() Returns Type Description T The dequeued node. Enqueue(T, double) Enqueues the specified node. Declaration public void Enqueue(T node, double priority) Parameters Type Name Description T node The node. double priority The priority. Remove(T) Removes a node from the queue. Note that the node does not need to be the head of the queue. O(log n). Declaration public void Remove(T node) Parameters Type Name Description T node The node. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Collections.SimpleCache-2.html": {
    "href": "api/Evergine.Common.Collections.SimpleCache-2.html",
    "title": "Class SimpleCache<TKey, KValue> | Evergine Doc",
    "keywords": "Class SimpleCache<TKey, KValue> Simple cache implementation. Inheritance object SimpleCache<TKey, KValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Collections Assembly: Evergine.Common.dll Syntax public class SimpleCache<TKey, KValue> Type Parameters Name Description TKey The cache key. KValue The cache value. Constructors SimpleCache() Initializes a new instance of the SimpleCache<TKey, KValue> class. Declaration public SimpleCache() Properties Expiration Gets or sets the cache expiration time. Declaration public long Expiration { get; set; } Property Value Type Description long Methods CheckConsistency(Action<TKey>) Checks cache consistency. Remove unused elements. Declaration public void CheckConsistency(Action<TKey> itemRemovedFunc = null) Parameters Type Name Description Action<TKey> itemRemovedFunc Method invoked when an item is removed. GetOrAdd(TKey, Func<TKey, KValue>) Gets an item of the cache from its key. And if it doesn't exist, a it adds one to the cache. Declaration public KValue GetOrAdd(TKey key, Func<TKey, KValue> createFunction = null) Parameters Type Name Description TKey key The key to search. Func<TKey, KValue> createFunction The Create function in case the element is not in the cache. Returns Type Description KValue The key item. If it doesn't exist in the cache, a new one is created and added. GetOrAdd<TContext>(TKey, TContext, Func<TKey, TContext, KValue>) Gets an item of the cache from its key. And if it doesn't exist, a it adds one to the cache. Declaration public KValue GetOrAdd<TContext>(TKey key, TContext context, Func<TKey, TContext, KValue> createFunction = null) Parameters Type Name Description TKey key The key to search. TContext context The create function context. Func<TKey, TContext, KValue> createFunction The Create function in case the element is not in the cache. Returns Type Description KValue The key item. If it doesn't exist in the cache, a new one is created and added. Type Parameters Name Description TContext The createFunction context. UpdateOrAdd(TKey, Func<KValue>) Gets an item of the cache from its key. And if it doesn't exist, a it adds one to the cache. Declaration public KValue UpdateOrAdd(TKey key, Func<KValue> createFunction = null) Parameters Type Name Description TKey key The key to search. Func<KValue> createFunction The Create function in case the element is not in the cache. Returns Type Description KValue The key item. If it doesn't exist in the cache, a new one is created and added. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Curves.ColorCurve.html": {
    "href": "api/Evergine.Common.Curves.ColorCurve.html",
    "title": "Class ColorCurve | Evergine Doc",
    "keywords": "Class ColorCurve Class that manages a color gradient. Inheritance object Curve<Color, ColorKeyframe> ColorCurve Inherited Members Curve<Color, ColorKeyframe>.Keyframes Curve<Color, ColorKeyframe>.HasValues Curve<Color, ColorKeyframe>.IsCached Curve<Color, ColorKeyframe>.CacheSize Curve<Color, ColorKeyframe>.AddKey(float, Color) Curve<Color, ColorKeyframe>.RemoveKey(ColorKeyframe) Curve<Color, ColorKeyframe>.GetValue(float) Curve<Color, ColorKeyframe>.Lerp(Color, Color, float) Curve<Color, ColorKeyframe>.CreateKey(float, Color) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Curves Assembly: Evergine.Common.dll Syntax public class ColorCurve : Curve<Color, ColorKeyframe> Methods CreateKey(float, Color) Cretes a new key element. Declaration protected override ColorKeyframe CreateKey(float lerp, Color value) Parameters Type Name Description float lerp The lerp. Color value The value. Returns Type Description ColorKeyframe The keyframe. Overrides Curve<Color, ColorKeyframe>.CreateKey(float, Color) Lerp(Color, Color, float) Obtains an interpolated value between 2 curves. Declaration protected override Color Lerp(Color value1, Color value2, float amount) Parameters Type Name Description Color value1 The value 1. Color value2 The value 2. float amount The lerp amount. Returns Type Description Color The interpolated value. Overrides Curve<Color, ColorKeyframe>.Lerp(Color, Color, float) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Curves.ColorKeyframe.html": {
    "href": "api/Evergine.Common.Curves.ColorKeyframe.html",
    "title": "Class ColorKeyframe | Evergine Doc",
    "keywords": "Class ColorKeyframe Repersents a color keyframe of a curve. Inheritance object CurveKeyframe<Color> ColorKeyframe Inherited Members CurveKeyframe<Color>.Lerp CurveKeyframe<Color>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Curves Assembly: Evergine.Common.dll Syntax public class ColorKeyframe : CurveKeyframe<Color> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Curves.Curve-2.html": {
    "href": "api/Evergine.Common.Curves.Curve-2.html",
    "title": "Class Curve<T, K> | Evergine Doc",
    "keywords": "Class Curve<T, K> The curve class. Inheritance object Curve<T, K> ColorCurve FloatCurve Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Curves Assembly: Evergine.Common.dll Syntax public abstract class Curve<T, K> where K : CurveKeyframe<T> Type Parameters Name Description T The type of the curve. K The type of the keyframe. Constructors Curve() Initializes a new instance of the Curve<T, K> class. Declaration public Curve() Properties CacheSize Gets or sets the cache size. Declaration public int CacheSize { get; set; } Property Value Type Description int HasValues Gets a value indicating whether the curve has values. Declaration public bool HasValues { get; } Property Value Type Description bool IsCached Gets or sets a value indicating whether the curve is cached or not. Declaration public bool IsCached { get; set; } Property Value Type Description bool Keyframes Gets the key frames. Declaration public List<K> Keyframes { get; } Property Value Type Description List<K> Methods AddKey(float, T) Adds a key to the curve. Declaration public void AddKey(float lerp, T value) Parameters Type Name Description float lerp The lerp. T value The key value. CreateKey(float, T) Cretes a new key element. Declaration protected abstract K CreateKey(float lerp, T value) Parameters Type Name Description float lerp The lerp. T value The value. Returns Type Description K The keyframe. GetValue(float) Gets the value of the curve in a specific lerp. Declaration public T GetValue(float lerp) Parameters Type Name Description float lerp The lerp. Returns Type Description T The value. Lerp(T, T, float) Obtains an interpolated value between 2 curves. Declaration protected abstract T Lerp(T value1, T value2, float amount) Parameters Type Name Description T value1 The value 1. T value2 The value 2. float amount The lerp amount. Returns Type Description T The interpolated value. RemoveKey(K) Removes a key. Declaration public void RemoveKey(K key) Parameters Type Name Description K key The key. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Curves.CurveKeyframe-1.html": {
    "href": "api/Evergine.Common.Curves.CurveKeyframe-1.html",
    "title": "Class CurveKeyframe<T> | Evergine Doc",
    "keywords": "Class CurveKeyframe<T> The curve key class. Inheritance object CurveKeyframe<T> ColorKeyframe FloatKeyframe Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Curves Assembly: Evergine.Common.dll Syntax public class CurveKeyframe<T> Type Parameters Name Description T The type of the keyframe. Constructors CurveKeyframe() Initializes a new instance of the CurveKeyframe<T> class. Declaration public CurveKeyframe() Fields Lerp The key lerp. Declaration public float Lerp Field Value Type Description float Value The key value. Declaration public T Value Field Value Type Description T Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Curves.FloatCurve.html": {
    "href": "api/Evergine.Common.Curves.FloatCurve.html",
    "title": "Class FloatCurve | Evergine Doc",
    "keywords": "Class FloatCurve The curve class. Inheritance object Curve<float, FloatKeyframe> FloatCurve Inherited Members Curve<float, FloatKeyframe>.Keyframes Curve<float, FloatKeyframe>.HasValues Curve<float, FloatKeyframe>.IsCached Curve<float, FloatKeyframe>.CacheSize Curve<float, FloatKeyframe>.AddKey(float, float) Curve<float, FloatKeyframe>.RemoveKey(FloatKeyframe) Curve<float, FloatKeyframe>.GetValue(float) Curve<float, FloatKeyframe>.Lerp(float, float, float) Curve<float, FloatKeyframe>.CreateKey(float, float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Curves Assembly: Evergine.Common.dll Syntax public class FloatCurve : Curve<float, FloatKeyframe> Constructors FloatCurve() Initializes a new instance of the FloatCurve class. Declaration public FloatCurve() FloatCurve(float) Initializes a new instance of the FloatCurve class. Declaration public FloatCurve(float level) Parameters Type Name Description float level The level. Methods CreateKey(float, float) Cretes a new key element. Declaration protected override FloatKeyframe CreateKey(float lerp, float value) Parameters Type Name Description float lerp The lerp. float value The value. Returns Type Description FloatKeyframe The keyframe. Overrides Curve<float, FloatKeyframe>.CreateKey(float, float) Lerp(float, float, float) Obtains an interpolated value between 2 curves. Declaration protected override float Lerp(float value1, float value2, float amount) Parameters Type Name Description float value1 The value 1. float value2 The value 2. float amount The lerp amount. Returns Type Description float The interpolated value. Overrides Curve<float, FloatKeyframe>.Lerp(float, float, float) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Curves.FloatKeyframe.html": {
    "href": "api/Evergine.Common.Curves.FloatKeyframe.html",
    "title": "Class FloatKeyframe | Evergine Doc",
    "keywords": "Class FloatKeyframe Repersents a float keyframe of a curve. Inheritance object CurveKeyframe<float> FloatKeyframe Inherited Members CurveKeyframe<float>.Lerp CurveKeyframe<float>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Curves Assembly: Evergine.Common.dll Syntax public class FloatKeyframe : CurveKeyframe<float> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Curves.html": {
    "href": "api/Evergine.Common.Curves.html",
    "title": "Namespace Evergine.Common.Curves | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Curves Classes ColorCurve Class that manages a color gradient. ColorKeyframe Repersents a color keyframe of a curve. CurveKeyframe<T> The curve key class. Curve<T, K> The curve class. FloatCurve The curve class. FloatKeyframe Repersents a float keyframe of a curve."
  },
  "api/Evergine.Common.Dependencies.DependencyLinkTypes.html": {
    "href": "api/Evergine.Common.Dependencies.DependencyLinkTypes.html",
    "title": "Enum DependencyLinkTypes | Evergine Doc",
    "keywords": "Enum DependencyLinkTypes Enum for the type of dependency links. Namespace: Evergine.Common.Dependencies Assembly: Evergine.Common.dll Syntax [Flags] public enum DependencyLinkTypes Fields Name Description All All types. AttachableObject Attachable Objects. Loadable Loadable objects. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Dependencies.html": {
    "href": "api/Evergine.Common.Dependencies.html",
    "title": "Namespace Evergine.Common.Dependencies | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Dependencies Classes LoadableDependenciesManager Manager to create dependencies between DependencyObjects and Loadables. Enums DependencyLinkTypes Enum for the type of dependency links."
  },
  "api/Evergine.Common.Dependencies.LoadableDependenciesManager.html": {
    "href": "api/Evergine.Common.Dependencies.LoadableDependenciesManager.html",
    "title": "Class LoadableDependenciesManager | Evergine Doc",
    "keywords": "Class LoadableDependenciesManager Manager to create dependencies between DependencyObjects and Loadables. Inheritance object LoadableDependenciesManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Dependencies Assembly: Evergine.Common.dll Syntax public class LoadableDependenciesManager Methods RegisterDelegateDependencyLink<T>(IDependencyObject, T, string, params object[]) Registers the delegate dependency link. Declaration public static void RegisterDelegateDependencyLink<T>(IDependencyObject source, T target, string updateMethodName, params object[] parameters) where T : class, ILoadable, IDependencyObject Parameters Type Name Description IDependencyObject source The source. T target The target. string updateMethodName Name of the update method. object[] parameters The parameters. Type Parameters Name Description T The type of target. RegisterPropertyDependencyLink<T>(IDependencyObject, string) Registers the property dependency link. Declaration public static LoadableDependencyLink<T> RegisterPropertyDependencyLink<T>(IDependencyObject source, string propertyName) where T : class, ILoadable, IDependencyObject Parameters Type Name Description IDependencyObject source The source. string propertyName Name of the property. Returns Type Description LoadableDependencyLink<T> The created dependency link. Type Parameters Name Description T The type of target. UnregisterDelegateDependencyLink<T>(IDependencyObject, T, string, params object[]) Registers the delegate dependency link. Declaration public static void UnregisterDelegateDependencyLink<T>(IDependencyObject source, T target, string updateMethodName, params object[] parameters) where T : class, ILoadable, IDependencyObject Parameters Type Name Description IDependencyObject source The source. T target The target. string updateMethodName Name of the update method. object[] parameters The parameters. Type Parameters Name Description T The type of target. Unregister<T>(T) Unregisters the dependencies of the specified loadable. Declaration public static void Unregister<T>(T loadable) where T : IDependencyObject Parameters Type Name Description T loadable The loadable. Type Parameters Name Description T The type of target. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.EvergineException.html": {
    "href": "api/Evergine.Common.EvergineException.html",
    "title": "Class EvergineException | Evergine Doc",
    "keywords": "Class EvergineException Represents errors that occur inside Evergine API. Inheritance object Exception EvergineException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public class EvergineException : Exception, ISerializable Constructors EvergineException() Initializes a new instance of the EvergineException class. Declaration public EvergineException() EvergineException(string) Initializes a new instance of the EvergineException class. Declaration public EvergineException(string message) Parameters Type Name Description string message The exception message. EvergineException(string, Exception) Initializes a new instance of the EvergineException class. Declaration public EvergineException(string message, Exception innerException) Parameters Type Name Description string message The exception message. Exception innerException The inner exception. Implements ISerializable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.ExecutionMode.html": {
    "href": "api/Evergine.Common.ExecutionMode.html",
    "title": "Enum ExecutionMode | Evergine Doc",
    "keywords": "Enum ExecutionMode Specifies the execution mode of the application. Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public enum ExecutionMode Fields Name Description Editor The application is running inside Visual Editor. EditorSimulation The application is running inside Visual Editor on Simulation mode. Standalone This application is running as Standalone one (outside of Visual Editor). Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.Battery.BaseBattery.html": {
    "href": "api/Evergine.Common.Features.Battery.BaseBattery.html",
    "title": "Class BaseBattery | Evergine Doc",
    "keywords": "Class BaseBattery Base class for cross battery. Inheritance object BaseBattery Implements IBattery IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Features.Battery Assembly: Evergine.Common.dll Syntax public abstract class BaseBattery : IBattery, IDisposable Properties PowerSource Gets the current power source. Declaration public abstract PowerSource PowerSource { get; } Property Value Type Description PowerSource RemainingChargePercent Gets the remaining battery charge percent. Declaration public abstract int RemainingChargePercent { get; } Property Value Type Description int Status Gets the current battery status. Declaration public abstract BatteryStatus Status { get; } Property Value Type Description BatteryStatus Methods Dispose() Dispose of class and parent classes. Declaration public void Dispose() Dispose(bool) Dispose the object. Declaration public virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing Whether to dispose of unmanaged resources. ~BaseBattery() Finalizes an instance of the BaseBattery class. Declaration protected ~BaseBattery() IsBatteryChangedEventSubscribed() Whether the BatteryChanged event has subscribers or not. Declaration protected bool IsBatteryChangedEventSubscribed() Returns Type Description bool Whether the BatteryChanged event has subscribers. OnBatteryChanged(BatteryChangedEventArgs) Event handler for battery changes. Declaration protected virtual void OnBatteryChanged(BatteryChangedEventArgs e) Parameters Type Name Description BatteryChangedEventArgs e The arguments. Events BatteryChanged Event that fires when battery status, level or power changes Declaration public virtual event BatteryChangedEventHandler BatteryChanged Event Type Type Description BatteryChangedEventHandler Implements IBattery IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.Battery.BatteryChangedEventArgs.html": {
    "href": "api/Evergine.Common.Features.Battery.BatteryChangedEventArgs.html",
    "title": "Class BatteryChangedEventArgs | Evergine Doc",
    "keywords": "Class BatteryChangedEventArgs Arguments to pass to event handlers. Inheritance object EventArgs BatteryChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Features.Battery Assembly: Evergine.Common.dll Syntax public class BatteryChangedEventArgs : EventArgs Properties PowerSource Gets or sets the source of power. Declaration public PowerSource PowerSource { get; set; } Property Value Type Description PowerSource RemainingChargePercent Gets or sets the remaining battery charge percent. Declaration public int RemainingChargePercent { get; set; } Property Value Type Description int Status Gets or sets the current status of the battery. Declaration public BatteryStatus Status { get; set; } Property Value Type Description BatteryStatus Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.Battery.BatteryChangedEventHandler.html": {
    "href": "api/Evergine.Common.Features.Battery.BatteryChangedEventHandler.html",
    "title": "Delegate BatteryChangedEventHandler | Evergine Doc",
    "keywords": "Delegate BatteryChangedEventHandler Battery level changed event handler. Namespace: Evergine.Common.Features.Battery Assembly: Evergine.Common.dll Syntax public delegate void BatteryChangedEventHandler(object sender, BatteryChangedEventArgs e) Parameters Type Name Description object sender The event sender. BatteryChangedEventArgs e The event arguments. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.Battery.BatteryStatus.html": {
    "href": "api/Evergine.Common.Features.Battery.BatteryStatus.html",
    "title": "Enum BatteryStatus | Evergine Doc",
    "keywords": "Enum BatteryStatus Status of the battery. Namespace: Evergine.Common.Features.Battery Assembly: Evergine.Common.dll Syntax public enum BatteryStatus Fields Name Description Charging The battery is plugged in and charging Discharging The battery is currently discharging Full The battery is completely full NoBattery The battery is not present NotCharging The battery is neither charging nor discharging Unknown The battery is in an unknown state Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.Battery.html": {
    "href": "api/Evergine.Common.Features.Battery.html",
    "title": "Namespace Evergine.Common.Features.Battery | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Features.Battery Classes BaseBattery Base class for cross battery. BatteryChangedEventArgs Arguments to pass to event handlers. Interfaces IBattery Interface for battery. Enums BatteryStatus Status of the battery. PowerSource Current power source. Delegates BatteryChangedEventHandler Battery level changed event handler."
  },
  "api/Evergine.Common.Features.Battery.IBattery.html": {
    "href": "api/Evergine.Common.Features.Battery.IBattery.html",
    "title": "Interface IBattery | Evergine Doc",
    "keywords": "Interface IBattery Interface for battery. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Features.Battery Assembly: Evergine.Common.dll Syntax public interface IBattery : IDisposable Properties PowerSource Gets the current power source. Declaration PowerSource PowerSource { get; } Property Value Type Description PowerSource RemainingChargePercent Gets the remaining battery charge percent. Declaration int RemainingChargePercent { get; } Property Value Type Description int Status Gets the current battery status. Declaration BatteryStatus Status { get; } Property Value Type Description BatteryStatus Events BatteryChanged Event handler for battery changes Declaration event BatteryChangedEventHandler BatteryChanged Event Type Type Description BatteryChangedEventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.Battery.PowerSource.html": {
    "href": "api/Evergine.Common.Features.Battery.PowerSource.html",
    "title": "Enum PowerSource | Evergine Doc",
    "keywords": "Enum PowerSource Current power source. Namespace: Evergine.Common.Features.Battery Assembly: Evergine.Common.dll Syntax public enum PowerSource Fields Name Description Ac Charging from AC None No external power source Usb Charging from USB Wireless Charging with a wireless charger Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.html": {
    "href": "api/Evergine.Common.Features.html",
    "title": "Namespace Evergine.Common.Features | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Features Interfaces IFeatures Features interface."
  },
  "api/Evergine.Common.Features.IFeatures.html": {
    "href": "api/Evergine.Common.Features.IFeatures.html",
    "title": "Interface IFeatures | Evergine Doc",
    "keywords": "Interface IFeatures Features interface. Namespace: Evergine.Common.Features Assembly: Evergine.Common.dll Syntax public interface IFeatures Properties Battery Gets the battery feature. Declaration IBattery Battery { get; } Property Value Type Description IBattery Vibrate Gets the vibrate feature. Declaration IVibrate Vibrate { get; } Property Value Type Description IVibrate Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Features.Vibrate.html": {
    "href": "api/Evergine.Common.Features.Vibrate.html",
    "title": "Namespace Evergine.Common.Features.Vibrate | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Features.Vibrate Interfaces IVibrate Interface for vibrate."
  },
  "api/Evergine.Common.Features.Vibrate.IVibrate.html": {
    "href": "api/Evergine.Common.Features.Vibrate.IVibrate.html",
    "title": "Interface IVibrate | Evergine Doc",
    "keywords": "Interface IVibrate Interface for vibrate. Namespace: Evergine.Common.Features.Vibrate Assembly: Evergine.Common.dll Syntax public interface IVibrate Methods StartVibrate(int) Vibrate the device for specified amount of time. Declaration void StartVibrate(int milliseconds = 500) Parameters Type Name Description int milliseconds Time in Milliseconds to vibrate. 500ms is default. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.AddressMode.html": {
    "href": "api/Evergine.Common.Graphics.AddressMode.html",
    "title": "Enum AddressMode | Evergine Doc",
    "keywords": "Enum AddressMode Specifies texture addressing mode. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum AddressMode : byte Fields Name Description AnisotropicClamp Anisotropic filtering, clamped texture coordinates. AnisotropicWrap Anisotropic filtering, wrapped texture coordinates. LinearClamp Bilinear filtering, clamped texture coordinates. LinearWrap Bilinear filtering, wrapped texture coordinates. PointClamp Point/nearest neighbor filtering, clamped texture coordinates. PointWrap Point/nearest neighbor filtering, wrapped texture coordinates. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.AnisotropyLevel.html": {
    "href": "api/Evergine.Common.Graphics.AnisotropyLevel.html",
    "title": "Enum AnisotropyLevel | Evergine Doc",
    "keywords": "Enum AnisotropyLevel Specifies the level of anisotropic filtering. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum AnisotropyLevel : byte Fields Name Description Aniso1x 1x anisotropic filtering. Aniso2x 2x anisotropic filtering. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ArrayHelpers.html": {
    "href": "api/Evergine.Common.Graphics.ArrayHelpers.html",
    "title": "Class ArrayHelpers | Evergine Doc",
    "keywords": "Class ArrayHelpers Class containing useful methods for manipulating arrays. Inheritance object ArrayHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class ArrayHelpers Methods CopyArray<T>(T[]) Array copy. Declaration public static T[] CopyArray<T>(this T[] src) Parameters Type Name Description T[] src The source array. Returns Type Description T[] The cloned array. Type Parameters Name Description T The array type. EnsureArraySize<T>(ref T[], int) Ensure that the array length is equal that the specified size. If it's not, resize the array size to the specified capacity. Declaration public static void EnsureArraySize<T>(ref T[] array, int size) Parameters Type Name Description T[] array The array. int size The capacity. Type Parameters Name Description T The array type. EnsureCapacityPo2<T>(ref T[], int) Ensure that the array has the specified capacity. If it's not, resize the capacity to the next power of two value that contains the specified capacity. Declaration public static void EnsureCapacityPo2<T>(ref T[] array, int capacity) Parameters Type Name Description T[] array The array. int capacity The capacity. Type Parameters Name Description T The array type. EnsureCapacity<T>(ref T[], int) Ensure that the array has the specified capacity. If it's not, resize the array size to the specified capacity. Declaration public static void EnsureCapacity<T>(ref T[] array, int capacity) Parameters Type Name Description T[] array The array. int capacity The capacity. Type Parameters Name Description T The array type."
  },
  "api/Evergine.Common.Graphics.BillboardType.html": {
    "href": "api/Evergine.Common.Graphics.BillboardType.html",
    "title": "Enum BillboardType | Evergine Doc",
    "keywords": "Enum BillboardType Specifies a Billboard behavior. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum BillboardType : byte Fields Name Description Axial_Orientation An object is rotated about an axis to face towards the camera. PointOrientation An object is orientated about a point to always face the camera. With this type of billboarding the object will always appear the same to the camera, however it will be affected by perspective. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Blend.html": {
    "href": "api/Evergine.Common.Graphics.Blend.html",
    "title": "Enum Blend | Evergine Doc",
    "keywords": "Enum Blend Blend factors, which modulate values for the pixel shader and render target. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum Blend : byte Fields Name Description BlendFactor The data source is the blend factor set with BlendStates. No pre-blend operation. DestinationAlpha The data source is alpha data from a rendertarget. No pre-blend operation. DestinationColor The data source is color data from a rendertarget. No pre-blend operation. InverseBlendFactor The data source is the blend factor set with SetBlendState. The pre-blend operation inverts the blend factor, generating 1 - blend_factor. InverseDestinationAlpha The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A. InverseDestinationColor The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB. InverseSecondarySourceAlpha The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports dual-source color blending. InverseSecondarySourceColor The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports dual-source color blending. InverseSourceAlpha The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A. InverseSourceColor The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. One The data source is the color white (1, 1, 1, 1). No pre-blend operation. SecondarySourceAlpha The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. SecondarySourceColor The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. SourceAlpha The data source is alpha data (A) from a pixel shader. No pre-blend operation. SourceAlphaSaturate The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less. SourceColor The data source is color data (RGB) from a pixel shader. No pre-blend operation. Zero The data source is the color black (0, 0, 0, 0). No pre-blend operation. Extension Methods VKExtensionsMethods.ToVulkan(Blend) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BlendMode.html": {
    "href": "api/Evergine.Common.Graphics.BlendMode.html",
    "title": "Enum BlendMode | Evergine Doc",
    "keywords": "Enum BlendMode Specifies alpha blending mode. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum BlendMode : byte Fields Name Description Additive Additive alpha blending. AlphaBlend Premultiplied alpha blending. NonPremultiplied Non premultiplied alpha blending. Opaque No blending. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BlendOperation.html": {
    "href": "api/Evergine.Common.Graphics.BlendOperation.html",
    "title": "Enum BlendOperation | Evergine Doc",
    "keywords": "Enum BlendOperation RGB or alpha blending operation. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum BlendOperation : byte Fields Name Description Add Add source 1 and source 2. Max Find the maximum of source 1 and source 2. Min Find the minimum of source 1 and source 2. ReverseSubstract Subtract source 2 from source 1. Substract Subtract source 1 from source 2. Extension Methods VKExtensionsMethods.ToVulkan(BlendOperation) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BlendStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.BlendStateDescription.html",
    "title": "Struct BlendStateDescription | Evergine Doc",
    "keywords": "Struct BlendStateDescription Describes the blend state. Implements IEquatable<BlendStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct BlendStateDescription : IEquatable<BlendStateDescription> Fields AlphaToCoverageEnable Specifies whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target. Declaration public bool AlphaToCoverageEnable Field Value Type Description bool IndependentBlendEnable Specifies whether to enable independent blending in simultaneous render targets. Set to TRUE to enable independent blending. If set to FALSE, only the RenderTarget[0] members are used; RenderTarget[1..7] are ignored. Declaration public bool IndependentBlendEnable Field Value Type Description bool RenderTarget0 RenderTarget blend description 0 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget0 Field Value Type Description BlendStateRenderTargetDescription RenderTarget1 RenderTarget blend description 1 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget1 Field Value Type Description BlendStateRenderTargetDescription RenderTarget2 RenderTarget blend description 2 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget2 Field Value Type Description BlendStateRenderTargetDescription RenderTarget3 RenderTarget blend description 3 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget3 Field Value Type Description BlendStateRenderTargetDescription RenderTarget4 RenderTarget blend description 4 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget4 Field Value Type Description BlendStateRenderTargetDescription RenderTarget5 RenderTarget blend description 5 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget5 Field Value Type Description BlendStateRenderTargetDescription RenderTarget6 RenderTarget blend description 6 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget6 Field Value Type Description BlendStateRenderTargetDescription RenderTarget7 RenderTarget blend description 7 / 7. Declaration public BlendStateRenderTargetDescription RenderTarget7 Field Value Type Description BlendStateRenderTargetDescription Properties Default Gets default values for BlendStateDescription. Declaration public static BlendStateDescription Default { get; } Property Value Type Description BlendStateDescription Methods Equals(BlendStateDescription) Returns a hash code for this instance. Declaration public bool Equals(BlendStateDescription other) Parameters Type Name Description BlendStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() SetDefault() Default BlendStateDescription values. Declaration public void SetDefault() Operators operator ==(BlendStateDescription, BlendStateDescription) Implements the operator ==. Declaration public static bool operator ==(BlendStateDescription value1, BlendStateDescription value2) Parameters Type Name Description BlendStateDescription value1 The value1. BlendStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(BlendStateDescription, BlendStateDescription) Implements the operator ==. Declaration public static bool operator !=(BlendStateDescription value1, BlendStateDescription value2) Parameters Type Name Description BlendStateDescription value1 The value1. BlendStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BlendStateEnum.html": {
    "href": "api/Evergine.Common.Graphics.BlendStateEnum.html",
    "title": "Enum BlendStateEnum | Evergine Doc",
    "keywords": "Enum BlendStateEnum The blend state default values. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum BlendStateEnum Fields Name Description Additive Additive alpha blending. AlphaBlend Premultiplied alpha blending. AlphaNonPremultiplied Non premultiplied alpha blending. Custom Custom value Multiplicative Multiplicative alpha blending. Opaque Not blending. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BlendStateRenderTargetDescription.html": {
    "href": "api/Evergine.Common.Graphics.BlendStateRenderTargetDescription.html",
    "title": "Struct BlendStateRenderTargetDescription | Evergine Doc",
    "keywords": "Struct BlendStateRenderTargetDescription Describes the blend state. Implements IEquatable<BlendStateRenderTargetDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct BlendStateRenderTargetDescription : IEquatable<BlendStateRenderTargetDescription> Fields BlendEnable Enable (or disable) blending. Declaration [RenderProperty(Tag = 1)] public bool BlendEnable Field Value Type Description bool BlendOperationAlpha This blend operation defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public BlendOperation BlendOperationAlpha Field Value Type Description BlendOperation BlendOperationColor This blend operation defines how to combine the SrcBlend and DestBlend operations. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public BlendOperation BlendOperationColor Field Value Type Description BlendOperation ColorWriteChannels A write mask. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public ColorWriteChannels ColorWriteChannels Field Value Type Description ColorWriteChannels DestinationBlendAlpha This blend option specifies the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public Blend DestinationBlendAlpha Field Value Type Description Blend DestinationBlendColor This blend option specifies the operation to perform on the current RGB value in the render target. The BlendOp member defines how to combine the SrcBlend and DestBlend operations. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public Blend DestinationBlendColor Field Value Type Description Blend SourceBlendAlpha This blend option specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public Blend SourceBlendAlpha Field Value Type Description Blend SourceBlendColor This blend option specifies the operation to perform on the RGB value that the pixel shader outputs. The BlendOp member defines how to combine the SrcBlend and DestBlend operations. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public Blend SourceBlendColor Field Value Type Description Blend Properties Default Gets default values for BlendStateDescription. Declaration public static BlendStateRenderTargetDescription Default { get; } Property Value Type Description BlendStateRenderTargetDescription Methods Equals(BlendStateRenderTargetDescription) Returns a hash code for this instance. Declaration public bool Equals(BlendStateRenderTargetDescription other) Parameters Type Name Description BlendStateRenderTargetDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() SetDefault() Default BlendStateDescription values. Declaration public void SetDefault() Operators operator ==(BlendStateRenderTargetDescription, BlendStateRenderTargetDescription) Implements the operator ==. Declaration public static bool operator ==(BlendStateRenderTargetDescription value1, BlendStateRenderTargetDescription value2) Parameters Type Name Description BlendStateRenderTargetDescription value1 The value1. BlendStateRenderTargetDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(BlendStateRenderTargetDescription, BlendStateRenderTargetDescription) Implements the operator ==. Declaration public static bool operator !=(BlendStateRenderTargetDescription value1, BlendStateRenderTargetDescription value2) Parameters Type Name Description BlendStateRenderTargetDescription value1 The value1. BlendStateRenderTargetDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BlendStates.html": {
    "href": "api/Evergine.Common.Graphics.BlendStates.html",
    "title": "Class BlendStates | Evergine Doc",
    "keywords": "Class BlendStates Default known values for BlendStateDescription. Inheritance object BlendStates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class BlendStates Fields Additive Additive alpha blending. Declaration public static readonly BlendStateDescription Additive Field Value Type Description BlendStateDescription AlphaBlend Premultiplied alpha blending. Declaration public static readonly BlendStateDescription AlphaBlend Field Value Type Description BlendStateDescription Multiplicative Additive alpha blending. Declaration public static readonly BlendStateDescription Multiplicative Field Value Type Description BlendStateDescription NonPremultiplied Non premultiplied alpha blending. Declaration public static readonly BlendStateDescription NonPremultiplied Field Value Type Description BlendStateDescription Opaque Not blending. Declaration public static readonly BlendStateDescription Opaque Field Value Type Description BlendStateDescription"
  },
  "api/Evergine.Common.Graphics.Bone.html": {
    "href": "api/Evergine.Common.Graphics.Bone.html",
    "title": "Class Bone | Evergine Doc",
    "keywords": "Class Bone Represents a bone object from a model. Inheritance object Bone Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class Bone Constructors Bone(int, int, string, Matrix4x4) Initializes a new instance of the Bone class. Declaration public Bone(int index, int parentIndex, string name, Matrix4x4 localTransform) Parameters Type Name Description int index The index. int parentIndex Index of the parent. string name The name. Matrix4x4 localTransform The local transform. Bone(int, int, string, Matrix4x4, Matrix4x4) Initializes a new instance of the Bone class. Declaration public Bone(int index, int parentIndex, string name, Matrix4x4 localTransform, Matrix4x4 absoluteTransform) Parameters Type Name Description int index The index. int parentIndex Index of the parent. string name The name. Matrix4x4 localTransform The local transform. Matrix4x4 absoluteTransform The absolute transform. Fields AbsoluteTransform Absolute bone transform. Declaration public Matrix4x4 AbsoluteTransform Field Value Type Description Matrix4x4 Index Index of the bone in the hierarchy. Declaration public int Index Field Value Type Description int LocalTransform Local bone transform. Declaration public Matrix4x4 LocalTransform Field Value Type Description Matrix4x4 Name Name of the bone. Declaration public string Name Field Value Type Description string ParentIndex Index of the parent bone; -1 if it is the root bone. Declaration public int ParentIndex Field Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Buffer.html": {
    "href": "api/Evergine.Common.Graphics.Buffer.html",
    "title": "Class Buffer | Evergine Doc",
    "keywords": "Class Buffer This class represent a buffer resource. Inheritance object GraphicsResource Buffer DX11Buffer DX12Buffer MTLBuffer GLBuffer VKBuffer Implements IDisposable Inherited Members GraphicsResource.disposed GraphicsResource.Context GraphicsResource.NativePointer GraphicsResource.Disposed GraphicsResource.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class Buffer : GraphicsResource, IDisposable Constructors Buffer(GraphicsContext) Initializes a new instance of the Buffer class. Declaration protected Buffer(GraphicsContext context) Parameters Type Name Description GraphicsContext context The graphics context. Buffer(GraphicsContext, ref BufferDescription) Initializes a new instance of the Buffer class. Declaration protected Buffer(GraphicsContext context, ref BufferDescription description) Parameters Type Name Description GraphicsContext context The graphics context. BufferDescription description The buffer description. Fields Description Gets the buffer description. Declaration public readonly BufferDescription Description Field Value Type Description BufferDescription Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string UpdateCounter Gets the counter that counts every time that this buffer is updated. Declaration public int UpdateCounter { get; } Property Value Type Description int Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BufferDescription.html": {
    "href": "api/Evergine.Common.Graphics.BufferDescription.html",
    "title": "Struct BufferDescription | Evergine Doc",
    "keywords": "Struct BufferDescription Contains properties that describe the characteristics of a new buffer object. Implements IEquatable<BufferDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct BufferDescription : IEquatable<BufferDescription> Constructors BufferDescription(uint, BufferFlags, ResourceUsage, ResourceCpuAccess, int) Initializes a new instance of the BufferDescription struct. Declaration public BufferDescription(uint sizeInBytes, BufferFlags flags, ResourceUsage usage, ResourceCpuAccess cpuAccess = ResourceCpuAccess.None, int structureByteStride = 0) Parameters Type Name Description uint sizeInBytes Size of the buffer in bytes. BufferFlags flags Buffer flags describing the buffer type. ResourceUsage usage Usage for this buffer. ResourceCpuAccess cpuAccess Describe the type of CPU access allowed for. int structureByteStride The structure byte stride. Fields CpuAccess Specifies the types of CPU access allowed for this buffer. Declaration public ResourceCpuAccess CpuAccess Field Value Type Description ResourceCpuAccess Flags Buffer flags describing buffer type. Declaration public BufferFlags Flags Field Value Type Description BufferFlags SizeInBytes Retrieves or sets the size of the new buffer. Declaration public uint SizeInBytes Field Value Type Description uint StructureByteStride The structure byte stride. Declaration public int StructureByteStride Field Value Type Description int Usage Usage of this buffer. Declaration public ResourceUsage Usage Field Value Type Description ResourceUsage Methods Equals(BufferDescription) Determines whether the specified parameter is equal to this instance. Declaration public bool Equals(BufferDescription other) Parameters Type Name Description BufferDescription other Other used to compare. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(BufferDescription, BufferDescription) Implements the operator ==. Declaration public static bool operator ==(BufferDescription value1, BufferDescription value2) Parameters Type Name Description BufferDescription value1 The value1. BufferDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(BufferDescription, BufferDescription) Implements the operator ==. Declaration public static bool operator !=(BufferDescription value1, BufferDescription value2) Parameters Type Name Description BufferDescription value1 The value1. BufferDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BufferFlags.html": {
    "href": "api/Evergine.Common.Graphics.BufferFlags.html",
    "title": "Enum BufferFlags | Evergine Doc",
    "keywords": "Enum BufferFlags Identifies how to bing a buffer. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum BufferFlags Fields Name Description AccelerationStructure Bind a buffer to used in a raytracing stage. BufferStructured Enables a resource as a structured buffer. ConstantBuffer Bind a buffer as a constant buffer to a shader stage. This flag may NOT be combined with any other bind flag. IndexBuffer Bind a buffer as an index buffer to the input-assembler stage. IndirectBuffer Indirect Buffer. None No option. RenderTarget Bind a texture as a render target for the output-merger stage. ShaderResource Bind a buffer or texture to a shader stage. UnorderedAccess Bind an unordered access resource. VertexBuffer Bind a buffer as a vertex buffer to the input-assembler stage. Extension Methods DX11ExtensionsMethods.ToDirectX(BufferFlags) DX11ExtensionsMethods.ToResourceOptionDirectX(BufferFlags) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BufferParameterBinding.BufferParameterType.html": {
    "href": "api/Evergine.Common.Graphics.BufferParameterBinding.BufferParameterType.html",
    "title": "Enum BufferParameterBinding.BufferParameterType | Evergine Doc",
    "keywords": "Enum BufferParameterBinding.BufferParameterType The buffer parameter type. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum BufferParameterBinding.BufferParameterType Fields Name Description Float Float2 Float3 Float4 Int Int2 Int3 Int4 Matrix2x2 Matrix3x3 Matrix4x4 UInt UInt2 UInt3 UInt4 Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.BufferParameterBinding.html": {
    "href": "api/Evergine.Common.Graphics.BufferParameterBinding.html",
    "title": "Class BufferParameterBinding | Evergine Doc",
    "keywords": "Class BufferParameterBinding This class represents a parameter property of a constant buffer. Used un WebGL1 and OpenGL ES 2.0. Inheritance object BufferParameterBinding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class BufferParameterBinding Fields ArrayCount In case of array, specify the parameter array size. Declaration public int ArrayCount Field Value Type Description int CBufferSlot The constant slot. Declaration public int CBufferSlot Field Value Type Description int Name The parameter name. Declaration public string Name Field Value Type Description string Offset Offset of this parameter in the buffer. Declaration public int Offset Field Value Type Description int ParameterType The buffer parameter type. Declaration public BufferParameterBinding.BufferParameterType ParameterType Field Value Type Description BufferParameterBinding.BufferParameterType Methods FromType(Type) Gets the buffer parameter type from a string type. Declaration public static BufferParameterBinding.BufferParameterType FromType(Type type) Parameters Type Name Description Type type The type. Returns Type Description BufferParameterBinding.BufferParameterType float. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ClearFlags.html": {
    "href": "api/Evergine.Common.Graphics.ClearFlags.html",
    "title": "Enum ClearFlags | Evergine Doc",
    "keywords": "Enum ClearFlags Specifies FrameBuffer clearing modes. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum ClearFlags Fields Name Description All Clear color, depth and stencil target Depth Clear depth target. None Do not clear. Stencil Clear the stencil target Target Clear color target. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ClearValue.html": {
    "href": "api/Evergine.Common.Graphics.ClearValue.html",
    "title": "Struct ClearValue | Evergine Doc",
    "keywords": "Struct ClearValue Structure specifying a clear value. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct ClearValue Constructors ClearValue(ClearFlags, Color) Initializes a new instance of the ClearValue struct. Declaration public ClearValue(ClearFlags flags, Color colorValue) Parameters Type Name Description ClearFlags flags Identify the textures to clear ClearFlags. Color colorValue The value to clear the color attachment. ClearValue(ClearFlags, params Color[]) Initializes a new instance of the ClearValue struct. Declaration public ClearValue(ClearFlags flags, params Color[] colorValues) Parameters Type Name Description ClearFlags flags Identify the textures to clear ClearFlags. Color[] colorValues The array of values to clear the color attachments. ClearValue(ClearFlags, params Vector4[]) Initializes a new instance of the ClearValue struct. Declaration public ClearValue(ClearFlags flags, params Vector4[] colorValues) Parameters Type Name Description ClearFlags flags Identify the textures to clear ClearFlags. Vector4[] colorValues The array of values to clear the color attachments. ClearValue(ClearFlags, float, byte, Color) Initializes a new instance of the ClearValue struct. Declaration public ClearValue(ClearFlags flags, float depth, byte stencil, Color colorValue) Parameters Type Name Description ClearFlags flags Identify the textures to clear ClearFlags. float depth The value to clear the depth buffer. byte stencil The value to clear the stencil buffer. Color colorValue The value to clear the color attachment. ClearValue(ClearFlags, float, byte, params Color[]) Initializes a new instance of the ClearValue struct. Declaration public ClearValue(ClearFlags flags, float depth, byte stencil, params Color[] colorValues) Parameters Type Name Description ClearFlags flags Identify the textures to clear ClearFlags. float depth The value to clear the depth buffer. byte stencil The value to clear the stencil buffer. Color[] colorValues The array of values to clear the color attachments. ClearValue(ClearFlags, float, byte, params Vector4[]) Initializes a new instance of the ClearValue struct. Declaration public ClearValue(ClearFlags flags, float depth, byte stencil, params Vector4[] colorValues) Parameters Type Name Description ClearFlags flags Identify the textures to clear ClearFlags. float depth The value to clear the depth buffer. byte stencil The value to clear the stencil buffer. Vector4[] colorValues The array of values to clear the color attachments. Fields ColorValues The array of color clear value to use when clearing each color attachment. Declaration public Vector4[] ColorValues Field Value Type Description Vector4[] Depth The depth clear value to use when clearing a depth/stencil attachment. Declaration public float Depth Field Value Type Description float Flags Kind of clear to perfom ClearValue. Declaration public ClearFlags Flags Field Value Type Description ClearFlags Stencil The stencil clear value to use when clearing a depth/stencil attachment. Declaration public byte Stencil Field Value Type Description byte Properties Default Gets default values for clear value. Declaration public static ClearValue Default { get; } Property Value Type Description ClearValue Remarks That mean one ColorAttachment using CornFlowerBlue as clear color and depth = 1 / stencil = 0. None Gets default values for None clear value. Declaration public static ClearValue None { get; } Property Value Type Description ClearValue Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ClipDepth.html": {
    "href": "api/Evergine.Common.Graphics.ClipDepth.html",
    "title": "Enum ClipDepth | Evergine Doc",
    "keywords": "Enum ClipDepth Define the tipe of depth in the clip space depth. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ClipDepth : byte Fields Name Description NegativeOneToOne The depth in clip space is in the [-1, 1] range. ZeroToOne The depth in clip space is in the [0, 1] range. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Color.html": {
    "href": "api/Evergine.Common.Graphics.Color.html",
    "title": "Struct Color | Evergine Doc",
    "keywords": "Struct Color Represents a 32-bit color. Implements IEquatable<Color> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct Color : IEquatable<Color> Constructors Color(byte) Initializes a new instance of the Color struct. Declaration public Color(byte v) Parameters Type Name Description byte v Grayscale tone. Color(byte, byte, byte, byte) Initializes a new instance of the Color struct. Declaration public Color(byte r, byte g, byte b, byte a = 255) Parameters Type Name Description byte r Red component. byte g Green component. byte b Blue component. byte a Alpha component. Color(float) Initializes a new instance of the Color struct. Declaration public Color(float v) Parameters Type Name Description float v Grayscale tone in the [0, 1] range. Color(float, float, float, float) Initializes a new instance of the Color struct. Declaration public Color(float r, float g, float b, float a = 1) Parameters Type Name Description float r Red component in the [0, 1] range. float g Green component in the [0, 1] range. float b Blue component in the [0, 1] range. float a Alpha component in the [0, 1] range. Color(string) Initializes a new instance of the Color struct. Declaration public Color(string hex) Parameters Type Name Description string hex hexadecimal color code. Color(uint) Initializes a new instance of the Color struct. Declaration public Color(uint packetValue) Parameters Type Name Description uint packetValue The packet value. Fields A Alpha component. Declaration public byte A Field Value Type Description byte B Blue component. Declaration public byte B Field Value Type Description byte G Green component. Declaration public byte G Field Value Type Description byte R Red component. Declaration public byte R Field Value Type Description byte Properties AliceBlue Gets the alice blue. Declaration public static Color AliceBlue { get; } Property Value Type Description Color AntiqueWhite Gets the antique white. Declaration public static Color AntiqueWhite { get; } Property Value Type Description Color Aqua Gets the aqua. Declaration public static Color Aqua { get; } Property Value Type Description Color Aquamarine Gets the aquamarine. Declaration public static Color Aquamarine { get; } Property Value Type Description Color Azure Gets the azure. Declaration public static Color Azure { get; } Property Value Type Description Color Beige Gets the beige. Declaration public static Color Beige { get; } Property Value Type Description Color Bisque Gets the bisque. Declaration public static Color Bisque { get; } Property Value Type Description Color Black Gets the black. Declaration public static Color Black { get; } Property Value Type Description Color BlanchedAlmond Gets the blanched almond. Declaration public static Color BlanchedAlmond { get; } Property Value Type Description Color Blue Gets the blue. Declaration public static Color Blue { get; } Property Value Type Description Color BlueViolet Gets the blue violet. Declaration public static Color BlueViolet { get; } Property Value Type Description Color Brown Gets the brown. Declaration public static Color Brown { get; } Property Value Type Description Color BurlyWood Gets the burly wood. Declaration public static Color BurlyWood { get; } Property Value Type Description Color CadetBlue Gets the cadet blue. Declaration public static Color CadetBlue { get; } Property Value Type Description Color Chartreuse Gets the chartreuse. Declaration public static Color Chartreuse { get; } Property Value Type Description Color Chocolate Gets the chocolate. Declaration public static Color Chocolate { get; } Property Value Type Description Color Coral Gets the coral. Declaration public static Color Coral { get; } Property Value Type Description Color CornflowerBlue Gets the cornflower blue. Declaration public static Color CornflowerBlue { get; } Property Value Type Description Color Cornsilk Gets the cornsilk. Declaration public static Color Cornsilk { get; } Property Value Type Description Color Crimson Gets the crimson. Declaration public static Color Crimson { get; } Property Value Type Description Color Cyan Gets the cyan. Declaration public static Color Cyan { get; } Property Value Type Description Color DarkBlue Gets the dark blue. Declaration public static Color DarkBlue { get; } Property Value Type Description Color DarkCyan Gets the dark cyan. Declaration public static Color DarkCyan { get; } Property Value Type Description Color DarkGoldenrod Gets the dark goldenrod. Declaration public static Color DarkGoldenrod { get; } Property Value Type Description Color DarkGray Gets the dark gray. Declaration public static Color DarkGray { get; } Property Value Type Description Color DarkGreen Gets the dark green. Declaration public static Color DarkGreen { get; } Property Value Type Description Color DarkKhaki Gets the dark khaki. Declaration public static Color DarkKhaki { get; } Property Value Type Description Color DarkMagenta Gets the dark magenta. Declaration public static Color DarkMagenta { get; } Property Value Type Description Color DarkOliveGreen Gets the dark olive green. Declaration public static Color DarkOliveGreen { get; } Property Value Type Description Color DarkOrange Gets the dark orange. Declaration public static Color DarkOrange { get; } Property Value Type Description Color DarkOrchid Gets the dark orchid. Declaration public static Color DarkOrchid { get; } Property Value Type Description Color DarkRed Gets the dark red. Declaration public static Color DarkRed { get; } Property Value Type Description Color DarkSalmon Gets the dark salmon. Declaration public static Color DarkSalmon { get; } Property Value Type Description Color DarkSeaGreen Gets the dark sea green. Declaration public static Color DarkSeaGreen { get; } Property Value Type Description Color DarkSlateBlue Gets the dark slate blue. Declaration public static Color DarkSlateBlue { get; } Property Value Type Description Color DarkSlateGray Gets the dark slate gray. Declaration public static Color DarkSlateGray { get; } Property Value Type Description Color DarkTurquoise Gets the dark turquoise. Declaration public static Color DarkTurquoise { get; } Property Value Type Description Color DarkViolet Gets the dark violet. Declaration public static Color DarkViolet { get; } Property Value Type Description Color DeepPink Gets the deep pink. Declaration public static Color DeepPink { get; } Property Value Type Description Color DeepSkyBlue Gets the deep sky blue. Declaration public static Color DeepSkyBlue { get; } Property Value Type Description Color DimGray Gets the dim gray. Declaration public static Color DimGray { get; } Property Value Type Description Color DodgerBlue Gets the dodger blue. Declaration public static Color DodgerBlue { get; } Property Value Type Description Color Firebrick Gets the firebrick. Declaration public static Color Firebrick { get; } Property Value Type Description Color FloralWhite Gets the floral white. Declaration public static Color FloralWhite { get; } Property Value Type Description Color ForestGreen Gets the forest green. Declaration public static Color ForestGreen { get; } Property Value Type Description Color Fuchsia Gets the fuchsia. Declaration public static Color Fuchsia { get; } Property Value Type Description Color Gainsboro Gets the gainsboro. Declaration public static Color Gainsboro { get; } Property Value Type Description Color GhostWhite Gets the ghost white. Declaration public static Color GhostWhite { get; } Property Value Type Description Color Gold Gets the gold. Declaration public static Color Gold { get; } Property Value Type Description Color Goldenrod Gets the goldenrod. Declaration public static Color Goldenrod { get; } Property Value Type Description Color Gray Gets the gray. Declaration public static Color Gray { get; } Property Value Type Description Color Green Gets the green. Declaration public static Color Green { get; } Property Value Type Description Color GreenYellow Gets the green yellow. Declaration public static Color GreenYellow { get; } Property Value Type Description Color Honeydew Gets the honeydew. Declaration public static Color Honeydew { get; } Property Value Type Description Color HotPink Gets the hot pink. Declaration public static Color HotPink { get; } Property Value Type Description Color IndianRed Gets the indian red. Declaration public static Color IndianRed { get; } Property Value Type Description Color Indigo Gets the indigo. Declaration public static Color Indigo { get; } Property Value Type Description Color InherentColor Gets the inherent color, discarding its luminance. Declaration public Color InherentColor { get; } Property Value Type Description Color this[int] Gets or sets the byte at the specified index. Declaration public byte this[int index] { get; set; } Parameters Type Name Description int index Element index. Property Value Type Description byte The result. Ivory Gets the ivory. Declaration public static Color Ivory { get; } Property Value Type Description Color Khaki Gets the khaki. Declaration public static Color Khaki { get; } Property Value Type Description Color Lavender Gets the lavender. Declaration public static Color Lavender { get; } Property Value Type Description Color LavenderBlush Gets the lavender blush. Declaration public static Color LavenderBlush { get; } Property Value Type Description Color LawnGreen Gets the lawn green. Declaration public static Color LawnGreen { get; } Property Value Type Description Color LemonChiffon Gets the lemon chiffon. Declaration public static Color LemonChiffon { get; } Property Value Type Description Color LightBlue Gets the light blue. Declaration public static Color LightBlue { get; } Property Value Type Description Color LightCoral Gets the light coral. Declaration public static Color LightCoral { get; } Property Value Type Description Color LightCyan Gets the light cyan. Declaration public static Color LightCyan { get; } Property Value Type Description Color LightGoldenrodYellow Gets the light goldenrod yellow. Declaration public static Color LightGoldenrodYellow { get; } Property Value Type Description Color LightGray Gets the light gray. Declaration public static Color LightGray { get; } Property Value Type Description Color LightGreen Gets the light green. Declaration public static Color LightGreen { get; } Property Value Type Description Color LightPink Gets the light pink. Declaration public static Color LightPink { get; } Property Value Type Description Color LightSalmon Gets the light salmon. Declaration public static Color LightSalmon { get; } Property Value Type Description Color LightSeaGreen Gets the light sea green. Declaration public static Color LightSeaGreen { get; } Property Value Type Description Color LightSkyBlue Gets the light sky blue. Declaration public static Color LightSkyBlue { get; } Property Value Type Description Color LightSlateGray Gets the light slate gray. Declaration public static Color LightSlateGray { get; } Property Value Type Description Color LightSteelBlue Gets the light steel blue. Declaration public static Color LightSteelBlue { get; } Property Value Type Description Color LightYellow Gets the light yellow. Declaration public static Color LightYellow { get; } Property Value Type Description Color Lime Gets the lime. Declaration public static Color Lime { get; } Property Value Type Description Color LimeGreen Gets the lime green. Declaration public static Color LimeGreen { get; } Property Value Type Description Color Linen Gets the linen. Declaration public static Color Linen { get; } Property Value Type Description Color Luminance Gets the color luminance. Declaration public float Luminance { get; } Property Value Type Description float Magenta Gets the magenta. Declaration public static Color Magenta { get; } Property Value Type Description Color Maroon Gets the maroon. Declaration public static Color Maroon { get; } Property Value Type Description Color MediumAquamarine Gets the medium aquamarine. Declaration public static Color MediumAquamarine { get; } Property Value Type Description Color MediumBlue Gets the medium blue. Declaration public static Color MediumBlue { get; } Property Value Type Description Color MediumOrchid Gets the medium orchid. Declaration public static Color MediumOrchid { get; } Property Value Type Description Color MediumPurple Gets the medium purple. Declaration public static Color MediumPurple { get; } Property Value Type Description Color MediumSeaGreen Gets the medium sea green. Declaration public static Color MediumSeaGreen { get; } Property Value Type Description Color MediumSlateBlue Gets the medium slate blue. Declaration public static Color MediumSlateBlue { get; } Property Value Type Description Color MediumSpringGreen Gets the medium spring green. Declaration public static Color MediumSpringGreen { get; } Property Value Type Description Color MediumTurquoise Gets the medium turquoise. Declaration public static Color MediumTurquoise { get; } Property Value Type Description Color MediumVioletRed Gets the medium violet red. Declaration public static Color MediumVioletRed { get; } Property Value Type Description Color MidnightBlue Gets the midnight blue. Declaration public static Color MidnightBlue { get; } Property Value Type Description Color MintCream Gets the mint cream. Declaration public static Color MintCream { get; } Property Value Type Description Color MistyRose Gets the misty rose. Declaration public static Color MistyRose { get; } Property Value Type Description Color Moccasin Gets the moccasin. Declaration public static Color Moccasin { get; } Property Value Type Description Color NavajoWhite Gets the navajo white. Declaration public static Color NavajoWhite { get; } Property Value Type Description Color Navy Gets the navy. Declaration public static Color Navy { get; } Property Value Type Description Color OldLace Gets the old lace. Declaration public static Color OldLace { get; } Property Value Type Description Color Olive Gets the olive. Declaration public static Color Olive { get; } Property Value Type Description Color OliveDrab Gets the olive drab. Declaration public static Color OliveDrab { get; } Property Value Type Description Color Orange Gets the orange. Declaration public static Color Orange { get; } Property Value Type Description Color OrangeRed Gets the orange red. Declaration public static Color OrangeRed { get; } Property Value Type Description Color Orchid Gets the orchid. Declaration public static Color Orchid { get; } Property Value Type Description Color PaleGoldenrod Gets the pale goldenrod. Declaration public static Color PaleGoldenrod { get; } Property Value Type Description Color PaleGreen Gets the pale green. Declaration public static Color PaleGreen { get; } Property Value Type Description Color PaleTurquoise Gets the pale turquoise. Declaration public static Color PaleTurquoise { get; } Property Value Type Description Color PaleVioletRed Gets the pale violet red. Declaration public static Color PaleVioletRed { get; } Property Value Type Description Color PapayaWhip Gets the papaya whip. Declaration public static Color PapayaWhip { get; } Property Value Type Description Color PeachPuff Gets the peach puff. Declaration public static Color PeachPuff { get; } Property Value Type Description Color Peru Gets the peru. Declaration public static Color Peru { get; } Property Value Type Description Color Pink Gets the pink. Declaration public static Color Pink { get; } Property Value Type Description Color Plum Gets the plum. Declaration public static Color Plum { get; } Property Value Type Description Color PowderBlue Gets the powder blue. Declaration public static Color PowderBlue { get; } Property Value Type Description Color Purple Gets the purple. Declaration public static Color Purple { get; } Property Value Type Description Color Red Gets the red. Declaration public static Color Red { get; } Property Value Type Description Color RosyBrown Gets the rosy brown. Declaration public static Color RosyBrown { get; } Property Value Type Description Color RoyalBlue Gets the royal blue. Declaration public static Color RoyalBlue { get; } Property Value Type Description Color SaddleBrown Gets the saddle brown. Declaration public static Color SaddleBrown { get; } Property Value Type Description Color Salmon Gets the salmon. Declaration public static Color Salmon { get; } Property Value Type Description Color SandyBrown Gets the sandy brown. Declaration public static Color SandyBrown { get; } Property Value Type Description Color SeaGreen Gets the sea green. Declaration public static Color SeaGreen { get; } Property Value Type Description Color SeaShell Gets the sea shell. Declaration public static Color SeaShell { get; } Property Value Type Description Color Sienna Gets the sienna. Declaration public static Color Sienna { get; } Property Value Type Description Color Silver Gets the silver. Declaration public static Color Silver { get; } Property Value Type Description Color SkyBlue Gets the sky blue. Declaration public static Color SkyBlue { get; } Property Value Type Description Color SlateBlue Gets the slate blue. Declaration public static Color SlateBlue { get; } Property Value Type Description Color SlateGray Gets the slate gray. Declaration public static Color SlateGray { get; } Property Value Type Description Color Snow Gets the snow. Declaration public static Color Snow { get; } Property Value Type Description Color SpringGreen Gets the spring green. Declaration public static Color SpringGreen { get; } Property Value Type Description Color SteelBlue Gets the steel blue. Declaration public static Color SteelBlue { get; } Property Value Type Description Color Tan Gets the tan. Declaration public static Color Tan { get; } Property Value Type Description Color Teal Gets the teal. Declaration public static Color Teal { get; } Property Value Type Description Color Thistle Gets the thistle. Declaration public static Color Thistle { get; } Property Value Type Description Color Tomato Gets the tomato. Declaration public static Color Tomato { get; } Property Value Type Description Color Transparent Gets the transparent. Declaration public static Color Transparent { get; } Property Value Type Description Color Turquoise Gets the turquoise. Declaration public static Color Turquoise { get; } Property Value Type Description Color Violet Gets the violet. Declaration public static Color Violet { get; } Property Value Type Description Color Wheat Gets the wheat. Declaration public static Color Wheat { get; } Property Value Type Description Color White Gets the white. Declaration public static Color White { get; } Property Value Type Description Color WhiteSmoke Gets the white smoke. Declaration public static Color WhiteSmoke { get; } Property Value Type Description Color Yellow Gets the yellow. Declaration public static Color Yellow { get; } Property Value Type Description Color YellowGreen Gets the yellow green. Declaration public static Color YellowGreen { get; } Property Value Type Description Color Methods Equals(Color) Equalses the specified other. Declaration public bool Equals(Color other) Parameters Type Name Description Color other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) FromHex(string) Creates a color from Hex coded string. Declaration public static Color FromHex(string colorcode) Parameters Type Name Description string colorcode Hex format #AARRGGBB or #RRGGBB. Returns Type Description Color An ARGB color. FromHsl(float, float, float, float) Creates a color from HSL components. Declaration public static Color FromHsl(float h, float s, float l, float a = 1) Parameters Type Name Description float h Hue component in the [0, 1] range. float s Saturation component in the [0, 1] range. float l Luminance component in the [0, 1] range. float a Alpha component in the [0, 1] range. Returns Type Description Color An ARGB color. FromHsv(float, float, float, float) Creates a color from HSV components. Declaration public static Color FromHsv(float h, float s, float v, float a = 1) Parameters Type Name Description float h Hue component in the [0, 1] range. float s Saturation component in the [0, 1] range. float v Value component in the [0, 1] range. float a Alpha component in the [0, 1] range. Returns Type Description Color An ARGB color. FromVector3(ref Vector3) Converts Vector3 to Color. Declaration public static Color FromVector3(ref Vector3 vector) Parameters Type Name Description Vector3 vector Vector3 with color. Returns Type Description Color The color. FromVector3(ref Vector4, out Color) Converts Vector4 to Color. Declaration public static void FromVector3(ref Vector4 vector, out Color color) Parameters Type Name Description Vector4 vector Vector3 with color. Color color The color. FromVector4(ref Vector4) Converts Vector4 to Color. Declaration public static Color FromVector4(ref Vector4 vector) Parameters Type Name Description Vector4 vector Vector4 with color. Returns Type Description Color The color. FromVector4(ref Vector4, out Color) Converts Vector4 to Color. Declaration public static void FromVector4(ref Vector4 vector, out Color color) Parameters Type Name Description Vector4 vector Vector4 with color. Color color The color. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Lerp(Color, Color, float) Lerps the specified value1. Declaration public static Color Lerp(Color value1, Color value2, float amount) Parameters Type Name Description Color value1 The value1. Color value2 The value2. float amount The amount. Returns Type Description Color The result. Lerp(ref Color, ref Color, float) Lerps the specified value1. Declaration public static Color Lerp(ref Color value1, ref Color value2, float amount) Parameters Type Name Description Color value1 The value1. Color value2 The value2. float amount The amount. Returns Type Description Color The result. ToHexColorCode() To the hexadecimal code. Declaration public string ToHexColorCode() Returns Type Description string Color as hexadecimal code with the format #RGBA. ToInt() To int value. Declaration public int ToInt() Returns Type Description int Color as int value. ToVector3() Converts to a Vector3. Declaration public Vector3 ToVector3() Returns Type Description Vector3 Color as a Vector3. ToVector3(ref Vector3) Converts to a Vector3. Declaration public void ToVector3(ref Vector3 vector) Parameters Type Name Description Vector3 vector Color as a Vector3. ToVector4() Converts to a Vector4. Declaration public Vector4 ToVector4() Returns Type Description Vector4 Color as a Vector4. ToVector4(out Vector4) Converts to a Vector4. Declaration public void ToVector4(out Vector4 vector) Parameters Type Name Description Vector4 vector Color as a Vector4. Operators operator +(Color, Color) Implements the operator +. Declaration public static Color operator +(Color a, Color b) Parameters Type Name Description Color a First color. Color b Second color. Returns Type Description Color The result of the operator. operator /(Color, float) Implements the operator /. Declaration public static Color operator /(Color a, float b) Parameters Type Name Description Color a First color. float b Second color. Returns Type Description Color The result of the operator. operator ==(Color, Color) Implements the operator ==. Declaration public static bool operator ==(Color lhs, Color rhs) Parameters Type Name Description Color lhs The LHS. Color rhs The RHS. Returns Type Description bool The result of the operator. operator !=(Color, Color) Implements the operator !=. Declaration public static bool operator !=(Color lhs, Color rhs) Parameters Type Name Description Color lhs The LHS. Color rhs The RHS. Returns Type Description bool The result of the operator. operator *(Color, Color) Implements the operator *. Declaration public static Color operator *(Color a, Color b) Parameters Type Name Description Color a First color. Color b Second color. Returns Type Description Color The result of the operator. operator *(Color, float) Implements the operator *. Declaration public static Color operator *(Color a, float b) Parameters Type Name Description Color a First color. float b Second color. Returns Type Description Color The result of the operator. operator *(float, Color) Implements the operator *. Declaration public static Color operator *(float b, Color a) Parameters Type Name Description float b First color. Color a Second color. Returns Type Description Color The result of the operator. operator -(Color, Color) Implements the operator -. Declaration public static Color operator -(Color a, Color b) Parameters Type Name Description Color a First color. Color b Second color. Returns Type Description Color The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ColorWriteChannels.html": {
    "href": "api/Evergine.Common.Graphics.ColorWriteChannels.html",
    "title": "Enum ColorWriteChannels | Evergine Doc",
    "keywords": "Enum ColorWriteChannels Identify which components of each pixel of a render target are writable during blending. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum ColorWriteChannels Fields Name Description All Allow data to be stored in all components. Alpha Allow data to be stored in the alpha component. Blue Allow data to be stored in the blue component. Green Allow data to be stored in the green component. None None of the data are stored. Red Allow data to be stored in the red component. Extension Methods VKExtensionsMethods.ToVulkan(ColorWriteChannels) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CommandBuffer.CommandBufferState.html": {
    "href": "api/Evergine.Common.Graphics.CommandBuffer.CommandBufferState.html",
    "title": "Enum CommandBuffer.CommandBufferState | Evergine Doc",
    "keywords": "Enum CommandBuffer.CommandBufferState Available states for a command buffer. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum CommandBuffer.CommandBufferState Fields Name Description Commited After commit, the command buffer is in a state where it is waiting to be execute by the commandqueue. Executable After End, the command buffer is in a state where it has finished recording commands and can be committed. Initial Before Begin has been called or after the reset method. Recording Between Begin and End. The command buffer is in a state where it can record commands. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CommandBuffer.html": {
    "href": "api/Evergine.Common.Graphics.CommandBuffer.html",
    "title": "Class CommandBuffer | Evergine Doc",
    "keywords": "Class CommandBuffer A command buffer stores commands until the buffer is committed for execution by the GPU. CommandBuffers are transient single-use objects and do not support reuse. Inheritance object CommandBuffer DX11CommandBuffer DX12CommandBuffer MTLCommandBuffer GLCommandBuffer VKCommandBuffer Implements IDisposable IGetNativePointers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class CommandBuffer : IDisposable, IGetNativePointers Fields InRenderPass Whether in a renderPass or false in other case. Declaration protected bool InRenderPass Field Value Type Description bool Properties AvailablePointerKeys Gets a list of all available keys to obtain native pointers. Declaration public virtual IEnumerable<string> AvailablePointerKeys { get; } Property Value Type Description IEnumerable<string> GraphicsContext Gets the generic graphicsContext. Declaration protected abstract GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string State Gets or sets the state of this commandbuffer. Declaration public CommandBuffer.CommandBufferState State { get; protected set; } Property Value Type Description CommandBuffer.CommandBufferState Methods Begin() Set the initialize state for this commandbuffer. This function must be called before other graphics commands ca be issued. Declaration public abstract void Begin() BeginDebugMarker(string) Marks the beginning of a section of event code. This allows subsequent commands to be categorized and filtered when viewed in external debugging tools. Declaration public abstract void BeginDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Remarks You call the EndDebugMarker method to mark the end of the section of event code. BeginDebugMarker has no effect if the calling application is not running under an enabled profiling tool. BeginQuery(QueryHeap, uint) Begins a GPU query. Declaration public abstract void BeginQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Remarks This method works only with occusion and binaryOcclusion queryheap types. BeginRenderPass(ref RenderPassDescription) Begin a render pass. Declaration public void BeginRenderPass(ref RenderPassDescription description) Parameters Type Name Description RenderPassDescription description The renderPass description RenderPassDescription. BeginRenderPassInternal(ref RenderPassDescription) Begin a render pass. Declaration protected abstract void BeginRenderPassInternal(ref RenderPassDescription description) Parameters Type Name Description RenderPassDescription description The renderPass description RenderPassDescription. Blit(Texture, Texture) Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain. Declaration public void Blit(Texture source, Texture destination) Parameters Type Name Description Texture source The source Texture. Texture destination The destination Texture into which data is copied./>. Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain. Declaration protected abstract void Blit(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint layerCount The number of array layers to copy. BuildRaytracingAccelerationStructure(BottomLevelASDescription) Perform an bottom level acceleration structure build on the GPU. Declaration public abstract BottomLevelAS BuildRaytracingAccelerationStructure(BottomLevelASDescription blas) Parameters Type Name Description BottomLevelASDescription blas Bottom level acceleration structure description. Returns Type Description BottomLevelAS Bottom Level Acceleration Structure. BuildRaytracingAccelerationStructure(TopLevelASDescription) Perform an top level acceleration structure build on the GPU. Declaration public abstract TopLevelAS BuildRaytracingAccelerationStructure(TopLevelASDescription tlas) Parameters Type Name Description TopLevelASDescription tlas Top level acceleration structure description. Returns Type Description TopLevelAS Top Level Acceleration Structure. ClearCache() Clear all cached values of this command buffer... Declaration protected virtual void ClearCache() Commit() Commits this command buffer to the command queue waiting to be execute on GPU after Submit(). Declaration public abstract void Commit() CopyBufferDataTo(Buffer, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration public void CopyBufferDataTo(Buffer origin, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer origin the origin buffer. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration protected abstract void CopyBufferDataToInternal(Buffer origin, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer origin the origin buffer. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. CopyTextureDataTo(Texture, Texture) Copies all subresources from this texture in other texture. Declaration public void CopyTextureDataTo(Texture source, Texture destination) Parameters Type Name Description Texture source The source Texture. Texture destination The destination Texture into which data is copied./>. CopyTextureDataTo(Texture, Texture, uint, uint) Copies one subresource from this texture in other texture. Declaration public void CopyTextureDataTo(Texture source, Texture destination, uint mipLevel, uint arrayLayer) Parameters Type Name Description Texture source The source Texture. Texture destination The destination Texture into which data is copied./>. uint mipLevel The mip level to copy. uint arrayLayer The array layer to copy. CopyTextureDataTo(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copies a region from this texture in other texture. Declaration public void CopyTextureDataTo(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint width The width in texels of the copy region. uint height The height in texels of the copy region. uint depth The depth in texels of the copy region. uint layerCount The number of array layers to copy. CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copies a region from this texture in other texture. Declaration protected abstract void CopyTextureDataToInternal(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint width The width in texels of the copy region. uint height The height in texels of the copy region. uint depth The depth in texels of the copy region. uint layerCount The number of array layers to copy. Dispatch(uint, uint, uint) Execute commands in a compute shader from a thread group. Declaration public abstract void Dispatch(uint groupCountX, uint groupCountY, uint groupCountZ) Parameters Type Name Description uint groupCountX The number of groups dispatched in the x direction. groupSizeX must be less than or equal to (65535). uint groupCountY The number of groups dispatched in the y direction. groupSizeY must be less than or equal to (65535). uint groupCountZ The number of groups dispatched in the z direction. groupSizeZ must be less than or equal to (65535). Remarks You call the Dispatch method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z). Dispatch1D(uint, uint) Execute commands in a compute shader to solve a 1D problem. Declaration public void Dispatch1D(uint threadCountX, uint groupSizeX = 64) Parameters Type Name Description uint threadCountX The size of the problem. uint groupSizeX The group size, 64 by default. Dispatch2D(uint, uint, uint, uint) Execute commands in a compute shader to solve a 2D problem. Declaration public void Dispatch2D(uint threadCountX, uint threadCountY, uint groupSizeX = 8, uint groupSizeY = 8) Parameters Type Name Description uint threadCountX The x size of the problem. uint threadCountY The y size of the problem. uint groupSizeX The group size x, 8 by default. uint groupSizeY The group size y, 8 by default. Dispatch3D(uint, uint, uint, uint, uint, uint) Execute commands in a compute shader to solve a 3D problem. Declaration public void Dispatch3D(uint threadCountX, uint threadCountY, uint threadCountZ, uint groupSizeX, uint groupSizeY, uint groupSizeZ) Parameters Type Name Description uint threadCountX The x size of the problem. uint threadCountY The y size of the problem. uint threadCountZ The z size of the problem. uint groupSizeX The group size x. uint groupSizeY The group size y. uint groupSizeZ The group size z. DispatchIndirect(Buffer, uint) Execute a command list over one or more thread groups. Declaration public abstract void DispatchIndirect(Buffer argBuffer, uint offset) Parameters Type Name Description Buffer argBuffer A buffer which must be loaded with data that matches the argument list for Dispatch(uint, uint, uint). uint offset A byte-aligned offset between the start of the buffer and the arguments. DispatchRays(DispatchRaysDescription) Launch threads of a ray generation shader. See Initiating raytracing for an overview. Can be called from graphics or compute command lists and bundles. Declaration public abstract void DispatchRays(DispatchRaysDescription description) Parameters Type Name Description DispatchRaysDescription description Dispatch rays description. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public abstract void Dispose() Draw(uint, uint) Draw non-indexed, non-instanced primitives. Declaration public abstract void Draw(uint vertexCount, uint startVertexLocation = 0) Parameters Type Name Description uint vertexCount Number of vertices to draw. uint startVertexLocation Index of the first vertex, which is usually an offset in a vertex buffer. DrawIndexed(uint, uint, uint) Draw indexed, non-instanced primitives. Declaration public abstract void DrawIndexed(uint indexCount, uint startIndexLocation = 0, uint baseVertexLocation = 0) Parameters Type Name Description uint indexCount Number of indices to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. DrawIndexedInstanced(uint, uint, uint, uint, uint) Draw indexed, instanced primitives. Declaration public abstract void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation = 0, uint baseVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint indexCountPerInstance Number of indices read from the index buffer for each instance. uint instanceCount Number of instances to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) Draw indexed, instanced, GPU-generated primitives. Declaration public abstract void DrawIndexedInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. DrawInstanced(uint, uint, uint, uint) Draw non-indexed, instanced primitives. Declaration public abstract void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint vertexCountPerInstance Number of vertices to draw. uint instanceCount Number of instances to draw. uint startVertexLocation Index of the first vertex. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. DrawInstancedIndirect(Buffer, uint, uint, uint) Draw instanced, GPU-generated primitives. Declaration public abstract void DrawInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. End() Completes the command buffer. Declaration public void End() EndDebugMarker() Marks the end of a section of event code. Declaration public abstract void EndDebugMarker() Remarks EndDebugMarker has no effect if the calling application is not running under an enabled profiling tool. EndInternal() Completes the command buffer. Declaration protected abstract void EndInternal() EndQuery(QueryHeap, uint) Ends a GPU query. Declaration public abstract void EndQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Remarks This method works only with occusion and binaryOcclusion queryheap types. EndRenderPass() End a render pass. Declaration public void EndRenderPass() EndRenderPassInternal() End a render pass. Declaration protected abstract void EndRenderPassInternal() GenerateMipmaps(Texture) Generates mipmaps for the given Texture. The largest mipmap is used to generate all of the lower mipmap levels contained in the Texture. Declaration public abstract void GenerateMipmaps(Texture texture) Parameters Type Name Description Texture texture The Texture to generate mipmaps for. This Texture must have been created with TextureFlags.GenerateMipmaps. GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration public virtual bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. InsertDebugMarker(string) Marks a single point of execution in code. This is used by graphics debuggers to identify points of interest in a command stream. Declaration public abstract void InsertDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Remarks InsertDebugMarker has no effect if the calling application is not running under an enabled profiling tool. Reset() Reset the command buffer to the initial state. Declaration public abstract void Reset() ResourceBarrierUnorderedAccessView(Buffer) Sets a resource barrier for a texture. Declaration public abstract void ResourceBarrierUnorderedAccessView(Buffer buffer) Parameters Type Name Description Buffer buffer The buffer. ResourceBarrierUnorderedAccessView(Texture) Sets a resource barrier for a texture. Declaration public abstract void ResourceBarrierUnorderedAccessView(Texture texture) Parameters Type Name Description Texture texture The texture. SetComputePipelineState(ComputePipelineState) Sets the compute pipeline state object for this commandbuffer. Declaration public void SetComputePipelineState(ComputePipelineState pipeline) Parameters Type Name Description ComputePipelineState pipeline The compute pipeline state description. SetComputePipelineStateInternal(ComputePipelineState) Sets the compute pipeline state object for this commandbuffer. Declaration protected abstract void SetComputePipelineStateInternal(ComputePipelineState pipeline) Parameters Type Name Description ComputePipelineState pipeline The compute pipeline state description. SetGraphicsPipelineState(GraphicsPipelineState) Sets the graphics pipeline state object for this commandbuffer. Declaration public void SetGraphicsPipelineState(GraphicsPipelineState pipeline) Parameters Type Name Description GraphicsPipelineState pipeline The graphics pipeline state description. SetGraphicsPipelineStateInternal(GraphicsPipelineState) Sets the graphics pipeline state object for this commandbuffer. Declaration protected abstract void SetGraphicsPipelineStateInternal(GraphicsPipelineState pipeline) Parameters Type Name Description GraphicsPipelineState pipeline The graphics pipeline state description. SetIndexBuffer(Buffer, IndexFormat, uint) Set an array of index buffers to the input-assembler stage. Declaration public void SetIndexBuffer(Buffer buffer, IndexFormat format = IndexFormat.UInt16, uint offset = 0) Parameters Type Name Description Buffer buffer The buffer being bound. IndexFormat format Indices Data Type (Default UInt16). uint offset Offset (in bytes) from the start of the index buffer to the first index to use. SetIndexBufferInternal(Buffer, IndexFormat, uint) Set an array of index buffers to the input-assembler stage. Declaration protected abstract void SetIndexBufferInternal(Buffer buffer, IndexFormat format = IndexFormat.UInt16, uint offset = 0) Parameters Type Name Description Buffer buffer The buffer being bound. IndexFormat format Indices Data Type (Default UInt16). uint offset Offset (in bytes) from the start of the index buffer to the first index to use. SetRaytracingPipelineState(RaytracingPipelineState) Sets the raytracing pipeline state object for this commandbuffer. Declaration public void SetRaytracingPipelineState(RaytracingPipelineState pipeline) Parameters Type Name Description RaytracingPipelineState pipeline The raytracing pipeline state description. SetRaytracingPipelineStateInternal(RaytracingPipelineState) Sets the raytracing pipeline state object for this commandbuffer. Declaration protected abstract void SetRaytracingPipelineStateInternal(RaytracingPipelineState pipeline) Parameters Type Name Description RaytracingPipelineState pipeline The raytracing pipeline state description. SetResourceSet(ResourceSet, uint, uint[]) Set the active ResourceSet for the given index. Declaration public void SetResourceSet(ResourceSet resourceSet, uint index = 0, uint[] constantBufferOffsets = null) Parameters Type Name Description ResourceSet resourceSet The new ResourceSet. uint index The resourceSet index. uint[] constantBufferOffsets Array of values specifying the constant buffer offsets. SetResourceSetInternal(ResourceSet, uint, uint[]) Set the active ResourceSet for the given index. Declaration protected abstract void SetResourceSetInternal(ResourceSet resourceSet, uint index = 0, uint[] constantBufferOffsets = null) Parameters Type Name Description ResourceSet resourceSet The new ResourceSet. uint index The resourceSet index. uint[] constantBufferOffsets Array of values specifying the constant buffer offsets. SetScissorRectangles(Rectangle[]) Set an scissor rectangle in a specific slot. Declaration public abstract void SetScissorRectangles(Rectangle[] rectangles) Parameters Type Name Description Rectangle[] rectangles The array of the scissor rectangles. SetVertexBuffer(uint, Buffer, uint) Set an buffers to the input-assembler stage. Declaration public void SetVertexBuffer(uint slot, Buffer buffer, uint offset) Parameters Type Name Description uint slot The buffer slot. Buffer buffer The buffer being bound. uint offset Offset (in bytes) from the start of buffer to the first vertex to use. SetVertexBufferInternal(uint, Buffer, uint) Set an buffers to the input-assembler stage. Declaration protected abstract void SetVertexBufferInternal(uint slot, Buffer buffer, uint offset) Parameters Type Name Description uint slot The buffer slot. Buffer buffer The buffer being bound. uint offset Offset (in bytes) from the start of buffer to the first vertex to use. SetVertexBuffers(Buffer[]) Set an array of vertex buffers to the input-assembler stage. Declaration public void SetVertexBuffers(Buffer[] buffers) Parameters Type Name Description Buffer[] buffers The array of the vertex buffers being bound. SetVertexBuffers(Buffer[], int[]) Set an array of buffers to the input-assembler stage. Declaration public void SetVertexBuffers(Buffer[] buffers, int[] offsets) Parameters Type Name Description Buffer[] buffers The array of the vertex buffers being bound. int[] offsets Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use. SetVertexBuffersInternal(Buffer[], int[]) Set an array of buffers to the input-assembler stage. Declaration protected abstract void SetVertexBuffersInternal(Buffer[] buffers, int[] offsets) Parameters Type Name Description Buffer[] buffers The array of the vertex buffers being bound. int[] offsets Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use. SetViewports(Viewport[]) Set a viewport in a specific slot. Declaration public abstract void SetViewports(Viewport[] viewports) Parameters Type Name Description Viewport[] viewports The array of the viewports. UpdateBufferData(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void UpdateBufferData(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected abstract void UpdateBufferDataInternal(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. UpdateBufferData<T>(Buffer, ref T, uint) Fill the buffer with a data array. Declaration public void UpdateBufferData<T>(Buffer buffer, ref T data, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Buffer buffer Buffer instance. T data The data array. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateBufferData<T>(Buffer, T[], uint) Fill the buffer with a data array. Declaration public void UpdateBufferData<T>(Buffer buffer, T[] data, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Buffer buffer Buffer instance. T[] data The data array. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateBufferData<T>(Buffer, T[], uint, uint) Fill the buffer with a data array. Declaration public void UpdateBufferData<T>(Buffer buffer, T[] data, uint count, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Buffer buffer Buffer instance. T[] data The data array. uint count The number of elements. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) Refit an top level accelerations structure build on the GPU. Declaration public abstract void UpdateRaytracingAccelerationStructure(ref TopLevelAS tlas, TopLevelASDescription newDescription) Parameters Type Name Description TopLevelAS tlas Top level acceleration structure. TopLevelASDescription newDescription New top level description. WriteTimestamp(QueryHeap, uint) Write a device timestamp into a query heap. Declaration public abstract void WriteTimestamp(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap. uint index The query index. Remarks This method works only with timestamp queryheap type. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CommandQueue.html": {
    "href": "api/Evergine.Common.Graphics.CommandQueue.html",
    "title": "Class CommandQueue | Evergine Doc",
    "keywords": "Class CommandQueue A pool of CommandBuffer(). Inheritance object CommandQueue DX11CommandQueue DX12CommandQueue MTLCommandQueue GLCommandQueue VKCommandQueue Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class CommandQueue : IDisposable Fields CommandBufferArraySize The command buffer array size. Declaration public const int CommandBufferArraySize = 64 Field Value Type Description int Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string Methods CommandBuffer() Gets the next CommandBuffer(). Declaration public abstract CommandBuffer CommandBuffer() Returns Type Description CommandBuffer The CommandBuffer. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public abstract void Dispose() Submit() Submits a CommandBuffer list to be executed by the GPU. Declaration public abstract void Submit() WaitIdle() Wait for all command buffers are executed. Declaration public abstract void WaitIdle() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CommandQueueType.html": {
    "href": "api/Evergine.Common.Graphics.CommandQueueType.html",
    "title": "Enum CommandQueueType | Evergine Doc",
    "keywords": "Enum CommandQueueType Specifies the elements type of a CommandQueue. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum CommandQueueType Fields Name Description Compute Specifies a command buffer for computing. Copy Specifies a command buffer for copying (drawing). Graphics Specifies a command buffer that the GPU can execute. A direct command list doesn't inherit any GPU state. Extension Methods DX12ExtensionsMethods.ToDirectX(CommandQueueType) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ComparisonFunction.html": {
    "href": "api/Evergine.Common.Graphics.ComparisonFunction.html",
    "title": "Enum ComparisonFunction | Evergine Doc",
    "keywords": "Enum ComparisonFunction Comparison options. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ComparisonFunction : byte Fields Name Description Always Always pass the comparison. Equal If the source data is equal to the destination data, the comparison passes. Greater If the source data is greater than the destination data, the comparison passes. GreaterEqual If the source data is greater than or equal to the destination data, the comparison passes. Less If the source data is less than the destination data, the comparison passes. LessEqual If the source data is less than or equal to the destination data, the comparison passes. Never Never pass the comparison. NotEqual If the source data is not equal to the destination data, the comparison passes. Extension Methods DX11ExtensionsMethods.ToDirectX(ComparisonFunction) DX12ExtensionsMethods.ToDirectX(ComparisonFunction) VKExtensionsMethods.ToVulkan(ComparisonFunction) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CompilationMode.html": {
    "href": "api/Evergine.Common.Graphics.CompilationMode.html",
    "title": "Enum CompilationMode | Evergine Doc",
    "keywords": "Enum CompilationMode An enum. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum CompilationMode : byte Fields Name Description Debug Shaders are compiled with debug information. None Shaders are compiled without special parameters. Release Shaders are compiled with optimizations. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CompilationResult.html": {
    "href": "api/Evergine.Common.Graphics.CompilationResult.html",
    "title": "Struct CompilationResult | Evergine Doc",
    "keywords": "Struct CompilationResult This struct represent the result of a compilation process in a shader. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct CompilationResult Constructors CompilationResult(byte[], bool, uint, string) Initializes a new instance of the CompilationResult struct. Declaration public CompilationResult(byte[] bytecode, bool hasErrors, uint errorLine = 0, string message = null) Parameters Type Name Description byte[] bytecode The compile byte code. bool hasErrors Whether the compilation was success or not. uint errorLine The error line number if hasError is true. string message The error message if hasErrors is true. Fields ByteCode The byte code before compile a shader. Declaration public readonly byte[] ByteCode Field Value Type Description byte[] ErrorLine The error line number. Declaration public readonly uint ErrorLine Field Value Type Description uint HasErrors True if the compilation was wrong. Declaration public readonly bool HasErrors Field Value Type Description bool Message Error message if hasErrors is true. Declaration public readonly string Message Field Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CompilerParameters.html": {
    "href": "api/Evergine.Common.Graphics.CompilerParameters.html",
    "title": "Struct CompilerParameters | Evergine Doc",
    "keywords": "Struct CompilerParameters This struct represent the parameters used by the shader compiler. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct CompilerParameters Fields CompilationMode The compiler mode, CompilationMode. Declaration public CompilationMode CompilationMode Field Value Type Description CompilationMode Profile The available device capabilities, GraphicsProfile. Declaration public GraphicsProfile Profile Field Value Type Description GraphicsProfile Properties Default Gets default values for CompilerParameters. Declaration public static CompilerParameters Default { get; } Property Value Type Description CompilerParameters Methods Read(BinaryReader) Read compiler parameters from binary file. Declaration public static CompilerParameters Read(BinaryReader reader) Parameters Type Name Description BinaryReader reader Binary reader. Returns Type Description CompilerParameters The readed compiler parameters. SetDefault() Default CompilerParameters values. Declaration public void SetDefault() Write(BinaryWriter) Write compiler parameters on binary file. Declaration public void Write(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer The binary writer. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ComputePipelineDescription.html": {
    "href": "api/Evergine.Common.Graphics.ComputePipelineDescription.html",
    "title": "Struct ComputePipelineDescription | Evergine Doc",
    "keywords": "Struct ComputePipelineDescription Contains properties that describe the characteristics of a new pipeline state object. Implements IEquatable<ComputePipelineDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct ComputePipelineDescription : IEquatable<ComputePipelineDescription> Constructors ComputePipelineDescription(ResourceLayout[], ComputeShaderStateDescription, uint, uint, uint) Initializes a new instance of the ComputePipelineDescription struct. Declaration public ComputePipelineDescription(ResourceLayout[] resourceLayouts, ComputeShaderStateDescription shaderDescription, uint threadGroupSizeX = 1, uint threadGroupSizeY = 1, uint threadGroupSizeZ = 1) Parameters Type Name Description ResourceLayout[] resourceLayouts The resources layout description. ComputeShaderStateDescription shaderDescription The compute shader. uint threadGroupSizeX The X dimension of the thread group size. uint threadGroupSizeY The Y dimension of the thread group size. uint threadGroupSizeZ The Z dimension of the thread group size. Fields ResourceLayouts Describes the resources layout input. Declaration public ResourceLayout[] ResourceLayouts Field Value Type Description ResourceLayout[] ThreadGroupSizeX The X dimension of the thread group size. Declaration public uint ThreadGroupSizeX Field Value Type Description uint ThreadGroupSizeY The Y dimension of the thread group size. Declaration public uint ThreadGroupSizeY Field Value Type Description uint ThreadGroupSizeZ The Z dimension of the thread group size. Declaration public uint ThreadGroupSizeZ Field Value Type Description uint shaderDescription Gets or sets the compute shader program. Declaration public ComputeShaderStateDescription shaderDescription Field Value Type Description ComputeShaderStateDescription Methods Equals(ComputePipelineDescription) Returns a hash code for this instance. Declaration public bool Equals(ComputePipelineDescription other) Parameters Type Name Description ComputePipelineDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(ComputePipelineDescription, ComputePipelineDescription) Implements the operator ==. Declaration public static bool operator ==(ComputePipelineDescription value1, ComputePipelineDescription value2) Parameters Type Name Description ComputePipelineDescription value1 The value1. ComputePipelineDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(ComputePipelineDescription, ComputePipelineDescription) Implements the operator ==. Declaration public static bool operator !=(ComputePipelineDescription value1, ComputePipelineDescription value2) Parameters Type Name Description ComputePipelineDescription value1 The value1. ComputePipelineDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ComputePipelineState.html": {
    "href": "api/Evergine.Common.Graphics.ComputePipelineState.html",
    "title": "Class ComputePipelineState | Evergine Doc",
    "keywords": "Class ComputePipelineState This class represent the GPU graphics pipeline. Inheritance object PipelineState ComputePipelineState DX11ComputePipelineState DX12ComputePipelineState MTLComputePipelineState GLComputePipelineState VKComputePipelineState Implements IDisposable Inherited Members PipelineState.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class ComputePipelineState : PipelineState, IDisposable Constructors ComputePipelineState(ref ComputePipelineDescription) Initializes a new instance of the ComputePipelineState class. Declaration protected ComputePipelineState(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The pipelineState description. Fields Description Gets the compute pipelinestate description. Declaration public readonly ComputePipelineDescription Description Field Value Type Description ComputePipelineDescription Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ComputeShaderStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.ComputeShaderStateDescription.html",
    "title": "Class ComputeShaderStateDescription | Evergine Doc",
    "keywords": "Class ComputeShaderStateDescription This struct contains all the shader stages. Inheritance object ShaderStateDescription ComputeShaderStateDescription Implements IEquatable<ShaderStateDescription> IEquatable<ComputeShaderStateDescription> Inherited Members ShaderStateDescription.constantBuffersBindings ShaderStateDescription.texturesBindings ShaderStateDescription.bufferParametersBinding ShaderStateDescription.Equals(ShaderStateDescription) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class ComputeShaderStateDescription : ShaderStateDescription, IEquatable<ShaderStateDescription>, IEquatable<ComputeShaderStateDescription> Fields ComputeShader Gets or sets the compute shader program. Declaration public Shader ComputeShader Field Value Type Description Shader Methods Equals(ComputeShaderStateDescription) Declaration public bool Equals(ComputeShaderStateDescription other) Parameters Type Name Description ComputeShaderStateDescription other Returns Type Description bool Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ShaderStateDescription.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ShaderStateDescription.GetHashCode() Implements IEquatable<T> IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.CullMode.html": {
    "href": "api/Evergine.Common.Graphics.CullMode.html",
    "title": "Enum CullMode | Evergine Doc",
    "keywords": "Enum CullMode Specifies polygon culling mode. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum CullMode : byte Fields Name Description Back Do not draw triangles that are back-facing. Front Do not draw triangles that are front-facing. None Always draw all triangles. Extension Methods VKExtensionsMethods.ToVulkan(CullMode) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.DataBox.html": {
    "href": "api/Evergine.Common.Graphics.DataBox.html",
    "title": "Struct DataBox | Evergine Doc",
    "keywords": "Struct DataBox Provides access to data organized in 3D. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct DataBox : IDisposable Constructors DataBox(byte[], uint, uint) Initializes a new instance of the DataBox struct from a byte array. Declaration public DataBox(byte[] data, uint rowPitch = 0, uint slicePitch = 0) Parameters Type Name Description byte[] data The data as byte array. uint rowPitch The row pitch. uint slicePitch The slice pitch. DataBox(IntPtr, uint, uint) Initializes a new instance of the DataBox struct from a IntPtr. Declaration public DataBox(IntPtr datapointer, uint rowPitch = 0, uint slicePitch = 0) Parameters Type Name Description IntPtr datapointer The datapointer. uint rowPitch The row pitch. uint slicePitch The slice pitch. Fields DataPointer Pointer to the data. Declaration public IntPtr DataPointer Field Value Type Description IntPtr RowPitch Gets the number of bytes per row. Declaration public uint RowPitch Field Value Type Description uint SlicePitch Gets the number of bytes per slice (for a 3D texture, a slice is a 2D image). Declaration public uint SlicePitch Field Value Type Description uint Properties IsEmpty Gets a value indicating whether this instance is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool true if this instance is empty; otherwise, false. Methods Dispose() Dispose databox. Declaration public void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.DepthBias.html": {
    "href": "api/Evergine.Common.Graphics.DepthBias.html",
    "title": "Enum DepthBias | Evergine Doc",
    "keywords": "Enum DepthBias Specifies polygon depth boas. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum DepthBias : byte Fields Name Description Negative Negative depth bias Positive Positive depth bias Zero Zero depth bias Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.DepthMode.html": {
    "href": "api/Evergine.Common.Graphics.DepthMode.html",
    "title": "Enum DepthMode | Evergine Doc",
    "keywords": "Enum DepthMode Specifies depth reading/writing mode. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum DepthMode : byte Fields Name Description None No depth mode. Read Read only. Write Read and write. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.DepthStencilOperationDescription.html": {
    "href": "api/Evergine.Common.Graphics.DepthStencilOperationDescription.html",
    "title": "Struct DepthStencilOperationDescription | Evergine Doc",
    "keywords": "Struct DepthStencilOperationDescription Stencil operations that can be performed based on the results of stencil test. Implements IEquatable<DepthStencilOperationDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct DepthStencilOperationDescription : IEquatable<DepthStencilOperationDescription> Fields StencilDepthFailOperation The stencil operation to perform when stencil testing passes and depth testing fails. Declaration public StencilOperation StencilDepthFailOperation Field Value Type Description StencilOperation StencilFailOperation The stencil operation to perform when stencil testing fails. Declaration public StencilOperation StencilFailOperation Field Value Type Description StencilOperation StencilFunction A function that compares stencil data against existing stencil data. Declaration public ComparisonFunction StencilFunction Field Value Type Description ComparisonFunction StencilPassOperation The stencil operation to perform when stencil testing and depth testing both pass. Declaration public StencilOperation StencilPassOperation Field Value Type Description StencilOperation Methods Equals(DepthStencilOperationDescription) Determines whether the specified parameter is equal to this instance. Declaration public bool Equals(DepthStencilOperationDescription other) Parameters Type Name Description DepthStencilOperationDescription other Other used to compare. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(DepthStencilOperationDescription, DepthStencilOperationDescription) Implements the operator ==. Declaration public static bool operator ==(DepthStencilOperationDescription value1, DepthStencilOperationDescription value2) Parameters Type Name Description DepthStencilOperationDescription value1 The value1. DepthStencilOperationDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(DepthStencilOperationDescription, DepthStencilOperationDescription) Implements the operator ==. Declaration public static bool operator !=(DepthStencilOperationDescription value1, DepthStencilOperationDescription value2) Parameters Type Name Description DepthStencilOperationDescription value1 The value1. DepthStencilOperationDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.DepthStencilStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.DepthStencilStateDescription.html",
    "title": "Struct DepthStencilStateDescription | Evergine Doc",
    "keywords": "Struct DepthStencilStateDescription Describes depth-stencil state. Implements IEquatable<DepthStencilStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct DepthStencilStateDescription : IEquatable<DepthStencilStateDescription> Fields BackFace Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera. Declaration public DepthStencilOperationDescription BackFace Field Value Type Description DepthStencilOperationDescription DepthEnable Enable depth testing. Declaration public bool DepthEnable Field Value Type Description bool DepthFunction A function that compares depth data against existing depth data. Declaration public ComparisonFunction DepthFunction Field Value Type Description ComparisonFunction DepthWriteMask Identify a portion of the depth-stencil buffer that can be modified by depth data. Declaration public bool DepthWriteMask Field Value Type Description bool FrontFace Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera. Declaration public DepthStencilOperationDescription FrontFace Field Value Type Description DepthStencilOperationDescription StencilEnable Enable stencil testing. Declaration public bool StencilEnable Field Value Type Description bool StencilReadMask Identify a portion of the depth-stencil buffer for reading stencil data. Declaration public byte StencilReadMask Field Value Type Description byte StencilWriteMask Identify a portion of the depth-stencil buffer for writing stencil data. Declaration public byte StencilWriteMask Field Value Type Description byte Properties Default Gets default values for DephtStencilStateDescription. Declaration public static DepthStencilStateDescription Default { get; } Property Value Type Description DepthStencilStateDescription Methods Equals(DepthStencilStateDescription) Returns a hash code for this instance. Declaration public bool Equals(DepthStencilStateDescription other) Parameters Type Name Description DepthStencilStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() SetDefault() Default DephtStencilStateDescription values. Declaration public void SetDefault() Operators operator ==(DepthStencilStateDescription, DepthStencilStateDescription) Implements the operator ==. Declaration public static bool operator ==(DepthStencilStateDescription value1, DepthStencilStateDescription value2) Parameters Type Name Description DepthStencilStateDescription value1 The value1. DepthStencilStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(DepthStencilStateDescription, DepthStencilStateDescription) Implements the operator ==. Declaration public static bool operator !=(DepthStencilStateDescription value1, DepthStencilStateDescription value2) Parameters Type Name Description DepthStencilStateDescription value1 The value1. DepthStencilStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.DepthStencilStateEnum.html": {
    "href": "api/Evergine.Common.Graphics.DepthStencilStateEnum.html",
    "title": "Enum DepthStencilStateEnum | Evergine Doc",
    "keywords": "Enum DepthStencilStateEnum The depth stencil state default values. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum DepthStencilStateEnum : byte Fields Name Description Custom Custom value None Depth disable Read Depth enable but writemask zero. ReadAndWrite Depth enable and writemask enable. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.DepthStencilStates.html": {
    "href": "api/Evergine.Common.Graphics.DepthStencilStates.html",
    "title": "Class DepthStencilStates | Evergine Doc",
    "keywords": "Class DepthStencilStates Default known values for DepthStencilStateDescription. Inheritance object DepthStencilStates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class DepthStencilStates Fields None Depth disable. Declaration public static readonly DepthStencilStateDescription None Field Value Type Description DepthStencilStateDescription Read Depth enable but writemask zero. Declaration public static readonly DepthStencilStateDescription Read Field Value Type Description DepthStencilStateDescription ReadWrite Depth enable and writemask enable. Declaration public static readonly DepthStencilStateDescription ReadWrite Field Value Type Description DepthStencilStateDescription"
  },
  "api/Evergine.Common.Graphics.DirectionalLightStruct.html": {
    "href": "api/Evergine.Common.Graphics.DirectionalLightStruct.html",
    "title": "Struct DirectionalLightStruct | Evergine Doc",
    "keywords": "Struct DirectionalLightStruct Struct with aligned data for sending a directional light to the shader. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct DirectionalLightStruct Fields Color Light diffuse color. Declaration public Vector3 Color Field Value Type Description Vector3 Direction Light direction. Declaration public Vector3 Direction Field Value Type Description Vector3 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ElementDescription.html": {
    "href": "api/Evergine.Common.Graphics.ElementDescription.html",
    "title": "Struct ElementDescription | Evergine Doc",
    "keywords": "Struct ElementDescription Describes an individual component of a vertex. Implements IEquatable<ElementDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct ElementDescription : IEquatable<ElementDescription> Constructors ElementDescription(ElementFormat, ElementSemanticType, uint, int) Initializes a new instance of the ElementDescription struct. Declaration public ElementDescription(ElementFormat format, ElementSemanticType semanticType, uint semanticIndex = 0, int offset = -1) Parameters Type Name Description ElementFormat format The element format, ElementFormat. ElementSemanticType semanticType The element semantic, ElementSemanticType. uint semanticIndex The semantic index for this element. int offset The element offset. Fields AppendAligned Use secuential offset. Declaration public const int AppendAligned = -1 Field Value Type Description int Format Gets the format of the element. Declaration public ElementFormat Format Field Value Type Description ElementFormat Offset Gets the offset of the element. Declaration public int Offset Field Value Type Description int Semantic Gets the type of the element. Declaration public ElementSemanticType Semantic Field Value Type Description ElementSemanticType SemanticIndex Gets the semantic index of this element. Declaration public uint SemanticIndex Field Value Type Description uint Methods Equals(ElementDescription) Returns a hash code for this instance. Declaration public bool Equals(ElementDescription other) Parameters Type Name Description ElementDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Read(BinaryReader) Read ElementDescription from binary file. Declaration public static ElementDescription Read(BinaryReader reader) Parameters Type Name Description BinaryReader reader The binary reader. Returns Type Description ElementDescription The readed ElementDescription. Write(BinaryWriter) Write ElementDescription into binary file. Declaration public void Write(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer The binary writer. Operators operator ==(ElementDescription, ElementDescription) Implements the operator ==. Declaration public static bool operator ==(ElementDescription value1, ElementDescription value2) Parameters Type Name Description ElementDescription value1 The value1. ElementDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(ElementDescription, ElementDescription) Implements the operator ==. Declaration public static bool operator !=(ElementDescription value1, ElementDescription value2) Parameters Type Name Description ElementDescription value1 The value1. ElementDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ElementFormat.html": {
    "href": "api/Evergine.Common.Graphics.ElementFormat.html",
    "title": "Enum ElementFormat | Evergine Doc",
    "keywords": "Enum ElementFormat Vertex element format. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ElementFormat Fields Name Description Byte One signed 8-bit value. Byte2 Two signed 8-bits values. Byte2Normalized Two signed normalized 8-bit values. Byte3 Three signed 8-bit values. Byte3Normalized Three signed normalized 8-bit values. Byte4 Four signed 8-bit values. Byte4Normalized Four signed normalized 8-bit values. ByteNormalized One signed normalized 8-bit value. Float A single-component, 32-bit floating-point format that supports 32 bits for the red channel. Float2 A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel. Float3 A three-component, 96-bit floating-point format that supports 32 bits per color channel. Float4 A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. Half One half-precision floating-point value. Half2 Two half-precision floating-point value. Half3 Three half-precision floating-point value. Half4 Four half-precision floating-point value. Int One signed 32-bit integer value. Int2 Two signed 32-bit integer values. Int3 Three signed 32-bit integer values. Int4 Four signed 32-bit integer values. Short One signed 16-bit value. Short2 Two signed 16-bit values. Short2Normalized Two signed normalized 16-bit values. Short3 Three signed 16-bit values. Short3Normalized Three signed normalized 16-bit values. Short4 Four signed 16-bit values. Short4Normalized Four signed normalized 16-bit values. ShortNormalized One signed normalized 16-bit value. UByte One unsigned 8-bit value. UByte2 Two unsigned 8-bit values. UByte2Normalized Two unsigned normalized 8-bit values. UByte3 Three unsigned 8-bit values. UByte3Normalized Three unsigned normalized 8-bit values. UByte4 Four unsigned 8-bit values. UByte4Normalized Four unsigned normalized 8-bit values. UByteNormalized One unsigned normalized 8-bit value. UInt One unsigned 32-bit integer values. UInt2 Two unsigned 32-bit integer values. UInt3 Three unsigned 32-bit integer values. UInt4 Four unsigned 32-bit integer values. UShort One unsigned 16-bit value. UShort2 Two unsigned 16-bit values. UShort2Normalized Two unsigned normalized 16-bit values. UShort3 Three unsigned 16-bit values. UShort3Normalized Three unsigned normalized 16-bit values. UShort4 Four unsigned 16-bit values. UShort4Normalized Four unsigned normalized 16-bit values. UShortNormalized One unsigned normalized 16-bit value. Extension Methods DX11ExtensionsMethods.ToDirectX(ElementFormat) DX12ExtensionsMethods.ToDirectX(ElementFormat) VKExtensionsMethods.ToVulkan(ElementFormat) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ElementSemanticType.html": {
    "href": "api/Evergine.Common.Graphics.ElementSemanticType.html",
    "title": "Enum ElementSemanticType | Evergine Doc",
    "keywords": "Enum ElementSemanticType The semantic meaning of a vertex element. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ElementSemanticType : byte Fields Name Description Binormal Describe a binormal vector. BlendIndices Blend indices BlendWeight Blend weights Color Describe a color. Count Auxiliar value to count all semantics Normal Describes a normal vector. Position Describes a position. Tangent Describes a tangent vector. TexCoord Describes a texture coordinate. Extension Methods DX11ExtensionsMethods.ToHLSLSemantic(ElementSemanticType) DX12ExtensionsMethods.ToHLSLSemantic(ElementSemanticType) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ErrorMessage.html": {
    "href": "api/Evergine.Common.Graphics.ErrorMessage.html",
    "title": "Class ErrorMessage | Evergine Doc",
    "keywords": "Class ErrorMessage Class that contains an error message. Inheritance object ErrorMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class ErrorMessage Properties Message Gets or sets the error message. Declaration public string Message { get; set; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ExtensionMethods.html": {
    "href": "api/Evergine.Common.Graphics.ExtensionMethods.html",
    "title": "Class ExtensionMethods | Evergine Doc",
    "keywords": "Class ExtensionMethods Extension Methods. Inheritance object ExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class ExtensionMethods Methods GetSizeInBits(PixelFormat) Get Format size in bits (8 bits = byte). Declaration public static uint GetSizeInBits(this PixelFormat format) Parameters Type Name Description PixelFormat format Pixel format. Returns Type Description uint Size in bits. IsGammaColorSpaceFormat(PixelFormat) Indicates if this format is in Gamma Color Scapce. Declaration public static bool IsGammaColorSpaceFormat(this PixelFormat format) Parameters Type Name Description PixelFormat format Pixel format. Returns Type Description bool Is in gamma space."
  },
  "api/Evergine.Common.Graphics.FillMode.html": {
    "href": "api/Evergine.Common.Graphics.FillMode.html",
    "title": "Enum FillMode | Evergine Doc",
    "keywords": "Enum FillMode Primitive fill mode. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum FillMode : byte Fields Name Description Solid Fill the triangles formed by the vertices. Adjacent vertices are not drawn. Wireframe Draw lines connecting the vertices. Adjacent vertices are not drawn. Extension Methods VKExtensionsMethods.ToVulkan(FillMode) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.FlipMode.html": {
    "href": "api/Evergine.Common.Graphics.FlipMode.html",
    "title": "Enum FlipMode | Evergine Doc",
    "keywords": "Enum FlipMode Indicates the flip mode of a sprite, billboard, etc... Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum FlipMode : byte Fields Name Description FlipHorizontally Horizontal flip. FlipVertically Vertical flip. None No flip. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.FrameBuffer.html": {
    "href": "api/Evergine.Common.Graphics.FrameBuffer.html",
    "title": "Class FrameBuffer | Evergine Doc",
    "keywords": "Class FrameBuffer This class represent which color texture and depth texture are rendered to present. Inheritance object FrameBuffer DX11FrameBuffer DX12FrameBuffer DX12SwapChainFrameBuffer MTLFrameBuffer MTLSwapChainFrameBuffer GLFrameBuffer GLSwapChainFrameBuffer VKFrameBufferBase Implements ILoadable IDisposable IDependencyObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class FrameBuffer : ILoadable, IDisposable, IDependencyObject Constructors FrameBuffer() Initializes a new instance of the FrameBuffer class. Declaration public FrameBuffer() FrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the FrameBuffer class. Declaration public FrameBuffer(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth texture which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color textures, all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Fields disposeAttachments A value indicating whether we need to dispose attachment textures when this framebuffer is disposed. Declaration protected bool disposeAttachments Field Value Type Description bool disposed Holds if the instance has been disposed. Declaration protected bool disposed Field Value Type Description bool requireFlipProjection Inticates if this FrameBuffer requires the projection matrix to be flipped. Declaration protected bool requireFlipProjection Field Value Type Description bool Properties ArraySize Gets or sets the array size of the FrameBuffer. Declaration public uint ArraySize { get; protected set; } Property Value Type Description uint ColorTargets Gets or sets the collection of colors targets textures associated with this FrameBuffer. Declaration public virtual FrameBufferAttachment[] ColorTargets { get; protected set; } Property Value Type Description FrameBufferAttachment[] Dependencies Gets the dependency list. Declaration public Lazy<List<IDependencyLink>> Dependencies { get; } Property Value Type Description Lazy<List<IDependencyLink>> DepthStencilTarget Gets or sets the depth targets texture associated with this FrameBuffer. Declaration public virtual FrameBufferAttachment? DepthStencilTarget { get; protected set; } Property Value Type Description FrameBufferAttachment? Height Gets or sets the height in pixels of the FrameBuffer. Declaration public uint Height { get; protected set; } Property Value Type Description uint Id Gets or sets the asset Id. Declaration public Guid Id { get; set; } Property Value Type Description Guid IntermediateBufferAssociated Gets or sets a value indicating whether the framebuffer is associates to a swapchain. Declaration public bool IntermediateBufferAssociated { get; set; } Property Value Type Description bool Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string OutputDescription Gets or sets an OutputDescription which describes the number and formats of the depth and colors targets. Declaration public OutputDescription OutputDescription { get; protected set; } Property Value Type Description OutputDescription ReaderVersion Gets the reader version. Declaration public Version ReaderVersion { get; } Property Value Type Description Version RequireFlipProjection Gets or sets a value indicating whether this FrameBuffer requires the projection matrix to be flipped. By default they will indicate the default flip behavior, but the user can change it. Declaration public virtual bool RequireFlipProjection { get; set; } Property Value Type Description bool SampleCount Gets or sets the sample count of the FrameBuffer. Declaration public TextureSampleCount SampleCount { get; protected set; } Property Value Type Description TextureSampleCount Width Gets or sets the width in pixels of the FrameBuffer. Declaration public uint Width { get; protected set; } Property Value Type Description uint Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Invalidate(ILoadable) Invalidates this instance and raise the Invalidated event with the new ILoadable instance. Declaration public void Invalidate(ILoadable newInstance) Parameters Type Name Description ILoadable newInstance The new ILoadable instance. ReleaseUnusedMemory() Release unused memory. Declaration public void ReleaseUnusedMemory() Events Invalidated Occurs when this instance has been invalidated and all references must be reloaded. Declaration public event EventHandler<ILoadable> Invalidated Event Type Type Description EventHandler<ILoadable> Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.FrameBufferAttachment.html": {
    "href": "api/Evergine.Common.Graphics.FrameBufferAttachment.html",
    "title": "Struct FrameBufferAttachment | Evergine Doc",
    "keywords": "Struct FrameBufferAttachment Contains properties that describe a framebuffer texture attachment description. Implements IEquatable<FrameBufferAttachment> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct FrameBufferAttachment : IEquatable<FrameBufferAttachment> Constructors FrameBufferAttachment(Texture, Texture) Initializes a new instance of the FrameBufferAttachment struct. Declaration public FrameBufferAttachment(Texture attachedTexture, Texture resolvedTexture) Parameters Type Name Description Texture attachedTexture The attachment texture. Texture resolvedTexture The resolved texture. FrameBufferAttachment(Texture, uint, Texture, uint, uint, uint) Initializes a new instance of the FrameBufferAttachment struct. Declaration public FrameBufferAttachment(Texture attachedTexture, uint attachedFirstSlice, Texture resolvedTexture, uint resolvedFirstSlice, uint sliceCount, uint mipLevel) Parameters Type Name Description Texture attachedTexture The attachment texture. uint attachedFirstSlice the first slice. Texture resolvedTexture The resolved texture. uint resolvedFirstSlice the first slice on the resolved texture. uint sliceCount The slice count on the resolved texture. uint mipLevel The selected mipLevel on the resolved texture. FrameBufferAttachment(Texture, uint, uint, uint) Initializes a new instance of the FrameBufferAttachment struct. Declaration public FrameBufferAttachment(Texture attachedTexture, uint firstSlice, uint sliceCount, uint mipLevel = 0) Parameters Type Name Description Texture attachedTexture The attachment texture. uint firstSlice the first slice. uint sliceCount The slice count. uint mipLevel The selected mipLevel. FrameBufferAttachment(Texture, uint, uint, uint, uint) Initializes a new instance of the FrameBufferAttachment struct. Declaration public FrameBufferAttachment(Texture attachedTexture, uint arrayIndex, uint faceIndex, uint sliceCount, uint mipLevel) Parameters Type Name Description Texture attachedTexture The attachment texture. uint arrayIndex The array index to compute the specify slide inside the texture. uint faceIndex The face index to compute the specify slide inside the texture. uint sliceCount The slice count. uint mipLevel The selected mipLevel. Fields AttachedFirstSlice The selected array slice. Declaration public uint AttachedFirstSlice Field Value Type Description uint AttachmentTexture The attachment texture. This is the texture used by the framebuffer as attachment. Declaration public Texture AttachmentTexture Field Value Type Description Texture Remarks If this texture has MSAA enabled, you could set the ResolvedTexture field with a non MSAA texture. After the EndRenderPass, this texture will be resolved into this. MipSlice The selected MipLevel. Declaration public uint MipSlice Field Value Type Description uint ResolvedFirstSlice The selected array slice. Declaration public uint ResolvedFirstSlice Field Value Type Description uint ResolvedTexture The resolved texture. If the source texture has MSAA enabled, in the EndRenderPass this texture is resolved into this texture. Declaration public Texture ResolvedTexture Field Value Type Description Texture SliceCount The number of slices to attach. Declaration public uint SliceCount Field Value Type Description uint Properties FirstSlice Gets the selected array slice of the texture used as a shader resource. Declaration public uint FirstSlice { get; } Property Value Type Description uint Texture Gets the texture used as a shader resource. Declaration public Texture Texture { get; } Property Value Type Description Texture Methods Equals(FrameBufferAttachment) Determines whether the specified parameter is equal to this instance. Declaration public bool Equals(FrameBufferAttachment other) Parameters Type Name Description FrameBufferAttachment other Other used to compare. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(FrameBufferAttachment, FrameBufferAttachment) Implements the operator ==. Declaration public static bool operator ==(FrameBufferAttachment value1, FrameBufferAttachment value2) Parameters Type Name Description FrameBufferAttachment value1 The value1. FrameBufferAttachment value2 The value2. Returns Type Description bool The result of the operator. operator !=(FrameBufferAttachment, FrameBufferAttachment) Implements the operator ==. Declaration public static bool operator !=(FrameBufferAttachment value1, FrameBufferAttachment value2) Parameters Type Name Description FrameBufferAttachment value1 The value1. FrameBufferAttachment value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GammaColor.html": {
    "href": "api/Evergine.Common.Graphics.GammaColor.html",
    "title": "Struct GammaColor | Evergine Doc",
    "keywords": "Struct GammaColor Represents a 32-bit color in Gamma space. Implements IEquatable<GammaColor> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct GammaColor : IEquatable<GammaColor> Constructors GammaColor(ref Color) Initializes a new instance of the GammaColor struct. Declaration public GammaColor(ref Color color) Parameters Type Name Description Color color The Color instance in sRGB space. GammaColor(Vector3) Initializes a new instance of the GammaColor struct. Declaration public GammaColor(Vector3 vector) Parameters Type Name Description Vector3 vector Vector3 with the color data. GammaColor(Vector4) Initializes a new instance of the GammaColor struct. Declaration public GammaColor(Vector4 vector) Parameters Type Name Description Vector4 vector Vector4 with the color data. GammaColor(float, float, float, float) Initializes a new instance of the GammaColor struct. Declaration public GammaColor(float r, float g, float b, float a = 1) Parameters Type Name Description float r The r color component in linear space. float g The g color component in linear space. float b The b color component in linear space. float a The a color component in linear space. Fields A The w coordinate of this GammaColor. Declaration public float A Field Value Type Description float AsVector3 The linear color converted to Vector3. Declaration public Vector3 AsVector3 Field Value Type Description Vector3 AsVector4 The linear color converted to Vector4. Declaration public Vector4 AsVector4 Field Value Type Description Vector4 B The z coordinate of this GammaColor. Declaration public float B Field Value Type Description float G The y coordinate of this GammaColor. Declaration public float G Field Value Type Description float R The x coordinate of this GammaColor. Declaration public float R Field Value Type Description float Methods Equals(GammaColor) Declaration public bool Equals(GammaColor other) Parameters Type Name Description GammaColor other Returns Type Description bool Equals(ref GammaColor) Indicates whether this instance and a specified GammaColor are equal. Declaration public bool Equals(ref GammaColor other) Parameters Type Name Description GammaColor other The vector to compare with the current instance. Returns Type Description bool true if other and this instance are the same type and represent the same value; otherwise, false. Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToLinear(out LinearColor) Convert to Linear color space. Declaration public void ToLinear(out LinearColor linearColor) Parameters Type Name Description LinearColor linearColor The converted linear color. ToSRGB(out GammaColor) Convert to sRGB color space. Declaration public void ToSRGB(out GammaColor sRGBColor) Parameters Type Name Description GammaColor sRGBColor The converted sRGB color. ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsBackend.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsBackend.html",
    "title": "Enum GraphicsBackend | Evergine Doc",
    "keywords": "Enum GraphicsBackend The specify graphics low level API used by the GraphicsContext. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum GraphicsBackend : byte Fields Name Description DirectX11 DirectX 11 DirectX12 DirectX 12 Metal Metal 2.0 OpenGL OpenGL 4 OpenGLES OpenGL ES 3.0 Vulkan Vulkan 1.1 WebGL1 WebGL 1.0 WebGL2 WebGL 2.0 WebGPU WebGPU 1.0 Extension Methods OpenVRHelper.ToTextureType(GraphicsBackend) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsContext.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsContext.html",
    "title": "Class GraphicsContext | Evergine Doc",
    "keywords": "Class GraphicsContext Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders. Inheritance object GraphicsContext DX11GraphicsContext DX12GraphicsContext MTLGraphicsContext GLGraphicsContext VKGraphicsContext Implements IDisposable IGetNativePointers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class GraphicsContext : IDisposable, IGetNativePointers Fields TimestampFrequency the rate at which the GPU timestamp counter increments. Declaration public ulong TimestampFrequency Field Value Type Description ulong Properties AvailablePointerKeys Gets a list of all available keys to obtain native pointers. Declaration public virtual IEnumerable<string> AvailablePointerKeys { get; } Property Value Type Description IEnumerable<string> BackendType Gets the backend type (DirectX, OpenGL ...) Declaration public abstract GraphicsBackend BackendType { get; } Property Value Type Description GraphicsBackend Capabilities Gets the capabilities of this graphics context. Declaration public abstract GraphicsContextCapabilities Capabilities { get; } Property Value Type Description GraphicsContextCapabilities DefaultBufferUploaderSize Gets or sets a value indicating the size in bytes of the buffer uploader. Declaration public ulong DefaultBufferUploaderSize { get; set; } Property Value Type Description ulong Remarks To upload buffers and Texture efficiently to dedicate GPU memory first a big buffer is created on shared GPU memory, before to use this buffers and texture, a parallel copyqueue execute all the copy command at once. The initial size of this uploaders is defined by this property, The Default value is (256 * 1024 * 1024). DefaultSampler Gets the default Sampler state used when there is a missing sampler in a resource set. Declaration public SamplerState DefaultSampler { get; } Property Value Type Description SamplerState DefaultTextureUploaderSize Gets or sets a value indicating the size in bytes of the texture uploader. Declaration public ulong DefaultTextureUploaderSize { get; set; } Property Value Type Description ulong Remarks To upload buffers and Texture efficiently to dedicate GPU memory first a big buffer is created on shared GPU memory, before to use this buffers and texture, a parallel copyqueue execute all the copy command at once. The initial size of this uploaders is defined by this property, The Default value is (256 * 1024 * 1024). Factory Gets or sets the resource factory. Declaration public ResourceFactory Factory { get; protected set; } Property Value Type Description ResourceFactory IsValidationLayerEnabled Gets a value indicating whether validationlayer is enable or disable. Declaration public bool IsValidationLayerEnabled { get; } Property Value Type Description bool NativeDevicePointer Gets the native device pointer. Declaration public abstract IntPtr NativeDevicePointer { get; } Property Value Type Description IntPtr ValidationLayer Gets the graphics validation layer pointer. Declaration public ValidationLayer ValidationLayer { get; } Property Value Type Description ValidationLayer Methods CreateDefaultSampler() Create the default sampler. Declaration protected virtual void CreateDefaultSampler() CreateDevice(ValidationLayer) Initialize the graphics context to be used in a compute shader. Declaration public void CreateDevice(ValidationLayer validationLayer = null) Parameters Type Name Description ValidationLayer validationLayer Whether the validation layer is active or not. CreateDeviceInternal() Initialize the graphics context to be used in a compute shader. Declaration public abstract void CreateDeviceInternal() CreateSwapChain(SwapChainDescription) Initialize the swapchain. Declaration public abstract SwapChain CreateSwapChain(SwapChainDescription description) Parameters Type Name Description SwapChainDescription description The swapchain descriptor. Returns Type Description SwapChain Created Swapchain. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. GenerateTextureMipmapping(Texture) Generate mipmapping texture levels. Declaration public abstract bool GenerateTextureMipmapping(Texture texture) Parameters Type Name Description Texture texture The texture to generate mipmapping. Returns Type Description bool True if the mipmapping has been generated. GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration public virtual bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. InternalUpdateBufferData(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected abstract void InternalUpdateBufferData(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. MapMemory(GraphicsResource, MapMode, uint) Maps a Buffer or Texture into a CPU-accessible data region. Declaration public abstract MappedResource MapMemory(GraphicsResource resource, MapMode mode, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. MapMode mode The MapMode used to map the resource. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Returns Type Description MappedResource A MappedResource structure describing the mapped data region. ShaderCompile(string, string, ShaderStages) Converts the shader source into bytecode. Declaration public CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. Returns Type Description CompilationResult The shader bytecodes. ShaderCompile(string, string, ShaderStages, CompilerParameters) Converts the shader source into bytecode. Declaration public abstract CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader bytecodes. SyncUpcopyQueue() Sync the current buffer data in the copyQueue. Internal function used in the uploadbuffer strategy. Declaration public virtual void SyncUpcopyQueue() UnmapMemory(GraphicsResource, uint) Invalidates a previously-mapped data region for the given Buffer or Texture. Declaration public abstract void UnmapMemory(GraphicsResource resource, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. UpdateBufferData(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void UpdateBufferData(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. UpdateBufferData<T>(Buffer, ref T, uint) Fill the buffer with a data array. Declaration public void UpdateBufferData<T>(Buffer buffer, ref T data, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Buffer buffer Buffer instance. T data The data array. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateBufferData<T>(Buffer, T[], uint) Fill the buffer with a data array. Declaration public void UpdateBufferData<T>(Buffer buffer, T[] data, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Buffer buffer Buffer instance. T[] data The data array. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateBufferData<T>(Buffer, T[], uint, uint) Fill the buffer with a data array. Declaration public void UpdateBufferData<T>(Buffer buffer, T[] data, uint count, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Buffer buffer Buffer instance. T[] data The data array. uint count The number of elements. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateTextureData(Texture, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public abstract void UpdateTextureData(Texture texture, IntPtr source, uint sourceSizeInBytes, uint subResource) Parameters Type Name Description Texture texture Texture instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subResource index. UpdateTextureData<T>(Texture, ref T, uint) Fill the buffer with a data array. Declaration public void UpdateTextureData<T>(Texture texture, ref T data, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Texture texture Texture instance. T data The data array. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateTextureData<T>(Texture, T[], uint) Fill the buffer with a data array. Declaration public void UpdateTextureData<T>(Texture texture, T[] data, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Texture texture Texture instance. T[] data The data array. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. UpdateTextureData<T>(Texture, T[], uint, uint) Fill the buffer with a data array. Declaration public void UpdateTextureData<T>(Texture texture, T[] data, uint count, uint destinationOffsetInBytes = 0) where T : struct Parameters Type Name Description Texture texture Texture instance. T[] data The data array. uint count The number of elements. uint destinationOffsetInBytes The destination offset. Type Parameters Name Description T The data type. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsContextCapabilities.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsContextCapabilities.html",
    "title": "Class GraphicsContextCapabilities | Evergine Doc",
    "keywords": "Class GraphicsContextCapabilities Abstract class that offers the capabilities of the graphics context. Inheritance object GraphicsContextCapabilities DX11Capabilities DX12Capabilities MTLCapabilities GLCapabilities VKCapabilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class GraphicsContextCapabilities Properties ClipDepth Gets the depth range in clip space. Declaration public abstract ClipDepth ClipDepth { get; } Property Value Type Description ClipDepth FlipProjectionRequired Gets a value indicating whether we need to flip projection matrix on Render Target. Declaration public abstract bool FlipProjectionRequired { get; } Property Value Type Description bool IsComputeShaderSupported Gets a value indicating whether this graphics context support compute shaders. Declaration public abstract bool IsComputeShaderSupported { get; } Property Value Type Description bool IsMRTSupported Gets a value indicating whether this graphics context supports Multi Render Target (MRT). Declaration public abstract bool IsMRTSupported { get; } Property Value Type Description bool IsRaytracingSupported Gets a value indicating whether this graphics context supports Raytracing. Declaration public abstract bool IsRaytracingSupported { get; } Property Value Type Description bool IsShadowMapSupported Gets a value indicating whether this graphics context supports Shadow Maps. Declaration public abstract bool IsShadowMapSupported { get; } Property Value Type Description bool MatrixMajorness Gets a value indicating whether this graphics context uses row major matrices by default. Declaration public abstract MatrixMajorness MatrixMajorness { get; } Property Value Type Description MatrixMajorness MultiviewStrategy Gets the multiview strategy supported by this graphic context. Declaration public abstract MultiviewStrategy MultiviewStrategy { get; } Property Value Type Description MultiviewStrategy Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsPipelineDescription.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsPipelineDescription.html",
    "title": "Struct GraphicsPipelineDescription | Evergine Doc",
    "keywords": "Struct GraphicsPipelineDescription Contains properties that describe the characteristics of a new pipeline state object. Implements IEquatable<GraphicsPipelineDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct GraphicsPipelineDescription : IEquatable<GraphicsPipelineDescription> Constructors GraphicsPipelineDescription(PrimitiveTopology, InputLayouts, ResourceLayout[], GraphicsShaderStateDescription, RenderStateDescription, OutputDescription) Initializes a new instance of the GraphicsPipelineDescription struct. Declaration public GraphicsPipelineDescription(PrimitiveTopology primitiveTopology, InputLayouts inputLayouts, ResourceLayout[] resourceLayouts, GraphicsShaderStateDescription shaders, RenderStateDescription renderStates, OutputDescription outputs) Parameters Type Name Description PrimitiveTopology primitiveTopology Define how vertices are interpreted and rendered by the pipeline. InputLayouts inputLayouts Describes the input vertex buffer data. ResourceLayout[] resourceLayouts The resource layouts array. GraphicsShaderStateDescription shaders The shader state description. RenderStateDescription renderStates The render state description. OutputDescription outputs Description of the output attachments. Fields InputLayouts Describes the input vertex buffer data. Declaration public InputLayouts InputLayouts Field Value Type Description InputLayouts Outputs A description of the output attachments used by the GraphicsPipelineState. Declaration public OutputDescription Outputs Field Value Type Description OutputDescription PrimitiveTopology Define how vertices are interpreted and rendered by the pipeline. Declaration public PrimitiveTopology PrimitiveTopology Field Value Type Description PrimitiveTopology RenderStates The render state description. Declaration public RenderStateDescription RenderStates Field Value Type Description RenderStateDescription ResourceLayouts Describes the resource layouts input array. Declaration public ResourceLayout[] ResourceLayouts Field Value Type Description ResourceLayout[] Shaders The shader state description. Declaration public GraphicsShaderStateDescription Shaders Field Value Type Description GraphicsShaderStateDescription Methods Equals(GraphicsPipelineDescription) Returns a hash code for this instance. Declaration public bool Equals(GraphicsPipelineDescription other) Parameters Type Name Description GraphicsPipelineDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(GraphicsPipelineDescription, GraphicsPipelineDescription) Implements the operator ==. Declaration public static bool operator ==(GraphicsPipelineDescription value1, GraphicsPipelineDescription value2) Parameters Type Name Description GraphicsPipelineDescription value1 The value1. GraphicsPipelineDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(GraphicsPipelineDescription, GraphicsPipelineDescription) Implements the operator ==. Declaration public static bool operator !=(GraphicsPipelineDescription value1, GraphicsPipelineDescription value2) Parameters Type Name Description GraphicsPipelineDescription value1 The value1. GraphicsPipelineDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsPipelineState.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsPipelineState.html",
    "title": "Class GraphicsPipelineState | Evergine Doc",
    "keywords": "Class GraphicsPipelineState This class represent the GPU graphics pipeline. Inheritance object PipelineState GraphicsPipelineState DX11GraphicsPipelineState DX12GraphicsPipelineState MTLGraphicsPipelineState GLGraphicsPipelineState VKGraphicsPipelineState Implements IDisposable Inherited Members PipelineState.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class GraphicsPipelineState : PipelineState, IDisposable Constructors GraphicsPipelineState(ref GraphicsPipelineDescription) Initializes a new instance of the GraphicsPipelineState class. Declaration protected GraphicsPipelineState(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The pipelineState description. Fields Description Gets the graphics pipelinestate description. Declaration public readonly GraphicsPipelineDescription Description Field Value Type Description GraphicsPipelineDescription InvalidatedViewport Invalidates the current viewport. Declaration public bool InvalidatedViewport Field Value Type Description bool Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsProfile.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsProfile.html",
    "title": "Enum GraphicsProfile | Evergine Doc",
    "keywords": "Enum GraphicsProfile Identifies the set of device capabilities. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum GraphicsProfile : byte Fields Name Description Level_10_0 DirectX 10 HLSL 4.0 | OpenGL ES 3.0 (Default) Level_10_1 DirectX 10.1 HLSL 4.1 | OpenGL ES 3.0 Level_11_0 DirectX 11 HLSL 5.0 | OpenGL ES 3.1 | OpenGL 4.0 Level_11_1 DirectX 11 HLSL 5.0 | OpenGL ES 3.1 | OpenGL 4.0 Level_12_0 DirectX 12 HLSL 6.0 | OpenGL 4.0 Level_12_1 DirectX 12 HLSL 6.1 | OpenGL 4.0 Level_12_3 DirectX12 HLSL 6.3 (Raytracing) Level_9_1 DirectX 9.1 HLSL 3.0 | OpenGL ES 2.0 Level_9_2 DirectX 9.2 HLSL 3.0 | OpenGL ES 2.0 Level_9_3 DirectX 9.3 HLSL 3.0 | OpenGL ES 2.0 Extension Methods DX11ExtensionsMethods.ToDirectX(GraphicsProfile) DX12ExtensionsMethods.ToDirectX(GraphicsProfile) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsResource.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsResource.html",
    "title": "Class GraphicsResource | Evergine Doc",
    "keywords": "Class GraphicsResource A resource interface provides common actions on all resources. Inheritance object GraphicsResource Buffer QueryHeap BottomLevelAS TopLevelAS SamplerState Shader Texture Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class GraphicsResource : IDisposable Constructors GraphicsResource(GraphicsContext) Initializes a new instance of the GraphicsResource class. Declaration protected GraphicsResource(GraphicsContext context) Parameters Type Name Description GraphicsContext context The device context. Fields Context The device context reference. Declaration public GraphicsContext Context Field Value Type Description GraphicsContext disposed Holds if the instance has been disposed. Declaration protected bool disposed Field Value Type Description bool Properties Disposed Gets a value indicating whether the graphic resource has been disposed. Declaration public bool Disposed { get; } Property Value Type Description bool NativePointer Gets the native pointer. Declaration public abstract IntPtr NativePointer { get; } Property Value Type Description IntPtr Methods Dispose() Dispose this instance. Declaration public abstract void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.GraphicsShaderStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.GraphicsShaderStateDescription.html",
    "title": "Class GraphicsShaderStateDescription | Evergine Doc",
    "keywords": "Class GraphicsShaderStateDescription This struct contains all the shader stages. Inheritance object ShaderStateDescription GraphicsShaderStateDescription Implements IEquatable<ShaderStateDescription> IEquatable<GraphicsShaderStateDescription> Inherited Members ShaderStateDescription.constantBuffersBindings ShaderStateDescription.texturesBindings ShaderStateDescription.bufferParametersBinding ShaderStateDescription.Equals(ShaderStateDescription) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class GraphicsShaderStateDescription : ShaderStateDescription, IEquatable<ShaderStateDescription>, IEquatable<GraphicsShaderStateDescription> Fields DomainShader Gets or sets the domain shader program. Declaration public Shader DomainShader Field Value Type Description Shader GeometryShader Gets or sets the geometry shader program. Declaration public Shader GeometryShader Field Value Type Description Shader HullShader Gets or sets the hull shader program. Declaration public Shader HullShader Field Value Type Description Shader PixelShader Gets or sets the pixel shader program. Declaration public Shader PixelShader Field Value Type Description Shader ShaderInputLayout Represent a relationship between semantics and shader locations. Declaration public InputLayouts ShaderInputLayout Field Value Type Description InputLayouts VertexShader Gets or sets the vertex shader program. Declaration public Shader VertexShader Field Value Type Description Shader Methods Equals(GraphicsShaderStateDescription) Declaration public bool Equals(GraphicsShaderStateDescription other) Parameters Type Name Description GraphicsShaderStateDescription other Returns Type Description bool Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ShaderStateDescription.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ShaderStateDescription.GetHashCode() Implements IEquatable<T> IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Helpers.html": {
    "href": "api/Evergine.Common.Graphics.Helpers.html",
    "title": "Class Helpers | Evergine Doc",
    "keywords": "Class Helpers Miscellaneous helpers for graphic operations. Inheritance object Helpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class Helpers Methods AlignUp(uint) Align the size in bytes to nearest multiple of 256. Declaration public static uint AlignUp(uint sizeInBytes) Parameters Type Name Description uint sizeInBytes The size in bytes. Returns Type Description uint The aligned size. AlignUp(uint, uint) Align the size in bytes to nearest multiple of alignment value specified by parameter. Declaration public static uint AlignUp(uint alignment, uint sizeInBytes) Parameters Type Name Description uint alignment The alignment size. uint sizeInBytes The size in bytes. Returns Type Description uint The aligned size. AlignUp(uint, ulong) Align the size in bytes to nearest multiple of alignment value specified by parameter. Declaration public static ulong AlignUp(uint alignment, ulong sizeInBytes) Parameters Type Name Description uint alignment The alignment size. ulong sizeInBytes The size in bytes. Returns Type Description ulong The aligned size. ApplyAddressMode(ref float, TextureAddressMode) Transform the given value to conform to an specified TextureAddressMode. Declaration public static void ApplyAddressMode(ref float value, TextureAddressMode addressMode) Parameters Type Name Description float value The value to transform. TextureAddressMode addressMode The address mode. CalculateSubResource(TextureDescription, uint, uint) Calculates the sub resource index. Declaration public static uint CalculateSubResource(TextureDescription description, uint mipLevel, uint arrayLayer) Parameters Type Name Description TextureDescription description The texture description. uint mipLevel The mipmap level. uint arrayLayer The array layer index. Returns Type Description uint The id of the sub resource. CheckArrayCapacity<T>(ref T[], int) Ensures the size of the array. Declaration public static void CheckArrayCapacity<T>(ref T[] array, int size) Parameters Type Name Description T[] array The array. int size The size. Type Parameters Name Description T The type of the array items. ComputeLayerOffset(TextureDescription, uint) Computes the Layer offset. Declaration public static uint ComputeLayerOffset(TextureDescription description, uint arrayLayer) Parameters Type Name Description TextureDescription description The TextureDescription. uint arrayLayer The array layer. Returns Type Description uint The Layer offset. ComputeMipOffset(TextureDescription, uint) Computes the MipMap offset. Declaration public static uint ComputeMipOffset(TextureDescription description, uint mipLevel) Parameters Type Name Description TextureDescription description The TextureDescription. uint mipLevel The MipMap Level. Returns Type Description uint The mip offset. ComputeSubResourceOffset(TextureDescription, uint) Calculates the SubResource offset of a Texture. Declaration public static ulong ComputeSubResourceOffset(TextureDescription description, uint subResource) Parameters Type Name Description TextureDescription description The Texture description. uint subResource The SubResource index. Returns Type Description ulong The SubResource offset. ComputeTextureSize(TextureDescription) Computes the Texture Size in bytes of a Texture Description. Declaration public static uint ComputeTextureSize(TextureDescription description) Parameters Type Name Description TextureDescription description The Texture Description. Returns Type Description uint The size in bytes of the texture. EnsureArraySize<T>(ref T[], int) Ensures the size of the array. Declaration public static void EnsureArraySize<T>(ref T[] array, int size) Parameters Type Name Description T[] array The array. int size The size. Type Parameters Name Description T The type of the array items. GetBlockSizeInBytes(PixelFormat) Gets the size in bytes of a block. Declaration public static uint GetBlockSizeInBytes(PixelFormat format) Parameters Type Name Description PixelFormat format The pixel format. Returns Type Description uint The size in bytes. GetDimension(uint, uint) Gets the dimension size of a specified mip level. Declaration public static uint GetDimension(uint largestLevelDimension, uint mipLevel) Parameters Type Name Description uint largestLevelDimension The largest level dimension. uint mipLevel The mip level. Returns Type Description uint The dimension of the current mip level. GetMipDimensions(TextureDescription, uint, out uint, out uint, out uint) Gets the mip level dimensions. Declaration public static void GetMipDimensions(TextureDescription description, uint mipLevel, out uint width, out uint height, out uint depth) Parameters Type Name Description TextureDescription description The texture description. uint mipLevel The texture mip Level. uint width The texture width. uint height The texture height. uint depth The texture depth. GetMipLevelAndArrayLayer(TextureDescription, uint, out uint, out uint) Gets the Mip Level and the Array Layer of a texture sub resource. Declaration public static void GetMipLevelAndArrayLayer(TextureDescription description, uint subResource, out uint mipLevel, out uint arrayLayer) Parameters Type Name Description TextureDescription description The Texture Description. uint subResource The sub resource of the texture. uint mipLevel The Mip Level. uint arrayLayer The Array Layer. GetMipLevels(uint, uint) Gets the mip level dimensions. Declaration public static uint GetMipLevels(uint width, uint height) Parameters Type Name Description uint width Texture Width. uint height Texture Height. Returns Type Description uint Mip levels. GetNumRows(uint, PixelFormat) Gets the number of rows, depending of the height and the pixel format. Declaration public static uint GetNumRows(uint height, PixelFormat format) Parameters Type Name Description uint height The height. PixelFormat format The pixel format. Returns Type Description uint The number of rows. GetRegionSize(uint, uint, uint, PixelFormat) Gets the block size in bytes of a texture. Declaration public static uint GetRegionSize(uint width, uint height, uint depth, PixelFormat format) Parameters Type Name Description uint width The texture width. uint height The texture height. uint depth The texture depth. PixelFormat format The texture pixel format. Returns Type Description uint The size in bytes of the block region. GetRowPitch(uint, PixelFormat) Gets the size of a row with a specified size and format. Declaration public static uint GetRowPitch(uint width, PixelFormat format) Parameters Type Name Description uint width The row size. PixelFormat format The row PixelFormat. Returns Type Description uint The row pitch. GetSizeInBytes(PixelFormat) Gets the size in byte of a PixelFormat. Declaration public static uint GetSizeInBytes(PixelFormat format) Parameters Type Name Description PixelFormat format The PixelFormat. Returns Type Description uint The size in bytes of the format. GetSlicePitch(uint, uint, PixelFormat) Gets the slice pitch. Declaration public static uint GetSlicePitch(uint rowPitch, uint height, PixelFormat format) Parameters Type Name Description uint rowPitch The row pitch. uint height The height. PixelFormat format The pixel format. Returns Type Description uint The slice pitch. GetSubResourceInfo(TextureDescription, uint) Gets the sub resource info of a Texture. Declaration public static SubResourceInfo GetSubResourceInfo(TextureDescription description, uint subResource) Parameters Type Name Description TextureDescription description The texture info. uint subResource The subResource id. Returns Type Description SubResourceInfo The SubResource Info. IsCompressedFormat(PixelFormat) Returns a value indicating if the PixelFormat is a compressed one. Declaration public static bool IsCompressedFormat(PixelFormat format) Parameters Type Name Description PixelFormat format The pixel format. Returns Type Description bool True if the pixel format represents a compressed one. False otherwise. IsStencilFormat(PixelFormat) Gets a value indicating if the PixelFormat can be used as stencil pixel format. Declaration public static bool IsStencilFormat(PixelFormat format) Parameters Type Name Description PixelFormat format The pixel format. Returns Type Description bool True if the format can be used as stencil. False otherwise."
  },
  "api/Evergine.Common.Graphics.html": {
    "href": "api/Evergine.Common.Graphics.html",
    "title": "Namespace Evergine.Common.Graphics | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Graphics Classes ArrayHelpers Class containing useful methods for manipulating arrays. BlendStates Default known values for BlendStateDescription. Bone Represents a bone object from a model. Buffer This class represent a buffer resource. BufferParameterBinding This class represents a parameter property of a constant buffer. Used un WebGL1 and OpenGL ES 2.0. CommandBuffer A command buffer stores commands until the buffer is committed for execution by the GPU. CommandBuffers are transient single-use objects and do not support reuse. CommandQueue A pool of CommandBuffer(). ComputePipelineState This class represent the GPU graphics pipeline. ComputeShaderStateDescription This struct contains all the shader stages. DepthStencilStates Default known values for DepthStencilStateDescription. ErrorMessage Class that contains an error message. ExtensionMethods Extension Methods. FrameBuffer This class represent which color texture and depth texture are rendered to present. GraphicsContext Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders. GraphicsContextCapabilities Abstract class that offers the capabilities of the graphics context. GraphicsPipelineState This class represent the GPU graphics pipeline. GraphicsResource A resource interface provides common actions on all resources. GraphicsShaderStateDescription This struct contains all the shader stages. Helpers Miscellaneous helpers for graphic operations. InputLayouts This class represent contains the descriptions of vertex input layout. LayoutDescription A generic description of vertex inputs to the device's input assembler stage. This object describes the inputs from a single vertex buffer. PipelineState This class represent the GPU graphics pipeline. PrimitiveTopologyExtension Helper methods for primitive topology. PrimitiveTopologyExtensions Primitive topology extensions. QueryHeap This class represent a queryheap resource. RasterizerStates Default known values for RasterizerStateDescription. RenderLayerDescription The render layer description class. ResourceFactory This Factory allow create GPU device resources. ResourceLayout This class represent a set of bindable resources. ResourceSet This class describes the elements inside a ResourceLayout. SamplerState This class represent a sampler state. SamplerStates Describes a sampler state. Shader This class represent a single shader program. ShaderStagesHelpers Helpers for ShaderStages Enum. ShaderStateDescription Shader State Description. Surface Represent a control/widget on a WindowSystem. SwapChain SwapChain instance. Texture This class represent a Texture graphics resource. UploadBuffer This abstract class represent and strategy to fast upload buffers to GPU. ValidationLayer The graphics validation layer. Window Represent a Window on WindowSystem. WindowsSystem Represent a specify windows technology. Structs BlendStateDescription Describes the blend state. BlendStateRenderTargetDescription Describes the blend state. BufferDescription Contains properties that describe the characteristics of a new buffer object. ClearValue Structure specifying a clear value. Color Represents a 32-bit color. CompilationResult This struct represent the result of a compilation process in a shader. CompilerParameters This struct represent the parameters used by the shader compiler. ComputePipelineDescription Contains properties that describe the characteristics of a new pipeline state object. DataBox Provides access to data organized in 3D. DepthStencilOperationDescription Stencil operations that can be performed based on the results of stencil test. DepthStencilStateDescription Describes depth-stencil state. DirectionalLightStruct Struct with aligned data for sending a directional light to the shader. ElementDescription Describes an individual component of a vertex. FrameBufferAttachment Contains properties that describe a framebuffer texture attachment description. GammaColor Represents a 32-bit color in Gamma space. GraphicsPipelineDescription Contains properties that describe the characteristics of a new pipeline state object. IndirectDispatchArgs Struct representing an indirect dispatch of a Command Buffer. IndirectDrawArgsIndexedInstanced Struct containing the info of an indirect indexed and instanced draw call. IndirectDrawArgsInstanced The arguments of an instanced indirect draw call. LayoutElementDescription This class represent a shader resource binding;. LightStruct Struct with aligned data for sending a light to the shader. LinearColor Represents a 32-bit color in Linear Space. MappedResource The resource which has been mapped. OutputAttachmentDescription Contains properties that describe the characteristics of a new pipeline state object. OutputDescription Contains properties that describe the characteristics of a new pipeline state object. PointLightStruct Struct with aligned data for sending a point light to the shader. QueryHeapDescription Contains properties that describe the characteristics of a new queryheap object. RasterizerStateDescription Describes a rasterizer state. RenderPassDescription Structure specifying render pass begin info. RenderStateDescription This struct represent all the parameters in the render states. ResourceLayoutDescription This class describes the elements inside a ResourceLayout. ResourceSetDescription This class describes the elements inside a ResourceLayout. SamplerStateDescription Describes a sampler state. SemanticStruct Structs that contains information about the semantic type and index. ShaderDescription This struct represent all parameters requiered to create a new shader. ShaderMatrices Stores all the matrices needed by a shader. SpotLightStruct Struct with aligned data for sending a spot light to the shader. SubResourceInfo Struct containing the sub resource info. SurfaceInfo Surface info struct. SwapChainDescription Represents the requiered information to create a new swapchain depending of the platform. TextureDescription Describes a 2D texture. Viewport Abstracts a viewport used for defining rendering regions. Enums AddressMode Specifies texture addressing mode. AnisotropyLevel Specifies the level of anisotropic filtering. BillboardType Specifies a Billboard behavior. Blend Blend factors, which modulate values for the pixel shader and render target. BlendMode Specifies alpha blending mode. BlendOperation RGB or alpha blending operation. BlendStateEnum The blend state default values. BufferFlags Identifies how to bing a buffer. BufferParameterBinding.BufferParameterType The buffer parameter type. ClearFlags Specifies FrameBuffer clearing modes. ClipDepth Define the tipe of depth in the clip space depth. ColorWriteChannels Identify which components of each pixel of a render target are writable during blending. CommandBuffer.CommandBufferState Available states for a command buffer. CommandQueueType Specifies the elements type of a CommandQueue. ComparisonFunction Comparison options. CompilationMode An enum. CullMode Specifies polygon culling mode. DepthBias Specifies polygon depth boas. DepthMode Specifies depth reading/writing mode. DepthStencilStateEnum The depth stencil state default values. ElementFormat Vertex element format. ElementSemanticType The semantic meaning of a vertex element. FillMode Primitive fill mode. FlipMode Indicates the flip mode of a sprite, billboard, etc... GraphicsBackend The specify graphics low level API used by the GraphicsContext. GraphicsProfile Identifies the set of device capabilities. IndexFormat The index data format. MapMode Identifies how a graphics resource will be mapped into CPU address space. MatrixMajorness Indicates the majorness of the matrix in this backend. MultiviewStrategy Indicates the strategy supported to render multiple views. PixelFormat Pixel format type. PrimitiveTopology How the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen. QueryType Specifies the type of query. RasterizeStateEnum Enum of the rasterizer states. ResourceCpuAccess Specifies the types of CPU access allowed for a resource. ResourceType The shader resource type. ResourceUsage Identifies expected texture use during rendering. SamplerBorderColor Comparison options. SamplerStateEnum The sampler state default values. ShaderStages Specifies the usage of a resource in shaders. SortMode Specify the sort order. SpriteDrawMode Specifies texture addressing mode. StencilOperation The stencil operations that can be performed during depth-stencil testing. SurfaceInfo.SurfaceTypes Surface tecnologies. TextureAddressMode Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture. TextureFilter Filtering options during texture sampling. TextureFlags Identifies how to bing a texture. TextureOptionFlags Identifies expected texture use during rendering. TextureSampleCount Describes the number of samples to use in a Texture. TextureType Texture type. ValidationLayer.NotifyMethod The supported notify methods. ValidationLayer.Severity Severity enumerate. VertexElementUsage Specifies the vertex element usage. VertexStepFunction The frequency with which the vertex function fetches attributes data. Delegates ValidationLayer.NotifyAction The Notify delegate function."
  },
  "api/Evergine.Common.Graphics.IndexFormat.html": {
    "href": "api/Evergine.Common.Graphics.IndexFormat.html",
    "title": "Enum IndexFormat | Evergine Doc",
    "keywords": "Enum IndexFormat The index data format. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum IndexFormat : byte Fields Name Description UInt16 Unsigned 16 bits integer format. UInt32 Unsigned 32 bits integer format. Extension Methods DX11ExtensionsMethods.ToDirectX(IndexFormat) DX12ExtensionsMethods.ToDirectX(IndexFormat) VKExtensionsMethods.ToVulkan(IndexFormat) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.IndirectDispatchArgs.html": {
    "href": "api/Evergine.Common.Graphics.IndirectDispatchArgs.html",
    "title": "Struct IndirectDispatchArgs | Evergine Doc",
    "keywords": "Struct IndirectDispatchArgs Struct representing an indirect dispatch of a Command Buffer. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct IndirectDispatchArgs Constructors IndirectDispatchArgs(uint, uint, uint) Initializes a new instance of the IndirectDispatchArgs struct. Declaration public IndirectDispatchArgs(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) Parameters Type Name Description uint threadGroupCountX The thread group X size. uint threadGroupCountY The thread group Y size. uint threadGroupCountZ The thread group Z size. Fields ThreadGroupCountX The thread group X size. Declaration public uint ThreadGroupCountX Field Value Type Description uint ThreadGroupCountY The thread group Y size. Declaration public uint ThreadGroupCountY Field Value Type Description uint ThreadGroupCountZ The thread group Z size. Declaration public uint ThreadGroupCountZ Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.html": {
    "href": "api/Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.html",
    "title": "Struct IndirectDrawArgsIndexedInstanced | Evergine Doc",
    "keywords": "Struct IndirectDrawArgsIndexedInstanced Struct containing the info of an indirect indexed and instanced draw call. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct IndirectDrawArgsIndexedInstanced Constructors IndirectDrawArgsIndexedInstanced(uint, uint, uint, int, uint) Initializes a new instance of the IndirectDrawArgsIndexedInstanced struct. Declaration public IndirectDrawArgsIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation, int baseVertexLocation, uint startInstanceLocation) Parameters Type Name Description uint indexCountPerInstance The index count per instance. uint instanceCount The instance count. uint startIndexLocation The start index location. int baseVertexLocation The base vertex location. uint startInstanceLocation The start instance location. Fields BaseVertexLocation The base vertex location. Declaration public int BaseVertexLocation Field Value Type Description int IndexCountPerInstance The index count per instance. Declaration public uint IndexCountPerInstance Field Value Type Description uint InstanceCount The instance count. Declaration public uint InstanceCount Field Value Type Description uint StartIndexLocation The start index location. Declaration public uint StartIndexLocation Field Value Type Description uint StartInstanceLocation The start instance location. Declaration public uint StartInstanceLocation Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.IndirectDrawArgsInstanced.html": {
    "href": "api/Evergine.Common.Graphics.IndirectDrawArgsInstanced.html",
    "title": "Struct IndirectDrawArgsInstanced | Evergine Doc",
    "keywords": "Struct IndirectDrawArgsInstanced The arguments of an instanced indirect draw call. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct IndirectDrawArgsInstanced Constructors IndirectDrawArgsInstanced(uint, uint, uint, uint) Initializes a new instance of the IndirectDrawArgsInstanced struct. Declaration public IndirectDrawArgsInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation, uint startInstanceLocation) Parameters Type Name Description uint vertexCountPerInstance The vertex count per instance. uint instanceCount The instance count. uint startVertexLocation The start vertex location. uint startInstanceLocation The start instance location. Fields InstanceCount The instance count. Declaration public uint InstanceCount Field Value Type Description uint StartInstanceLocation The start instance location. Declaration public uint StartInstanceLocation Field Value Type Description uint StartVertexLocation The start vertex location. Declaration public uint StartVertexLocation Field Value Type Description uint VertexCountPerInstance The vertex count per instance. Declaration public uint VertexCountPerInstance Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.InputLayouts.html": {
    "href": "api/Evergine.Common.Graphics.InputLayouts.html",
    "title": "Class InputLayouts | Evergine Doc",
    "keywords": "Class InputLayouts This class represent contains the descriptions of vertex input layout. Inheritance object InputLayouts Implements IEquatable<InputLayouts> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class InputLayouts : IEquatable<InputLayouts> Constructors InputLayouts() Initializes a new instance of the InputLayouts class. Declaration public InputLayouts() Fields LayoutElements The vertex inputs elements. Declaration public List<LayoutDescription> LayoutElements Field Value Type Description List<LayoutDescription> Methods Add(LayoutDescription) Adds a new layout. Declaration public InputLayouts Add(LayoutDescription layout) Parameters Type Name Description LayoutDescription layout Layout description. Returns Type Description InputLayouts My own instance. Clean() Clean object. Declaration public void Clean() Equals(InputLayouts) Returns a hash code for this instance. Declaration public bool Equals(InputLayouts other) Parameters Type Name Description InputLayouts other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) FindLayoutElementByUsage(ElementSemanticType, int, out ElementDescription, out int) Finds an layout element description. by its usage semantic. Declaration public bool FindLayoutElementByUsage(ElementSemanticType semantic, int semanticIndex, out ElementDescription elementDescription, out int vertexBufferIndex) Parameters Type Name Description ElementSemanticType semantic The element semantic. int semanticIndex The semantic index. ElementDescription elementDescription The element description. int vertexBufferIndex The vertex buffer index. Returns Type Description bool True if the input layout contains an element with the specified semantic and index. False otherwise. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() IsAssignable(InputLayouts) If the current layout is assignable to the parameter input layout. Declaration public bool IsAssignable(InputLayouts inputLayouts) Parameters Type Name Description InputLayouts inputLayouts The input layouts. Returns Type Description bool If the specified layout is compatible. Read(BinaryReader) Read InputLayouts from binary file. Declaration public static InputLayouts Read(BinaryReader reader) Parameters Type Name Description BinaryReader reader The binary reader. Returns Type Description InputLayouts The readed inputLayouts. TryGetSlot(ElementSemanticType, uint, out int) Try get the attribute slot by semantic and semantic index. Declaration public bool TryGetSlot(ElementSemanticType semantic, uint semanticIndex, out int slot) Parameters Type Name Description ElementSemanticType semantic Attribute semantic type. uint semanticIndex Attribute semantic index. int slot Attribute slot. Returns Type Description bool True whether found the attribute and False in otherwise. Write(BinaryWriter) Write InputLayouts in a binary file. Declaration public void Write(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer The binary writer. Operators operator ==(InputLayouts, InputLayouts) Implements the operator ==. Declaration public static bool operator ==(InputLayouts value1, InputLayouts value2) Parameters Type Name Description InputLayouts value1 The value1. InputLayouts value2 The value2. Returns Type Description bool The result of the operator. operator !=(InputLayouts, InputLayouts) Implements the operator ==. Declaration public static bool operator !=(InputLayouts value1, InputLayouts value2) Parameters Type Name Description InputLayouts value1 The value1. InputLayouts value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.LayoutDescription.html": {
    "href": "api/Evergine.Common.Graphics.LayoutDescription.html",
    "title": "Class LayoutDescription | Evergine Doc",
    "keywords": "Class LayoutDescription A generic description of vertex inputs to the device's input assembler stage. This object describes the inputs from a single vertex buffer. Inheritance object LayoutDescription Implements IEquatable<LayoutDescription> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class LayoutDescription : IEquatable<LayoutDescription> Remarks Shaders may use inputs from multiple vertex buffers. Constructors LayoutDescription(VertexStepFunction, uint) Initializes a new instance of the LayoutDescription class. Declaration public LayoutDescription(VertexStepFunction stepFunction = VertexStepFunction.PerVertexData, uint stepRate = 0) Parameters Type Name Description VertexStepFunction stepFunction The frequency with which the vertex function fetches attributes data. uint stepRate The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data. Fields Elements The collection of individual vertex elements comprising a single vertex. Declaration public List<ElementDescription> Elements Field Value Type Description List<ElementDescription> StepFunction The frequency with which the vertex function fetches attributes data. Declaration public VertexStepFunction StepFunction Field Value Type Description VertexStepFunction StepRate A value controlling how often data for instances is advanced for this layout. For per-vertex elements, this value should be 0. Declaration public int StepRate Field Value Type Description int Stride The total size of an individual vertex in bytes. Declaration public uint Stride Field Value Type Description uint Methods Add(ElementDescription) Adds a new ElementDescription to layout. Declaration public LayoutDescription Add(ElementDescription element) Parameters Type Name Description ElementDescription element Element description. Returns Type Description LayoutDescription My own instance. Equals(LayoutDescription) Returns a hash code for this instance. Declaration public bool Equals(LayoutDescription other) Parameters Type Name Description LayoutDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) GetFormatSizeInBytes(ElementFormat) Get the size in byte of a specific vertex element format. Declaration public static uint GetFormatSizeInBytes(ElementFormat format) Parameters Type Name Description ElementFormat format The vertex element formant. Returns Type Description uint The size in bytes. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Read(BinaryReader) Read LayoutDescription from Binary file. Declaration public static LayoutDescription Read(BinaryReader reader) Parameters Type Name Description BinaryReader reader The binary reader. Returns Type Description LayoutDescription The readed layoutDescription. Write(BinaryWriter) Write LayoutDescription into binary file. Declaration public void Write(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer The binary writer. Operators operator ==(LayoutDescription, LayoutDescription) Implements the operator ==. Declaration public static bool operator ==(LayoutDescription value1, LayoutDescription value2) Parameters Type Name Description LayoutDescription value1 The value1. LayoutDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(LayoutDescription, LayoutDescription) Implements the operator ==. Declaration public static bool operator !=(LayoutDescription value1, LayoutDescription value2) Parameters Type Name Description LayoutDescription value1 The value1. LayoutDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.LayoutElementDescription.html": {
    "href": "api/Evergine.Common.Graphics.LayoutElementDescription.html",
    "title": "Struct LayoutElementDescription | Evergine Doc",
    "keywords": "Struct LayoutElementDescription This class represent a shader resource binding;. Implements IEquatable<LayoutElementDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct LayoutElementDescription : IEquatable<LayoutElementDescription> Constructors LayoutElementDescription(uint, ResourceType, ShaderStages, bool, uint) Initializes a new instance of the LayoutElementDescription struct. Declaration public LayoutElementDescription(uint slot, ResourceType type, ShaderStages stages, bool allowDynamicOffset = false, uint size = 0) Parameters Type Name Description uint slot The resource slot. ResourceType type The resource type. ShaderStages stages The stages where this resource will be available. bool allowDynamicOffset Allow specifying dynamic offset. Only valid on Constant Buffers. uint size If it is greater than 0, it overrides the size of this resource (in bytes). Only valid on Constant Buffers. Fields AllowDynamicOffset Gets a value indicating whether this resource allow dynamic offset. Its used in some graphics backend to allow specifying dynamic offset. Declaration public readonly bool AllowDynamicOffset Field Value Type Description bool Range If it is greater than 0, it overrides the size of this resource (in bytes). Only valid on Constant Buffers. Declaration public readonly uint Range Field Value Type Description uint Slot Gets the resource slot. Declaration public readonly uint Slot Field Value Type Description uint Stages Gets the resource shader stage. Declaration public readonly ShaderStages Stages Field Value Type Description ShaderStages Type Gets the shader resource type. Declaration public readonly ResourceType Type Field Value Type Description ResourceType Methods Equals(LayoutElementDescription) Returns a hash code for this instance. Declaration public bool Equals(LayoutElementDescription other) Parameters Type Name Description LayoutElementDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(LayoutElementDescription, LayoutElementDescription) Implements the operator ==. Declaration public static bool operator ==(LayoutElementDescription value1, LayoutElementDescription value2) Parameters Type Name Description LayoutElementDescription value1 The value1. LayoutElementDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(LayoutElementDescription, LayoutElementDescription) Implements the operator ==. Declaration public static bool operator !=(LayoutElementDescription value1, LayoutElementDescription value2) Parameters Type Name Description LayoutElementDescription value1 The value1. LayoutElementDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.LightStruct.html": {
    "href": "api/Evergine.Common.Graphics.LightStruct.html",
    "title": "Struct LightStruct | Evergine Doc",
    "keywords": "Struct LightStruct Struct with aligned data for sending a light to the shader. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct LightStruct Fields Color Light diffuse color. Declaration public Vector3 Color Field Value Type Description Vector3 ConeAngle The cone angle. Declaration public float ConeAngle Field Value Type Description float Direction The direction. Declaration public Vector3 Direction Field Value Type Description Vector3 Intensity Sport exponent. Declaration public float Intensity Field Value Type Description float LightRange Light range. Declaration public float LightRange Field Value Type Description float Position Light position. Declaration public Vector3 Position Field Value Type Description Vector3 World The world instance. Declaration public Matrix4x4 World Field Value Type Description Matrix4x4 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.LinearColor.html": {
    "href": "api/Evergine.Common.Graphics.LinearColor.html",
    "title": "Struct LinearColor | Evergine Doc",
    "keywords": "Struct LinearColor Represents a 32-bit color in Linear Space. Implements IEquatable<LinearColor> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct LinearColor : IEquatable<LinearColor> Constructors LinearColor(ref Color) Initializes a new instance of the LinearColor struct. Declaration public LinearColor(ref Color gammaColor) Parameters Type Name Description Color gammaColor The Color instance in Gamma space. LinearColor(Vector3) Initializes a new instance of the LinearColor struct. Declaration public LinearColor(Vector3 vector) Parameters Type Name Description Vector3 vector Vector3 with the color data. LinearColor(Vector4) Initializes a new instance of the LinearColor struct. Declaration public LinearColor(Vector4 vector) Parameters Type Name Description Vector4 vector Vector4 with the color data. LinearColor(float) Initializes a new instance of the LinearColor struct. Declaration public LinearColor(float k) Parameters Type Name Description float k The color temperature in Kelvin. LinearColor(float, float, float, float) Initializes a new instance of the LinearColor struct. Declaration public LinearColor(float r, float g, float b, float a = 1) Parameters Type Name Description float r The r color component in linear space. float g The g color component in linear space. float b The b color component in linear space. float a The a color component in linear space. LinearColor(string) Initializes a new instance of the LinearColor struct. Declaration public LinearColor(string hex) Parameters Type Name Description string hex hexadecimal color code. Fields A The w coordinate of this LinearColor. Declaration public float A Field Value Type Description float AsVector3 The linear color converted to Vector3. Declaration public Vector3 AsVector3 Field Value Type Description Vector3 AsVector4 The linear color converted to Vector4. Declaration public Vector4 AsVector4 Field Value Type Description Vector4 B The z coordinate of this LinearColor. Declaration public float B Field Value Type Description float G The y coordinate of this LinearColor. Declaration public float G Field Value Type Description float R The x coordinate of this LinearColor. Declaration public float R Field Value Type Description float Methods Equals(LinearColor) Declaration public bool Equals(LinearColor other) Parameters Type Name Description LinearColor other Returns Type Description bool Equals(ref LinearColor) Indicates whether this instance and a specified LinearColor are equal. Declaration public bool Equals(ref LinearColor other) Parameters Type Name Description LinearColor other The vector to compare with the current instance. Returns Type Description bool true if other and this instance are the same type and represent the same value; otherwise, false. Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToColor() Convert to Color (in Gamma space). Declaration public Color ToColor() Returns Type Description Color The output color. ToColor(out Color) Convert to Color (in Gamma space). Declaration public void ToColor(out Color color) Parameters Type Name Description Color color The output color. ToGamma() Convert to Gamma color space. Declaration public GammaColor ToGamma() Returns Type Description GammaColor The converted Gamma color. ToGamma(out GammaColor) Convert to Gamma color space. Declaration public void ToGamma(out GammaColor gammaColor) Parameters Type Name Description GammaColor gammaColor The converted Gamma color. ToLinear() Convert to Linear color space. Declaration public LinearColor ToLinear() Returns Type Description LinearColor The converted linear color. ToLinear(out LinearColor) Convert to Linear color space. Declaration public void ToLinear(out LinearColor linearColor) Parameters Type Name Description LinearColor linearColor The converted linear color. ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator /(LinearColor, float) Implements the operator /. Declaration public static LinearColor operator /(LinearColor a, float b) Parameters Type Name Description LinearColor a First LinearColor. float b Second LinearColor. Returns Type Description LinearColor The result of the operator. operator ==(LinearColor, LinearColor) Implements the operator ==. Declaration public static bool operator ==(LinearColor lhs, LinearColor rhs) Parameters Type Name Description LinearColor lhs The LHS. LinearColor rhs The RHS. Returns Type Description bool The result of the operator. operator !=(LinearColor, LinearColor) Implements the operator !=. Declaration public static bool operator !=(LinearColor lhs, LinearColor rhs) Parameters Type Name Description LinearColor lhs The LHS. LinearColor rhs The RHS. Returns Type Description bool The result of the operator. operator *(LinearColor, float) Implements the operator *. Declaration public static LinearColor operator *(LinearColor a, float b) Parameters Type Name Description LinearColor a First LinearColor. float b Second LinearColor. Returns Type Description LinearColor The result of the operator. operator *(float, LinearColor) Implements the operator *. Declaration public static LinearColor operator *(float b, LinearColor a) Parameters Type Name Description float b First LinearColor. LinearColor a Second LinearColor. Returns Type Description LinearColor The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.MapMode.html": {
    "href": "api/Evergine.Common.Graphics.MapMode.html",
    "title": "Enum MapMode | Evergine Doc",
    "keywords": "Enum MapMode Identifies how a graphics resource will be mapped into CPU address space. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum MapMode : byte Fields Name Description Read A read-only resource mapping. The mapped data region is not writable, and cannot be used to transfer data into the graphics resource. ReadWrite A read-write resource mapping. The mapped data region is both readable and writable. Write A write-only resource mapping. The mapped data region is writable, and will be transferred into the graphics resource when UnmapMemory(GraphicsResource, uint) is called. Extension Methods DX11ExtensionsMethods.ToDirectX(MapMode, bool) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.MappedResource.html": {
    "href": "api/Evergine.Common.Graphics.MappedResource.html",
    "title": "Struct MappedResource | Evergine Doc",
    "keywords": "Struct MappedResource The resource which has been mapped. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct MappedResource Constructors MappedResource(GraphicsResource, MapMode, IntPtr, uint) Initializes a new instance of the MappedResource struct. Declaration public MappedResource(GraphicsResource resource, MapMode mode, IntPtr data, uint sizeInBytes) Parameters Type Name Description GraphicsResource resource The resource which has been mapped. MapMode mode The mapMode used to map the resource. IntPtr data A pointer to the start of the mapped data region. uint sizeInBytes The total size in bytes, of the mapped data region. MappedResource(GraphicsResource, MapMode, IntPtr, uint, uint, uint, uint) Initializes a new instance of the MappedResource struct. Declaration public MappedResource(GraphicsResource resource, MapMode mode, IntPtr data, uint sizeInBytes, uint subResourceIndex, uint rowPitch, uint slicePitch) Parameters Type Name Description GraphicsResource resource The resource which has been mapped. MapMode mode The mapMode used to map the resource. IntPtr data A pointer to the start of the mapped data region. uint sizeInBytes The total size in bytes, of the mapped data region. uint subResourceIndex Index of the sub resource. uint rowPitch The number of bytes per row. uint slicePitch The number of bytes per slice. Fields Data A pointer to the start of the mapped data region. Declaration public readonly IntPtr Data Field Value Type Description IntPtr Mode Identifies the MapMode that was used to map the resource. Declaration public readonly MapMode Mode Field Value Type Description MapMode Resource The resource which has been mapped. Declaration public readonly GraphicsResource Resource Field Value Type Description GraphicsResource RowPitch For Texture resources, this is the number of bytes between each row of texels. For Buffer resources, this field has no meaning. Declaration public readonly uint RowPitch Field Value Type Description uint SizeInBytes The total size in bytes, of the mapped data region. Declaration public readonly uint SizeInBytes Field Value Type Description uint SlicePitch For Texture resources, this is the number of bytes between each slice of a 3D texture. For Buffer resources, this field has no meaning. Declaration public readonly uint SlicePitch Field Value Type Description uint SubresourceIndex For Texture resources, this is the subresource which is mapped. For Buffer resources, this field has no meaning. Declaration public readonly uint SubresourceIndex Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.MatrixMajorness.html": {
    "href": "api/Evergine.Common.Graphics.MatrixMajorness.html",
    "title": "Enum MatrixMajorness | Evergine Doc",
    "keywords": "Enum MatrixMajorness Indicates the majorness of the matrix in this backend. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum MatrixMajorness Fields Name Description ColumnMajor Column major order. RowMajor Row major order. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.MultiviewStrategy.html": {
    "href": "api/Evergine.Common.Graphics.MultiviewStrategy.html",
    "title": "Enum MultiviewStrategy | Evergine Doc",
    "keywords": "Enum MultiviewStrategy Indicates the strategy supported to render multiple views. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum MultiviewStrategy Fields Name Description RenderTargetIndex Multiview is specified by output vertex RenderTargetIndex semantic, in combination with DrawInstancing. Unsupported Multiview is not supported in this device. ViewIndex Multiview is specified using a vertex shader input ViewID. Additionally, you need to specify how many views do you want to render in the Framebuffer. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.OutputAttachmentDescription.html": {
    "href": "api/Evergine.Common.Graphics.OutputAttachmentDescription.html",
    "title": "Struct OutputAttachmentDescription | Evergine Doc",
    "keywords": "Struct OutputAttachmentDescription Contains properties that describe the characteristics of a new pipeline state object. Implements IEquatable<OutputAttachmentDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct OutputAttachmentDescription : IEquatable<OutputAttachmentDescription> Constructors OutputAttachmentDescription(PixelFormat, bool) Initializes a new instance of the OutputAttachmentDescription struct. Declaration public OutputAttachmentDescription(PixelFormat format, bool resolveMSAA = false) Parameters Type Name Description PixelFormat format The format of the Texture attachment. bool resolveMSAA Indicates if the Texture with MSAA attachment need to be resolved. Fields Format The pixel format. Declaration public PixelFormat Format Field Value Type Description PixelFormat ResolveMSAA Indicates if the Texture with MSAA attachment need to be resolved. Declaration public bool ResolveMSAA Field Value Type Description bool Methods Equals(OutputAttachmentDescription) Returns a hash code for this instance. Declaration public bool Equals(OutputAttachmentDescription other) Parameters Type Name Description OutputAttachmentDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(OutputAttachmentDescription, OutputAttachmentDescription) Implements the operator ==. Declaration public static bool operator ==(OutputAttachmentDescription value1, OutputAttachmentDescription value2) Parameters Type Name Description OutputAttachmentDescription value1 The value1. OutputAttachmentDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(OutputAttachmentDescription, OutputAttachmentDescription) Implements the operator ==. Declaration public static bool operator !=(OutputAttachmentDescription value1, OutputAttachmentDescription value2) Parameters Type Name Description OutputAttachmentDescription value1 The value1. OutputAttachmentDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.OutputDescription.html": {
    "href": "api/Evergine.Common.Graphics.OutputDescription.html",
    "title": "Struct OutputDescription | Evergine Doc",
    "keywords": "Struct OutputDescription Contains properties that describe the characteristics of a new pipeline state object. Implements IEquatable<OutputDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct OutputDescription : IEquatable<OutputDescription> Constructors OutputDescription(OutputAttachmentDescription?, OutputAttachmentDescription[], TextureSampleCount, uint) Initializes a new instance of the OutputDescription struct. Declaration public OutputDescription(OutputAttachmentDescription? depth, OutputAttachmentDescription[] colors, TextureSampleCount sampleCount, uint arraySliceCount) Parameters Type Name Description OutputAttachmentDescription? depth A description of the depth attachment. OutputAttachmentDescription[] colors An array of descriptions of each color attachment. TextureSampleCount sampleCount The number of samples in each target attachment. uint arraySliceCount The number of views rendered. Fields ArraySliceCount Gets the number of view counts. Declaration public readonly uint ArraySliceCount Field Value Type Description uint CachedHashCode Precomputed outputDescription hash. Used to speed up the comparison between output descriptions. Declaration public readonly int CachedHashCode Field Value Type Description int ColorAttachments An array of attachment descriptions, one for each color attachment. Declaration public readonly OutputAttachmentDescription[] ColorAttachments Field Value Type Description OutputAttachmentDescription[] DepthAttachment A description of the depth attachment, or null if none exists. Declaration public readonly OutputAttachmentDescription? DepthAttachment Field Value Type Description OutputAttachmentDescription? SampleCount The number of samples in each target attachment. Declaration public readonly TextureSampleCount SampleCount Field Value Type Description TextureSampleCount Methods CreateFromFrameBuffer(FrameBuffer) Create a new instance of OutputDescription from a FrameBuffer. Declaration public static OutputDescription CreateFromFrameBuffer(FrameBuffer frameBuffer) Parameters Type Name Description FrameBuffer frameBuffer The framebuffer to extract the attachment description. Returns Type Description OutputDescription A new instance of OutputDescription. Equals(OutputDescription) Returns a hash code for this instance. Declaration public bool Equals(OutputDescription other) Parameters Type Name Description OutputDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(OutputDescription, OutputDescription) Implements the operator ==. Declaration public static bool operator ==(OutputDescription value1, OutputDescription value2) Parameters Type Name Description OutputDescription value1 The value1. OutputDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(OutputDescription, OutputDescription) Implements the operator ==. Declaration public static bool operator !=(OutputDescription value1, OutputDescription value2) Parameters Type Name Description OutputDescription value1 The value1. OutputDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.PipelineState.html": {
    "href": "api/Evergine.Common.Graphics.PipelineState.html",
    "title": "Class PipelineState | Evergine Doc",
    "keywords": "Class PipelineState This class represent the GPU graphics pipeline. Inheritance object PipelineState ComputePipelineState GraphicsPipelineState RaytracingPipelineState Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class PipelineState : IDisposable Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public abstract void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.PixelFormat.html": {
    "href": "api/Evergine.Common.Graphics.PixelFormat.html",
    "title": "Enum PixelFormat | Evergine Doc",
    "keywords": "Enum PixelFormat Pixel format type. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum PixelFormat Fields Name Description A8P8 8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes BluRay data. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8. A8_UNorm A single-component, 8-bit unsigned-normalized-integer format for alpha only. AI44 4-bit palletized YUV format that is commonly used for DVD subpicture. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8. AYUV Most common YUV 4:4:4 video resource format. Valid view formats for this video resource format are R8G8B8A8_UNorm and R8G8B8A8_UInt. For UAVs, an additional valid view format is R32_UInt. By using R32_UInt for UAVs, you can both read and write as opposed to just write for R8G8B8A8_UNorm and R8G8B8A8_UInt. Supported view types are SRV, RTV, and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is V->R8, U->G8, Y->B8, and A->A8. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8. B4G4R4A4_UNorm A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha. Direct3D 11.1:??This value is not supported until Windows?8. B5G5R5A1_UNorm A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha. Direct3D 10 through Direct3D 11:??This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format. Direct3D 11.1:??This value is not supported until Windows?8. B5G6R5_UNorm A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red. Direct3D 10 through Direct3D 11:??This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format. Direct3D 11.1:??This value is not supported until Windows?8. B8G8R8A8_Typeless A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. 4 B8G8R8A8_UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha. B8G8R8A8_UNorm_SRgb A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. 4 B8G8R8X8_Typeless A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. 4 B8G8R8X8_UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused. B8G8R8X8_UNorm_SRgb A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. 4 BC1_Typeless DXT1 typeless Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC1_UNorm DXT 1 Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC1_UNorm_SRgb Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC2_Typeless Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC2_UNorm Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC2_UNorm_SRgb Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC3_Typeless Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC3_UNorm DXT 5 Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC3_UNorm_SRgb Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC4_SNorm One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC4_Typeless One-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC4_UNorm One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC5_SNorm Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC5_Typeless Two-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC5_UNorm Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC6H_Sf16 A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC6H_Typeless A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC6H_Uf16 A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC7_Typeless A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC7_UNorm A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11. BC7_UNorm_SRgb A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11. D16_UNorm A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth. D24_UNorm_S8_UInt A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil. D32_Float A single-component, 32-bit floating-point format that supports 32 bits for depth. D32_Float_S8X24_UInt A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused. ETC1_RGB8 ETC1. ETC2_RGBA ETC2. ETC2_RGBA_SRGB ETC2 sRgb. G8R8_G8B8_UNorm A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3 Width must be even. IA44 4-bit palletized YUV format that is commonly used for DVD subpicture. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8. NV11 Most common planar YUV 4:1:1 video resource format. Valid luminance data view formats for this video resource format are R8_UNorm and R8_UInt. Valid chrominance data view formats (width and height are each 1/4 of luminance view) for this video resource format are R8G8_UNorm and R8G8_UInt. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y->R8. For chrominance data view, the mapping to the view channel is U->R8 and V->G8. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width must be a multiple of 4. Direct3D11 staging resources and initData parameters for this format use (rowPitch * height * 2) bytes. The first (SysMemPitch * height) bytes are the Y plane, the next ((SysMemPitch / 2) * height) bytes are the UV plane, and the remainder is padding. Direct3D 11.1:??This value is not supported until Windows?8. NV12 Most common YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are R8_UNorm and R8_UInt. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are R8G8_UNorm and R8G8_UInt. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y->R8. For chrominance data view, the mapping to the view channel is U->R8 and V->G8. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane. Direct3D 11.1:??This value is not supported until Windows?8. Opaque420 8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value. The runtime requires that the width and height of all resources that are created with this format are multiples of 2. The runtime also requires that the left, right, top, and bottom members of any RECT that are used for this format are multiples of 2. This format differs from NV12 in that the layout of the data within the resource is completely opaque to applications. Applications cannot use the CPU to map the resource and then access the data within the resource. You cannot use shaders with this format. Because of this behavior, legacy hardware that supports a non-NV12 4:2:0 layout (for example, YV12, and so on) can be used. Also, new hardware that has a 4:2:0 implementation better than NV12 can be used when the application does not need the data to be in a standard layout. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch (height + (height / 2))) bytes. Direct3D 11.1:??This value is not supported until Windows?8. P010 10-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are R16_UNorm and R16_UInt. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually. From the runtime's point of view, P010 is no different than P016. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are R16G16_UNorm and R16G16_UInt. For UAVs, an additional valid chrominance data view format is R32_UInt. By using R32_UInt for UAVs, you can both read and write as opposed to just write for R16G16_UNorm and R16G16_UInt. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y->R16. For chrominance data view, the mapping to the view channel is U->R16 and V->G16. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane. Direct3D 11.1:??This value is not supported until Windows?8. P016 16-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are R16_UNorm and R16_UInt. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are R16G16_UNorm and R16G16_UInt. For UAVs, an additional valid chrominance data view format is R32_UInt. By using R32_UInt for UAVs, you can both read and write as opposed to just write for R16G16_UNorm and R16G16_UInt. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y->R16. For chrominance data view, the mapping to the view channel is U->R16 and V->G16. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane. Direct3D 11.1:??This value is not supported until Windows?8. P208 Forces this enumeration to compile to 32 bits in size. Without this value, some compilers would allow this enumeration to compile to a size other than 32 bits. This value is not used. P8 8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes BluRay data. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8. PVRTC_2BPP_RGB PVRTC 2bpp rgb. PVRTC_2BPP_RGBA PVRTC 2bpp rgba. PVRTC_2BPP_RGBA_SRGBA PVRTC 2bpp srgba. PVRTC_2BPP_RGB_SRGB PVRTC 2bpp srgb. PVRTC_4BPP_RGB PVRTC 4bpp rgb. PVRTC_4BPP_RGBA PVRTC 4bpp rgba. PVRTC_4BPP_RGBA_SRGBA PVRTC 4bpp srgba. PVRTC_4BPP_RGB_SRGB PVRTC 4bpp srgb. R10G10B10A2_Typeless A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha. R10G10B10A2_UInt A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha. R10G10B10A2_UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha. R10G10B10_Xr_Bias_A2_UNorm A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha. R11G11B10_Float Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B, as shown in the following illustration. R16G16B16A16_Float A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha. R16G16B16A16_SInt A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha. R16G16B16A16_SNorm A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha. R16G16B16A16_Typeless A four-component, 64-bit typeless format that supports 16 bits per channel including alpha. R16G16B16A16_UInt A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha. R16G16B16A16_UNorm A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha. R16G16_Float A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16_SInt A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16_SNorm A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16_Typeless A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16_UInt A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16_UNorm A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels. R16_Float A single-component, 16-bit floating-point format that supports 16 bits for the red channel. R16_SInt A single-component, 16-bit signed-integer format that supports 16 bits for the red channel. R16_SNorm A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel. R16_Typeless A single-component, 16-bit typeless format that supports 16 bits for the red channel. R16_UInt A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel. R16_UNorm A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel. R1_UNorm A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. 2. R24G8_Typeless A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel. R24_UNorm_X8_Typeless A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused. R32G32B32A32_Float A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. 1 R32G32B32A32_SInt A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. 1 R32G32B32A32_Typeless A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. 1 R32G32B32A32_UInt A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. 1 R32G32B32_Float A three-component, 96-bit floating-point format that supports 32 bits per color channel. R32G32B32_SInt A three-component, 96-bit signed-integer format that supports 32 bits per color channel. R32G32B32_Typeless A three-component, 96-bit typeless format that supports 32 bits per color channel. R32G32B32_UInt A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel. R32G32_Float A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32_SInt A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32_Typeless A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32_UInt A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G8X24_Typeless A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused. R32_Float A single-component, 32-bit floating-point format that supports 32 bits for the red channel. R32_Float_X8X24_Typeless A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused. R32_SInt A single-component, 32-bit signed-integer format that supports 32 bits for the red channel. R32_Typeless A single-component, 32-bit typeless format that supports 32 bits for the red channel. R32_UInt A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel. R4G4B4A4 16-bit RGBA. R8G8B8A8_SInt A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha. R8G8B8A8_SNorm A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha. R8G8B8A8_Typeless A four-component, 32-bit typeless format that supports 8 bits per channel including alpha. R8G8B8A8_UInt A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha. R8G8B8A8_UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha. R8G8B8A8_UNorm_SRgb A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha. R8G8_B8G8_UNorm A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3 Width must be even. R8G8_SInt A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8_SNorm A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8_Typeless A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8_UInt A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8_UNorm A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8_SInt A single-component, 8-bit signed-integer format that supports 8 bits for the red channel. R8_SNorm A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel. R8_Typeless A single-component, 8-bit typeless format that supports 8 bits for the red channel. R8_UInt A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel. R8_UNorm A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel. R9G9B9E5_Sharedexp Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as shown in the following illustration. 2. Unknown The format is not known. V208 No documentation. V408 No documentation. X24_Typeless_G8_UInt A 32-bit format, that contains a 24 bit, single-component, typeless format, with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel. X32_Typeless_G8X24_UInt A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused. Y210 10-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are R16G16B16A16_UNorm and R16G16B16A16_UInt. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually. From the runtime's point of view, Y210 is no different than Y216. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0->R16, U->G16, Y1->B16, and V->A16. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width must be even. Direct3D 11.1:??This value is not supported until Windows?8. Y216 16-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are R16G16B16A16_UNorm and R16G16B16A16_UInt. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0->R16, U->G16, Y1->B16, and V->A16. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width must be even. Direct3D 11.1:??This value is not supported until Windows?8. Y410 10-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are R10G10B10A2_UNorm and R10G10B10A2_UInt. For UAVs, an additional valid view format is R32_UInt. By using R32_UInt for UAVs, you can both read and write as opposed to just write for R10G10B10A2_UNorm and R10G10B10A2_UInt. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U->R10, Y->G10, V->B10, and A->A2. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8. Y416 16-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are R16G16B16A16_UNorm and R16G16B16A16_UInt. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U->R16, Y->G16, V->B16, and A->A16. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8. YUY2 Most common YUV 4:2:2 video resource format. Valid view formats for this video resource format are R8G8B8A8_UNorm and R8G8B8A8_UInt. For UAVs, an additional valid view format is R32_UInt. By using R32_UInt for UAVs, you can both read and write as opposed to just write for R8G8B8A8_UNorm and R8G8B8A8_UInt. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0->R8, U0->G8, Y1->B8, and V0->A8. A unique valid view format for this video resource format is R8G8_B8G8_UNorm. With this view format, the width of the view appears to be twice what the R8G8B8A8_UNorm or R8G8B8A8_UInt view would be when hardware reconstructs RGBA automatically on read and before filtering. This Direct3D hardware behavior is legacy and is likely not useful any more. With this view format, the mapping to the view channel is Y0->R8, U0-> G8[0], Y1->B8, and V0-> G8[1]. For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width must be even. Direct3D 11.1:??This value is not supported until Windows?8. Extension Methods ExtensionMethods.GetSizeInBits(PixelFormat) ExtensionMethods.IsGammaColorSpaceFormat(PixelFormat) DX11ExtensionsMethods.ToDirectX(PixelFormat) DX12ExtensionsMethods.ToDepthStencilFormat(PixelFormat) DX12ExtensionsMethods.ToDirectX(PixelFormat) OpenVRHelper.ToVulkan(PixelFormat) VKExtensionsMethods.ToVulkan(PixelFormat, bool) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.PointLightStruct.html": {
    "href": "api/Evergine.Common.Graphics.PointLightStruct.html",
    "title": "Struct PointLightStruct | Evergine Doc",
    "keywords": "Struct PointLightStruct Struct with aligned data for sending a point light to the shader. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct PointLightStruct Fields Attenuation Light Attenuation. Declaration public float Attenuation Field Value Type Description float Color Light diffuse color. Declaration public Vector3 Color Field Value Type Description Vector3 Falloff Light range. Declaration public float Falloff Field Value Type Description float Position Light position. Declaration public Vector3 Position Field Value Type Description Vector3 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.PrimitiveTopology.html": {
    "href": "api/Evergine.Common.Graphics.PrimitiveTopology.html",
    "title": "Enum PrimitiveTopology | Evergine Doc",
    "keywords": "Enum PrimitiveTopology How the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum PrimitiveTopology Fields Name Description LineList Interpret the vertex data as a list of lines. LineListWithAdjacency Interpret the vertex data as a list of lines with adjacency data. LineStrip Interpret the vertex data as a line strip. LineStripWithAdjacency Interpret the vertex data as a line strip with adjacency data. Patch_List Interpret the vertex data as a patch list. PointList Interpret the vertex data as a list of points. TriangleList Interpret the vertex data as a list of triangles. TriangleListWithAdjacency Interpret the vertex data as a list of triangles with adjacency data. TriangleStrip Interpret the vertex data as a triangle strip. TriangleStripWithAdjacency Interpret the vertex data as a triangle strip with adjacency data. Undefined The IA stage has not been initialized with a primitive topology. Extension Methods PrimitiveTopologyExtension.ToIndexCount(PrimitiveTopology, int) PrimitiveTopologyExtension.ToPrimitiveCount(PrimitiveTopology, int) PrimitiveTopologyExtensions.ControlPoints(PrimitiveTopology, int) VKExtensionsMethods.ToVulkan(PrimitiveTopology) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.PrimitiveTopologyExtension.html": {
    "href": "api/Evergine.Common.Graphics.PrimitiveTopologyExtension.html",
    "title": "Class PrimitiveTopologyExtension | Evergine Doc",
    "keywords": "Class PrimitiveTopologyExtension Helper methods for primitive topology. Inheritance object PrimitiveTopologyExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class PrimitiveTopologyExtension Methods ToIndexCount(PrimitiveTopology, int) Convert primitive count to index count. Declaration public static int ToIndexCount(this PrimitiveTopology primitiveTopology, int primitiveCount) Parameters Type Name Description PrimitiveTopology primitiveTopology The primitive topology. int primitiveCount The primitive count. Returns Type Description int The index count. ToPrimitiveCount(PrimitiveTopology, int) Convert index count to primitive count. Declaration public static int ToPrimitiveCount(this PrimitiveTopology primitiveTopology, int elementCount) Parameters Type Name Description PrimitiveTopology primitiveTopology The primitive topology. int elementCount The index count. Returns Type Description int The primitive count."
  },
  "api/Evergine.Common.Graphics.PrimitiveTopologyExtensions.html": {
    "href": "api/Evergine.Common.Graphics.PrimitiveTopologyExtensions.html",
    "title": "Class PrimitiveTopologyExtensions | Evergine Doc",
    "keywords": "Class PrimitiveTopologyExtensions Primitive topology extensions. Inheritance object PrimitiveTopologyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class PrimitiveTopologyExtensions Methods ControlPoints(PrimitiveTopology, int) Interpret the vertex data as a patch list. Declaration public static PrimitiveTopology ControlPoints(this PrimitiveTopology topology, int points) Parameters Type Name Description PrimitiveTopology topology The primitive topology. int points Number of control points. Valid range 1 - 32. Returns Type Description PrimitiveTopology The result primitive topology."
  },
  "api/Evergine.Common.Graphics.QueryHeap.html": {
    "href": "api/Evergine.Common.Graphics.QueryHeap.html",
    "title": "Class QueryHeap | Evergine Doc",
    "keywords": "Class QueryHeap This class represent a queryheap resource. Inheritance object GraphicsResource QueryHeap DX11QueryHeap DX12QueryHeap MTLQueryHeap GLQueryHeap VKQueryHeap Implements IDisposable Inherited Members GraphicsResource.disposed GraphicsResource.Context GraphicsResource.NativePointer GraphicsResource.Disposed GraphicsResource.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class QueryHeap : GraphicsResource, IDisposable Constructors QueryHeap(GraphicsContext, ref QueryHeapDescription) Initializes a new instance of the QueryHeap class. Declaration protected QueryHeap(GraphicsContext context, ref QueryHeapDescription description) Parameters Type Name Description GraphicsContext context The graphics context. QueryHeapDescription description The queryheap description. Fields Description Gets the queryheap description. Declaration public readonly QueryHeapDescription Description Field Value Type Description QueryHeapDescription Methods ReadData(uint, uint, ulong[]) Extract data from one or more queries. Declaration public abstract bool ReadData(uint startIndex, uint count, ulong[] results) Parameters Type Name Description uint startIndex Specifies the index of the fist query to read. uint count Specifies the number of queries to read. ulong[] results ulong buffer with the extracted queries data. Returns Type Description bool Return true if all queries to read are available and false if not. Remarks If the result is false, the results will conttains the latest available results. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.QueryHeapDescription.html": {
    "href": "api/Evergine.Common.Graphics.QueryHeapDescription.html",
    "title": "Struct QueryHeapDescription | Evergine Doc",
    "keywords": "Struct QueryHeapDescription Contains properties that describe the characteristics of a new queryheap object. Implements IEquatable<QueryHeapDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct QueryHeapDescription : IEquatable<QueryHeapDescription> Fields QueryCount Specifies the queryheap capacity. Declaration public uint QueryCount Field Value Type Description uint Type Specifies the queryheap type, QueryType structure. Declaration public QueryType Type Field Value Type Description QueryType Methods Equals(QueryHeapDescription) Determines whether the specified parameter is equal to this instance. Declaration public bool Equals(QueryHeapDescription other) Parameters Type Name Description QueryHeapDescription other Other used to compare. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(QueryHeapDescription, QueryHeapDescription) Implements the operator ==. Declaration public static bool operator ==(QueryHeapDescription value1, QueryHeapDescription value2) Parameters Type Name Description QueryHeapDescription value1 The value1. QueryHeapDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(QueryHeapDescription, QueryHeapDescription) Implements the operator ==. Declaration public static bool operator !=(QueryHeapDescription value1, QueryHeapDescription value2) Parameters Type Name Description QueryHeapDescription value1 The value1. QueryHeapDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.QueryType.html": {
    "href": "api/Evergine.Common.Graphics.QueryType.html",
    "title": "Enum QueryType | Evergine Doc",
    "keywords": "Enum QueryType Specifies the type of query. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum QueryType Fields Name Description BinaryOcclusion Indicates the query is for a binary depth/stencil occlusion statistics. Occlusion Indicates the query is for depth/stencil occlusion counts. Timestamp Indicates the query is for high definition GPU and CPU timestamps. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.RasterizerStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.RasterizerStateDescription.html",
    "title": "Struct RasterizerStateDescription | Evergine Doc",
    "keywords": "Struct RasterizerStateDescription Describes a rasterizer state. Implements IEquatable<RasterizerStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct RasterizerStateDescription : IEquatable<RasterizerStateDescription> Fields AntialiasedLineEnable Specifies whether to enable line antialiasing; only applies if doing line drawing and MultisampleEnable is FALSE. Declaration public bool AntialiasedLineEnable Field Value Type Description bool CullMode Indicates triangles facing the specified direction are not drawn. Declaration public CullMode CullMode Field Value Type Description CullMode DepthBias Depth value added to a given pixel. For info about depth bias. Declaration public int DepthBias Field Value Type Description int DepthBiasClamp Maximum depth bias of a pixel. Declaration public float DepthBiasClamp Field Value Type Description float DepthClipEnable Enable clipping based on distance. Declaration public bool DepthClipEnable Field Value Type Description bool FillMode Determines the fill mode to use when rendering. Declaration public FillMode FillMode Field Value Type Description FillMode FrontCounterClockwise Determines if a triangle is front- or back-facing. If this parameter is TRUE, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is FALSE, the opposite is true. Declaration public bool FrontCounterClockwise Field Value Type Description bool ScissorEnable Enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled. Declaration public bool ScissorEnable Field Value Type Description bool SlopeScaledDepthBias Scalar on a given pixel's slope. Declaration public float SlopeScaledDepthBias Field Value Type Description float Properties Default Gets default values for RasterizerStateDescription. Declaration public static RasterizerStateDescription Default { get; } Property Value Type Description RasterizerStateDescription Methods Equals(RasterizerStateDescription) Returns a hash code for this instance. Declaration public bool Equals(RasterizerStateDescription other) Parameters Type Name Description RasterizerStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() SetDefault() Default rasterizerstatedescription values. Declaration public void SetDefault() Operators operator ==(RasterizerStateDescription, RasterizerStateDescription) Implements the operator ==. Declaration public static bool operator ==(RasterizerStateDescription value1, RasterizerStateDescription value2) Parameters Type Name Description RasterizerStateDescription value1 The value1. RasterizerStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(RasterizerStateDescription, RasterizerStateDescription) Implements the operator ==. Declaration public static bool operator !=(RasterizerStateDescription value1, RasterizerStateDescription value2) Parameters Type Name Description RasterizerStateDescription value1 The value1. RasterizerStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.RasterizerStates.html": {
    "href": "api/Evergine.Common.Graphics.RasterizerStates.html",
    "title": "Class RasterizerStates | Evergine Doc",
    "keywords": "Class RasterizerStates Default known values for RasterizerStateDescription. Inheritance object RasterizerStates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class RasterizerStates Fields CullBack Cull primitives with counter-clockwise winding order. Declaration public static readonly RasterizerStateDescription CullBack Field Value Type Description RasterizerStateDescription CullFront Cull primitives with clockwise winding order;. Declaration public static readonly RasterizerStateDescription CullFront Field Value Type Description RasterizerStateDescription None Not cull primitives. Declaration public static readonly RasterizerStateDescription None Field Value Type Description RasterizerStateDescription WireframeCullBack Cull primitives with counter-clockwise winding order and wireframe enable. Declaration public static readonly RasterizerStateDescription WireframeCullBack Field Value Type Description RasterizerStateDescription WireframeCullFront Cull primitives with clockwise winding order and wireframe enable. Declaration public static readonly RasterizerStateDescription WireframeCullFront Field Value Type Description RasterizerStateDescription WireframeCullNone Not cull primitives and wireframe enable. Declaration public static readonly RasterizerStateDescription WireframeCullNone Field Value Type Description RasterizerStateDescription"
  },
  "api/Evergine.Common.Graphics.RasterizeStateEnum.html": {
    "href": "api/Evergine.Common.Graphics.RasterizeStateEnum.html",
    "title": "Enum RasterizeStateEnum | Evergine Doc",
    "keywords": "Enum RasterizeStateEnum Enum of the rasterizer states. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum RasterizeStateEnum Fields Name Description CullBack Cull primitives with counter-clockwise winding order. CullFront Cull primitives with clockwise winding order, Custom Custom value None Not cull primitives. WireframeCullBack Cull primitives with counter-clockwise winding order and wireframe enable. WireframeCullFront Cull primitives with clockwise winding order and wireframe enable. WireframeCullNone Not cull primitives and wireframe enable. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureAABBs.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureAABBs.html",
    "title": "Class AccelerationStructureAABBs | Evergine Doc",
    "keywords": "Class AccelerationStructureAABBs Acceleration Structure AABB Geometry. Inheritance object AccelerationStructureGeometry AccelerationStructureAABBs Inherited Members AccelerationStructureGeometry.Flags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public class AccelerationStructureAABBs : AccelerationStructureGeometry Fields AABBs Buffer with AABB data. Declaration public Buffer AABBs Field Value Type Description Buffer Count Number of AABB in buffer. Declaration public ulong Count Field Value Type Description ulong Offset AABB offset. Declaration public uint Offset Field Value Type Description uint Stride AABB stride size. Declaration public uint Stride Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.html",
    "title": "Enum AccelerationStructureFlags | Evergine Doc",
    "keywords": "Enum AccelerationStructureFlags Flags specifying additional parameters for acceleration structure builds. Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax [Flags] public enum AccelerationStructureFlags Fields Name Description AllowCompactation Enables the option to compact the acceleration structure. AllowUpdate Build the acceleration structure such that it supports future updates instead of the app having to entirely rebuild the structure. MinimizeMemory Minimize the amount of scratch memory used during the acceleration structure build as well as the size of the result. None No options specified for the acceleration structure build. PerformUpdate Perform an acceleration structure update, as opposed to building from scratch. PreferFastBuild Construct a lower quality acceleration structure, trading raytracing performance for build speed. PreferFastTrace Construct a high quality acceleration structure that maximizes raytracing performance at the expense of additional build time. Extension Methods VKExtensionsMethods.ToVulkan(AccelerationStructureFlags) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometry.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometry.html",
    "title": "Class AccelerationStructureGeometry | Evergine Doc",
    "keywords": "Class AccelerationStructureGeometry This struct represent a basic raytracing geometry. Inheritance object AccelerationStructureGeometry AccelerationStructureAABBs AccelerationStructureTriangles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public abstract class AccelerationStructureGeometry Fields Flags The geometry flags. Declaration public AccelerationStructureGeometryFlags Flags Field Value Type Description AccelerationStructureGeometryFlags Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometryFlags.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometryFlags.html",
    "title": "Enum AccelerationStructureGeometryFlags | Evergine Doc",
    "keywords": "Enum AccelerationStructureGeometryFlags Flags specifying additional parameters for acceleration structure builds. Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax [Flags] public enum AccelerationStructureGeometryFlags Fields Name Description NoDuplicateAnyhitInverseOcation By default, the system is free to trigger an any hit shader more than once for a given ray-primitive intersection. This flexibility helps improve the traversal efficiency of acceleration structures in certain cases None No options specified. Opaque When rays encounter this geometry, the geometry acts as if no any hit shader is present. It is recommended to use this flag liberally, as it can enable important ray processing optimizations. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.html",
    "title": "Struct AccelerationStructureInstance | Evergine Doc",
    "keywords": "Struct AccelerationStructureInstance This data structure is used in GPU memory during acceleration structure build. This struct definition is useful if generating instance data on the CPU first then uploading to the GPU. But apps are also free to generate instance descriptions directly into GPU memory from compute shaders for instance, following the same layout. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public struct AccelerationStructureInstance Fields BottonLevel the bottom-level acceleration structure that is being instanced. Declaration public BottomLevelAS BottonLevel Field Value Type Description BottomLevelAS Flags Flags from AccelerationStructureInstanceFlags to apply to the instance. Declaration public AccelerationStructureInstanceFlags Flags Field Value Type Description AccelerationStructureInstanceFlags InstanceContributionToHitGroupIndex Per-instance contribution to add into shader table indexing to select the hit group to use. It is the offset of the instance inside the sahder-binding-table. Declaration public uint InstanceContributionToHitGroupIndex Field Value Type Description uint InstanceID An arbitrary 24-bit value that can be accessed via InstanceID() in shader. Declaration public uint InstanceID Field Value Type Description uint InstanceMask An 8-bit mask assigned to the instance, which can be used to include/reject groups of instances on a per-ray basis. Declaration public byte InstanceMask Field Value Type Description byte Transform4x4 A 4x4 transform matrix in row major layout representing the instance-to-world transformation. Declaration public Matrix4x4 Transform4x4 Field Value Type Description Matrix4x4 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags.html",
    "title": "Enum AccelerationStructureInstanceFlags | Evergine Doc",
    "keywords": "Enum AccelerationStructureInstanceFlags Raytracing instance flags. Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax [Flags] public enum AccelerationStructureInstanceFlags Fields Name Description ForceNonOpaque Applied to any of the geometries in the bottom-level acceleration structure referenced by the instance ForceOpaque Applied to all the geometries in the bottom-level acceleration structure referenced by the instance None No options specified. TriangleCullDisable Disables front/back face culling for this instance. TriangleFrontCounterclockwise This flag reverses front and back facings. Extension Methods VKExtensionsMethods.ToVulkan(AccelerationStructureInstanceFlags) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.html",
    "title": "Class AccelerationStructureTriangles | Evergine Doc",
    "keywords": "Class AccelerationStructureTriangles Acceleration Structure Triangle geometry. Inheritance object AccelerationStructureGeometry AccelerationStructureTriangles Inherited Members AccelerationStructureGeometry.Flags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public class AccelerationStructureTriangles : AccelerationStructureGeometry Fields IndexBuffer Array of vertex indices. If NULL, triangles are non-indexed. Just as with graphics, the address must be aligned to the size of IndexFormat. Declaration public Buffer IndexBuffer Field Value Type Description Buffer IndexCount Number of indices in IndexBuffer. Must be 0 if IndexBuffer is NULL. Declaration public uint IndexCount Field Value Type Description uint IndexFormat Format of the indices in the IndexBuffer. Must be one of the following: DXGI_FORMAT_UNKNOWN - when IndexBuffer is NULL DXGI_FORMAT_R32_UINT DXGI_FORMAT_R16_UINT. Declaration public IndexFormat IndexFormat Field Value Type Description IndexFormat IndexOffset Index offset in bytes. Declaration public uint IndexOffset Field Value Type Description uint VertexBuffer Array of vertices including a stride. The alignment on the address and stride must be a multiple of the component size, so 4 bytes for formats with 32bit components and 2 bytes for formats with 16bit components. Unlike graphics, there is no constraint on the stride, other than that the bottom 32bits of the value are all that are used – the field is UINT64 purely to make neighboring fields align cleanly/obviously everywhere. Each vertex position is expected to be at the start address of the stride range and any excess space is ignored by acceleration structure builds. This excess space might contain other app data such as vertex attributes, which the app is responsible for manually fetching in shaders, whether it is interleaved in vertex buffers or elsewhere. The memory pointed to must be in state D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE.Note that if an app wants to share vertex buffer inputs between graphics input assembler and raytracing acceleration structure build input, it can always put a resource into a combination of read states simultaneously, e.g.D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER | D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE. Declaration public Buffer VertexBuffer Field Value Type Description Buffer VertexCount Number of vertices in VertexBuffer. Declaration public uint VertexCount Field Value Type Description uint VertexFormat Format of the vertices in VertexBuffer. Must be one of the following: DXGI_FORMAT_R32G32_FLOAT - third component is assumed 0 DXGI_FORMAT_R32G32B32_FLOAT DXGI_FORMAT_R16G16_FLOAT - third component is assumed 0 DXGI_FORMAT_R16G16B16A16_FLOAT - A16 component is ignored, other data can be packed there, such as setting vertex stride to 6 bytes. DXGI_FORMAT_R16G16_SNORM - third component is assumed 0 DXGI_FORMAT_R16G16B16A16_SNORM - A16 component is ignored, other data can be packed there, such as setting vertex stride to 6 bytes. Declaration public PixelFormat VertexFormat Field Value Type Description PixelFormat VertexOffset Vertex Offset in bytes. Declaration public uint VertexOffset Field Value Type Description uint VertexStride The vertex stride. Declaration public uint VertexStride Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.BottomLevelAS.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.BottomLevelAS.html",
    "title": "Class BottomLevelAS | Evergine Doc",
    "keywords": "Class BottomLevelAS Bottom Level Acceleration Structure. Inheritance object GraphicsResource BottomLevelAS DX12BottomLevelAS VKBottomLevelAS Implements IDisposable Inherited Members GraphicsResource.disposed GraphicsResource.Context GraphicsResource.NativePointer GraphicsResource.Disposed GraphicsResource.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public abstract class BottomLevelAS : GraphicsResource, IDisposable Constructors BottomLevelAS(GraphicsContext, ref BottomLevelASDescription) Initializes a new instance of the BottomLevelAS class. Declaration protected BottomLevelAS(GraphicsContext context, ref BottomLevelASDescription description) Parameters Type Name Description GraphicsContext context The device context. BottomLevelASDescription description The Bottom Level Acceleration Structure description. Fields Description Get the Acceleration Structure description. Declaration public BottomLevelASDescription Description Field Value Type Description BottomLevelASDescription Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.BottomLevelASDescription.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.BottomLevelASDescription.html",
    "title": "Struct BottomLevelASDescription | Evergine Doc",
    "keywords": "Struct BottomLevelASDescription The acceleration structure bottom level description. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public struct BottomLevelASDescription Fields Geometries Array of geometries. Declaration public AccelerationStructureGeometry[] Geometries Field Value Type Description AccelerationStructureGeometry[] Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.DispatchRaysDescription.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.DispatchRaysDescription.html",
    "title": "Struct DispatchRaysDescription | Evergine Doc",
    "keywords": "Struct DispatchRaysDescription Describes the properties of a ray dispatch operation initiated with a call to DispatchRays. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public struct DispatchRaysDescription Fields Depth The depth of the generation shader thread grid. Declaration public uint Depth Field Value Type Description uint Height The height of the generation shader thread grid. Declaration public uint Height Field Value Type Description uint Width The width of the generation shader thread grid. Declaration public uint Width Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.HitGroupDescription.HitGroupType.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.HitGroupDescription.HitGroupType.html",
    "title": "Enum HitGroupDescription.HitGroupType | Evergine Doc",
    "keywords": "Enum HitGroupDescription.HitGroupType Hit Group Type. Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public enum HitGroupDescription.HitGroupType Fields Name Description General The hit group indicates a shader group with a single Procedural The hit group uses a procedural primitive within a bounding box to calculate ray hits. Hit groups that use procedural primitives must contain an intersection shader. Triangles The hit group uses a list of triangles to calculate ray hits. Hit groups that use triangles can’t contain an intersection shader. Extension Methods DX12ExtensionsMethods.ToDirectX(HitGroupDescription.HitGroupType) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.HitGroupDescription.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.HitGroupDescription.html",
    "title": "Struct HitGroupDescription | Evergine Doc",
    "keywords": "Struct HitGroupDescription Describes a raytracing hit group state subobject that can be included in a state object. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public struct HitGroupDescription Fields AnyHitEntryPoint Optional name of the any-hit shader associated with the hit group. This field can be used with all hit group types. Declaration public string AnyHitEntryPoint Field Value Type Description string ClosestHitEntryPoint Optional name of the closest-hit shader associated with the hit group. This field can be used with all hit group types. Declaration public string ClosestHitEntryPoint Field Value Type Description string GeneralEntryPoint Optional name of the general shader associated with the hit group. This field can be used with all hit group types. Declaration public string GeneralEntryPoint Field Value Type Description string IntersectionEntryPoint Optional name of the intersection shader associated with the hit group. This field can only be used with hit groups of type procedural primitive. Declaration public string IntersectionEntryPoint Field Value Type Description string Name The name of the hit group. Declaration public string Name Field Value Type Description string Type A value from the HitGroupType enumeration specifying the type of the hit group. Declaration public HitGroupDescription.HitGroupType Type Field Value Type Description HitGroupDescription.HitGroupType Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.html",
    "title": "Namespace Evergine.Common.Graphics.Raytracing | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Graphics.Raytracing Classes AccelerationStructureAABBs Acceleration Structure AABB Geometry. AccelerationStructureGeometry This struct represent a basic raytracing geometry. AccelerationStructureTriangles Acceleration Structure Triangle geometry. BottomLevelAS Bottom Level Acceleration Structure. RaytracingPipelineState This class represent the GPU raytracing pipeline. RaytracingShaderStateDescription This class contains all the raytracing shader stages. TopLevelAS Top Level Acceleration Structure. Structs AccelerationStructureInstance This data structure is used in GPU memory during acceleration structure build. This struct definition is useful if generating instance data on the CPU first then uploading to the GPU. But apps are also free to generate instance descriptions directly into GPU memory from compute shaders for instance, following the same layout. BottomLevelASDescription The acceleration structure bottom level description. DispatchRaysDescription Describes the properties of a ray dispatch operation initiated with a call to DispatchRays. HitGroupDescription Describes a raytracing hit group state subobject that can be included in a state object. RaytracingPipelineDescription Contains properties that describe the characteristics of a new pipeline state object. TopLevelASDescription The top level acceleration structure description. Enums AccelerationStructureFlags Flags specifying additional parameters for acceleration structure builds. AccelerationStructureGeometryFlags Flags specifying additional parameters for acceleration structure builds. AccelerationStructureInstanceFlags Raytracing instance flags. HitGroupDescription.HitGroupType Hit Group Type."
  },
  "api/Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.html",
    "title": "Struct RaytracingPipelineDescription | Evergine Doc",
    "keywords": "Struct RaytracingPipelineDescription Contains properties that describe the characteristics of a new pipeline state object. Implements IEquatable<RaytracingPipelineDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public struct RaytracingPipelineDescription : IEquatable<RaytracingPipelineDescription> Constructors RaytracingPipelineDescription(ResourceLayout[], RaytracingShaderStateDescription, HitGroupDescription[], uint, uint, uint) Initializes a new instance of the RaytracingPipelineDescription struct. Declaration public RaytracingPipelineDescription(ResourceLayout[] resourceLayouts, RaytracingShaderStateDescription shaderDescription, HitGroupDescription[] hitGroupDescriptions, uint maxRecursionDepth, uint maxPayloadSize, uint maxAttributeSize) Parameters Type Name Description ResourceLayout[] resourceLayouts The resources layout description. RaytracingShaderStateDescription shaderDescription The raytracing shader. HitGroupDescription[] hitGroupDescriptions The hit group descriptions. uint maxRecursionDepth Max Recursion Depth. uint maxPayloadSize Max Payload Size. uint maxAttributeSize Max Attribute Size. Fields HitGroups Gets or sets the raytracing hit groups. Declaration public HitGroupDescription[] HitGroups Field Value Type Description HitGroupDescription[] MaxAttributeSizeInBytes The maximum number of scalars (counted as 4 bytes each) that can be used for attributes in pipelines that contain this shader. The value cannot exceed D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES constant (https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html#constants). Declaration public uint MaxAttributeSizeInBytes Field Value Type Description uint MaxPayloadSizeInBytes The maximum storage for scalars (counted as 4 bytes each) in ray payloads in raytracing pipelines that contain this program. Callable shader payloads are not part of this limit. This field is ignored for payloads that use payload access qualifiers. Declaration public uint MaxPayloadSizeInBytes Field Value Type Description uint MaxTraceRecursionDepth Limit on ray recursion for the raytracing pipeline. It must be in the range of 0 to 31. Below the maximum recursion depth, shader invocations such as closest hit or miss shaders can call TraceRay any number of times. At the maximum recursion depth, TraceRay calls result in the device going into removed state. Declaration public uint MaxTraceRecursionDepth Field Value Type Description uint ResourceLayouts Describes the resources layout input. Declaration public ResourceLayout[] ResourceLayouts Field Value Type Description ResourceLayout[] Shaders Gets or sets the raytracing shader program. Declaration public RaytracingShaderStateDescription Shaders Field Value Type Description RaytracingShaderStateDescription Methods Equals(RaytracingPipelineDescription) Returns a hash code for this instance. Declaration public bool Equals(RaytracingPipelineDescription other) Parameters Type Name Description RaytracingPipelineDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(RaytracingPipelineDescription, RaytracingPipelineDescription) Implements the operator ==. Declaration public static bool operator ==(RaytracingPipelineDescription value1, RaytracingPipelineDescription value2) Parameters Type Name Description RaytracingPipelineDescription value1 The value1. RaytracingPipelineDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(RaytracingPipelineDescription, RaytracingPipelineDescription) Implements the operator ==. Declaration public static bool operator !=(RaytracingPipelineDescription value1, RaytracingPipelineDescription value2) Parameters Type Name Description RaytracingPipelineDescription value1 The value1. RaytracingPipelineDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.RaytracingPipelineState.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.RaytracingPipelineState.html",
    "title": "Class RaytracingPipelineState | Evergine Doc",
    "keywords": "Class RaytracingPipelineState This class represent the GPU raytracing pipeline. Inheritance object PipelineState RaytracingPipelineState DX12RaytracingPipelineState VKRaytracingPipelineState Implements IDisposable Inherited Members PipelineState.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public abstract class RaytracingPipelineState : PipelineState, IDisposable Constructors RaytracingPipelineState(ref RaytracingPipelineDescription) Initializes a new instance of the RaytracingPipelineState class. Declaration public RaytracingPipelineState(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The pipelineState description. Fields Description Gets the raytracing pipelinestate description. Declaration public readonly RaytracingPipelineDescription Description Field Value Type Description RaytracingPipelineDescription disposed Whether the instance is disposed or not. Declaration protected bool disposed Field Value Type Description bool Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.html",
    "title": "Class RaytracingShaderStateDescription | Evergine Doc",
    "keywords": "Class RaytracingShaderStateDescription This class contains all the raytracing shader stages. Inheritance object ShaderStateDescription RaytracingShaderStateDescription Implements IEquatable<ShaderStateDescription> IEquatable<RaytracingShaderStateDescription> Inherited Members ShaderStateDescription.constantBuffersBindings ShaderStateDescription.texturesBindings ShaderStateDescription.bufferParametersBinding ShaderStateDescription.Equals(ShaderStateDescription) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public class RaytracingShaderStateDescription : ShaderStateDescription, IEquatable<ShaderStateDescription>, IEquatable<RaytracingShaderStateDescription> Fields AnyHitShader Gets or sets the AnyHit shader program. Declaration public Shader[] AnyHitShader Field Value Type Description Shader[] ClosestHitShader Gets or sets the closestHit shader program. Declaration public Shader[] ClosestHitShader Field Value Type Description Shader[] IntersectionShader Gets or sets the Intersection shader program. Declaration public Shader[] IntersectionShader Field Value Type Description Shader[] MissShader Gets or sets the Miss shader program. Declaration public Shader[] MissShader Field Value Type Description Shader[] RayGenerationShader Gets or sets the Raygeneration shader program. Declaration public Shader RayGenerationShader Field Value Type Description Shader Methods Equals(RaytracingShaderStateDescription) Declaration public bool Equals(RaytracingShaderStateDescription other) Parameters Type Name Description RaytracingShaderStateDescription other Returns Type Description bool Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ShaderStateDescription.Equals(object) GetEntryPointByStage(ShaderStages) Gets the entrypoint name from Shader stage index. Declaration public string[] GetEntryPointByStage(ShaderStages stage) Parameters Type Name Description ShaderStages stage Shader Stage. Returns Type Description string[] Entry point name. GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ShaderStateDescription.GetHashCode() Implements IEquatable<T> IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.TopLevelAS.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.TopLevelAS.html",
    "title": "Class TopLevelAS | Evergine Doc",
    "keywords": "Class TopLevelAS Top Level Acceleration Structure. Inheritance object GraphicsResource TopLevelAS DX12TopLevelAS VKTopLevelAS Implements IDisposable Inherited Members GraphicsResource.disposed GraphicsResource.Context GraphicsResource.NativePointer GraphicsResource.Disposed GraphicsResource.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public abstract class TopLevelAS : GraphicsResource, IDisposable Constructors TopLevelAS(GraphicsContext, ref TopLevelASDescription) Initializes a new instance of the TopLevelAS class. Declaration protected TopLevelAS(GraphicsContext context, ref TopLevelASDescription description) Parameters Type Name Description GraphicsContext context The device context. TopLevelASDescription description The Top Level Acceleration Structure description. Fields Description Get the Acceleration Structure description. Declaration public TopLevelASDescription Description Field Value Type Description TopLevelASDescription Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Raytracing.TopLevelASDescription.html": {
    "href": "api/Evergine.Common.Graphics.Raytracing.TopLevelASDescription.html",
    "title": "Struct TopLevelASDescription | Evergine Doc",
    "keywords": "Struct TopLevelASDescription The top level acceleration structure description. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.Raytracing Assembly: Evergine.Common.dll Syntax public struct TopLevelASDescription Fields Flags The update flags. Declaration public AccelerationStructureFlags Flags Field Value Type Description AccelerationStructureFlags Instances The array of Instance descriptions. Declaration public AccelerationStructureInstance[] Instances Field Value Type Description AccelerationStructureInstance[] Offset The instance buffer offset. Declaration public uint Offset Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.RenderLayerDescription.html": {
    "href": "api/Evergine.Common.Graphics.RenderLayerDescription.html",
    "title": "Class RenderLayerDescription | Evergine Doc",
    "keywords": "Class RenderLayerDescription The render layer description class. Inheritance object RenderLayerDescription Implements ILoadable IDisposable IDependencyObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class RenderLayerDescription : ILoadable, IDisposable, IDependencyObject Constructors RenderLayerDescription() Initializes a new instance of the RenderLayerDescription class. Declaration public RenderLayerDescription() Fields Order The layer order. Declaration [RenderPropertyAsInput(-512, 511, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 5)] public int Order Field Value Type Description int SortMode The sorting mode. Declaration public SortMode SortMode Field Value Type Description SortMode Properties Dependencies Gets the dependency list. Declaration public Lazy<List<IDependencyLink>> Dependencies { get; } Property Value Type Description Lazy<List<IDependencyLink>> Id Gets or sets the asset Id. Declaration public Guid Id { get; set; } Property Value Type Description Guid ReaderVersion Gets the reader version. Declaration public Version ReaderVersion { get; } Property Value Type Description Version RenderState Gets or sets gets the render state of the layer. Declaration public RenderStateDescription RenderState { get; set; } Property Value Type Description RenderStateDescription Methods Dispose() Declaration public void Dispose() GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() Invalidate(ILoadable) Invalidates this instance and raise the Invalidated event with the new ILoadable instance. Declaration public void Invalidate(ILoadable newInstance) Parameters Type Name Description ILoadable newInstance The new ILoadable instance. ReleaseUnusedMemory() Release unused memory. Declaration public void ReleaseUnusedMemory() Events Invalidated Occurs when this instance has been invalidated and all references must be reloaded. Declaration public event EventHandler<ILoadable> Invalidated Event Type Type Description EventHandler<ILoadable> RenderLayerStateChanged Event when any render state parameter changed Declaration public event EventHandler RenderLayerStateChanged Event Type Type Description EventHandler Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.RenderPassDescription.html": {
    "href": "api/Evergine.Common.Graphics.RenderPassDescription.html",
    "title": "Struct RenderPassDescription | Evergine Doc",
    "keywords": "Struct RenderPassDescription Structure specifying render pass begin info. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct RenderPassDescription Constructors RenderPassDescription(FrameBuffer, ClearValue) Initializes a new instance of the RenderPassDescription struct. Declaration public RenderPassDescription(FrameBuffer frameBuffer, ClearValue clearValue) Parameters Type Name Description FrameBuffer frameBuffer The frameBuffer containing the attachments that are used with the renderpass. ClearValue clearValue That contains clear values for each attachment. Fields ClearValue Array that contains clear values for each attachment. Declaration public ClearValue ClearValue Field Value Type Description ClearValue FrameBuffer The frameBuffer containing the attachments that are used with the renderpass. Declaration public FrameBuffer FrameBuffer Field Value Type Description FrameBuffer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.RenderStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.RenderStateDescription.html",
    "title": "Struct RenderStateDescription | Evergine Doc",
    "keywords": "Struct RenderStateDescription This struct represent all the parameters in the render states. Implements IEquatable<RenderStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct RenderStateDescription : IEquatable<RenderStateDescription> Fields BlendFactor Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both. If you created the blend-state object with D3D11_BLEND_BLEND_FACTOR or D3D11_BLEND_INV_BLEND_FACTOR, the blending stage uses the non-NULL array of blend factors. If you didn't create the blend-state object with D3D11_BLEND_BLEND_FACTOR or D3D11_BLEND_INV_BLEND_FACTOR, the blending stage does not use the non-NULL array of blend factors; the runtime stores the blend factors, and you can later call ID3D11DeviceContext::OMGetBlendState to retrieve the blend factors. If you pass NULL, the runtime uses or stores a blend factor equal to { 1, 1, 1, 1 }. Declaration public Vector4? BlendFactor Field Value Type Description Vector4? BlendState Gets or sets the BlendState state. Declaration public BlendStateDescription BlendState Field Value Type Description BlendStateDescription DepthStencilState Gets or sets the DepthStencil state. Declaration public DepthStencilStateDescription DepthStencilState Field Value Type Description DepthStencilStateDescription RasterizerState Gets or sets the Rasterizer State. Declaration public RasterizerStateDescription RasterizerState Field Value Type Description RasterizerStateDescription SampleMask 32-bit sample coverage. The default value is 0xFFFFFF. See remarks. Declaration public int? SampleMask Field Value Type Description int? StencilReference The reference value to use when doing a stencil test. Declaration public int StencilReference Field Value Type Description int Properties Default Gets default values for RenderStateDescription. Declaration public static RenderStateDescription Default { get; } Property Value Type Description RenderStateDescription Methods Equals(RenderStateDescription) Returns a hash code for this instance. Declaration public bool Equals(RenderStateDescription other) Parameters Type Name Description RenderStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() SetDefault() Default RenderStateDescription values. Declaration public void SetDefault() Operators operator ==(RenderStateDescription, RenderStateDescription) Implements the operator ==. Declaration public static bool operator ==(RenderStateDescription value1, RenderStateDescription value2) Parameters Type Name Description RenderStateDescription value1 The value1. RenderStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(RenderStateDescription, RenderStateDescription) Implements the operator ==. Declaration public static bool operator !=(RenderStateDescription value1, RenderStateDescription value2) Parameters Type Name Description RenderStateDescription value1 The value1. RenderStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceCpuAccess.html": {
    "href": "api/Evergine.Common.Graphics.ResourceCpuAccess.html",
    "title": "Enum ResourceCpuAccess | Evergine Doc",
    "keywords": "Enum ResourceCpuAccess Specifies the types of CPU access allowed for a resource. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum ResourceCpuAccess : byte Fields Name Description None None (default value). Read the CPU can be read this resources. Write The CPU can be write this resource. Extension Methods DX11ExtensionsMethods.ToDirectX(ResourceCpuAccess) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceFactory.html": {
    "href": "api/Evergine.Common.Graphics.ResourceFactory.html",
    "title": "Class ResourceFactory | Evergine Doc",
    "keywords": "Class ResourceFactory This Factory allow create GPU device resources. Inheritance object ResourceFactory DX11ResourceFactory DX12ResourceFactory MTLResourceFactory GLResourceFactory VKResourceFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class ResourceFactory Properties GraphicsContext Gets the generic graphicsContext. Declaration protected abstract GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Methods CreateBuffer(ref BufferDescription, string) Creates a Buffer instance. Declaration public Buffer CreateBuffer(ref BufferDescription description, string debugName = null) Parameters Type Name Description BufferDescription description The index buffer description. string debugName The buffer name (Debug purposes). Returns Type Description Buffer The new buffer. CreateBuffer(IntPtr, ref BufferDescription, string) Creates a Buffer instance. Declaration public Buffer CreateBuffer(IntPtr data, ref BufferDescription description, string debugName = null) Parameters Type Name Description IntPtr data Data pointer. BufferDescription description The index buffer description. string debugName The buffer name (Debug purposes). Returns Type Description Buffer The new buffer. CreateBufferInternal(IntPtr, ref BufferDescription) Creates a Buffer instance. Declaration protected abstract Buffer CreateBufferInternal(IntPtr data, ref BufferDescription description) Parameters Type Name Description IntPtr data Data pointer. BufferDescription description The index buffer description. Returns Type Description Buffer The new buffer. CreateBuffer<T>(ref T, ref BufferDescription, string) Creates a Buffer instance. Declaration public Buffer CreateBuffer<T>(ref T data, ref BufferDescription description, string debugName = null) where T : struct Parameters Type Name Description T data The data reference. BufferDescription description The index buffer description. string debugName The buffer name (Debug purposes). Returns Type Description Buffer The new buffer. Type Parameters Name Description T The data type. CreateBuffer<T>(T[], ref BufferDescription, string) Creates a Buffer instance. Declaration public Buffer CreateBuffer<T>(T[] data, ref BufferDescription description, string debugName = null) where T : struct Parameters Type Name Description T[] data The data array. BufferDescription description The index buffer description. string debugName The buffer name (Debug purposes). Returns Type Description Buffer The new buffer. Type Parameters Name Description T The data type. CreateCommandQueue(CommandQueueType) Creates a CommandQueue instance. Declaration public CommandQueue CreateCommandQueue(CommandQueueType queueType = CommandQueueType.Graphics) Parameters Type Name Description CommandQueueType queueType The commandQueue type, CommandQueueType. Returns Type Description CommandQueue The new commandQueue. CreateCommandQueueInternal(CommandQueueType) Creates a CommandQueue instance. Declaration protected abstract CommandQueue CreateCommandQueueInternal(CommandQueueType queueType = CommandQueueType.Graphics) Parameters Type Name Description CommandQueueType queueType The commandQueue type, CommandQueueType. Returns Type Description CommandQueue The new commandQueue. CreateComputePipeline(ref ComputePipelineDescription) Creates a ComputePipelineState instance. Declaration public ComputePipelineState CreateComputePipeline(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipelinestate description. Returns Type Description ComputePipelineState The new pipelinestate. CreateComputePipelineInternal(ref ComputePipelineDescription) Creates a ComputePipelineState instance. Declaration protected abstract ComputePipelineState CreateComputePipelineInternal(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipelinestate description. Returns Type Description ComputePipelineState The new pipelinestate. CreateFrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) Create a FrameBuffer instance. Declaration public FrameBuffer CreateFrameBuffer(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments = true) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth FrameBufferAttachment which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color FrameBufferAttachment , all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Returns Type Description FrameBuffer The new framebuffer. CreateFrameBuffer(uint, uint, PixelFormat, PixelFormat, string) Create a FrameBuffer instance. Declaration public FrameBuffer CreateFrameBuffer(uint width, uint height, PixelFormat colorTargetPixelFormat = PixelFormat.R8G8B8A8_UNorm, PixelFormat depthTargetPixelFormat = PixelFormat.D24_UNorm_S8_UInt, string debugName = null) Parameters Type Name Description uint width The with of the underlying textures. uint height The height of the underlying textures. PixelFormat colorTargetPixelFormat The pixel format of the color target. PixelFormat depthTargetPixelFormat The pixel format of the depth target. string debugName The framebuffer textures names (Debug purposes). Returns Type Description FrameBuffer The new framebuffer. CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) Create a FrameBuffer instance. Declaration protected abstract FrameBuffer CreateFrameBufferInternal(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth FrameBufferAttachment which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color FrameBufferAttachment , all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Returns Type Description FrameBuffer The new framebuffer. CreateGraphicsPipeline(ref GraphicsPipelineDescription) Creates a GraphicsPipelineState instance. Declaration public GraphicsPipelineState CreateGraphicsPipeline(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphics pipelinestate description. Returns Type Description GraphicsPipelineState The new pipelinestate. CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) Creates a GraphicsPipelineState instance. Declaration protected abstract GraphicsPipelineState CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphics pipelinestate description. Returns Type Description GraphicsPipelineState The new pipelinestate. CreateQueryHeap(ref QueryHeapDescription) Create a QueryHeap instance. Declaration public abstract QueryHeap CreateQueryHeap(ref QueryHeapDescription description) Parameters Type Name Description QueryHeapDescription description The queryheap description. Returns Type Description QueryHeap The new queryheap. CreateRaytracingPipeline(ref RaytracingPipelineDescription) Creates a RaytracingPipelineState instance. Declaration public RaytracingPipelineState CreateRaytracingPipeline(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipelinestate description. Returns Type Description RaytracingPipelineState The new pipelinestate. CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) Creates a RaytracingPipelineState instance. Declaration protected abstract RaytracingPipelineState CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipelinestate description. Returns Type Description RaytracingPipelineState The new pipelinestate. CreateResourceLayout(ref ResourceLayoutDescription) Create a new ResourceLayout. Declaration public ResourceLayout CreateResourceLayout(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The descriptions for all elements in this new resourceLayout. Returns Type Description ResourceLayout A new resourceLayout object. CreateResourceLayoutInternal(ref ResourceLayoutDescription) Create a new ResourceLayout. Declaration protected abstract ResourceLayout CreateResourceLayoutInternal(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The descriptions for all elements in this new resourceLayout. Returns Type Description ResourceLayout A new resourceLayout object. CreateResourceSet(ref ResourceSetDescription) Create a new ResourceSet. Declaration public ResourceSet CreateResourceSet(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The descriptions for all elements in this new resourceSet. Returns Type Description ResourceSet A new resourceSet object. CreateResourceSetInternal(ref ResourceSetDescription) Create a new ResourceSet. Declaration protected abstract ResourceSet CreateResourceSetInternal(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The descriptions for all elements in this new resourceSet. Returns Type Description ResourceSet A new resourceSet object. CreateSamplerState(ref SamplerStateDescription) Creates a SamplerState instance. Declaration public SamplerState CreateSamplerState(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. Returns Type Description SamplerState The new samplerstate. CreateSamplerStateInternal(ref SamplerStateDescription) Creates a SamplerState instance. Declaration protected abstract SamplerState CreateSamplerStateInternal(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. Returns Type Description SamplerState The new samplerstate. CreateShader(ref ShaderDescription) Create a Shader instance. Declaration public Shader CreateShader(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. Returns Type Description Shader The new shader. CreateShaderInternal(ref ShaderDescription) Create a Shader instance. Declaration protected abstract Shader CreateShaderInternal(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. Returns Type Description Shader The new shader. CreateTexture(DataBox[], ref TextureDescription, ref SamplerStateDescription, string) Creates a Texture instance. Declaration public Texture CreateTexture(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState, string debugName = null) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The sampler state description SamplerStateDescription struct. string debugName The texture name (Debug pruposes). Returns Type Description Texture The new texture. CreateTexture(DataBox[], ref TextureDescription, string) Creates a Texture instance. Declaration public Texture CreateTexture(DataBox[] data, ref TextureDescription description, string debugName = null) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. string debugName The texture name (Debug purposes). Returns Type Description Texture The new texture1D. CreateTexture(ref TextureDescription, string) Creates a Texture instance. Declaration public Texture CreateTexture(ref TextureDescription description, string debugName = null) Parameters Type Name Description TextureDescription description The texture description. string debugName The texture name (Debug purposes). Returns Type Description Texture The new texture. CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) Creates a Texture instance. Declaration protected abstract Texture CreateTextureInternal(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The sampler state description SamplerStateDescription struct. Returns Type Description Texture The new texture. GetTextureFromNativePointer(IntPtr, ref TextureDescription) Gets a Texture instance from an existing texture using the specified native pointer. Declaration public Texture GetTextureFromNativePointer(IntPtr texturePointer, ref TextureDescription textureDescription) Parameters Type Name Description IntPtr texturePointer The pointer of the texture. TextureDescription textureDescription The texture description of the already created texture. Returns Type Description Texture The texture instance. GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Gets a Texture instance from an existing texture using the specified native pointer. Declaration protected abstract Texture GetTextureFromNativePointerInternal(IntPtr texturePointer, ref TextureDescription textureDescription) Parameters Type Name Description IntPtr texturePointer The pointer of the texture. TextureDescription textureDescription The texture description of the already created texture. Returns Type Description Texture The texture instance. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceLayout.html": {
    "href": "api/Evergine.Common.Graphics.ResourceLayout.html",
    "title": "Class ResourceLayout | Evergine Doc",
    "keywords": "Class ResourceLayout This class represent a set of bindable resources. Inheritance object ResourceLayout DX11ResourceLayout DX12ResourceLayout MTLResourceLayout GLResourceLayout VKResourceLayout Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class ResourceLayout : IDisposable Constructors ResourceLayout(ref ResourceLayoutDescription) Initializes a new instance of the ResourceLayout class. Declaration public ResourceLayout(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The resource layout description. Fields Description The resource layout description. Declaration public readonly ResourceLayoutDescription Description Field Value Type Description ResourceLayoutDescription Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string Methods Dispose() Frees managed and unmanaged resources. Declaration public abstract void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceLayoutDescription.html": {
    "href": "api/Evergine.Common.Graphics.ResourceLayoutDescription.html",
    "title": "Struct ResourceLayoutDescription | Evergine Doc",
    "keywords": "Struct ResourceLayoutDescription This class describes the elements inside a ResourceLayout. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct ResourceLayoutDescription Constructors ResourceLayoutDescription(params LayoutElementDescription[]) Initializes a new instance of the ResourceLayoutDescription struct. Declaration public ResourceLayoutDescription(params LayoutElementDescription[] elements) Parameters Type Name Description LayoutElementDescription[] elements The elements descriptions. Fields DynamicConstantBufferCount The number of dynamic constant buffers. Declaration public int DynamicConstantBufferCount Field Value Type Description int Elements The Layout elements. Declaration public LayoutElementDescription[] Elements Field Value Type Description LayoutElementDescription[] Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceSet.html": {
    "href": "api/Evergine.Common.Graphics.ResourceSet.html",
    "title": "Class ResourceSet | Evergine Doc",
    "keywords": "Class ResourceSet This class describes the elements inside a ResourceLayout. Inheritance object ResourceSet DX11ResourceSet DX12ResourceSet MTLResourceSet GLResourceSet VKResourceSet Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class ResourceSet : IDisposable Constructors ResourceSet(ref ResourceSetDescription) Initializes a new instance of the ResourceSet class. Declaration public ResourceSet(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The resourceSet description. Fields Description The resourceSet description ResourceSetDescription. Declaration public readonly ResourceSetDescription Description Field Value Type Description ResourceSetDescription Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string Methods Dispose() /// Frees managed and unmanaged resources. Declaration public abstract void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceSetDescription.html": {
    "href": "api/Evergine.Common.Graphics.ResourceSetDescription.html",
    "title": "Struct ResourceSetDescription | Evergine Doc",
    "keywords": "Struct ResourceSetDescription This class describes the elements inside a ResourceLayout. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct ResourceSetDescription Constructors ResourceSetDescription(ResourceLayout, params GraphicsResource[]) Initializes a new instance of the ResourceSetDescription struct. Declaration public ResourceSetDescription(ResourceLayout layout, params GraphicsResource[] resources) Parameters Type Name Description ResourceLayout layout The resourceLayout object. GraphicsResource[] resources The list of resources. Fields Layout The resourceLayout object ResourceLayout. Declaration public ResourceLayout Layout Field Value Type Description ResourceLayout Resources An array of GraphicsResource elements as Textures, ConstantBuffers, Samples. Declaration public GraphicsResource[] Resources Field Value Type Description GraphicsResource[] Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceType.html": {
    "href": "api/Evergine.Common.Graphics.ResourceType.html",
    "title": "Enum ResourceType | Evergine Doc",
    "keywords": "Enum ResourceType The shader resource type. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ResourceType : byte Fields Name Description AccelerationStructure A raytracing acceleration structure. ConstantBuffer A Buffer accessed as a uniform buffer. Sampler A SamplerState. StructuredBuffer A Buffer accessed as a read-only storage buffer. StructuredBufferReadWrite A Bufferaccessed as a read-write storage buffer. Texture A read-only Texture. TextureReadWrite A read-write Texture. Extension Methods DX12ExtensionsMethods.ToDirectX(ResourceType) VKExtensionsMethods.ToVulkan(ResourceType, bool) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ResourceUsage.html": {
    "href": "api/Evergine.Common.Graphics.ResourceUsage.html",
    "title": "Enum ResourceUsage | Evergine Doc",
    "keywords": "Enum ResourceUsage Identifies expected texture use during rendering. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ResourceUsage : byte Fields Name Description Default A resource that requires read and write access by the GPU, Default value. Dynamic A resource that is accessible by both the GPU (read only) and the CPU (write only). A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame. Immutable A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. This type of resource must be initialized when it is created, since it cannot be changed after creation. Staging A resource that supports data transfer (copy) from the GPU to the CPU. Extension Methods DX11ExtensionsMethods.ToDirectX(ResourceUsage) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SamplerBorderColor.html": {
    "href": "api/Evergine.Common.Graphics.SamplerBorderColor.html",
    "title": "Enum SamplerBorderColor | Evergine Doc",
    "keywords": "Enum SamplerBorderColor Comparison options. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum SamplerBorderColor : byte Fields Name Description OpaqueBlack Opaque Black (0, 0, 0, 1) OpaqueWhite Opaque White (1, 1, 1, 1) TransparentBlack Transparent Black (0, 0, 0, 0) Extension Methods DX11ExtensionsMethods.ToDirectX(SamplerBorderColor) DX12ExtensionsMethods.ToDirectX(SamplerBorderColor) GLExtensionsMethods.ToOpenGL(SamplerBorderColor) VKExtensionsMethods.ToVulkan(SamplerBorderColor) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SamplerState.html": {
    "href": "api/Evergine.Common.Graphics.SamplerState.html",
    "title": "Class SamplerState | Evergine Doc",
    "keywords": "Class SamplerState This class represent a sampler state. Inheritance object GraphicsResource SamplerState DX11SamplerState DX12SamplerState MTLSamplerState GLSamplerState VKSamplerState Implements ILoadable IDisposable IDependencyObject Inherited Members GraphicsResource.disposed GraphicsResource.Context GraphicsResource.NativePointer GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class SamplerState : GraphicsResource, ILoadable, IDisposable, IDependencyObject Constructors SamplerState(GraphicsContext, ref SamplerStateDescription) Initializes a new instance of the SamplerState class. Declaration protected SamplerState(GraphicsContext context, ref SamplerStateDescription description) Parameters Type Name Description GraphicsContext context The graphics context. SamplerStateDescription description The sampler state description. Fields Description The sampler state description. Declaration public readonly SamplerStateDescription Description Field Value Type Description SamplerStateDescription Properties Dependencies Gets the dependency list. Declaration public Lazy<List<IDependencyLink>> Dependencies { get; } Property Value Type Description Lazy<List<IDependencyLink>> Id Gets or sets the asset Id. Declaration public Guid Id { get; set; } Property Value Type Description Guid Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string ReaderVersion Gets the reader version. Declaration public Version ReaderVersion { get; } Property Value Type Description Version Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() Invalidate(ILoadable) Invalidates this instance and raise the Invalidated event with the new ILoadable instance. Declaration public void Invalidate(ILoadable newInstance) Parameters Type Name Description ILoadable newInstance The new ILoadable instance. ReleaseUnusedMemory() Release unused memory. Declaration public void ReleaseUnusedMemory() Events Invalidated Occurs when this instance has been invalidated and all references must be reloaded. Declaration public event EventHandler<ILoadable> Invalidated Event Type Type Description EventHandler<ILoadable> Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SamplerStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.SamplerStateDescription.html",
    "title": "Struct SamplerStateDescription | Evergine Doc",
    "keywords": "Struct SamplerStateDescription Describes a sampler state. Implements IEquatable<SamplerStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct SamplerStateDescription : IEquatable<SamplerStateDescription> Fields AddressU Method to use for resolving a u texture coordinate that is outside the 0 to 1 range. Declaration public TextureAddressMode AddressU Field Value Type Description TextureAddressMode AddressV Method to use for resolving a v texture coordinate that is outside the 0 to 1 range. Declaration public TextureAddressMode AddressV Field Value Type Description TextureAddressMode AddressW Method to use for resolving a w texture coordinate that is outside the 0 to 1 range. Declaration public TextureAddressMode AddressW Field Value Type Description TextureAddressMode BorderColor Border color SamplerBorderColor. Declaration public SamplerBorderColor BorderColor Field Value Type Description SamplerBorderColor ComparisonFunc A function that compares sampled data against existing sampled data. Declaration public ComparisonFunction ComparisonFunc Field Value Type Description ComparisonFunction Filter Filtering method to use when sampling a texture. Declaration public TextureFilter Filter Field Value Type Description TextureFilter MaxAnisotropy Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is specified in Filter. Valid values are between 1 and 16. Declaration public uint MaxAnisotropy Field Value Type Description uint MaxLOD Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. Declaration public float MaxLOD Field Value Type Description float MinLOD Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. Declaration public float MinLOD Field Value Type Description float MipLODBias Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5. Declaration public float MipLODBias Field Value Type Description float Properties Default Gets default values for SamplerStateDescription. Declaration public static SamplerStateDescription Default { get; } Property Value Type Description SamplerStateDescription Methods Equals(SamplerStateDescription) Returns a hash code for this instance. Declaration public bool Equals(SamplerStateDescription other) Parameters Type Name Description SamplerStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() SetDefault() Default SamplerStateDescription values. Declaration public void SetDefault() Operators operator ==(SamplerStateDescription, SamplerStateDescription) Implements the operator ==. Declaration public static bool operator ==(SamplerStateDescription value1, SamplerStateDescription value2) Parameters Type Name Description SamplerStateDescription value1 The value1. SamplerStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(SamplerStateDescription, SamplerStateDescription) Implements the operator ==. Declaration public static bool operator !=(SamplerStateDescription value1, SamplerStateDescription value2) Parameters Type Name Description SamplerStateDescription value1 The value1. SamplerStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SamplerStateEnum.html": {
    "href": "api/Evergine.Common.Graphics.SamplerStateEnum.html",
    "title": "Enum SamplerStateEnum | Evergine Doc",
    "keywords": "Enum SamplerStateEnum The sampler state default values. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum SamplerStateEnum Fields Name Description AnisotropicClamp SamplerState description using anisotropic filter and clamp address mode for UVW. AnisotropicMirror SamplerState description using anisotropic filter and mirror address mode for UVW. AnisotropicWrap SamplerState description using anisotropic filter and wrap address mode for UVW. Custom Custom value LinearClamp SamplerState description using linear filter (trilinear) and clamp address mode for UVW. LinearMirror SamplerState description using linear filter (trilinear) and mirror address mode for UVW. LinearWrap SamplerState description using linear filter (trilinear) and wrap address mode for UVW. PointClamp SamplerState description using point filter (bilinear) and clamp address mode for UVW. PointMirror SamplerState description using point filter (bilinear) and mirror address mode for UVW. PointWrap SamplerState description using point filter (bilinear) and wrap address mode for UVW. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SamplerStates.html": {
    "href": "api/Evergine.Common.Graphics.SamplerStates.html",
    "title": "Class SamplerStates | Evergine Doc",
    "keywords": "Class SamplerStates Describes a sampler state. Inheritance object SamplerStates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class SamplerStates Fields AnisotropicClamp SamplerState description using anisotropic filter and clamp address mode for UVW. Declaration public static readonly SamplerStateDescription AnisotropicClamp Field Value Type Description SamplerStateDescription AnisotropicMirror SamplerState description using anisotropic filter and mirror address mode for UVW. Declaration public static readonly SamplerStateDescription AnisotropicMirror Field Value Type Description SamplerStateDescription AnisotropicWrap SamplerState description using anisotropic filter and wrap address mode for UVW. Declaration public static readonly SamplerStateDescription AnisotropicWrap Field Value Type Description SamplerStateDescription LinearClamp SamplerState description using linear filter (trilinear) and clamp address mode for UVW. Declaration public static readonly SamplerStateDescription LinearClamp Field Value Type Description SamplerStateDescription LinearMirror SamplerState description using linear filter (trilinear) and mirror address mode for UVW. Declaration public static readonly SamplerStateDescription LinearMirror Field Value Type Description SamplerStateDescription LinearWrap SamplerState description using linear filter (trilinear) and wrap address mode for UVW. Declaration public static readonly SamplerStateDescription LinearWrap Field Value Type Description SamplerStateDescription PointClamp SamplerState description using point filter (bilinear) and clamp address mode for UVW. Declaration public static readonly SamplerStateDescription PointClamp Field Value Type Description SamplerStateDescription PointMirror SamplerState description using point filter (bilinear) and mirror address mode for UVW. Declaration public static readonly SamplerStateDescription PointMirror Field Value Type Description SamplerStateDescription PointWrap SamplerState description using point filter (bilinear) and wrap address mode for UVW. Declaration public static readonly SamplerStateDescription PointWrap Field Value Type Description SamplerStateDescription"
  },
  "api/Evergine.Common.Graphics.SemanticStruct.html": {
    "href": "api/Evergine.Common.Graphics.SemanticStruct.html",
    "title": "Struct SemanticStruct | Evergine Doc",
    "keywords": "Struct SemanticStruct Structs that contains information about the semantic type and index. Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public readonly struct SemanticStruct Constructors SemanticStruct(ElementSemanticType, uint) Initializes a new instance of the SemanticStruct struct. Declaration public SemanticStruct(ElementSemanticType semantic, uint semanticIndex = 0) Parameters Type Name Description ElementSemanticType semantic The element semantic. uint semanticIndex The semantic index. Properties Position_0 Gets the semantic of the default position. Declaration public static SemanticStruct Position_0 { get; } Property Value Type Description SemanticStruct Semantic Gets the type of the element. Declaration public ElementSemanticType Semantic { get; } Property Value Type Description ElementSemanticType SemanticIndex Gets the semantic index of the element. Declaration public uint SemanticIndex { get; } Property Value Type Description uint Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators operator ==(SemanticStruct, SemanticStruct) Declaration public static bool operator ==(SemanticStruct left, SemanticStruct right) Parameters Type Name Description SemanticStruct left SemanticStruct right Returns Type Description bool operator !=(SemanticStruct, SemanticStruct) Declaration public static bool operator !=(SemanticStruct left, SemanticStruct right) Parameters Type Name Description SemanticStruct left SemanticStruct right Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Shader.html": {
    "href": "api/Evergine.Common.Graphics.Shader.html",
    "title": "Class Shader | Evergine Doc",
    "keywords": "Class Shader This class represent a single shader program. Inheritance object GraphicsResource Shader DX11Shader DX12Shader MTLShader GLShader VKShader Implements IDisposable Inherited Members GraphicsResource.disposed GraphicsResource.Context GraphicsResource.NativePointer GraphicsResource.Disposed GraphicsResource.Dispose() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class Shader : GraphicsResource, IDisposable Constructors Shader(GraphicsContext, ref ShaderDescription) Initializes a new instance of the Shader class. Declaration protected Shader(GraphicsContext context, ref ShaderDescription description) Parameters Type Name Description GraphicsContext context The graphics context. ShaderDescription description The shader description. Fields Description Gets the shader description. Declaration public readonly ShaderDescription Description Field Value Type Description ShaderDescription Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string Methods GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ShaderDescription.html": {
    "href": "api/Evergine.Common.Graphics.ShaderDescription.html",
    "title": "Struct ShaderDescription | Evergine Doc",
    "keywords": "Struct ShaderDescription This struct represent all parameters requiered to create a new shader. Implements IEquatable<ShaderDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct ShaderDescription : IEquatable<ShaderDescription> Constructors ShaderDescription(ShaderStages, string, byte[]) Initializes a new instance of the ShaderDescription struct. Declaration public ShaderDescription(ShaderStages stage, string entryPoint, byte[] shaderBytes) Parameters Type Name Description ShaderStages stage The shader stage. string entryPoint The entry point function. byte[] shaderBytes The shader code in bytes. Fields EntryPoint Gets the name of the entry point function. Declaration public readonly string EntryPoint Field Value Type Description string ShaderBytes Gets the raw shader code. Declaration public readonly byte[] ShaderBytes Field Value Type Description byte[] Stage Gets the shader stage. Declaration public readonly ShaderStages Stage Field Value Type Description ShaderStages Methods Equals(ShaderDescription) Determines whether the specified parameter is equal to this instance. Declaration public bool Equals(ShaderDescription other) Parameters Type Name Description ShaderDescription other Other used to compare. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(ShaderDescription, ShaderDescription) Implements the operator ==. Declaration public static bool operator ==(ShaderDescription value1, ShaderDescription value2) Parameters Type Name Description ShaderDescription value1 The value1. ShaderDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(ShaderDescription, ShaderDescription) Implements the operator ==. Declaration public static bool operator !=(ShaderDescription value1, ShaderDescription value2) Parameters Type Name Description ShaderDescription value1 The value1. ShaderDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ShaderMatrices.html": {
    "href": "api/Evergine.Common.Graphics.ShaderMatrices.html",
    "title": "Struct ShaderMatrices | Evergine Doc",
    "keywords": "Struct ShaderMatrices Stores all the matrices needed by a shader. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct ShaderMatrices Fields World World matrix. Declaration public Matrix4x4 World Field Value Type Description Matrix4x4 WorldInverseTranspose World inverse transpose matrix. Declaration public Matrix4x4 WorldInverseTranspose Field Value Type Description Matrix4x4 WorldViewProj World * View * Projection matrix. Declaration public Matrix4x4 WorldViewProj Field Value Type Description Matrix4x4 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ShaderStages.html": {
    "href": "api/Evergine.Common.Graphics.ShaderStages.html",
    "title": "Enum ShaderStages | Evergine Doc",
    "keywords": "Enum ShaderStages Specifies the usage of a resource in shaders. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum ShaderStages : short Fields Name Description AnyHit The Raytracing anyHit shader stage. ClosestHit The Raytracing closestHit shader stage. Compute The compute shader stage. Domain The domain shader stage. Geometry The geometry shader stage. Hull The hull shader stage. Intersection The Raytracing intersection shader stage. Miss The Raytracing miss shader stage. Pixel The pixel shader stage. RayGeneration The Raytracing raygeneration shader stage. Undefined No stages. Vertex The vertex shader stage. Extension Methods DX11ExtensionsMethods.ToDirectXString(ShaderStages) DX12ExtensionsMethods.ToDirectXStage(ShaderStages) DX12ExtensionsMethods.ToDirectXString(ShaderStages) VKExtensionsMethods.ToVulkan(ShaderStages) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ShaderStagesHelpers.html": {
    "href": "api/Evergine.Common.Graphics.ShaderStagesHelpers.html",
    "title": "Class ShaderStagesHelpers | Evergine Doc",
    "keywords": "Class ShaderStagesHelpers Helpers for ShaderStages Enum. Inheritance object ShaderStagesHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public static class ShaderStagesHelpers Fields RasterizationShaderStagesCount Gets the rasterization stages (Vertex, Hull, Domain, Geometry, Pixel and Compute). Declaration public static readonly int RasterizationShaderStagesCount Field Value Type Description int ShaderStagesArray Gets the shader stages as array. Declaration public static readonly ShaderStages[] ShaderStagesArray Field Value Type Description ShaderStages[] ShaderStagesCount Gets the shaderstages count. Declaration public static readonly int ShaderStagesCount Field Value Type Description int Methods IndexOf(ShaderStages) Gets the shaderStage index. Declaration public static int IndexOf(ShaderStages stages) Parameters Type Name Description ShaderStages stages The shaderstage. Returns Type Description int The stage index."
  },
  "api/Evergine.Common.Graphics.ShaderStateDescription.html": {
    "href": "api/Evergine.Common.Graphics.ShaderStateDescription.html",
    "title": "Class ShaderStateDescription | Evergine Doc",
    "keywords": "Class ShaderStateDescription Shader State Description. Inheritance object ShaderStateDescription ComputeShaderStateDescription GraphicsShaderStateDescription RaytracingShaderStateDescription Implements IEquatable<ShaderStateDescription> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class ShaderStateDescription : IEquatable<ShaderStateDescription> Fields bufferParametersBinding Uniform parameters bindings. Used in WebGL1 and OpenGL ES 2.0. Declaration public Dictionary<string, BufferParameterBinding> bufferParametersBinding Field Value Type Description Dictionary<string, BufferParameterBinding> constantBuffersBindings ConstantBuffers bindings. Used in OpenGL 410 or minor and OpenGLES 300 or minor. Declaration public List<(string name, uint slot)> constantBuffersBindings Field Value Type Description List<(string name, uint slot)> texturesBindings Textures bindings. Used in OpenGL 410 or minor and OpenGLES 300 or minor. Declaration public List<(string name, uint slot)> texturesBindings Field Value Type Description List<(string name, uint slot)> Methods Equals(ShaderStateDescription) Declaration public bool Equals(ShaderStateDescription other) Parameters Type Name Description ShaderStateDescription other Returns Type Description bool Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() Operators operator ==(ShaderStateDescription, ShaderStateDescription) Implements the operator ==. Declaration public static bool operator ==(ShaderStateDescription value1, ShaderStateDescription value2) Parameters Type Name Description ShaderStateDescription value1 The value1. ShaderStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(ShaderStateDescription, ShaderStateDescription) Implements the operator ==. Declaration public static bool operator !=(ShaderStateDescription value1, ShaderStateDescription value2) Parameters Type Name Description ShaderStateDescription value1 The value1. ShaderStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SortMode.html": {
    "href": "api/Evergine.Common.Graphics.SortMode.html",
    "title": "Enum SortMode | Evergine Doc",
    "keywords": "Enum SortMode Specify the sort order. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum SortMode : byte Fields Name Description BackToFront Back to Front sorting. FrontToBack Front to back sorting. None No sorting. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SpotLightStruct.html": {
    "href": "api/Evergine.Common.Graphics.SpotLightStruct.html",
    "title": "Struct SpotLightStruct | Evergine Doc",
    "keywords": "Struct SpotLightStruct Struct with aligned data for sending a spot light to the shader. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct SpotLightStruct Fields Color Light diffuse color. Declaration public Vector3 Color Field Value Type Description Vector3 ConeAngle The cone angle. Declaration public float ConeAngle Field Value Type Description float Direction The direction. Declaration public Vector3 Direction Field Value Type Description Vector3 Falloff Light range. Declaration public float Falloff Field Value Type Description float Position Light position. Declaration public Vector3 Position Field Value Type Description Vector3 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SpriteDrawMode.html": {
    "href": "api/Evergine.Common.Graphics.SpriteDrawMode.html",
    "title": "Enum SpriteDrawMode | Evergine Doc",
    "keywords": "Enum SpriteDrawMode Specifies texture addressing mode. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum SpriteDrawMode Fields Name Description Simple Displays the full sprite. Sliced The SpriteRenderer will render the sprite as a nine patch image where the corners will remain constant and the other sections will scale. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.StencilOperation.html": {
    "href": "api/Evergine.Common.Graphics.StencilOperation.html",
    "title": "Enum StencilOperation | Evergine Doc",
    "keywords": "Enum StencilOperation The stencil operations that can be performed during depth-stencil testing. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum StencilOperation : byte Fields Name Description Decrement Decrement the stencil value by 1, and wrap the result if necessary. DecrementSaturation Decrement the stencil value by 1, and clamp the result. Increment Increment the stencil value by 1, and wrap the result if necessary. IncrementSaturation Increment the stencil value by 1, and clamp the result. Invert Invert the stencil data. Keep Keep the existing stencil data. Replace Set the stencil data to the reference value. Zero Set the stencil data to 0. Extension Methods VKExtensionsMethods.ToVulkan(StencilOperation) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SubResourceInfo.html": {
    "href": "api/Evergine.Common.Graphics.SubResourceInfo.html",
    "title": "Struct SubResourceInfo | Evergine Doc",
    "keywords": "Struct SubResourceInfo Struct containing the sub resource info. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct SubResourceInfo Fields ArrayLayer The array layer. Declaration public uint ArrayLayer Field Value Type Description uint MipDepth The mip depth. Declaration public uint MipDepth Field Value Type Description uint MipHeight The mip height. Declaration public uint MipHeight Field Value Type Description uint MipLevel The mip level. Declaration public uint MipLevel Field Value Type Description uint MipWidth The mip width. Declaration public uint MipWidth Field Value Type Description uint Offset The offset. Declaration public ulong Offset Field Value Type Description ulong RowPitch The row pitch. Declaration public uint RowPitch Field Value Type Description uint SizeInBytes The size in bytes. Declaration public uint SizeInBytes Field Value Type Description uint SlicePitch The slice pitch. Declaration public uint SlicePitch Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Surface.html": {
    "href": "api/Evergine.Common.Graphics.Surface.html",
    "title": "Class Surface | Evergine Doc",
    "keywords": "Class Surface Represent a control/widget on a WindowSystem. Inheritance object Surface Window FormsSurface WPFSurface Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class Surface : IDisposable Constructors Surface(uint, uint) Initializes a new instance of the Surface class. Declaration public Surface(uint width, uint height) Parameters Type Name Description uint width surface width. uint height surface height. Fields Height Surface Height. Declaration public uint Height Field Value Type Description uint SurfaceInfo Surface information. Declaration public SurfaceInfo SurfaceInfo Field Value Type Description SurfaceInfo Width Surface Width. Declaration public uint Width Field Value Type Description uint Properties DPIDensity Gets or sets the surface DPI density. Declaration public float DPIDensity { get; protected set; } Property Value Type Description float KeyboardDispatcher Gets the keyboard events dispatcher associated to this surface. Declaration public abstract KeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description KeyboardDispatcher MouseDispatcher Gets the mouse events dispatcher associated to this surface. Declaration public abstract MouseDispatcher MouseDispatcher { get; } Property Value Type Description MouseDispatcher TouchDispatcher Gets the touch events dispatcher associated to this surface. Declaration public abstract PointerDispatcher TouchDispatcher { get; } Property Value Type Description PointerDispatcher Methods Destroy() Remove managed resources. Declaration protected virtual void Destroy() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() OnClosing() Raise base window closing event. Declaration protected virtual void OnClosing() OnGotFocus() Raise base got focus event. Declaration protected virtual void OnGotFocus() OnInfoChanged() Raise surface info changed. Declaration protected virtual void OnInfoChanged() OnLostFocus() Raise base lost focus event. Declaration protected virtual void OnLostFocus() OnSizeChanged() Raise base size changed event. Declaration protected virtual void OnSizeChanged() Events Closing Occurs when surface is closing Declaration public event EventHandler Closing Event Type Type Description EventHandler GotFocus Occurs when surface get focus Declaration public event EventHandler GotFocus Event Type Type Description EventHandler LostFocus Occurs when surface lost focus Declaration public event EventHandler LostFocus Event Type Type Description EventHandler OnScreenSizeChanged Occurs when surface size is changed. Declaration public event EventHandler<SizeEventArgs> OnScreenSizeChanged Event Type Type Description EventHandler<SizeEventArgs> OnSurfaceInfoChanged Occurs when surface info is changed. Declaration public event EventHandler<SurfaceInfo> OnSurfaceInfoChanged Event Type Type Description EventHandler<SurfaceInfo> Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SurfaceInfo.html": {
    "href": "api/Evergine.Common.Graphics.SurfaceInfo.html",
    "title": "Struct SurfaceInfo | Evergine Doc",
    "keywords": "Struct SurfaceInfo Surface info struct. Implements IEquatable<SurfaceInfo> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct SurfaceInfo : IEquatable<SurfaceInfo> Constructors SurfaceInfo(IntPtr, SurfaceTypes) Initializes a new instance of the SurfaceInfo struct. Declaration public SurfaceInfo(IntPtr handle, SurfaceInfo.SurfaceTypes type) Parameters Type Name Description IntPtr handle Surface native handle. SurfaceInfo.SurfaceTypes type Surface type. SurfaceInfo(IntPtr[], SurfaceTypes, params object[]) Initializes a new instance of the SurfaceInfo struct. Declaration public SurfaceInfo(IntPtr[] handles, SurfaceInfo.SurfaceTypes type, params object[] nativeSurfaceObjects) Parameters Type Name Description IntPtr[] handles Surface native handle. SurfaceInfo.SurfaceTypes type Surface type. object[] nativeSurfaceObjects Native surface object. Fields Handles Surface native handles. Declaration public IntPtr[] Handles Field Value Type Description IntPtr[] NativeSurfaceObjects Native surface objects. Declaration public object[] NativeSurfaceObjects Field Value Type Description object[] Type Surface type. Declaration public SurfaceInfo.SurfaceTypes Type Field Value Type Description SurfaceInfo.SurfaceTypes Methods Equals(SurfaceInfo) Determines whether the specified object is equal to this instance. Declaration public bool Equals(SurfaceInfo other) Parameters Type Name Description SurfaceInfo other Other used to compare. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.html": {
    "href": "api/Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.html",
    "title": "Enum SurfaceInfo.SurfaceTypes | Evergine Doc",
    "keywords": "Enum SurfaceInfo.SurfaceTypes Surface tecnologies. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum SurfaceInfo.SurfaceTypes Fields Name Description Android Android System Forms Window forms IOS IOS System MacOS Mac OS. MixedReality Mixed Reality. SDL Simple DirectMedia Layter UWP UWP System WPF Windows Presentation Foundation. Wayland Wayland window system Web Web System. WinUI WinUI system. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SwapChain.html": {
    "href": "api/Evergine.Common.Graphics.SwapChain.html",
    "title": "Class SwapChain | Evergine Doc",
    "keywords": "Class SwapChain SwapChain instance. Inheritance object SwapChain DX11SwapChain DX12SwapChain MTLSwapChain GLSwapChain VKSwapChain Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class SwapChain : IDisposable Fields GraphicsContext The device context refenrece. Declaration public GraphicsContext GraphicsContext Field Value Type Description GraphicsContext disposed Holds if the instance has been disposed. Declaration protected bool disposed Field Value Type Description bool Properties FrameBuffer Gets or sets the swapchain Framebuffer. Declaration public FrameBuffer FrameBuffer { get; protected set; } Property Value Type Description FrameBuffer Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string NativeSwapChainPointer Gets the native SwapChain pointer. Default value is returned if the platform does not support it. Declaration public virtual IntPtr NativeSwapChainPointer { get; } Property Value Type Description IntPtr SwapChainDescription Gets or sets the SwapChain description. Declaration public SwapChainDescription SwapChainDescription { get; protected set; } Property Value Type Description SwapChainDescription VerticalSync Gets or sets a value indicating whether vertical synchronization is enable or not. Declaration public virtual bool VerticalSync { get; set; } Property Value Type Description bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public abstract void Dispose() GetCurrentFramebufferTexture() Gets the current Framebuffer Texture. Declaration public abstract Texture GetCurrentFramebufferTexture() Returns Type Description Texture Framebuffer texture. InitFrame() This methid is invoked when the frame is start.. Declaration public virtual void InitFrame() Present() Presents a rendered image to the user. Declaration public abstract void Present() RefreshSurfaceInfo(SurfaceInfo) The swapchain surface info has changed. Declaration public abstract void RefreshSurfaceInfo(SurfaceInfo surfaceInfo) Parameters Type Name Description SurfaceInfo surfaceInfo The surface info. ResizeSwapChain(uint, uint) Resize SwapChain. Declaration public abstract void ResizeSwapChain(uint width, uint height) Parameters Type Name Description uint width New width. uint height New height. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.SwapChainDescription.html": {
    "href": "api/Evergine.Common.Graphics.SwapChainDescription.html",
    "title": "Struct SwapChainDescription | Evergine Doc",
    "keywords": "Struct SwapChainDescription Represents the requiered information to create a new swapchain depending of the platform. Implements IEquatable<SwapChainDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct SwapChainDescription : IEquatable<SwapChainDescription> Fields ColorTargetFlags The color texture flags for binding to pipeline stages. The flags ca be combined by a logical OR. Declaration public TextureFlags ColorTargetFlags Field Value Type Description TextureFlags ColorTargetFormat The pixel format of the color target. Declaration public PixelFormat ColorTargetFormat Field Value Type Description PixelFormat DepthStencilTargetFlags The depth texture flags for binding to pipeline stages. The flags ca be combined by a logical OR. Declaration public TextureFlags DepthStencilTargetFlags Field Value Type Description TextureFlags DepthStencilTargetFormat The pixel format of the depthstencil target. Declaration public PixelFormat DepthStencilTargetFormat Field Value Type Description PixelFormat Height The swapchain buffers height. Declaration public uint Height Field Value Type Description uint IsWindowed Whether the output is in windowed mode. Declaration public bool IsWindowed Field Value Type Description bool RefreshRate The refresh rate. Declaration public uint RefreshRate Field Value Type Description uint SampleCount The sampler count of this swapchain. Declaration public TextureSampleCount SampleCount Field Value Type Description TextureSampleCount SurfaceInfo Surface information. Declaration public SurfaceInfo SurfaceInfo Field Value Type Description SurfaceInfo Width The swapchain buffers width. Declaration public uint Width Field Value Type Description uint Methods Equals(SwapChainDescription) Returns a hash code for this instance. Declaration public bool Equals(SwapChainDescription other) Parameters Type Name Description SwapChainDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(SwapChainDescription, SwapChainDescription) Implements the operator ==. Declaration public static bool operator ==(SwapChainDescription value1, SwapChainDescription value2) Parameters Type Name Description SwapChainDescription value1 The value1. SwapChainDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(SwapChainDescription, SwapChainDescription) Implements the operator ==. Declaration public static bool operator !=(SwapChainDescription value1, SwapChainDescription value2) Parameters Type Name Description SwapChainDescription value1 The value1. SwapChainDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Texture.html": {
    "href": "api/Evergine.Common.Graphics.Texture.html",
    "title": "Class Texture | Evergine Doc",
    "keywords": "Class Texture This class represent a Texture graphics resource. Inheritance object GraphicsResource Texture DX11Texture DX12Texture MTLTexture GLBaseTexture VKTexture Implements ILoadable IDisposable IDependencyObject Inherited Members GraphicsResource.disposed GraphicsResource.Context GraphicsResource.NativePointer GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class Texture : GraphicsResource, ILoadable, IDisposable, IDependencyObject Constructors Texture(GraphicsContext, ref TextureDescription) Initializes a new instance of the Texture class. Declaration protected Texture(GraphicsContext context, ref TextureDescription description) Parameters Type Name Description GraphicsContext context The graphics context. TextureDescription description The texture description. Fields Description Gets or sets the TextureDescription struct. Declaration public readonly TextureDescription Description Field Value Type Description TextureDescription Properties CouldBeAttachedToFramebuffer Gets a value indicating whether this texture could be attached to a framebuffer. Declaration public virtual bool CouldBeAttachedToFramebuffer { get; } Property Value Type Description bool Dependencies Gets the dependency list. Declaration public Lazy<List<IDependencyLink>> Dependencies { get; } Property Value Type Description Lazy<List<IDependencyLink>> Id Gets or sets the asset Id. Declaration public Guid Id { get; set; } Property Value Type Description Guid The texture Id. Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public abstract string Name { get; set; } Property Value Type Description string ReaderVersion Gets the reader version. Declaration public Version ReaderVersion { get; } Property Value Type Description Version Sampler Gets or sets texture associate sampler state. Declaration public SamplerState Sampler { get; set; } Property Value Type Description SamplerState Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() Invalidate(ILoadable) Invalidates this instance and raise the Invalidated event with the new ILoadable instance. Declaration public void Invalidate(ILoadable newInstance) Parameters Type Name Description ILoadable newInstance The new ILoadable instance. ReleaseUnusedMemory() Release unused memory. Declaration public void ReleaseUnusedMemory() Events Invalidated Occurs when this instance has been invalidated and all references must be reloaded. Declaration public event EventHandler<ILoadable> Invalidated Event Type Type Description EventHandler<ILoadable> Implements ILoadable IDisposable IDependencyObject Extension Methods TextureExtension.SafeToStream(Texture, GraphicsContext) TextureExtension.SaveToFile(Texture, GraphicsContext, string) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.TextureAddressMode.html": {
    "href": "api/Evergine.Common.Graphics.TextureAddressMode.html",
    "title": "Enum TextureAddressMode | Evergine Doc",
    "keywords": "Enum TextureAddressMode Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum TextureAddressMode : byte Fields Name Description Border Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in SamplerStateDescription or HLSL code. Clamp Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. Mirror Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on. Mirror_One Similar to D3D11_TEXTURE_ADDRESS_MIRROR and D3D11_TEXTURE_ADDRESS_CLAMP. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. Wrap Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times. Extension Methods DX11ExtensionsMethods.ToDirectX(TextureAddressMode) DX12ExtensionsMethods.ToDirectX(TextureAddressMode) VKExtensionsMethods.ToVulkan(TextureAddressMode) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.TextureDescription.html": {
    "href": "api/Evergine.Common.Graphics.TextureDescription.html",
    "title": "Struct TextureDescription | Evergine Doc",
    "keywords": "Struct TextureDescription Describes a 2D texture. Implements IEquatable<TextureDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct TextureDescription : IEquatable<TextureDescription> Fields ArraySize Number of textures in the texture array. Declaration public uint ArraySize Field Value Type Description uint CpuAccess Flags ResourceCpuAccess to specify the type of CPU access allowed. Declaration public ResourceCpuAccess CpuAccess Field Value Type Description ResourceCpuAccess Depth Texture Depth (in texels). Declaration public uint Depth Field Value Type Description uint Faces Number of texture faces useful in TextureCube and TextureCubeArray. Declaration public uint Faces Field Value Type Description uint Flags The texture flags TextureFlags. Declaration public TextureFlags Flags Field Value Type Description TextureFlags Format Texture format PixelFormat. Declaration public PixelFormat Format Field Value Type Description PixelFormat Height Texture height (in texels). Declaration public uint Height Field Value Type Description uint MipLevels The maximum number of mipmap levels in the texture. Declaration public uint MipLevels Field Value Type Description uint SampleCount The number of samples in this texture. Declaration public TextureSampleCount SampleCount Field Value Type Description TextureSampleCount Type Texture type TextureType. Declaration public TextureType Type Field Value Type Description TextureType Usage Value that identifies how the texture is to be read from and written to. Declaration public ResourceUsage Usage Field Value Type Description ResourceUsage Width Texture width (in texels). Declaration public uint Width Field Value Type Description uint Methods CreateTexture1DDescription(uint, PixelFormat) Create a Texture 1D description. Declaration public static TextureDescription CreateTexture1DDescription(uint width, PixelFormat format = PixelFormat.R8G8B8A8_UNorm) Parameters Type Name Description uint width The texture width. PixelFormat format The texture format. Returns Type Description TextureDescription The new texture 1D description. CreateTexture2DDescription(uint, uint, PixelFormat) Create a Texture 2D description. Declaration public static TextureDescription CreateTexture2DDescription(uint width, uint height, PixelFormat format = PixelFormat.R8G8B8A8_UNorm) Parameters Type Name Description uint width The texture width. uint height The texture height. PixelFormat format The texture format. Returns Type Description TextureDescription The new texture 2D description. CreateTexture3DDescription(uint, uint, uint, PixelFormat) Create a Texture 3D description. Declaration public static TextureDescription CreateTexture3DDescription(uint width, uint height, uint depth, PixelFormat format = PixelFormat.R8G8B8A8_UNorm) Parameters Type Name Description uint width The texture width. uint height The texture height. uint depth The texture depth. PixelFormat format The texture format. Returns Type Description TextureDescription The new texture 3D description. CreateTextureCubeDescription(uint, uint, PixelFormat) Create a Texture cube description. Declaration public static TextureDescription CreateTextureCubeDescription(uint width, uint height, PixelFormat format = PixelFormat.R8G8B8A8_UNorm) Parameters Type Name Description uint width The texture width. uint height The texture height. PixelFormat format The texture format. Returns Type Description TextureDescription The new texture cube description. Equals(TextureDescription) Returns a hash code for this instance. Declaration public bool Equals(TextureDescription other) Parameters Type Name Description TextureDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(TextureDescription, TextureDescription) Implements the operator ==. Declaration public static bool operator ==(TextureDescription value1, TextureDescription value2) Parameters Type Name Description TextureDescription value1 The value1. TextureDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(TextureDescription, TextureDescription) Implements the operator ==. Declaration public static bool operator !=(TextureDescription value1, TextureDescription value2) Parameters Type Name Description TextureDescription value1 The value1. TextureDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.TextureFilter.html": {
    "href": "api/Evergine.Common.Graphics.TextureFilter.html",
    "title": "Enum TextureFilter | Evergine Doc",
    "keywords": "Enum TextureFilter Filtering options during texture sampling. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum TextureFilter : byte Fields Name Description Anisotropic Use anisotropic interpolation for minification, magnification, and mip-level sampling. MinLinear_MagLinear_MipLinear Use linear interpolation for minification, magnification, and mip-level sampling. MinLinear_MagLinear_MipPoint Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. MinLinear_MagPoint_MipLinear Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. MinLinear_MagPoint_MipPoint Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. MinPoint_MagLinear_MipLinear Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. MinPoint_MagLinear_MipPoint Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. MinPoint_MagPoint_MipLinear Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. MinPoint_MagPoint_MipPoint Use point sampling for minification, magnification, and mip-level sampling. Extension Methods DX11ExtensionsMethods.ToDirectX(TextureFilter, bool) DX12ExtensionsMethods.ToDirectX(TextureFilter, bool) VKExtensionsMethods.ToVulkan(TextureFilter, out VkFilter, out VkFilter, out VkSamplerMipmapMode) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.TextureFlags.html": {
    "href": "api/Evergine.Common.Graphics.TextureFlags.html",
    "title": "Enum TextureFlags | Evergine Doc",
    "keywords": "Enum TextureFlags Identifies how to bing a texture. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax [Flags] public enum TextureFlags : byte Fields Name Description DepthStencil A texture usable as a depth stencil buffer. GenerateMipmaps Enables MIP map generation by GPU None No option. RenderTarget A texture usable as render target. ShaderResource A texture usable as a ShaderResourceView. UnorderedAccess A texture usable as an unordered access buffer. Extension Methods DX11ExtensionsMethods.ToDirectX(TextureFlags) DX12ExtensionsMethods.ToDirectX(TextureFlags) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.TextureOptionFlags.html": {
    "href": "api/Evergine.Common.Graphics.TextureOptionFlags.html",
    "title": "Enum TextureOptionFlags | Evergine Doc",
    "keywords": "Enum TextureOptionFlags Identifies expected texture use during rendering. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum TextureOptionFlags : byte Fields Name Description None The default value. TextureCube Specifies a textureCube access. Extension Methods DX11ExtensionsMethods.ToDirectX(TextureOptionFlags) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.TextureSampleCount.html": {
    "href": "api/Evergine.Common.Graphics.TextureSampleCount.html",
    "title": "Enum TextureSampleCount | Evergine Doc",
    "keywords": "Enum TextureSampleCount Describes the number of samples to use in a Texture. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum TextureSampleCount : byte Fields Name Description Count16 Multisample count of 16 pixels. Count2 Multisample count of 2 pixels. Count32 Multisample count of 32 pixels. Count4 Multisample count of 4 pixels. Count8 Multisample count of 8 pixels. None No multisample. Extension Methods DX11ExtensionsMethods.ToDirectX(TextureSampleCount) DX12ExtensionsMethods.ToDirectX(TextureSampleCount) GLExtensionsMethods.ToOpenGL(TextureSampleCount) OpenVRHelper.ToUInt(TextureSampleCount) VKExtensionsMethods.ToVulkan(TextureSampleCount) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.TextureType.html": {
    "href": "api/Evergine.Common.Graphics.TextureType.html",
    "title": "Enum TextureType | Evergine Doc",
    "keywords": "Enum TextureType Texture type. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum TextureType : byte Fields Name Description Texture1D Represent a 1D texture. Texture1DArray Represent a 1D texture array. Texture2D Represent a 2D texture. Texture2DArray Represent a 2D texture array Texture3D Represent a 3D texture. TextureCube Represent a Cubemap texture. TextureCubeArray Represent a TextureCube array Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.UploadBuffer.html": {
    "href": "api/Evergine.Common.Graphics.UploadBuffer.html",
    "title": "Class UploadBuffer | Evergine Doc",
    "keywords": "Class UploadBuffer This abstract class represent and strategy to fast upload buffers to GPU. Inheritance object UploadBuffer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class UploadBuffer : IDisposable Constructors UploadBuffer(GraphicsContext, ulong, uint) Initializes a new instance of the UploadBuffer class. Declaration public UploadBuffer(GraphicsContext context, ulong size, uint align) Parameters Type Name Description GraphicsContext context The graphics context. ulong size The uploadBuffer size. uint align The uploadBuffer align if it is needed. Fields Align The buffer alignment. Declaration public uint Align Field Value Type Description uint Count Number of batched buffers. Declaration public ulong Count Field Value Type Description ulong DataBegin Pointer to the begin of the buffer. Declaration public ulong DataBegin Field Value Type Description ulong DataCurrent Pointer to the current buffer position. Declaration public ulong DataCurrent Field Value Type Description ulong DataEnd Pointer to the end of the buffer. Declaration public ulong DataEnd Field Value Type Description ulong TotalSize The total size in bytes of the uploadbuffer. Declaration public ulong TotalSize Field Value Type Description ulong context The graphics context instance. Declaration protected GraphicsContext context Field Value Type Description GraphicsContext Methods Allocate(ulong) Allocate the new data in the uploadbuffer. Declaration public ulong Allocate(ulong dataSize) Parameters Type Name Description ulong dataSize The new data size. Returns Type Description ulong The destination address to copy. CalculateOffset(ulong) Gets the native address data offset. Declaration public ulong CalculateOffset(ulong address) Parameters Type Name Description ulong address The address of data. Returns Type Description ulong The address data offset. Clear() Reset all pointers of the uploadbuffer. Declaration public void Clear() Dispose() Dispose all resource of this instance. Declaration public abstract void Dispose() RefreshBuffer(ulong) Refresh the native buffer used by the uploadbuffer with the new size. Declaration protected abstract void RefreshBuffer(ulong size) Parameters Type Name Description ulong size The new size of the buffer. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ValidationLayer.html": {
    "href": "api/Evergine.Common.Graphics.ValidationLayer.html",
    "title": "Class ValidationLayer | Evergine Doc",
    "keywords": "Class ValidationLayer The graphics validation layer. Inheritance object ValidationLayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public class ValidationLayer Constructors ValidationLayer(NotifyAction) Initializes a new instance of the ValidationLayer class. Declaration public ValidationLayer(ValidationLayer.NotifyAction function) Parameters Type Name Description ValidationLayer.NotifyAction function The callback function called for every error detection. ValidationLayer(NotifyMethod) Initializes a new instance of the ValidationLayer class. Declaration public ValidationLayer(ValidationLayer.NotifyMethod method = NotifyMethod.Exceptions) Parameters Type Name Description ValidationLayer.NotifyMethod method The notify method ValidationLayer.NotifyMethod, exception by default. Fields Notify Pointer to Notify function. Declaration public ValidationLayer.NotifyAction Notify Field Value Type Description ValidationLayer.NotifyAction Methods CopyBufferDataTo(bool, uint) Validation of the copy buffer operation. Declaration public void CopyBufferDataTo(bool inRenderPass, uint sizeInBytes) Parameters Type Name Description bool inRenderPass If the operation is made inside a render pass. uint sizeInBytes The size in bytes of the buffer. CopyTextureDataTo(bool) Validation of the copy texture data operation. Declaration public void CopyTextureDataTo(bool inRenderPass) Parameters Type Name Description bool inRenderPass If the operation is made inside a render pass. CreateBufferValidation(IntPtr, ref BufferDescription) Creates the buffer validation layer. Declaration public void CreateBufferValidation(IntPtr data, ref BufferDescription description) Parameters Type Name Description IntPtr data The buffer data. BufferDescription description The buffer description. CreateCommandQueueValidation(CommandQueueType) Creates a command queue validation layer. Declaration public void CreateCommandQueueValidation(CommandQueueType queueType) Parameters Type Name Description CommandQueueType queueType The queue type. CreateComputePipelineValidation(ref ComputePipelineDescription) Creates a compute pipeline validation layer. Declaration public void CreateComputePipelineValidation(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipeline description. CreateFrameBufferValidation(FrameBufferAttachment?, FrameBufferAttachment[], bool) Creates a frame buffer validation. Declaration public void CreateFrameBufferValidation(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth frame buffer. FrameBufferAttachment[] colorTargets The color frame buffers. bool disposeAttachments If the attachments should be disposed. CreateGraphicsPipelineValidation(ref GraphicsPipelineDescription) Creates a graphic pipeline validation. Declaration public void CreateGraphicsPipelineValidation(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphic pipeline description. CreateRaytracingPipelineValidation(ref RaytracingPipelineDescription) Creates a raytracing pipeline validatino layer. Declaration public void CreateRaytracingPipelineValidation(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipeline description. CreateResourceLayoutValidation(ref ResourceLayoutDescription) Creates the resource layout validation. Declaration public void CreateResourceLayoutValidation(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The resource layout description. CreateResourceSetValidation(ref ResourceSetDescription) Creates the resource set validation. Declaration public void CreateResourceSetValidation(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The resource set description. CreateSamplerStateValidation(ref SamplerStateDescription) Creates the sampler state validation layer. Declaration public void CreateSamplerStateValidation(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. CreateShaderValidation(ref ShaderDescription) Creates a shader validation layer. Declaration public void CreateShaderValidation(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. CreateTextureValidation(DataBox[], ref TextureDescription, ref SamplerStateDescription) Creates a texture validation layer. Declaration public void CreateTextureValidation(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The texture sampler state. SetGraphicsPipelineState(bool) Validation of CommandBuffer.SetGraphicsPipelineState. Declaration public void SetGraphicsPipelineState(bool inRenderPass) Parameters Type Name Description bool inRenderPass If the operation is made inside a render pass. UpdateBufferData(bool, uint) Updates the buffer data. Declaration public void UpdateBufferData(bool inRenderPass, uint sourceSizeInBytes) Parameters Type Name Description bool inRenderPass IF the operation is made inside a render pass. uint sourceSizeInBytes The source buffer size in bytes. Events Error Event that allow to obtains the error messages if NofityMethod is set to Events. Declaration public event EventHandler<string> Error Event Type Type Description EventHandler<string> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ValidationLayer.NotifyAction.html": {
    "href": "api/Evergine.Common.Graphics.ValidationLayer.NotifyAction.html",
    "title": "Delegate ValidationLayer.NotifyAction | Evergine Doc",
    "keywords": "Delegate ValidationLayer.NotifyAction The Notify delegate function. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public delegate void ValidationLayer.NotifyAction(string owner, string message, ValidationLayer.Severity severity = Severity.Error) Parameters Type Name Description string owner The owner of this error message. string message The error message content. ValidationLayer.Severity severity The severity associated with the message. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ValidationLayer.NotifyMethod.html": {
    "href": "api/Evergine.Common.Graphics.ValidationLayer.NotifyMethod.html",
    "title": "Enum ValidationLayer.NotifyMethod | Evergine Doc",
    "keywords": "Enum ValidationLayer.NotifyMethod The supported notify methods. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ValidationLayer.NotifyMethod Fields Name Description Events Validation layer fires events. Exceptions Validation layer throws exceptions. Trace Validation layer trace info. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.ValidationLayer.Severity.html": {
    "href": "api/Evergine.Common.Graphics.ValidationLayer.Severity.html",
    "title": "Enum ValidationLayer.Severity | Evergine Doc",
    "keywords": "Enum ValidationLayer.Severity Severity enumerate. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum ValidationLayer.Severity Fields Name Description Error Error severity. Information The information severity. Warning Warning severity. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexElementUsage.html": {
    "href": "api/Evergine.Common.Graphics.VertexElementUsage.html",
    "title": "Enum VertexElementUsage | Evergine Doc",
    "keywords": "Enum VertexElementUsage Specifies the vertex element usage. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum VertexElementUsage Fields Name Description Binormal Used for binormal. BlendIndices Used for blend indices. BlendWeight Used for blend weights. Color Used for color. Depth Used for depth. Fog Used for fog. Normal Used for normal. PointSize Used for point size. Position Used for position. Sample Used for sample. Tangent Used for tangent. TessellateFactor Used for tesellation factor. TextureCoordinate Used for texture coordinate. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.html",
    "title": "Namespace Evergine.Common.Graphics.VertexFormats | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Graphics.VertexFormats Structs VertexPosition A vertex format structure containing vertex position and color. VertexPositionColor A vertex format structure containing vertex position and color. VertexPositionColorDualTexture Represents a vertex with position, normal and texture coordinate. VertexPositionColorTexture Represents a vertex with position, color and texture coordinate. VertexPositionColorTextureAxis Represents a vertex with position, color, texture coordinate and axis size. VertexPositionDualTexture Represents a vertex with position, normal and texture coordinate. VertexPositionNormal Represents a vertex with position and normal. VertexPositionNormalColor Represents a vertex with position, color and texture coordinate. VertexPositionNormalColorDualTexture Represents a vertex with position, normal and texture coordinate. VertexPositionNormalColorTexture Represents a vertex with position, normal and texture coordinate. VertexPositionNormalDualTexture Represents a vertex with position, normal and texture coordinate. VertexPositionNormalTangentColorDualTexture Represents a vertex with position, normal and texture coordinate. VertexPositionNormalTangentTexture Represents a vertex with position, normal and texture coordinate. VertexPositionNormalTexture Represents a vertex with position, normal and texture coordinate. VertexPositionTexture Represents a vertex with position and texture coordinate."
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPosition.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPosition.html",
    "title": "Struct VertexPosition | Evergine Doc",
    "keywords": "Struct VertexPosition A vertex format structure containing vertex position and color. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPosition Constructors VertexPosition(Vector3) Initializes a new instance of the VertexPosition struct. Declaration public VertexPosition(Vector3 position) Parameters Type Name Description Vector3 position The position. Fields Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 VertexFormat Vertex format of this vertex. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColor.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColor.html",
    "title": "Struct VertexPositionColor | Evergine Doc",
    "keywords": "Struct VertexPositionColor A vertex format structure containing vertex position and color. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionColor Constructors VertexPositionColor(Vector3, Color) Initializes a new instance of the VertexPositionColor struct. Declaration public VertexPositionColor(Vector3 position, Color color) Parameters Type Name Description Vector3 position The position. Color color The color. Fields Color Vertex color. Declaration public Color Color Field Value Type Description Color Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 VertexFormat Vertex format of this vertex. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.html",
    "title": "Struct VertexPositionColorDualTexture | Evergine Doc",
    "keywords": "Struct VertexPositionColorDualTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionColorDualTexture Constructors VertexPositionColorDualTexture(Vector3, Color, Vector2, Vector2) Initializes a new instance of the VertexPositionColorDualTexture struct. Declaration public VertexPositionColorDualTexture(Vector3 position, Color color, Vector2 texCoord, Vector2 texCoord2) Parameters Type Name Description Vector3 position The position. Color color The color. Vector2 texCoord The first texture coordinate. Vector2 texCoord2 The second texture coordinate. Fields Color Vertex color. Declaration public Color Color Field Value Type Description Color Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 TexCoord2 Second vertex texture coordinate. Declaration public Vector2 TexCoord2 Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.html",
    "title": "Struct VertexPositionColorTexture | Evergine Doc",
    "keywords": "Struct VertexPositionColorTexture Represents a vertex with position, color and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionColorTexture Constructors VertexPositionColorTexture(Vector3, Color, Vector2) Initializes a new instance of the VertexPositionColorTexture struct. Declaration public VertexPositionColorTexture(Vector3 position, Color color, Vector2 texCoord) Parameters Type Name Description Vector3 position The position. Color color The color. Vector2 texCoord The texture coordinates. Fields Color Vertex color. Declaration public Color Color Field Value Type Description Color Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.html",
    "title": "Struct VertexPositionColorTextureAxis | Evergine Doc",
    "keywords": "Struct VertexPositionColorTextureAxis Represents a vertex with position, color, texture coordinate and axis size. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionColorTextureAxis Constructors VertexPositionColorTextureAxis(Vector3, Color, Vector2, Vector4) Initializes a new instance of the VertexPositionColorTextureAxis struct. Declaration public VertexPositionColorTextureAxis(Vector3 position, Color color, Vector2 texCoord, Vector4 axisSize) Parameters Type Name Description Vector3 position The position. Color color The color. Vector2 texCoord The texture coordinate. Vector4 axisSize The axis size. Fields AxisSize Vertex axis size. Declaration public Vector4 AxisSize Field Value Type Description Vector4 Color Vertex color. Declaration public Color Color Field Value Type Description Color Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.html",
    "title": "Struct VertexPositionDualTexture | Evergine Doc",
    "keywords": "Struct VertexPositionDualTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionDualTexture Constructors VertexPositionDualTexture(Vector3, Vector2, Vector2) Initializes a new instance of the VertexPositionDualTexture struct. Declaration public VertexPositionDualTexture(Vector3 position, Vector2 texCoord, Vector2 texCoord2) Parameters Type Name Description Vector3 position The position. Vector2 texCoord The first texture coordinate. Vector2 texCoord2 The second texture coordinate. Fields Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 TexCoord2 Second vertex texture coordinate. Declaration public Vector2 TexCoord2 Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormal.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormal.html",
    "title": "Struct VertexPositionNormal | Evergine Doc",
    "keywords": "Struct VertexPositionNormal Represents a vertex with position and normal. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormal Constructors VertexPositionNormal(Vector3, Vector3) Initializes a new instance of the VertexPositionNormal struct. Declaration public VertexPositionNormal(Vector3 position, Vector3 normal) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Fields Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.html",
    "title": "Struct VertexPositionNormalColor | Evergine Doc",
    "keywords": "Struct VertexPositionNormalColor Represents a vertex with position, color and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormalColor Constructors VertexPositionNormalColor(Vector3, Vector3, Color) Initializes a new instance of the VertexPositionNormalColor struct. Declaration public VertexPositionNormalColor(Vector3 position, Vector3 normal, Color color) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Color color The color. Fields Color Vertex color. Declaration public Color Color Field Value Type Description Color Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.html",
    "title": "Struct VertexPositionNormalColorDualTexture | Evergine Doc",
    "keywords": "Struct VertexPositionNormalColorDualTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormalColorDualTexture Constructors VertexPositionNormalColorDualTexture(Vector3, Vector3, Color, Vector2, Vector2) Initializes a new instance of the VertexPositionNormalColorDualTexture struct. Declaration public VertexPositionNormalColorDualTexture(Vector3 position, Vector3 normal, Color color, Vector2 texCoord, Vector2 texCoord2) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Color color The color. Vector2 texCoord The first texture coordinate. Vector2 texCoord2 The second texture coordinate. Fields Color Vertex color. Declaration public Color Color Field Value Type Description Color Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 TexCoord2 Second vertex texture coordinate. Declaration public Vector2 TexCoord2 Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.html",
    "title": "Struct VertexPositionNormalColorTexture | Evergine Doc",
    "keywords": "Struct VertexPositionNormalColorTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormalColorTexture Constructors VertexPositionNormalColorTexture(Vector3, Vector3, Color, Vector2) Initializes a new instance of the VertexPositionNormalColorTexture struct. Declaration public VertexPositionNormalColorTexture(Vector3 position, Vector3 normal, Color color, Vector2 texCoord) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Color color The color. Vector2 texCoord The tex coord. Fields Color Vertex color. Declaration public Color Color Field Value Type Description Color Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.html",
    "title": "Struct VertexPositionNormalDualTexture | Evergine Doc",
    "keywords": "Struct VertexPositionNormalDualTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormalDualTexture Constructors VertexPositionNormalDualTexture(Vector3, Vector3, Vector2, Vector2) Initializes a new instance of the VertexPositionNormalDualTexture struct. Declaration public VertexPositionNormalDualTexture(Vector3 position, Vector3 normal, Vector2 texCoord, Vector2 texCoord2) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Vector2 texCoord The first texture coordinate. Vector2 texCoord2 The second texture coordinate. Fields Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 TexCoord2 Second vertex texture coordinate. Declaration public Vector2 TexCoord2 Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.html",
    "title": "Struct VertexPositionNormalTangentColorDualTexture | Evergine Doc",
    "keywords": "Struct VertexPositionNormalTangentColorDualTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormalTangentColorDualTexture Constructors VertexPositionNormalTangentColorDualTexture(Vector3, Vector3, Vector3, Color, Vector2, Vector2) Initializes a new instance of the VertexPositionNormalTangentColorDualTexture struct. Declaration public VertexPositionNormalTangentColorDualTexture(Vector3 position, Vector3 normal, Vector3 tangent, Color color, Vector2 texCoord, Vector2 texCoord2) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Vector3 tangent The tangent. Color color The color. Vector2 texCoord The texcoord. Vector2 texCoord2 The texcoord2. Fields Color Vertex color. Declaration public Color Color Field Value Type Description Color Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 Tangent Vertex normal. Declaration public Vector3 Tangent Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 TexCoord2 Vertex texture coordinate. Declaration public Vector2 TexCoord2 Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.html",
    "title": "Struct VertexPositionNormalTangentTexture | Evergine Doc",
    "keywords": "Struct VertexPositionNormalTangentTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormalTangentTexture Constructors VertexPositionNormalTangentTexture(Vector3, Vector3, Vector3, Vector2) Initializes a new instance of the VertexPositionNormalTangentTexture struct. Declaration public VertexPositionNormalTangentTexture(Vector3 position, Vector3 normal, Vector3 tangent, Vector2 texCoord) Parameters Type Name Description Vector3 position The vertex position. Vector3 normal The vertex normal. Vector3 tangent The vertex tangent. Vector2 texCoord the vertex texCoord. Fields Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 Tangent Vertex normal. Declaration public Vector3 Tangent Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.html",
    "title": "Struct VertexPositionNormalTexture | Evergine Doc",
    "keywords": "Struct VertexPositionNormalTexture Represents a vertex with position, normal and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionNormalTexture Constructors VertexPositionNormalTexture(Vector3, Vector3, Vector2) Initializes a new instance of the VertexPositionNormalTexture struct. Declaration public VertexPositionNormalTexture(Vector3 position, Vector3 normal, Vector2 texCoord) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Vector2 texCoord The tex coord. Fields Normal Vertex normal. Declaration public Vector3 Normal Field Value Type Description Vector3 Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexFormats.VertexPositionTexture.html": {
    "href": "api/Evergine.Common.Graphics.VertexFormats.VertexPositionTexture.html",
    "title": "Struct VertexPositionTexture | Evergine Doc",
    "keywords": "Struct VertexPositionTexture Represents a vertex with position and texture coordinate. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics.VertexFormats Assembly: Evergine.Common.dll Syntax public struct VertexPositionTexture Constructors VertexPositionTexture(Vector3, Vector2) Initializes a new instance of the VertexPositionTexture struct. Declaration public VertexPositionTexture(Vector3 position, Vector2 texCoord) Parameters Type Name Description Vector3 position The position. Vector2 texCoord The tex coord. Fields Position Vertex position. Declaration public Vector3 Position Field Value Type Description Vector3 TexCoord Vertex texture coordinate. Declaration public Vector2 TexCoord Field Value Type Description Vector2 VertexFormat Vertex format. Declaration public static readonly LayoutDescription VertexFormat Field Value Type Description LayoutDescription Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.VertexStepFunction.html": {
    "href": "api/Evergine.Common.Graphics.VertexStepFunction.html",
    "title": "Enum VertexStepFunction | Evergine Doc",
    "keywords": "Enum VertexStepFunction The frequency with which the vertex function fetches attributes data. Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public enum VertexStepFunction Fields Name Description PerInstanceData Input data is per-instance data. PerVertexData Input data is per-vertex data. Extension Methods DX11ExtensionsMethods.ToDirectX(VertexStepFunction) DX12ExtensionsMethods.ToDirectX(VertexStepFunction) EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Viewport.html": {
    "href": "api/Evergine.Common.Graphics.Viewport.html",
    "title": "Struct Viewport | Evergine Doc",
    "keywords": "Struct Viewport Abstracts a viewport used for defining rendering regions. Implements IEquatable<Viewport> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public struct Viewport : IEquatable<Viewport> Constructors Viewport(Rectangle, float, float) Initializes a new instance of the Viewport struct. Declaration public Viewport(Rectangle rectangle, float minDepth = 0, float maxDepth = 1) Parameters Type Name Description Rectangle rectangle The viewport rectangle. float minDepth The minimun depth range. float maxDepth The maximun depth range. Viewport(float, float, float, float, float, float) Initializes a new instance of the Viewport struct. Declaration public Viewport(float x, float y, float width, float height, float minDepth = 0, float maxDepth = 1) Parameters Type Name Description float x The x. float y The y. float width The width. float height The height. float minDepth The minimun depth range. float maxDepth The maximun depth range. Fields DefaultHeight The default viewport height. Declaration public static float DefaultHeight Field Value Type Description float DefaultWidth The default viewport width. Declaration public static float DefaultWidth Field Value Type Description float Empty Empty value for an undefined viewport. Declaration public static readonly Viewport Empty Field Value Type Description Viewport Height Gets or sets the height of the viewport. Declaration public float Height Field Value Type Description float MaxDepth Gets or sets the max depth range. Declaration public float MaxDepth Field Value Type Description float MinDepth Gets or sets the min depth range. Declaration public float MinDepth Field Value Type Description float Width Gets or sets the width of the viewport. Declaration public float Width Field Value Type Description float X Gets or sets the X origin of the viewport. Declaration public float X Field Value Type Description float Y Gets or sets the Y origin of the viewport. Declaration public float Y Field Value Type Description float Properties AspectRatio Gets the aspect ratio used of this viewport. Declaration public float AspectRatio { get; } Property Value Type Description float Bounds Gets the rectangle of the viewport. Declaration public Rectangle Bounds { get; } Property Value Type Description Rectangle Size Gets the size of the viewport. Declaration public Vector2 Size { get; } Property Value Type Description Vector2 Methods Equals(Viewport) Returns a hash code for this instance. Declaration public bool Equals(Viewport other) Parameters Type Name Description Viewport other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(Viewport, Viewport) Implements the operator ==. Declaration public static bool operator ==(Viewport value1, Viewport value2) Parameters Type Name Description Viewport value1 The value1. Viewport value2 The value2. Returns Type Description bool The result of the operator. operator !=(Viewport, Viewport) Implements the operator ==. Declaration public static bool operator !=(Viewport value1, Viewport value2) Parameters Type Name Description Viewport value1 The value1. Viewport value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.Window.html": {
    "href": "api/Evergine.Common.Graphics.Window.html",
    "title": "Class Window | Evergine Doc",
    "keywords": "Class Window Represent a Window on WindowSystem. Inheritance object Surface Window FormsWindow SDLWindow WPFWindow Implements IDisposable Inherited Members Surface.SurfaceInfo Surface.Width Surface.Height Surface.DPIDensity Surface.KeyboardDispatcher Surface.MouseDispatcher Surface.TouchDispatcher Surface.OnScreenSizeChanged Surface.OnSurfaceInfoChanged Surface.Closing Surface.GotFocus Surface.LostFocus Surface.Dispose() Surface.Destroy() Surface.OnClosing() Surface.OnGotFocus() Surface.OnLostFocus() Surface.OnSizeChanged() Surface.OnInfoChanged() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class Window : Surface, IDisposable Constructors Window(string, uint, uint) Initializes a new instance of the Window class. Declaration public Window(string title, uint width, uint height) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. Properties Title Gets or sets window title. Declaration public abstract string Title { get; set; } Property Value Type Description string Visible Gets or sets a value indicating whether the window is visible. Declaration public abstract bool Visible { get; set; } Property Value Type Description bool Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Graphics.WindowsSystem.html": {
    "href": "api/Evergine.Common.Graphics.WindowsSystem.html",
    "title": "Class WindowsSystem | Evergine Doc",
    "keywords": "Class WindowsSystem Represent a specify windows technology. Inheritance object WindowsSystem FormsWindowsSystem SDLWindowsSystem WPFWindowsSystem Implements IDisposable IGetNativePointers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Graphics Assembly: Evergine.Common.dll Syntax public abstract class WindowsSystem : IDisposable, IGetNativePointers Properties AvailablePointerKeys Gets a list of all available keys to obtain native pointers. Declaration public virtual IEnumerable<string> AvailablePointerKeys { get; } Property Value Type Description IEnumerable<string> Methods CreateLoopThread(Action, Action) Creates a loop thread. Declaration protected abstract void CreateLoopThread(Action loadAction, Action renderCallback) Parameters Type Name Description Action loadAction The load action. Action renderCallback The render callback action. CreateSurface(object) Create a surface. Declaration public abstract Surface CreateSurface(object nativeSurface) Parameters Type Name Description object nativeSurface The native surface control. Returns Type Description Surface Surface instance. CreateSurface(uint, uint) Create a surface. Declaration public abstract Surface CreateSurface(uint width, uint height) Parameters Type Name Description uint width Surface width. uint height Surface height. Returns Type Description Surface Surface instance. CreateWindow(string, uint, uint, bool) Create a Window. Declaration public abstract Window CreateWindow(string title, uint width, uint height, bool visible = true) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. bool visible Window visibility. Returns Type Description Window Window instance. Destroy() Destroy all resources. Declaration protected virtual void Destroy() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration public virtual bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. Run(Action, Action) Run the windows system. Declaration public void Run(Action loadAction, Action renderCallback) Parameters Type Name Description Action loadAction Action does in load thread. Action renderCallback Action to be executed every render loop. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.BasicCache-2.html": {
    "href": "api/Evergine.Common.Helpers.BasicCache-2.html",
    "title": "Class BasicCache<T, K> | Evergine Doc",
    "keywords": "Class BasicCache<T, K> A simple cache implementation. Inheritance object BasicCache<T, K> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public class BasicCache<T, K> Type Parameters Name Description T The item key type of the cache. K The item value type of the cache. Constructors BasicCache() Initializes a new instance of the BasicCache<T, K> class. Declaration public BasicCache() Fields NewInstanceHandle A handle to build a new instance. Declaration public BasicCache<T, K>.NewItemInstanceDelegate NewInstanceHandle Field Value Type Description BasicCache<T, K>.NewItemInstanceDelegate Properties ExpirationTime Gets or sets the expiration time. Declaration public TimeSpan ExpirationTime { get; set; } Property Value Type Description TimeSpan Methods AddItem(T, K) Add an item to the cache. Declaration public void AddItem(T key, K item) Parameters Type Name Description T key The key. K item The item. Check() Check if the cache items has expired. Declaration public void Check() GetItem(T) Gets an item. Declaration public K GetItem(T key) Parameters Type Name Description T key The item key. Returns Type Description K The item. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.BasicCache-2.NewItemInstanceDelegate.html": {
    "href": "api/Evergine.Common.Helpers.BasicCache-2.NewItemInstanceDelegate.html",
    "title": "Delegate BasicCache<T, K>.NewItemInstanceDelegate | Evergine Doc",
    "keywords": "Delegate BasicCache<T, K>.NewItemInstanceDelegate Delegate that crates a new instance by its key. Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public delegate K BasicCache<T, K>.NewItemInstanceDelegate(T key) Parameters Type Name Description T key The key. Returns Type Description K The new item instance. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.BoolEventArgs.html": {
    "href": "api/Evergine.Common.Helpers.BoolEventArgs.html",
    "title": "Class BoolEventArgs | Evergine Doc",
    "keywords": "Class BoolEventArgs Event arguments for a bool value. Inheritance object EventArgs BoolEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public sealed class BoolEventArgs : EventArgs Constructors BoolEventArgs(bool) Initializes a new instance of the BoolEventArgs class. Declaration public BoolEventArgs(bool value) Parameters Type Name Description bool value if set to true [value]. Properties Value Gets a value indicating whether this BoolEventArgs is value. Declaration public bool Value { get; } Property Value Type Description bool true if value; otherwise, false. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.CmdParser.html": {
    "href": "api/Evergine.Common.Helpers.CmdParser.html",
    "title": "Class CmdParser | Evergine Doc",
    "keywords": "Class CmdParser Parses command line input. Inheritance object CmdParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public class CmdParser Constructors CmdParser() Initializes a new instance of the CmdParser class. Declaration public CmdParser() Properties ErrorMessage Gets the error text message. Declaration public string ErrorMessage { get; } Property Value Type Description string Methods AddOption(Option) Add a new option to the parser. Declaration public CmdParser AddOption(CmdParser.Option newOption) Parameters Type Name Description CmdParser.Option newOption Option to add. Returns Type Description CmdParser This instace object. Parse(string[]) Parse the argument inside the commandline. Declaration public bool Parse(string[] args) Parameters Type Name Description string[] args The argument array. Returns Type Description bool True if the parser was successful. ShowHelp(string) Show the documentation on console. Declaration public bool ShowHelp(string msg) Parameters Type Name Description string msg The error message. Returns Type Description bool True whether everything ok. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.CmdParser.Option.html": {
    "href": "api/Evergine.Common.Helpers.CmdParser.Option.html",
    "title": "Class CmdParser.Option | Evergine Doc",
    "keywords": "Class CmdParser.Option A unit of significant text on the command line. Inheritance object CmdParser.Option Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public class CmdParser.Option Constructors Option(string, Func<string, bool>, string) Initializes a new instance of the CmdParser.Option class. Declaration public Option(string name, Func<string, bool> callback, string help) Parameters Type Name Description string name The argument name. Func<string, bool> callback The callback used to process it. string help The help sentence. Properties CallBack Gets the function pointer will process this option. Declaration public Func<string, bool> CallBack { get; } Property Value Type Description Func<string, bool> Help Gets the documentation senstence. Declaration public string Help { get; } Property Value Type Description string Name Gets argument uppercase text. Declaration public string Name { get; } Property Value Type Description string Raw Gets or Sets Raw argument text. Declaration public string Raw { get; set; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.ColorHelpers.html": {
    "href": "api/Evergine.Common.Helpers.ColorHelpers.html",
    "title": "Class ColorHelpers | Evergine Doc",
    "keywords": "Class ColorHelpers The control utility methods. Inheritance object ColorHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class ColorHelpers Methods CCTToLinear(float, out Vector3) Convert from correlated color temperature to linear color space. Declaration public static void CCTToLinear(float temperature, out Vector3 linear) Parameters Type Name Description float temperature The color temperature in K (Kelvin). Vector3 linear The converted linear color. GammaToLinear(ref Vector3, out Vector3) Convert a gamma color to linear space. Declaration public static void GammaToLinear(ref Vector3 gamma, out Vector3 linear) Parameters Type Name Description Vector3 gamma The gamma color. Vector3 linear The converted linear color. GammaToLinear(Vector4, out Vector4) Convert a gamma color to linear space. Declaration public static void GammaToLinear(Vector4 gamma, out Vector4 linear) Parameters Type Name Description Vector4 gamma The gamma color. Vector4 linear The converted linear color. GammaToLinear(ref Vector4, out Vector4) Convert a gamma color to linear space. Declaration public static void GammaToLinear(ref Vector4 gamma, out Vector4 linear) Parameters Type Name Description Vector4 gamma The gamma color. Vector4 linear The converted linear color. GammaToLinear(float) Convert a gamma color to linear space. Declaration public static float GammaToLinear(float gamma) Parameters Type Name Description float gamma The gamma color. Returns Type Description float The converted linear color. LinearToGamma(Vector3, out Vector3) Convert a linear color to gamma space. Declaration public static void LinearToGamma(Vector3 linear, out Vector3 gamma) Parameters Type Name Description Vector3 linear The color in linear space. Vector3 gamma The converted gamma color. LinearToGamma(ref Vector4, out Vector4) Convert a linear color to gamma space. Declaration public static void LinearToGamma(ref Vector4 linear, out Vector4 gamma) Parameters Type Name Description Vector4 linear The color in linear space. Vector4 gamma The converted gamma color. LinearToGamma(float) Convert a linear color to gamma space. Declaration public static float LinearToGamma(float linear) Parameters Type Name Description float linear The color in linear space. Returns Type Description float The converted gamma color."
  },
  "api/Evergine.Common.Helpers.DynamicBVH-1.html": {
    "href": "api/Evergine.Common.Helpers.DynamicBVH-1.html",
    "title": "Class DynamicBVH<T> | Evergine Doc",
    "keywords": "Class DynamicBVH<T> A Dynamic Binary Volume Hierarchy implementation. Inheritance object DynamicBVH<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public class DynamicBVH<T> Type Parameters Name Description T The object contained. Remarks Inspired in Box2D b2DynamicTree https://github.com/erincatto/Box2D/blob/master/Box2D/Collision/b2DynamicTree.h. Constructors DynamicBVH(int) Initializes a new instance of the DynamicBVH<T> class. Declaration public DynamicBVH(int defaultNodeCapacity = 16) Parameters Type Name Description int defaultNodeCapacity The default node capacity. Fields NodeCount The node count. Declaration public int NodeCount Field Value Type Description int Nodes The node array. Declaration public DynamicBVHNode<T>[] Nodes Field Value Type Description DynamicBVHNode<T>[] Properties AreaRatio Gets the ratio of the sum of the node areas to the root area. Declaration public float AreaRatio { get; } Property Value Type Description float Height Gets the height of the binary tree in O(N) time. Should not be called often. Declaration public int Height { get; } Property Value Type Description int MaxBalance Gets the maximum balance of an node in the tree. The balance is the difference in height of the two children of a node. Declaration public int MaxBalance { get; } Property Value Type Description int Methods CreateProxy(ref BoundingBox, T) Create a proxy. Provide a tight fitting AABB and a userData pointer. Declaration public int CreateProxy(ref BoundingBox aabb, T userData) Parameters Type Name Description BoundingBox aabb The AABB. T userData The userData. Returns Type Description int The proxy Id. DestroyProxy(int) Destroy a proxy. This asserts if the id is invalid. Declaration public void DestroyProxy(int proxyId) Parameters Type Name Description int proxyId The proxy Id. GetFatAABB(int, out BoundingBox) Get the fat AABB for a proxy. Declaration public void GetFatAABB(int proxyId, out BoundingBox fatAABB) Parameters Type Name Description int proxyId The proxy Id. BoundingBox fatAABB Output value for fat AABB. GetUserData(int) Get proxy user data. Declaration public T GetUserData(int proxyId) Parameters Type Name Description int proxyId The proxy Id. Returns Type Description T the proxy user data or null if the id is invalid. MoveProxy(int, ref BoundingBox, ref Vector3) Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB, then the proxy is removed from the tree and re-inserted. Otherwise the function returns immediately. Declaration public bool MoveProxy(int proxyId, ref BoundingBox aabb, ref Vector3 displacement) Parameters Type Name Description int proxyId The proxy Id. BoundingBox aabb The AABB. Vector3 displacement The displacement. Returns Type Description bool true if the proxy was re-inserted. Query<TResult>(QueryDelegate<TResult>, ref BoundingBox) Query an AABB for overlapping proxies. The callback class is called for each proxy that overlaps the supplied AABB. Declaration public TResult Query<TResult>(DynamicBVH<T>.QueryDelegate<TResult> callback, ref BoundingBox aabb) Parameters Type Name Description DynamicBVH<T>.QueryDelegate<TResult> callback A callback function called on every hit. BoundingBox aabb The AABB to test. Returns Type Description TResult The query result. Type Parameters Name Description TResult The result type. RayCast(QueryDelegate, ref Ray) Ray-cast against the proxies in the tree. This relies on the callback to perform a exact ray-cast in the case were the proxy contains a shape. The callback also performs the any collision filtering. This has performance roughly equal to k * log(n), where k is the number of collisions and n is the number of proxies in the tree. Declaration public void RayCast(DynamicBVH<T>.QueryDelegate callback, ref Ray input) Parameters Type Name Description DynamicBVH<T>.QueryDelegate callback A callback class that is called for each proxy that is hit by the ray. Ray input The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1). RebuildBottomUp() Build an optimal tree. Very expensive. For testing. Declaration public void RebuildBottomUp() ShiftOrigin(ref Vector3) Shift the world origin. Useful for large worlds. The shift formula is: position -= newOrigin. Declaration public void ShiftOrigin(ref Vector3 newOrigin) Parameters Type Name Description Vector3 newOrigin The new origin with respect to the old origin. Validate() Validate this tree. For testing. Declaration public void Validate() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.DynamicBVH-1.QueryDelegate-1.html": {
    "href": "api/Evergine.Common.Helpers.DynamicBVH-1.QueryDelegate-1.html",
    "title": "Delegate DynamicBVH<T>.QueryDelegate<TResult> | Evergine Doc",
    "keywords": "Delegate DynamicBVH<T>.QueryDelegate<TResult> The query delegate function. Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public delegate TResult DynamicBVH<T>.QueryDelegate<TResult>(int proxyId, ref BoundingBox aabb, TResult result) Parameters Type Name Description int proxyId The proxy Id. BoundingBox aabb The AABB to test. TResult result The partial result for the query. Returns Type Description TResult The query result. Type Parameters Name Description TResult The result type. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.DynamicBVH-1.QueryDelegate.html": {
    "href": "api/Evergine.Common.Helpers.DynamicBVH-1.QueryDelegate.html",
    "title": "Delegate DynamicBVH<T>.QueryDelegate | Evergine Doc",
    "keywords": "Delegate DynamicBVH<T>.QueryDelegate The query delegate function. Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public delegate void DynamicBVH<T>.QueryDelegate(int proxyId) Parameters Type Name Description int proxyId The proxy Id. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.DynamicBVHNode-1.html": {
    "href": "api/Evergine.Common.Helpers.DynamicBVHNode-1.html",
    "title": "Struct DynamicBVHNode<T> | Evergine Doc",
    "keywords": "Struct DynamicBVHNode<T> A BVH node. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public struct DynamicBVHNode<T> Type Parameters Name Description T The node type. Fields AABB Enlarged AABB. Declaration public BoundingBox AABB Field Value Type Description BoundingBox Child1 The first child. Declaration public int Child1 Field Value Type Description int Child2 The second child. Declaration public int Child2 Field Value Type Description int Height leaf = 0, free node = -1. Declaration public int Height Field Value Type Description int ParentOrNext The parent node index if this node is in use. If it is a free node, it refers to the next free node. Declaration public int ParentOrNext Field Value Type Description int UserData The custom user data. Declaration public T UserData Field Value Type Description T Methods IsLeaf() Gets a value indicating whether this node is a leaf. Declaration public bool IsLeaf() Returns Type Description bool If is a leaf. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.EnumExtensions.html": {
    "href": "api/Evergine.Common.Helpers.EnumExtensions.html",
    "title": "Class EnumExtensions | Evergine Doc",
    "keywords": "Class EnumExtensions Extentions for enums. Inheritance object EnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class EnumExtensions Methods HasFlag(Enum, Enum) A FX 3.5 way to mimic the FX4 \"HasFlag\" method. Declaration public static bool HasFlag(this Enum variable, Enum value) Parameters Type Name Description Enum variable The tested enum. Enum value The value to test. Returns Type Description bool True if the flag is set. Otherwise false."
  },
  "api/Evergine.Common.Helpers.ExecutionState.html": {
    "href": "api/Evergine.Common.Helpers.ExecutionState.html",
    "title": "Enum ExecutionState | Evergine Doc",
    "keywords": "Enum ExecutionState The executon state. Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public enum ExecutionState Fields Name Description NonInitialized Non Initialized State Paused Paused State Running Running State Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.GenericEventArgs-1.html": {
    "href": "api/Evergine.Common.Helpers.GenericEventArgs-1.html",
    "title": "Class GenericEventArgs<T> | Evergine Doc",
    "keywords": "Class GenericEventArgs<T> Event argument for a generic value. Inheritance object EventArgs GenericEventArgs<T> Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public sealed class GenericEventArgs<T> : EventArgs Type Parameters Name Description T Type of the argument. Constructors GenericEventArgs(T) Initializes a new instance of the GenericEventArgs<T> class. Declaration public GenericEventArgs(T value) Parameters Type Name Description T value The value. Properties Value Gets the value. Declaration public T Value { get; } Property Value Type Description T Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.html": {
    "href": "api/Evergine.Common.Helpers.html",
    "title": "Namespace Evergine.Common.Helpers | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Helpers Classes BasicCache<T, K> A simple cache implementation. BoolEventArgs Event arguments for a bool value. CmdParser Parses command line input. CmdParser.Option A unit of significant text on the command line. ColorHelpers The control utility methods. DynamicBVH<T> A Dynamic Binary Volume Hierarchy implementation. EnumExtensions Extentions for enums. GenericEventArgs<T> Event argument for a generic value. IntEventArgs Event args for an integer value. ObjectPool<T> Object pool collection. PriorityQueueNode Priority Queue Node class. PropertyInfoExtensions Reflection extensions. ReflectionHelper Helper methods for reflection. SizeEventArgs Event args for a size value. StringEventArgs Event args for a string value. TimeSpanExtended Extension methods for TimeSpan. TypeExtensions Extension methods for Type. TypeInfoAllMemberExtensions Extensions for TypeInfo. Utils Extension methods and more ... Structs DynamicBVHNode<T> A BVH node. Interfaces IGetNativePointers Interface that represents an object that could provide some native pointers. IPausable Interface for pausable objects. IPooledObjectPolicy<T> Object creation policy. Enums ExecutionState The executon state. Delegates BasicCache<T, K>.NewItemInstanceDelegate Delegate that crates a new instance by its key. DynamicBVH<T>.QueryDelegate The query delegate function. DynamicBVH<T>.QueryDelegate<TResult> The query delegate function."
  },
  "api/Evergine.Common.Helpers.IGetNativePointers.html": {
    "href": "api/Evergine.Common.Helpers.IGetNativePointers.html",
    "title": "Interface IGetNativePointers | Evergine Doc",
    "keywords": "Interface IGetNativePointers Interface that represents an object that could provide some native pointers. Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public interface IGetNativePointers Properties AvailablePointerKeys Gets a list of all available keys to obtain native pointers. Declaration IEnumerable<string> AvailablePointerKeys { get; } Property Value Type Description IEnumerable<string> Methods GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.IntEventArgs.html": {
    "href": "api/Evergine.Common.Helpers.IntEventArgs.html",
    "title": "Class IntEventArgs | Evergine Doc",
    "keywords": "Class IntEventArgs Event args for an integer value. Inheritance object EventArgs IntEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public sealed class IntEventArgs : EventArgs Constructors IntEventArgs(int) Initializes a new instance of the IntEventArgs class. Declaration public IntEventArgs(int value) Parameters Type Name Description int value The value. Properties Value Gets the value. Declaration public int Value { get; } Property Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.IPausable.html": {
    "href": "api/Evergine.Common.Helpers.IPausable.html",
    "title": "Interface IPausable | Evergine Doc",
    "keywords": "Interface IPausable Interface for pausable objects. Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public interface IPausable Properties State Gets or sets the state. Declaration ExecutionState State { get; set; } Property Value Type Description ExecutionState The asset path. Methods Initialize() Initialize the object. Declaration void Initialize() Pause() Pause the object. Declaration void Pause() Resume() Pause the object. Declaration void Resume() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.IPooledObjectPolicy-1.html": {
    "href": "api/Evergine.Common.Helpers.IPooledObjectPolicy-1.html",
    "title": "Interface IPooledObjectPolicy<T> | Evergine Doc",
    "keywords": "Interface IPooledObjectPolicy<T> Object creation policy. Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public interface IPooledObjectPolicy<T> Type Parameters Name Description T The pooled object type. Methods Create() Create a new pooled object. Declaration T Create() Returns Type Description T The pooled object. Return(T) Return pooled object. Declaration bool Return(T obj) Parameters Type Name Description T obj The pooled object. Returns Type Description bool If all is ok. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.ObjectPool-1.html": {
    "href": "api/Evergine.Common.Helpers.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Evergine Doc",
    "keywords": "Class ObjectPool<T> Object pool collection. Inheritance object ObjectPool<T> BulletCollisionInfoPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public class ObjectPool<T> Type Parameters Name Description T The pool object type. Constructors ObjectPool(IPooledObjectPolicy<T>) Initializes a new instance of the ObjectPool<T> class. Declaration public ObjectPool(IPooledObjectPolicy<T> policy) Parameters Type Name Description IPooledObjectPolicy<T> policy The object policy. Properties Size Gets the pool size. Declaration public int Size { get; } Property Value Type Description int Methods Clear() Clear the pooled objects. Declaration public void Clear() Get() Get a pooled object. Declaration public T Get() Returns Type Description T A pooled object. Return(T) Return a pooled object. Declaration public void Return(T element) Parameters Type Name Description T element The object to release. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.PriorityQueueNode.html": {
    "href": "api/Evergine.Common.Helpers.PriorityQueueNode.html",
    "title": "Class PriorityQueueNode | Evergine Doc",
    "keywords": "Class PriorityQueueNode Priority Queue Node class. Inheritance object PriorityQueueNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public class PriorityQueueNode Properties InsertionIndex Gets or sets the order the node was inserted in. Used by the priority queue - do not edit this value. Declaration public long InsertionIndex { get; set; } Property Value Type Description long The index of the insertion. Priority Gets or sets the Priority to insert this node at. Must be set BEFORE adding a node to the queue. Declaration public double Priority { get; set; } Property Value Type Description double The priority. QueueIndex Gets or sets the current position in the queue. Used by the priority queue - do not edit this value. Declaration public int QueueIndex { get; set; } Property Value Type Description int The index of the queue. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.PropertyInfoExtensions.html": {
    "href": "api/Evergine.Common.Helpers.PropertyInfoExtensions.html",
    "title": "Class PropertyInfoExtensions | Evergine Doc",
    "keywords": "Class PropertyInfoExtensions Reflection extensions. Inheritance object PropertyInfoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class PropertyInfoExtensions Methods GetValueGetter(PropertyInfo) Get the expression of a value getter for a property. Compile the expression to execute or combine it with other expressions. Declaration public static Func<object, object> GetValueGetter(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The property info. Returns Type Description Func<object, object> The value property getter. GetValueSetter(PropertyInfo) Get the expression of a value setter for a property. Compile the expression to execute or combine it with other expressions. Declaration public static Action<object, object> GetValueSetter(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The property info. Returns Type Description Action<object, object> The value property setter."
  },
  "api/Evergine.Common.Helpers.ReflectionHelper.html": {
    "href": "api/Evergine.Common.Helpers.ReflectionHelper.html",
    "title": "Class ReflectionHelper | Evergine Doc",
    "keywords": "Class ReflectionHelper Helper methods for reflection. Inheritance object ReflectionHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class ReflectionHelper Methods FindTypes(Assembly, Func<Type, bool>) Find the types that match the corresponding predicate. Declaration public static IEnumerable<Type> FindTypes(Assembly assembly, Func<Type, bool> predicate) Parameters Type Name Description Assembly assembly The target search assembly. Func<Type, bool> predicate The predicate to filter types. Returns Type Description IEnumerable<Type> A collection of matching types. GetBaseType(Type) Gets the type from which the current System.Type directly inherits. Declaration public static Type GetBaseType(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Type The Type from which the current System.Type directly inherits, or null if the current Type represents the System.Object class or an interface. GetFullNameWithoutAssemblyInfo(Type) Gets the full name of the name of the specified type without assembly full name. Declaration public static string GetFullNameWithoutAssemblyInfo(this Type type) Parameters Type Name Description Type type The type. Returns Type Description string The full name of the name without assembly full name. GetGenericTypeDefinition(Type) Returns a Type object that represents a generic type definition from which the current generic type can be constructed. Declaration public static Type GetGenericTypeDefinition(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Type A Type object representing a generic type from which the current type can be constructed. GetInterfaces(Type) Gets the interfaces. Declaration public static Type[] GetInterfaces(Type type) Parameters Type Name Description Type type The type. Returns Type Description Type[] The interfaces. GetMemberAssembly(object) Gets the Assembly in which the member type is declared. For generic types, gets the Assembly in which the generic type is defined. Declaration public static Assembly GetMemberAssembly(this object obj) Parameters Type Name Description object obj The member. Returns Type Description Assembly The type assembly. GetSizeOf<T>() Gets the size of the specified type. Declaration public static int GetSizeOf<T>() Returns Type Description int The size of the specified type. Type Parameters Name Description T The type. GetTypeAssembly(Type) Gets the Assembly in which the type is declared. For generic types, gets the Assembly in which the generic type is defined. Declaration public static Assembly GetTypeAssembly(this Type type) Parameters Type Name Description Type type The type. Returns Type Description Assembly The type assembly. GetTypeAssemblyName(Type) Gets the Assembly name in which the type is declared. For generic types, gets the Assembly name in which the generic type is defined. Declaration public static string GetTypeAssemblyName(this Type type) Parameters Type Name Description Type type The type. Returns Type Description string A string containing the name of this member assembly. GetTypeName(object) Gets the name of the current member. Declaration public static string GetTypeName(this object obj) Parameters Type Name Description object obj The object. Returns Type Description string A string containing the name of this member type. IsAssignableFrom(Type, Type) Determines whether an instance of the second specified type can be assigned to the first specified type instance. Declaration public static bool IsAssignableFrom(this Type first, Type second) Parameters Type Name Description Type first The first type. Type second The type to check. Returns Type Description bool true if the first specified type can be assigned from the second type; otherwise, false. IsAttributeDefined<TAttribute>(Type) Indicates whether custom attributes of a specified type are applied to a specified type. Declaration public static bool IsAttributeDefined<TAttribute>(this Type type) where TAttribute : Attribute Parameters Type Name Description Type type The type. Returns Type Description bool true if an attribute of the specified type is applied to the specified type; otherwise, false. Type Parameters Name Description TAttribute The type of the attribute. IsCastableFrom(Type, Type) Determines whether an instance of the second specified type can be casted to the first specified type instance. Declaration public static bool IsCastableFrom(this Type first, Type second) Parameters Type Name Description Type first The first type. Type second The type to check. Returns Type Description bool true if the first specified type can be casted from the second type; otherwise, false. IsEnum(Type) Determines whether the specified Type is enum. Declaration public static bool IsEnum(this Type type) Parameters Type Name Description Type type The type. Returns Type Description bool true if the Type is a enum type; otherwise, false. IsGenericType(Type) Gets a value indicating whether the specified Type is a generic type. Declaration public static bool IsGenericType(this Type type) Parameters Type Name Description Type type The type. Returns Type Description bool true if the Type is a generic type; otherwise, false. IsGenericTypeDefinition(Type) Gets a value indicating whether the specified type is a generic type definition. Declaration public static bool IsGenericTypeDefinition(this Type type) Parameters Type Name Description Type type The type. Returns Type Description bool true if the Type is a generic type definition; otherwise, false. IsInterface(Type) Determines whether the specified type is an interface. Declaration public static bool IsInterface(this Type type) Parameters Type Name Description Type type The type. Returns Type Description bool true if the Type is a enum type; otherwise, false. IsPrimitive(Type) Determines whether the specified Type is one of the primitive types. Declaration public static bool IsPrimitive(this Type type) Parameters Type Name Description Type type The type. Returns Type Description bool true if the Type is one of the primitive types; otherwise, false. IsValueType(Type) Gets a value indicating whether the specified type is a value type. Declaration public static bool IsValueType(this Type type) Parameters Type Name Description Type type The type. Returns Type Description bool true if the Type is a value type; otherwise, false."
  },
  "api/Evergine.Common.Helpers.SizeEventArgs.html": {
    "href": "api/Evergine.Common.Helpers.SizeEventArgs.html",
    "title": "Class SizeEventArgs | Evergine Doc",
    "keywords": "Class SizeEventArgs Event args for a size value. Inheritance object EventArgs SizeEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public sealed class SizeEventArgs : EventArgs Constructors SizeEventArgs(uint, uint) Initializes a new instance of the SizeEventArgs class. Declaration public SizeEventArgs(uint width, uint height) Parameters Type Name Description uint width The width. uint height The heigth. Properties Height Gets the height. Declaration public uint Height { get; } Property Value Type Description uint Width Gets the width. Declaration public uint Width { get; } Property Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.StringEventArgs.html": {
    "href": "api/Evergine.Common.Helpers.StringEventArgs.html",
    "title": "Class StringEventArgs | Evergine Doc",
    "keywords": "Class StringEventArgs Event args for a string value. Inheritance object EventArgs StringEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public sealed class StringEventArgs : EventArgs Constructors StringEventArgs(string) Initializes a new instance of the StringEventArgs class. Declaration public StringEventArgs(string value) Parameters Type Name Description string value The value. Properties Value Gets the value. Declaration public string Value { get; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Helpers.TimeSpanExtended.html": {
    "href": "api/Evergine.Common.Helpers.TimeSpanExtended.html",
    "title": "Class TimeSpanExtended | Evergine Doc",
    "keywords": "Class TimeSpanExtended Extension methods for TimeSpan. Inheritance object TimeSpanExtended Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class TimeSpanExtended Methods Divide(TimeSpan, int) Divides the specified time. Declaration public static TimeSpan Divide(this TimeSpan time, int divider) Parameters Type Name Description TimeSpan time The time. int divider The divider. Returns Type Description TimeSpan The result. Divide(TimeSpan, TimeSpan) Divides the specified time1. Declaration public static TimeSpan Divide(this TimeSpan time1, TimeSpan time2) Parameters Type Name Description TimeSpan time1 The time1. TimeSpan time2 The time2. Returns Type Description TimeSpan The result. Multiply(TimeSpan, int) Multiplies the specified time. Declaration public static TimeSpan Multiply(this TimeSpan time, int multipler) Parameters Type Name Description TimeSpan time The time. int multipler The multipler. Returns Type Description TimeSpan The result. Multiply(TimeSpan, TimeSpan) Multiplies the specified time1. Declaration public static TimeSpan Multiply(this TimeSpan time1, TimeSpan time2) Parameters Type Name Description TimeSpan time1 The time1. TimeSpan time2 The time2. Returns Type Description TimeSpan The result."
  },
  "api/Evergine.Common.Helpers.TypeExtensions.html": {
    "href": "api/Evergine.Common.Helpers.TypeExtensions.html",
    "title": "Class TypeExtensions | Evergine Doc",
    "keywords": "Class TypeExtensions Extension methods for Type. Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class TypeExtensions Methods GetAllInstances<T>(Assembly, (Type type, object instance)[], params string[]) Finds and instances the specified types in the given assembly, using the parameters for call to the constructor. Declaration public static IEnumerable<T> GetAllInstances<T>(this Assembly assembly, (Type type, object instance)[] constructorParameters, params string[] typeNames) Parameters Type Name Description Assembly assembly The assembly to find the types. (Type type, object instance)[] constructorParameters The parameters used to find a matching constructor. string[] typeNames The type names. Returns Type Description IEnumerable<T> The enumerable of instances. Type Parameters Name Description T The base type. GetSimpleAssemblyQualifiedName(Type) Get assembly qualified name, but without the version and public token. Declaration public static string GetSimpleAssemblyQualifiedName(this Type type) Parameters Type Name Description Type type Type to get name for. Returns Type Description string Simple assembly qualified name. Example: \"MyAssembly.MyNamespace.MyClass, MyAssembly\""
  },
  "api/Evergine.Common.Helpers.TypeInfoAllMemberExtensions.html": {
    "href": "api/Evergine.Common.Helpers.TypeInfoAllMemberExtensions.html",
    "title": "Class TypeInfoAllMemberExtensions | Evergine Doc",
    "keywords": "Class TypeInfoAllMemberExtensions Extensions for TypeInfo. Inheritance object TypeInfoAllMemberExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class TypeInfoAllMemberExtensions Methods GetAllConstructors(TypeInfo) Get contructors of the type and its base types. Declaration public static IEnumerable<ConstructorInfo> GetAllConstructors(this TypeInfo typeInfo) Parameters Type Name Description TypeInfo typeInfo The type info. Returns Type Description IEnumerable<ConstructorInfo> All the contructors. GetAllEvents(TypeInfo) Get events of the type and its base types. Declaration public static IEnumerable<EventInfo> GetAllEvents(this TypeInfo typeInfo) Parameters Type Name Description TypeInfo typeInfo The type info. Returns Type Description IEnumerable<EventInfo> All the events. GetAllFields(TypeInfo) Get fields of the type and its base types. Declaration public static IEnumerable<FieldInfo> GetAllFields(this TypeInfo typeInfo) Parameters Type Name Description TypeInfo typeInfo The type info. Returns Type Description IEnumerable<FieldInfo> All the fields. GetAllMembers(TypeInfo) Get members of the type and its base types. Declaration public static IEnumerable<MemberInfo> GetAllMembers(this TypeInfo typeInfo) Parameters Type Name Description TypeInfo typeInfo The type info. Returns Type Description IEnumerable<MemberInfo> All the members. GetAllMethods(TypeInfo) Get methods of the type and its base types. Declaration public static IEnumerable<MethodInfo> GetAllMethods(this TypeInfo typeInfo) Parameters Type Name Description TypeInfo typeInfo The type info. Returns Type Description IEnumerable<MethodInfo> All the methods. GetAllNestedTypes(TypeInfo) Get nested types of the type and its base types. Declaration public static IEnumerable<TypeInfo> GetAllNestedTypes(this TypeInfo typeInfo) Parameters Type Name Description TypeInfo typeInfo The type info. Returns Type Description IEnumerable<TypeInfo> All the nested types. GetAllProperties(TypeInfo) Get properties of the type and its base types. Declaration public static IEnumerable<PropertyInfo> GetAllProperties(this TypeInfo typeInfo) Parameters Type Name Description TypeInfo typeInfo The type info. Returns Type Description IEnumerable<PropertyInfo> All the properties."
  },
  "api/Evergine.Common.Helpers.Utils.html": {
    "href": "api/Evergine.Common.Helpers.Utils.html",
    "title": "Class Utils | Evergine Doc",
    "keywords": "Class Utils Extension methods and more ... Inheritance object Utils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Helpers Assembly: Evergine.Common.dll Syntax public static class Utils Methods CompareTo<T>(T[], T[]) Compare an array with other array. Declaration public static bool CompareTo<T>(this T[] array1, T[] array2) where T : IEquatable<T> Parameters Type Name Description T[] array1 Specifies the array1. T[] array2 Specifies the array2. Returns Type Description bool True whether the array1 and array2 are equals or not otherwise. Type Parameters Name Description T The array type. DisposeAndNull<T>(ref T) Safely dispose a reference if not null, and set it to null after dispose. Declaration public static void DisposeAndNull<T>(ref T disposable) where T : class, IDisposable Parameters Type Name Description T disposable Object to dispose. Type Parameters Name Description T The type of object to dispose. Remarks The reference will be set to null after dispose."
  },
  "api/Evergine.Common.html": {
    "href": "api/Evergine.Common.html",
    "title": "Namespace Evergine.Common | Evergine Doc",
    "keywords": "Namespace Evergine.Common Classes BinaryReaderExtensions Extension functions for reading Evergine data types with a BinaryReader. BinaryWriterExtensions Extension functions for writing Evergine data types with a BinaryWriter. EvergineException Represents errors that occur inside Evergine API. IdentifiableObject Abstract class to extend for each class that we need to serialize. LoadableDependencyLink<T> Represents a dependency link between a IDependencyObject and a ILoadable that implements IDependencyObject. OperatingSystemHelper Helper class to determine executing OS platform. ProjectAddOn Class that represents a project add-on. ProjectModel Class that represents a project file. ProjectProfile Profile element class. UnsafeMethods Unsafe and native methods. Interfaces IDependencyLink Interface that represents a dependency link between two objects. IDependencyObject Interface that represents an object that has dependencies defined. ILoadable Interface for loadable assets. Enums AdapterType Specifies the type of adapter. ExecutionMode Specifies the execution mode of the application. PlatformFamily Specifies the platform family. PlatformType Specifies the platform type."
  },
  "api/Evergine.Common.IdentifiableObject.html": {
    "href": "api/Evergine.Common.IdentifiableObject.html",
    "title": "Class IdentifiableObject | Evergine Doc",
    "keywords": "Class IdentifiableObject Abstract class to extend for each class that we need to serialize. Inheritance object IdentifiableObject AssetMetafile<TProfile, TExporter> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public abstract class IdentifiableObject Constructors IdentifiableObject() Initializes a new instance of the IdentifiableObject class. Declaration public IdentifiableObject() Properties Id Gets or sets the Id of this object. Declaration [EvergineMember(0)] public Guid Id { get; set; } Property Value Type Description Guid Methods IdHasChanged(Guid) The Id of the object has been updated. Declaration protected virtual void IdHasChanged(Guid oldId) Parameters Type Name Description Guid oldId The old Id value. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.IDependencyLink.html": {
    "href": "api/Evergine.Common.IDependencyLink.html",
    "title": "Interface IDependencyLink | Evergine Doc",
    "keywords": "Interface IDependencyLink Interface that represents a dependency link between two objects. Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public interface IDependencyLink Properties Type Gets the dependency link type. Declaration DependencyLinkTypes Type { get; } Property Value Type Description DependencyLinkTypes Methods Register() Registers this instance in the dependency list of source and target.. Declaration void Register() Unregister(IDependencyObject) Unregisters this instance in the dependency list of source and target. Declaration void Unregister(IDependencyObject caller) Parameters Type Name Description IDependencyObject caller The caller. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.IDependencyObject.html": {
    "href": "api/Evergine.Common.IDependencyObject.html",
    "title": "Interface IDependencyObject | Evergine Doc",
    "keywords": "Interface IDependencyObject Interface that represents an object that has dependencies defined. Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public interface IDependencyObject Properties Dependencies Gets the dependency list. Declaration Lazy<List<IDependencyLink>> Dependencies { get; } Property Value Type Description Lazy<List<IDependencyLink>> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.ILoadable.html": {
    "href": "api/Evergine.Common.ILoadable.html",
    "title": "Interface ILoadable | Evergine Doc",
    "keywords": "Interface ILoadable Interface for loadable assets. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public interface ILoadable : IDisposable Properties Id Gets or sets the asset Id. Declaration Guid Id { get; set; } Property Value Type Description Guid The asset path. ReaderVersion Gets the reader version. Declaration Version ReaderVersion { get; } Property Value Type Description Version The reader version. Methods Invalidate(ILoadable) Invalidates this instance and raise the Invalidated event with the new ILoadable instance. Declaration void Invalidate(ILoadable newInstance) Parameters Type Name Description ILoadable newInstance The new ILoadable instance. ReleaseUnusedMemory() Release unused memory. Declaration void ReleaseUnusedMemory() Events Invalidated Occurs when this instance has been invalidated and all references must be reloaded. Declaration event EventHandler<ILoadable> Invalidated Event Type Type Description EventHandler<ILoadable> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.AccelerometerState.html": {
    "href": "api/Evergine.Common.Input.AccelerometerState.html",
    "title": "Struct AccelerometerState | Evergine Doc",
    "keywords": "Struct AccelerometerState Describes the accelerometer state. Implements IController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct AccelerometerState : IController Fields RawAcceleration Raw acceleration value in G-force. Declaration public Vector3 RawAcceleration Field Value Type Description Vector3 SmoothAcceleration Smooth acceleration value in G-force. Declaration public Vector3 SmoothAcceleration Field Value Type Description Vector3 Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { readonly get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Implements IController Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Buttons.html": {
    "href": "api/Evergine.Common.Input.Buttons.html",
    "title": "Enum Buttons | Evergine Doc",
    "keywords": "Enum Buttons Represent all gamepad buttons. Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public enum Buttons Fields Name Description A State of the A button. B State of the B button. Back State of the back button. Down Down button. LefShoulder State of the left shoulder. Left Left button. LeftStick State of the left stick. LeftThumbstickDown The left thumbstick down LeftThumbstickLeft The left thumbstick left LeftThumbstickRight The left thumbstick right LeftThumbstickUp The left thumbstick up LeftTrigger Left trigger. Right Right button. RightShoulder State of the right shoulder. RightStick State of the right stick. RightThumbstickDown The right thumbstick down RightThumbstickLeft The right thumbstick left RightThumbstickRight The right thumbstick right RightThumbstickUp The right thumbstick up RightTrigger Right trigger. Start State of the start button. Up Up button. X State of the X button. Y State of the Y button. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ButtonState.html": {
    "href": "api/Evergine.Common.Input.ButtonState.html",
    "title": "Enum ButtonState | Evergine Doc",
    "keywords": "Enum ButtonState State of a button. Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax [Flags] public enum ButtonState Fields Name Description Pressed Button is pressed. Pressing Button is transitioning from released to pressed. Released Button is released. Releasing Button is transitioning from pressed to released. Undefined Undefined state. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ButtonStateTracker-1.html": {
    "href": "api/Evergine.Common.Input.ButtonStateTracker-1.html",
    "title": "Class ButtonStateTracker<TButton> | Evergine Doc",
    "keywords": "Class ButtonStateTracker<TButton> Tracks button state changes. Inheritance object ButtonStateTracker<TButton> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public class ButtonStateTracker<TButton> Type Parameters Name Description TButton The type of the buttons to be tracked. Constructors ButtonStateTracker(Action<TButton>) Initializes a new instance of the ButtonStateTracker<TButton> class. Declaration public ButtonStateTracker(Action<TButton> onReleasing = null) Parameters Type Name Description Action<TButton> onReleasing Action to be invoked for every releasing button. Methods ButtonDown(TButton) Handles a button down event. Declaration public void ButtonDown(TButton button) Parameters Type Name Description TButton button The button. ButtonUp(TButton) Handles a button up event. Declaration public void ButtonUp(TButton button) Parameters Type Name Description TButton button The button. Commit() Do a commit operation and update the button status. Declaration public void Commit() IsButtonDown(TButton) Gets a value indicating whether the current state of a button is Pressing or Pressed. Declaration public bool IsButtonDown(TButton button) Parameters Type Name Description TButton button The button to be checked. Returns Type Description bool true if the button is down; otherwise, false. ReadButtonState(TButton) Gets the current state of a button. Declaration public ButtonState ReadButtonState(TButton button) Parameters Type Name Description TButton button The button to be checked. Returns Type Description ButtonState The state of the specified button. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.CompassChangedArgs.html": {
    "href": "api/Evergine.Common.Input.CompassChangedArgs.html",
    "title": "Class CompassChangedArgs | Evergine Doc",
    "keywords": "Class CompassChangedArgs Event args for compass change. Inheritance object EventArgs CompassChangedArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public class CompassChangedArgs : EventArgs Constructors CompassChangedArgs(CompassState) Initializes a new instance of the CompassChangedArgs class. Declaration public CompassChangedArgs(CompassState compassState) Parameters Type Name Description CompassState compassState The compass state. Properties NewCompassState Gets the new compass state. Declaration public CompassState NewCompassState { get; } Property Value Type Description CompassState Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.CompassState.html": {
    "href": "api/Evergine.Common.Input.CompassState.html",
    "title": "Struct CompassState | Evergine Doc",
    "keywords": "Struct CompassState Define a compass state. Implements IController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct CompassState : IController Fields Accuracy The accuracy of the measure, in rads per seconds. Declaration public float Accuracy Field Value Type Description float RawGeographicHeading The raw geographical heading of the device. Declaration public float RawGeographicHeading Field Value Type Description float RawMagneticHeading The raw magnetic heading of the device. Declaration public float RawMagneticHeading Field Value Type Description float SmoothGeographicHeading The heading, in rads per seconds, measured counter clockwise from the Earth’s geographic north. Declaration public float SmoothGeographicHeading Field Value Type Description float SmoothMagneticHeading The heading, in rads per seconds, measured counterclockwise from the Earth’s magnetic north. Declaration public float SmoothMagneticHeading Field Value Type Description float TimeStamp A timestamp indicating the time at which the compass reading was taken. Declaration public DateTimeOffset TimeStamp Field Value Type Description DateTimeOffset Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { readonly get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Implements IController Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.DisplayOrientation.html": {
    "href": "api/Evergine.Common.Input.DisplayOrientation.html",
    "title": "Enum DisplayOrientation | Evergine Doc",
    "keywords": "Enum DisplayOrientation Specifies the display orientation. Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax [Flags] public enum DisplayOrientation Fields Name Description Default Default orientation. LandscapeLeft Landscape left. LandscapeRight Landscape right. Portrait Portrait up. PortraitFlipped Portrait down. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.GamePadButtons.html": {
    "href": "api/Evergine.Common.Input.GamePadButtons.html",
    "title": "Struct GamePadButtons | Evergine Doc",
    "keywords": "Struct GamePadButtons Represents the buttons of a game pad. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct GamePadButtons Fields A State of the A button. Declaration public ButtonState A Field Value Type Description ButtonState B State of the B button. Declaration public ButtonState B Field Value Type Description ButtonState Back State of the back button. Declaration public ButtonState Back Field Value Type Description ButtonState LeftShoulder State of the left shoulder. Declaration public ButtonState LeftShoulder Field Value Type Description ButtonState LeftStick State of the left stick. Declaration public ButtonState LeftStick Field Value Type Description ButtonState RightShoulder State of the right shoulder. Declaration public ButtonState RightShoulder Field Value Type Description ButtonState RightStick State of the right stick. Declaration public ButtonState RightStick Field Value Type Description ButtonState Start State of the start button. Declaration public ButtonState Start Field Value Type Description ButtonState X State of the X button. Declaration public ButtonState X Field Value Type Description ButtonState Y State of the Y button. Declaration public ButtonState Y Field Value Type Description ButtonState Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.GamePadDPad.html": {
    "href": "api/Evergine.Common.Input.GamePadDPad.html",
    "title": "Struct GamePadDPad | Evergine Doc",
    "keywords": "Struct GamePadDPad Represents the state of the directional pad. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct GamePadDPad Fields Down The D-Pad down button. Declaration public ButtonState Down Field Value Type Description ButtonState Left The D-Pad left button. Declaration public ButtonState Left Field Value Type Description ButtonState Right The D-Pad right button. Declaration public ButtonState Right Field Value Type Description ButtonState Up The D-Pad up button. Declaration public ButtonState Up Field Value Type Description ButtonState Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.GamePadState.html": {
    "href": "api/Evergine.Common.Input.GamePadState.html",
    "title": "Struct GamePadState | Evergine Doc",
    "keywords": "Struct GamePadState Represents the game pad state. Implements IController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct GamePadState : IController Fields Buttons Gamepad buttons. Declaration public GamePadButtons Buttons Field Value Type Description GamePadButtons DPad Direction buttons. Declaration public GamePadDPad DPad Field Value Type Description GamePadDPad ThumbSticks Thumb sticks. Declaration public GamePadThumbSticks ThumbSticks Field Value Type Description GamePadThumbSticks Triggers Gamepad triggers. Declaration public GamePadTriggers Triggers Field Value Type Description GamePadTriggers Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { readonly get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Methods IsButtonPressed(Buttons) Determines whether [is button pressed] [the specified button]. Declaration public bool IsButtonPressed(Buttons button) Parameters Type Name Description Buttons button the specified button. Returns Type Description bool true if [is button pressed] [the specified button]; otherwise, false. IsButtonReleased(Buttons) Determines whether [is button released] [the specified button]. Declaration public bool IsButtonReleased(Buttons button) Parameters Type Name Description Buttons button the specified button. Returns Type Description bool true if [is button released] [the specified button]; otherwise, false. Implements IController Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.GamePadThumbSticks.html": {
    "href": "api/Evergine.Common.Input.GamePadThumbSticks.html",
    "title": "Struct GamePadThumbSticks | Evergine Doc",
    "keywords": "Struct GamePadThumbSticks Represents the game pad sticks. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct GamePadThumbSticks Fields Left Left thumbstick axis values, in the range -1.0f to 1.0f. Declaration public Vector2 Left Field Value Type Description Vector2 Right Right thumbstick axis values, in the range -1.0f to 1.0f. Declaration public Vector2 Right Field Value Type Description Vector2 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.GamePadTriggers.html": {
    "href": "api/Evergine.Common.Input.GamePadTriggers.html",
    "title": "Struct GamePadTriggers | Evergine Doc",
    "keywords": "Struct GamePadTriggers Represents the game pad triggers. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct GamePadTriggers Fields Left Left trigger value, in the range 0.0 to 1.0f. Declaration public float Left Field Value Type Description float Right Right trigger value, in the range 0.0 to 1.0f. Declaration public float Right Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.GyroscopeState.html": {
    "href": "api/Evergine.Common.Input.GyroscopeState.html",
    "title": "Struct GyroscopeState | Evergine Doc",
    "keywords": "Struct GyroscopeState Describes the gyroscope state. Implements IController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct GyroscopeState : IController Fields RawRotationRate Gets the raw rotational velocity around axis X, Y and Z of the device, in radians per second. Declaration public Vector3 RawRotationRate Field Value Type Description Vector3 SmoothRotationRate Gets the smothed rotational velocity around axis X, Y and Z of the device, in radians per second. Declaration public Vector3 SmoothRotationRate Field Value Type Description Vector3 Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { readonly get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Implements IController Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.html": {
    "href": "api/Evergine.Common.Input.html",
    "title": "Namespace Evergine.Common.Input | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Input Classes ButtonStateTracker<TButton> Tracks button state changes. CompassChangedArgs Event args for compass change. ListenerFactory Sensor Factory for IOS. OrientationChangedArgs Represents the orientation of the compass. SensorNotAvailableException Exception for a sensor that it is not available. Structs AccelerometerState Describes the accelerometer state. CompassState Define a compass state. GamePadButtons Represents the buttons of a game pad. GamePadDPad Represents the state of the directional pad. GamePadState Represents the game pad state. GamePadThumbSticks Represents the game pad sticks. GamePadTriggers Represents the game pad triggers. GyroscopeState Describes the gyroscope state. KeyboardState Holds the state of the keyboard. MotionState Describes the motion state. MouseState Describes the mouse state. TouchLocation Represents a touch location. TouchPanelState Represents the state of the touch panel. TouchPanelState.Enumerator Touch panel enumerator. Interfaces IAccelerometer Interface for accelerometer sensor. IAccelerometerListener Accelerometer listener. ICompass Interface for compass sensor. ICompassListener Compass Listener. IController Interface for controllers. IGyroscope Interface for Gyroscope sensor. IGyroscopeListener Interface for Gyroscope sensor. IInput Interface for input devices. IListener IListener Interface. IMotionSensor Interface for Motion sensor. IMotionSensorListener Interface for Motion sensor. ISensor Sensors interface. ISensorFactory Sensor Factory interface. ITouchable Interface for touchables. Enums ButtonState State of a button. Buttons Represent all gamepad buttons. DisplayOrientation Specifies the display orientation. PlayerIndex Index of the player. TouchLocationState Status of the touch location."
  },
  "api/Evergine.Common.Input.IAccelerometer.html": {
    "href": "api/Evergine.Common.Input.IAccelerometer.html",
    "title": "Interface IAccelerometer | Evergine Doc",
    "keywords": "Interface IAccelerometer Interface for accelerometer sensor. Inherited Members ISensor.Exist() ISensor.Start() ISensor.Stop() ISensor.Started IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IAccelerometer : ISensor, IDisposable Methods GetState() Gets the Accelerometer state. Declaration AccelerometerState GetState() Returns Type Description AccelerometerState Accelerometer state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IAccelerometerListener.html": {
    "href": "api/Evergine.Common.Input.IAccelerometerListener.html",
    "title": "Interface IAccelerometerListener | Evergine Doc",
    "keywords": "Interface IAccelerometerListener Accelerometer listener. Inherited Members IListener.Exist() IListener.Register() IListener.Unregister() IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IAccelerometerListener : IListener, IDisposable Methods GetState() Gets the state. Declaration AccelerometerState GetState() Returns Type Description AccelerometerState The state of the accelerometer. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ICompass.html": {
    "href": "api/Evergine.Common.Input.ICompass.html",
    "title": "Interface ICompass | Evergine Doc",
    "keywords": "Interface ICompass Interface for compass sensor. Inherited Members ISensor.Exist() ISensor.Start() ISensor.Stop() ISensor.Started IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface ICompass : ISensor, IDisposable Methods GetState() Gets the compass state. Declaration CompassState GetState() Returns Type Description CompassState Compass state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ICompassListener.html": {
    "href": "api/Evergine.Common.Input.ICompassListener.html",
    "title": "Interface ICompassListener | Evergine Doc",
    "keywords": "Interface ICompassListener Compass Listener. Inherited Members IListener.Exist() IListener.Register() IListener.Unregister() IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface ICompassListener : IListener, IDisposable Methods GetState() Gets the compass state. Declaration CompassState GetState() Returns Type Description CompassState Compass state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IController.html": {
    "href": "api/Evergine.Common.Input.IController.html",
    "title": "Interface IController | Evergine Doc",
    "keywords": "Interface IController Interface for controllers. Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IController Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration bool IsConnected { get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IGyroscope.html": {
    "href": "api/Evergine.Common.Input.IGyroscope.html",
    "title": "Interface IGyroscope | Evergine Doc",
    "keywords": "Interface IGyroscope Interface for Gyroscope sensor. Inherited Members ISensor.Exist() ISensor.Start() ISensor.Stop() ISensor.Started IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IGyroscope : ISensor, IDisposable Methods GetState() Gets the gyroscope state. Declaration GyroscopeState GetState() Returns Type Description GyroscopeState Gyroscope state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IGyroscopeListener.html": {
    "href": "api/Evergine.Common.Input.IGyroscopeListener.html",
    "title": "Interface IGyroscopeListener | Evergine Doc",
    "keywords": "Interface IGyroscopeListener Interface for Gyroscope sensor. Inherited Members IListener.Exist() IListener.Register() IListener.Unregister() IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IGyroscopeListener : IListener, IDisposable Methods GetState() Gets the gyroscope state. Declaration GyroscopeState GetState() Returns Type Description GyroscopeState Gyroscope state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IInput.html": {
    "href": "api/Evergine.Common.Input.IInput.html",
    "title": "Interface IInput | Evergine Doc",
    "keywords": "Interface IInput Interface for input devices. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IInput : IDisposable Methods GamePadGetState(PlayerIndex) Get the current state of a gamepad indentify by index. Declaration GamePadState GamePadGetState(PlayerIndex playerIndex) Parameters Type Name Description PlayerIndex playerIndex Index of the player. Returns Type Description GamePadState Game pad state. KeyboardGetState() Keyboards the state of the get. Declaration KeyboardState KeyboardGetState() Returns Type Description KeyboardState Keyboard state. MouseGetState() Mouses the state of the get. Declaration MouseState MouseGetState() Returns Type Description MouseState Mouse state. SetGamePadGetVibration(PlayerIndex, float, float, float, float) Set the speed of the gamepads available vibration motors. Declaration bool SetGamePadGetVibration(PlayerIndex playerIndex, float leftMotor, float leftTrigger, float rightMotor, float rightTrigger) Parameters Type Name Description PlayerIndex playerIndex Index of the player. float leftMotor The level of the left vibration motor. float leftTrigger The level of the left trigger vibration motor. float rightMotor The level of the right vibration motor. float rightTrigger The level of the right trigger vibration motor. Returns Type Description bool True is everything Ok, false if doesn't exist the player index. TouchPanelGetState(ref TouchPanelState) Touches the state of the panel get. Declaration void TouchPanelGetState(ref TouchPanelState state) Parameters Type Name Description TouchPanelState state Touch panel state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IListener.html": {
    "href": "api/Evergine.Common.Input.IListener.html",
    "title": "Interface IListener | Evergine Doc",
    "keywords": "Interface IListener IListener Interface. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IListener : IDisposable Methods Exist() Exists this instance. Declaration bool Exist() Returns Type Description bool True if sensor exist, false in other case. Register() Registers this instance. Declaration void Register() Unregister() Unregisters this instance. Declaration void Unregister() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IMotionSensor.html": {
    "href": "api/Evergine.Common.Input.IMotionSensor.html",
    "title": "Interface IMotionSensor | Evergine Doc",
    "keywords": "Interface IMotionSensor Interface for Motion sensor. Inherited Members ISensor.Exist() ISensor.Start() ISensor.Stop() ISensor.Started IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IMotionSensor : ISensor, IDisposable Methods GetState() Gets the motion state. Declaration MotionState GetState() Returns Type Description MotionState Motion state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.IMotionSensorListener.html": {
    "href": "api/Evergine.Common.Input.IMotionSensorListener.html",
    "title": "Interface IMotionSensorListener | Evergine Doc",
    "keywords": "Interface IMotionSensorListener Interface for Motion sensor. Inherited Members IListener.Exist() IListener.Register() IListener.Unregister() IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface IMotionSensorListener : IListener, IDisposable Methods GetState() Gets the motion state. Declaration MotionState GetState() Returns Type Description MotionState Motion state. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ISensor.html": {
    "href": "api/Evergine.Common.Input.ISensor.html",
    "title": "Interface ISensor | Evergine Doc",
    "keywords": "Interface ISensor Sensors interface. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface ISensor : IDisposable Properties Started Gets a value indicating whether Sensor is started. Declaration bool Started { get; } Property Value Type Description bool true if sensor; otherwise, false. Methods Exist() Check if the sensor exist. Declaration bool Exist() Returns Type Description bool True if sensor exist, false in other case. Start() Starts the sensor. Declaration void Start() Stop() Stops the sensor. Declaration void Stop() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ISensorFactory.html": {
    "href": "api/Evergine.Common.Input.ISensorFactory.html",
    "title": "Interface ISensorFactory | Evergine Doc",
    "keywords": "Interface ISensorFactory Sensor Factory interface. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface ISensorFactory : IDisposable Methods GetAccelerometer() Gets the accelerometer. Declaration IAccelerometer GetAccelerometer() Returns Type Description IAccelerometer Accelerometer Sensor. GetCompass() Gets the compass. Declaration ICompass GetCompass() Returns Type Description ICompass Compass Sensor. GetGyroscope() Gets the gyroscope. Declaration IGyroscope GetGyroscope() Returns Type Description IGyroscope Gyroscope Sensor. GetMotion() Gets the motion sensor. Declaration IMotionSensor GetMotion() Returns Type Description IMotionSensor Motion Sensor. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ITouchable.html": {
    "href": "api/Evergine.Common.Input.ITouchable.html",
    "title": "Interface ITouchable | Evergine Doc",
    "keywords": "Interface ITouchable Interface for touchables. Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public interface ITouchable Properties IsActive Gets a value indicating whether this instance is active. Declaration bool IsActive { get; } Property Value Type Description bool true if this instance is active; otherwise, false. ManualTouchOrder Gets or sets a value indicating whether [manual touch order]. Declaration bool ManualTouchOrder { get; set; } Property Value Type Description bool true if [manual touch order]; otherwise, false. TouchOrder Gets the touch order. Declaration int TouchOrder { get; } Property Value Type Description int Methods AddTouch(TouchLocation, bool) Adds the touch. Declaration void AddTouch(TouchLocation touch, bool isNew) Parameters Type Name Description TouchLocation touch The touch. bool isNew if set to true [is new]. Contains(Vector2) Determines whether [contains] [the specified point]. Declaration bool Contains(Vector2 point) Parameters Type Name Description Vector2 point The point. Returns Type Description bool true if [contains] [the specified point]; otherwise, false. UpdateTouchOrder() Updates the touch order. Declaration void UpdateTouchOrder() Events TouchOrderChanged Occurs when [touch order changed]. Declaration event EventHandler TouchOrderChanged Event Type Type Description EventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Keyboard.html": {
    "href": "api/Evergine.Common.Input.Keyboard.html",
    "title": "Namespace Evergine.Common.Input.Keyboard | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Input.Keyboard Classes KeyCharEventArgs Provides data for keyboard char generation related events. KeyEventArgs Provides data for keyboard key related events. KeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. Interfaces ISoftwareKeyboardProvider Interface for software keyboard providers. Enums Keys All keys."
  },
  "api/Evergine.Common.Input.Keyboard.ISoftwareKeyboardProvider.html": {
    "href": "api/Evergine.Common.Input.Keyboard.ISoftwareKeyboardProvider.html",
    "title": "Interface ISoftwareKeyboardProvider | Evergine Doc",
    "keywords": "Interface ISoftwareKeyboardProvider Interface for software keyboard providers. Namespace: Evergine.Common.Input.Keyboard Assembly: Evergine.Common.dll Syntax public interface ISoftwareKeyboardProvider Methods Hide() Request to hide the keyboard. Declaration void Hide() Show() Request to show the keyboard. Declaration void Show() Events OnKeyPressed Event raised when the software keyboard gets a key pressed event. Declaration event EventHandler<Keys> OnKeyPressed Event Type Type Description EventHandler<Keys> OnKeyboardClosed Event raised when the software keyboard gets closed. Declaration event EventHandler OnKeyboardClosed Event Type Type Description EventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Keyboard.KeyboardDispatcher.html": {
    "href": "api/Evergine.Common.Input.Keyboard.KeyboardDispatcher.html",
    "title": "Class KeyboardDispatcher | Evergine Doc",
    "keywords": "Class KeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. Inheritance object KeyboardDispatcher FormsKeyboardDispatcher SDLKeyboardDispatcher WPFKeyboardDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Keyboard Assembly: Evergine.Common.dll Syntax public abstract class KeyboardDispatcher Constructors KeyboardDispatcher() Initializes a new instance of the KeyboardDispatcher class. Declaration public KeyboardDispatcher() Methods DispatchEvents() Dispatch accumulated events. Declaration public void DispatchEvents() HandleKeyChar(char) Handle the given character event. Declaration protected void HandleKeyChar(char character) Parameters Type Name Description char character The character. HandleKeyChar(string) Handle the given characters event. Declaration protected void HandleKeyChar(string characters) Parameters Type Name Description string characters The characters. HandleKeyDown(Keys) Handle the down event of the given key. Declaration protected void HandleKeyDown(Keys key) Parameters Type Name Description Keys key The key. HandleKeyUp(Keys) Handle the up event of the given key. Declaration protected void HandleKeyUp(Keys key) Parameters Type Name Description Keys key The key. IsKeyDown(Keys) Gets a value indicating whether the current state of a keyboard key is Pressing or Pressed. Declaration public bool IsKeyDown(Keys key) Parameters Type Name Description Keys key The key to be checked. Returns Type Description bool true if the key is down; otherwise, false. ReadKeyState(Keys) Gets the current state of a keyboard key. Declaration public ButtonState ReadKeyState(Keys key) Parameters Type Name Description Keys key The key to be checked. Returns Type Description ButtonState The state of the specified key. ResetKeyboardStatus() Resets current keys status for dispatcher. Declaration protected void ResetKeyboardStatus() Events KeyChar Occurs when a key is pressed and a character is generated. Declaration public event EventHandler<KeyCharEventArgs> KeyChar Event Type Type Description EventHandler<KeyCharEventArgs> KeyDown Occurs when a key is pressed. Declaration public event EventHandler<KeyEventArgs> KeyDown Event Type Type Description EventHandler<KeyEventArgs> KeyUp Occurs when a key is released. Declaration public event EventHandler<KeyEventArgs> KeyUp Event Type Type Description EventHandler<KeyEventArgs> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Keyboard.KeyCharEventArgs.html": {
    "href": "api/Evergine.Common.Input.Keyboard.KeyCharEventArgs.html",
    "title": "Class KeyCharEventArgs | Evergine Doc",
    "keywords": "Class KeyCharEventArgs Provides data for keyboard char generation related events. Inheritance object EventArgs KeyCharEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Keyboard Assembly: Evergine.Common.dll Syntax public class KeyCharEventArgs : EventArgs Constructors KeyCharEventArgs(char) Initializes a new instance of the KeyCharEventArgs class. Declaration public KeyCharEventArgs(char character) Parameters Type Name Description char character The generated character. Properties Character Gets the generated character by a key press or a combination of them. Declaration public char Character { get; } Property Value Type Description char Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Keyboard.KeyEventArgs.html": {
    "href": "api/Evergine.Common.Input.Keyboard.KeyEventArgs.html",
    "title": "Class KeyEventArgs | Evergine Doc",
    "keywords": "Class KeyEventArgs Provides data for keyboard key related events. Inheritance object EventArgs KeyEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Keyboard Assembly: Evergine.Common.dll Syntax public class KeyEventArgs : EventArgs Constructors KeyEventArgs(Keys, bool) Initializes a new instance of the KeyEventArgs class. Declaration public KeyEventArgs(Keys key, bool isDown) Parameters Type Name Description Keys key The key associated with the event. bool isDown If its a KeyDown or not. Properties IsDown Gets a value indicating whether the event was a KeyDown or not. Declaration public bool IsDown { get; } Property Value Type Description bool Key Gets the key associated with the event. Declaration public Keys Key { get; } Property Value Type Description Keys Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Keyboard.Keys.html": {
    "href": "api/Evergine.Common.Input.Keyboard.Keys.html",
    "title": "Enum Keys | Evergine Doc",
    "keywords": "Enum Keys All keys. Namespace: Evergine.Common.Input.Keyboard Assembly: Evergine.Common.dll Syntax public enum Keys Fields Name Description A A key. Add Add key. Apps Applications key. Attn Attn key. B B key. Back BACKSPACE key. BrowserBack Browser Back key. BrowserFavorites Browser Favorites key. BrowserForward Browser Forward key. BrowserHome Browser Start and Home key. BrowserRefresh Browser Refresh key. BrowserSearch Browser Search key. BrowserStop Browser Stop key. C C key. CapsLock CAPS LOCK key. Clear CLEAR Key. Crsel CrSel key. D D key. D0 Digit zero key. D1 Digit one key. D2 Digit two key. D3 Digit three key. D4 Digit four key. D5 Digit five key. D6 Digit six key. D7 Digit seven key. D8 Digit eight key. D9 Digit nine key. Decimal Decimal key. Delete DEL key. Divide Divide key. Down DOWN ARROW key. E E key. End END key. Enter ENTER key. EraseEof Erase EOF key. Escape ESC key. Execute EXECUTE key. Exsel ExSel key. F F key. F1 F1 key. F10 F10 key. F11 F11 key. F12 F12 key. F13 F13 key. F14 F14 key. F15 F15 key. F16 F16 key. F17 F17 key. F18 F18 key. F19 F19 key. F2 F2 key. F20 F20 key. F21 F21 key. F22 F22 key. F23 F23 key. F24 F24 key. F3 F3 key. F4 F4 key. F5 F5 key. F6 F6 key. F7 F7 key. F8 F8 key. F9 F9 key. G G key. H H key. Help HELP key. Home HOME key. I I key. ImeConvert IME Convert key. ImeNoConvert IME NoConvert key. Insert INS key. J J key. K K key. Kana Kana key on Japanese keyboards. Kanji Kanji key on Japanese keyboards. L L key. LaunchApplication1 Start Application 1 key. LaunchApplication2 Start Application 2 key. LaunchMail Start Mail key. Left LEFT ARROW key. LeftAlt Left ALT key. LeftControl Left CONTROL key. LeftShift Left SHIFT key. LeftWindows Left Windows key. M M key. MediaNextTrack Next Track key. MediaPlayPause Play/Pause Media key. MediaPreviousTrack Previous Track key. MediaStop Stop Media key. Multiply Multiply key. N N key. NumLock NUM LOCK key. NumPad0 Numeric keypad 0 key. NumPad1 Numeric keypad 1 key. NumPad2 Numeric keypad 2 key. NumPad3 Numeric keypad 3 key. NumPad4 Numeric keypad 4 key. NumPad5 Numeric keypad 5 key. NumPad6 Numeric keypad 6 key. NumPad7 Numeric keypad 7 key. NumPad8 Numeric keypad 8 key. NumPad9 Numeric keypad 9 key. O O key. Oem8 Used for miscellaneous characters; it can vary by keyboard. OemBackslash The OEM angle bracket or backslash key on the RT 102 key keyboard. OemCloseBrackets The OEM close bracket key on a US standard keyboard. OemComma For any country/region, the ',' key. OemMinus For any country/region, the '-' key. OemOpenBrackets The OEM open bracket key on a US standard keyboard. OemPeriod For any country/region, the '.' key. OemPipe The OEM pipe key on a US standard keyboard. OemPlus For any country/region, the '+' key. OemQuestion The OEM question mark key on a US standard keyboard. OemQuotes The OEM singled/double quote key on a US standard keyboard. OemSemicolon The OEM Semicolon key on a US standard keyboard. OemTilde The OEM tilde key on a US standard keyboard. P P key. Pa1 PA1 key. PageDown PAGE DOWN key. PageUp PAGE UP key. Pause PAUSE key. Play Play key. Print PRINT key. PrintScreen PRINT SCREEN key. ProcessKey IME PROCESS key. Q Q key. R R key. Right RIGHT ARROW key. RightAlt Right ALT key. RightControl Right CONTROL key. RightShift Right SHIFT key. RightWindows Right Windows key. S S key. Scroll SCROLL LOCK key. Select SELECT key. SelectMedia Select Media key. Separator Separator key. Sleep Computer Sleep key. Space SPACEBAR key. Subtract Subtract key. T T key. Tab TAB key. U U key. Unknown Unknown key. Up UP ARROW key. V V key. VolumeDown Volume Down key. VolumeMute Volume Mute key. VolumeUp Volume Up key. W W key. X X key. Y Y key. Z Z key. Zoom Zoom key. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.KeyboardState.html": {
    "href": "api/Evergine.Common.Input.KeyboardState.html",
    "title": "Struct KeyboardState | Evergine Doc",
    "keywords": "Struct KeyboardState Holds the state of the keyboard. Implements IController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct KeyboardState : IController Fields A The letter \"A\" key. Declaration public ButtonState A Field Value Type Description ButtonState Accept The accept button or key. Declaration public ButtonState Accept Field Value Type Description ButtonState Add The add (+) operation key as located on a numeric pad. Declaration public ButtonState Add Field Value Type Description ButtonState Apostrophe The apostrophe key. Declaration public ButtonState Apostrophe Field Value Type Description ButtonState Application The application key or button. Declaration public ButtonState Application Field Value Type Description ButtonState B The letter \"B\" key. Declaration public ButtonState B Field Value Type Description ButtonState Back The virtual back key or button. Declaration public ButtonState Back Field Value Type Description ButtonState BackSlash The backslash key. Declaration public ButtonState BackSlash Field Value Type Description ButtonState C The letter \"C\" key. Declaration public ButtonState C Field Value Type Description ButtonState Cancel The cancel key or button. Declaration public ButtonState Cancel Field Value Type Description ButtonState CapitalLock The Caps Lock key or button. Declaration public ButtonState CapitalLock Field Value Type Description ButtonState Clear The Clear key or button. Declaration public ButtonState Clear Field Value Type Description ButtonState Comma The comma key. Declaration public ButtonState Comma Field Value Type Description ButtonState Control The Ctrl key. This is the general Ctrl case, applicable to key layouts with only one Ctrl key or that do not need to differentiate between left Ctrl and right Ctrl keystrokes. Declaration public ButtonState Control Field Value Type Description ButtonState Convert The convert button or key. Declaration public ButtonState Convert Field Value Type Description ButtonState D The letter \"D\" key. Declaration public ButtonState D Field Value Type Description ButtonState Decimal The decimal (.) key as located on a numeric pad. Declaration public ButtonState Decimal Field Value Type Description ButtonState Delete The Delete key. Declaration public ButtonState Delete Field Value Type Description ButtonState Divide The divide (/) operation key as located on a numeric pad. Declaration public ButtonState Divide Field Value Type Description ButtonState Down The Down Arrow key. Declaration public ButtonState Down Field Value Type Description ButtonState E The letter \"E\" key. Declaration public ButtonState E Field Value Type Description ButtonState End The End key. Declaration public ButtonState End Field Value Type Description ButtonState Enter The Enter key. Declaration public ButtonState Enter Field Value Type Description ButtonState Escape The Esc key. Declaration public ButtonState Escape Field Value Type Description ButtonState Execute The execute key or button. Declaration public ButtonState Execute Field Value Type Description ButtonState F The letter \"F\" key. Declaration public ButtonState F Field Value Type Description ButtonState F1 The F1 function key. Declaration public ButtonState F1 Field Value Type Description ButtonState F10 The F10 function key. Declaration public ButtonState F10 Field Value Type Description ButtonState F11 The F11 function key. Declaration public ButtonState F11 Field Value Type Description ButtonState F12 The F12 function key. Declaration public ButtonState F12 Field Value Type Description ButtonState F13 The F13 function key. Declaration public ButtonState F13 Field Value Type Description ButtonState F14 The F14 function key. Declaration public ButtonState F14 Field Value Type Description ButtonState F15 The F15 function key. Declaration public ButtonState F15 Field Value Type Description ButtonState F16 The F16 function key. Declaration public ButtonState F16 Field Value Type Description ButtonState F17 The F17 function key. Declaration public ButtonState F17 Field Value Type Description ButtonState F18 The F18 function key. Declaration public ButtonState F18 Field Value Type Description ButtonState F19 The F19 function key. Declaration public ButtonState F19 Field Value Type Description ButtonState F2 The F2 function key. Declaration public ButtonState F2 Field Value Type Description ButtonState F20 The F20 function key. Declaration public ButtonState F20 Field Value Type Description ButtonState F21 The F21 function key. Declaration public ButtonState F21 Field Value Type Description ButtonState F22 The F22 function key. Declaration public ButtonState F22 Field Value Type Description ButtonState F23 The F23 function key. Declaration public ButtonState F23 Field Value Type Description ButtonState F24 The F24 function key. Declaration public ButtonState F24 Field Value Type Description ButtonState F3 The F3 function key. Declaration public ButtonState F3 Field Value Type Description ButtonState F4 The F4 function key. Declaration public ButtonState F4 Field Value Type Description ButtonState F5 The F5 function key. Declaration public ButtonState F5 Field Value Type Description ButtonState F6 The F6 function key. Declaration public ButtonState F6 Field Value Type Description ButtonState F7 The F7 function key. Declaration public ButtonState F7 Field Value Type Description ButtonState F8 The F8 function key. Declaration public ButtonState F8 Field Value Type Description ButtonState F9 The F9 function key. Declaration public ButtonState F9 Field Value Type Description ButtonState Favorites The favorites key. Declaration public ButtonState Favorites Field Value Type Description ButtonState Final The Final symbol key-shift button. Declaration public ButtonState Final Field Value Type Description ButtonState G The letter \"G\" key. Declaration public ButtonState G Field Value Type Description ButtonState GoBack The go back key. Declaration public ButtonState GoBack Field Value Type Description ButtonState GoForward The go forward key. Declaration public ButtonState GoForward Field Value Type Description ButtonState GoHome The go home key. Declaration public ButtonState GoHome Field Value Type Description ButtonState Grave The grave key. Declaration public ButtonState Grave Field Value Type Description ButtonState H The letter \"H\" key. Declaration public ButtonState H Field Value Type Description ButtonState Help The Help key or button. Declaration public ButtonState Help Field Value Type Description ButtonState Home The Home key. Declaration public ButtonState Home Field Value Type Description ButtonState I The letter \"I\" key. Declaration public ButtonState I Field Value Type Description ButtonState Insert The Insert key. Declaration public ButtonState Insert Field Value Type Description ButtonState J The letter \"J\" key. Declaration public ButtonState J Field Value Type Description ButtonState Junja The Junja symbol key-shift button. Declaration public ButtonState Junja Field Value Type Description ButtonState K The letter \"K\" key. Declaration public ButtonState K Field Value Type Description ButtonState Kana The Kana symbol key-shift button. Declaration public ButtonState Kana Field Value Type Description ButtonState Kanji The Kanji symbol key-shift button. Declaration public ButtonState Kanji Field Value Type Description ButtonState L The letter \"L\" key. Declaration public ButtonState L Field Value Type Description ButtonState Left The Left Arrow key. Declaration public ButtonState Left Field Value Type Description ButtonState LeftAlt The left Alt key. Declaration public ButtonState LeftAlt Field Value Type Description ButtonState LeftControl The left Ctrl key. Declaration public ButtonState LeftControl Field Value Type Description ButtonState LeftMenu The left menu key. Declaration public ButtonState LeftMenu Field Value Type Description ButtonState LeftShift The left Shift key. Declaration public ButtonState LeftShift Field Value Type Description ButtonState LeftWindows The left Windows key. Declaration public ButtonState LeftWindows Field Value Type Description ButtonState M The letter \"M\" key. Declaration public ButtonState M Field Value Type Description ButtonState Menu The menu key or button. Declaration public ButtonState Menu Field Value Type Description ButtonState ModeChange The mode change key. Declaration public ButtonState ModeChange Field Value Type Description ButtonState Multiply The multiply (*) operation key as located on a numeric pad. Declaration public ButtonState Multiply Field Value Type Description ButtonState N The letter \"N\" key. Declaration public ButtonState N Field Value Type Description ButtonState NavigationAccept The navigation accept button. Declaration public ButtonState NavigationAccept Field Value Type Description ButtonState NavigationCancel The navigation cancel button. Declaration public ButtonState NavigationCancel Field Value Type Description ButtonState NavigationDown The navigation down button. Declaration public ButtonState NavigationDown Field Value Type Description ButtonState NavigationLeft The navigation left button. Declaration public ButtonState NavigationLeft Field Value Type Description ButtonState NavigationMenu The navigation menu button. Declaration public ButtonState NavigationMenu Field Value Type Description ButtonState NavigationRight The navigation right button. Declaration public ButtonState NavigationRight Field Value Type Description ButtonState NavigationUp The navigation up button. Declaration public ButtonState NavigationUp Field Value Type Description ButtonState NavigationView The navigation up button. Declaration public ButtonState NavigationView Field Value Type Description ButtonState NonConvert The nonconvert button or key. Declaration public ButtonState NonConvert Field Value Type Description ButtonState Number0 The number \"0\" key. Declaration public ButtonState Number0 Field Value Type Description ButtonState Number1 The number \"1\" key. Declaration public ButtonState Number1 Field Value Type Description ButtonState Number2 The number \"2\" key. Declaration public ButtonState Number2 Field Value Type Description ButtonState Number3 The number \"3\" key. Declaration public ButtonState Number3 Field Value Type Description ButtonState Number4 The number \"4\" key. Declaration public ButtonState Number4 Field Value Type Description ButtonState Number5 The number \"5\" key. Declaration public ButtonState Number5 Field Value Type Description ButtonState Number6 The number \"6\" key. Declaration public ButtonState Number6 Field Value Type Description ButtonState Number7 The number \"7\" key. Declaration public ButtonState Number7 Field Value Type Description ButtonState Number8 The number \"8\" key. Declaration public ButtonState Number8 Field Value Type Description ButtonState Number9 The number \"9\" key. Declaration public ButtonState Number9 Field Value Type Description ButtonState NumberKeyLock The Num Lock key. Declaration public ButtonState NumberKeyLock Field Value Type Description ButtonState NumberPad0 The number \"0\" key as located on a numeric pad. Declaration public ButtonState NumberPad0 Field Value Type Description ButtonState NumberPad1 The number \"1\" key as located on a numeric pad. Declaration public ButtonState NumberPad1 Field Value Type Description ButtonState NumberPad2 The number \"2\" key as located on a numeric pad. Declaration public ButtonState NumberPad2 Field Value Type Description ButtonState NumberPad3 The number \"3\" key as located on a numeric pad. Declaration public ButtonState NumberPad3 Field Value Type Description ButtonState NumberPad4 The number \"4\" key as located on a numeric pad. Declaration public ButtonState NumberPad4 Field Value Type Description ButtonState NumberPad5 The number \"5\" key as located on a numeric pad. Declaration public ButtonState NumberPad5 Field Value Type Description ButtonState NumberPad6 The number \"6\" key as located on a numeric pad. Declaration public ButtonState NumberPad6 Field Value Type Description ButtonState NumberPad7 The number \"7\" key as located on a numeric pad. Declaration public ButtonState NumberPad7 Field Value Type Description ButtonState NumberPad8 The number \"8\" key as located on a numeric pad. Declaration public ButtonState NumberPad8 Field Value Type Description ButtonState NumberPad9 The number \"9\" key as located on a numeric pad. Declaration public ButtonState NumberPad9 Field Value Type Description ButtonState O The letter \"O\" key. Declaration public ButtonState O Field Value Type Description ButtonState P The letter \"P\" key. Declaration public ButtonState P Field Value Type Description ButtonState PageDown The Page Down key. Declaration public ButtonState PageDown Field Value Type Description ButtonState PageUp The Page Up key. Declaration public ButtonState PageUp Field Value Type Description ButtonState Pause The Pause key or button. Declaration public ButtonState Pause Field Value Type Description ButtonState Period The period key. Declaration public ButtonState Period Field Value Type Description ButtonState Print The Print key or button. Declaration public ButtonState Print Field Value Type Description ButtonState Q The letter \"Q\" key. Declaration public ButtonState Q Field Value Type Description ButtonState R The letter \"R\" key. Declaration public ButtonState R Field Value Type Description ButtonState Refresh The refresh key. Declaration public ButtonState Refresh Field Value Type Description ButtonState Right The Right Arrow key. Declaration public ButtonState Right Field Value Type Description ButtonState RightAlt The right Alt key. Declaration public ButtonState RightAlt Field Value Type Description ButtonState RightControl The right Ctrl key. Declaration public ButtonState RightControl Field Value Type Description ButtonState RightMenu The right menu key. Declaration public ButtonState RightMenu Field Value Type Description ButtonState RightShift The right Shift key. Declaration public ButtonState RightShift Field Value Type Description ButtonState RightWindows The right Windows key. Declaration public ButtonState RightWindows Field Value Type Description ButtonState S The letter \"S\" key. Declaration public ButtonState S Field Value Type Description ButtonState Scroll The Scroll Lock (ScrLk) key. Declaration public ButtonState Scroll Field Value Type Description ButtonState Search The search key. Declaration public ButtonState Search Field Value Type Description ButtonState Select The Select key or button. Declaration public ButtonState Select Field Value Type Description ButtonState Semicolon The semicolon key. Declaration public ButtonState Semicolon Field Value Type Description ButtonState Separator The separator key as located on a numeric pad. Declaration public ButtonState Separator Field Value Type Description ButtonState Shift The Shift key. This is the general Shift case, applicable to key layouts with only one Shift key or that do not need to differentiate between left Shift and right Shift keystrokes. Declaration public ButtonState Shift Field Value Type Description ButtonState Slash The slash key. Declaration public ButtonState Slash Field Value Type Description ButtonState Sleep The sleep key or button. Declaration public ButtonState Sleep Field Value Type Description ButtonState Space The Spacebar key or button. Declaration public ButtonState Space Field Value Type Description ButtonState Stop The stop key. Declaration public ButtonState Stop Field Value Type Description ButtonState Subtract The subtract (-) operation key as located on a numeric pad. Declaration public ButtonState Subtract Field Value Type Description ButtonState T The letter \"T\" key. Declaration public ButtonState T Field Value Type Description ButtonState Tab The Tab key. Declaration public ButtonState Tab Field Value Type Description ButtonState U The letter \"U\" key. Declaration public ButtonState U Field Value Type Description ButtonState Underline The underline key. Declaration public ButtonState Underline Field Value Type Description ButtonState Up The Up Arrow key. Declaration public ButtonState Up Field Value Type Description ButtonState V The letter \"V\" key. Declaration public ButtonState V Field Value Type Description ButtonState W The letter \"W\" key. Declaration public ButtonState W Field Value Type Description ButtonState X The letter \"X\" key. Declaration public ButtonState X Field Value Type Description ButtonState Y The letter \"Y\" key. Declaration public ButtonState Y Field Value Type Description ButtonState Z The letter \"Z\" key. Declaration public ButtonState Z Field Value Type Description ButtonState Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { readonly get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Methods GetChar(Keys) Get Char of a pressed key. Declaration public char GetChar(Keys key) Parameters Type Name Description Keys key Pressed key. Returns Type Description char Return the char. IsKeyPressed(Keys) Determines whether [is key pressed] [the specified key]. Declaration public bool IsKeyPressed(Keys key) Parameters Type Name Description Keys key The key. Returns Type Description bool true if [is key pressed] [the specified key]; otherwise, false. IsKeyReleased(Keys) Determines whether [is key released] [the specified key]. Declaration public bool IsKeyReleased(Keys key) Parameters Type Name Description Keys key The key. Returns Type Description bool true if [is key released] [the specified key]; otherwise, false. Implements IController Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.ListenerFactory.html": {
    "href": "api/Evergine.Common.Input.ListenerFactory.html",
    "title": "Class ListenerFactory | Evergine Doc",
    "keywords": "Class ListenerFactory Sensor Factory for IOS. Inheritance object ListenerFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public abstract class ListenerFactory Fields accelerometerListener The accelerometer. Declaration protected IAccelerometerListener accelerometerListener Field Value Type Description IAccelerometerListener compassListener The compass listener. Declaration protected ICompassListener compassListener Field Value Type Description ICompassListener giroscopeListener The gyroscope listener. Declaration protected IGyroscopeListener giroscopeListener Field Value Type Description IGyroscopeListener motionSensorListener The motion sensor listener. Declaration protected IMotionSensorListener motionSensorListener Field Value Type Description IMotionSensorListener Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. GetAccelerometerListener() Gets the accelerometer. Declaration public IAccelerometerListener GetAccelerometerListener() Returns Type Description IAccelerometerListener Accelerometer Sensor. GetCompassListener() Gets the compass listener. Declaration public ICompassListener GetCompassListener() Returns Type Description ICompassListener Compass Listener. GetGyroscopeListener() Gets the gyroscope listener. Declaration public IGyroscopeListener GetGyroscopeListener() Returns Type Description IGyroscopeListener Gyroscope Listener. GetMotionSensorListener() Gets the motion listener. Declaration public IMotionSensorListener GetMotionSensorListener() Returns Type Description IMotionSensorListener Motion Listener. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.MotionState.html": {
    "href": "api/Evergine.Common.Input.MotionState.html",
    "title": "Struct MotionState | Evergine Doc",
    "keywords": "Struct MotionState Describes the motion state. Implements IController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct MotionState : IController Fields Orientation Gets the global orientation of the device in Quaternion. Declaration public Quaternion Orientation Field Value Type Description Quaternion OrientationEuler Gets the global orientation of the device in Euler Angles. Declaration public Vector3 OrientationEuler Field Value Type Description Vector3 Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { readonly get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Implements IController Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Mouse.CursorTypes.html": {
    "href": "api/Evergine.Common.Input.Mouse.CursorTypes.html",
    "title": "Enum CursorTypes | Evergine Doc",
    "keywords": "Enum CursorTypes Enums with the cursor types. Namespace: Evergine.Common.Input.Mouse Assembly: Evergine.Common.dll Syntax public enum CursorTypes Fields Name Description Arrow The default arrow cursor. Crosshair The crosshair (\"+\") cursor. Hand The hand cursor, usually used for web links. IBeam The cursor that appears when the mouse is over text editing regions. No The cursor that points that something is invalid, usually a cross. None Cursor not visible. Sizing The size all cursor which points in all directions. Unknown Unknown cursor type. Wait The waiting cursor that appears while the application/system is busy. WaitArrow The cross between Arrow and Wait cursors. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Mouse.html": {
    "href": "api/Evergine.Common.Input.Mouse.html",
    "title": "Namespace Evergine.Common.Input.Mouse | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Input.Mouse Classes MouseButtonEventArgs Provides data for mouse button related events. MouseDispatcher Dispatch mouse events associated to a Surface or a Window. MouseEventArgs Provides data for various events that report changes of a mouse device. MouseScrollEventArgs Provides data for mouse scroll related events. Enums CursorTypes Enums with the cursor types. MouseButtons Specifies constants that define which mouse button was pressed. MouseScrollDirections Specifies the direction of a mouse wheel rotation."
  },
  "api/Evergine.Common.Input.Mouse.MouseButtonEventArgs.html": {
    "href": "api/Evergine.Common.Input.Mouse.MouseButtonEventArgs.html",
    "title": "Class MouseButtonEventArgs | Evergine Doc",
    "keywords": "Class MouseButtonEventArgs Provides data for mouse button related events. Inheritance object EventArgs MouseEventArgs MouseButtonEventArgs Inherited Members MouseEventArgs.Position MouseEventArgs.State EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Mouse Assembly: Evergine.Common.dll Syntax public class MouseButtonEventArgs : MouseEventArgs Constructors MouseButtonEventArgs(MouseButtons, bool) Initializes a new instance of the MouseButtonEventArgs class. Declaration public MouseButtonEventArgs(MouseButtons button, bool isPressed) Parameters Type Name Description MouseButtons button The button associated with the event. bool isPressed Indicates if the button was pressed or released. Properties Button Gets the button associated with the event. Declaration public MouseButtons Button { get; } Property Value Type Description MouseButtons IsPressed Gets a value indicating whether the button was pressed or released. Declaration public bool IsPressed { get; } Property Value Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Mouse.MouseButtons.html": {
    "href": "api/Evergine.Common.Input.Mouse.MouseButtons.html",
    "title": "Enum MouseButtons | Evergine Doc",
    "keywords": "Enum MouseButtons Specifies constants that define which mouse button was pressed. Namespace: Evergine.Common.Input.Mouse Assembly: Evergine.Common.dll Syntax [Flags] public enum MouseButtons Remarks It can be used as flags in the State property. Fields Name Description Left The left mouse button was pressed. Middle The middle mouse button was pressed. None No mouse button was pressed. Right The right mouse button was pressed. XButton1 The first XButton was pressed. XButton2 The second XButton was pressed. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Mouse.MouseDispatcher.html": {
    "href": "api/Evergine.Common.Input.Mouse.MouseDispatcher.html",
    "title": "Class MouseDispatcher | Evergine Doc",
    "keywords": "Class MouseDispatcher Dispatch mouse events associated to a Surface or a Window. Inheritance object PointerDispatcher MouseDispatcher FormsMouseDispatcher SDLMouseDispatcher WPFMouseDispatcher Inherited Members PointerDispatcher.Points PointerDispatcher.PointerDown PointerDispatcher.PointerUp PointerDispatcher.PointerMove PointerDispatcher.HandlePointerDown(long, Point) PointerDispatcher.HandlePointerUp(long, Point) PointerDispatcher.HandlePointerMove(long, Point) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Mouse Assembly: Evergine.Common.dll Syntax public abstract class MouseDispatcher : PointerDispatcher Constructors MouseDispatcher() Initializes a new instance of the MouseDispatcher class. Declaration public MouseDispatcher() Properties CursorType Gets the active cursor type. It can be changed calling the method TrySetCursorType(CursorTypes). Declaration public abstract CursorTypes CursorType { get; } Property Value Type Description CursorTypes IsMouseOver Gets a value indicating whether the mouse is inside the Surface or Window. Declaration public bool IsMouseOver { get; } Property Value Type Description bool Position Gets the mouse position. Can be changed programmatically calling the method TrySetCursorPosition(Point). Declaration public Point Position { get; } Property Value Type Description Point PositionDelta Gets the mouse delta position since the last frame. Declaration public Point PositionDelta { get; } Property Value Type Description Point ScrollDelta Gets the mouse scroll increment since the last frame. Declaration public Point ScrollDelta { get; } Property Value Type Description Point Remarks The value of X indicates the horizontal scroll increment. This value is positive if the mouse wheel is rotated to the right or negative if the mouse wheel is rotated to the left. The value of Y indicates the vertical scroll increment. This value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user). State Gets the mouse buttons state. Declaration public MouseButtons State { get; } Property Value Type Description MouseButtons Methods DispatchEvents() Dispatch accumulated events. Declaration public override void DispatchEvents() Overrides PointerDispatcher.DispatchEvents() HandleMouseButtonDown(MouseButtons) Handles the mouse button down event. Declaration protected void HandleMouseButtonDown(MouseButtons button) Parameters Type Name Description MouseButtons button The button pressed. HandleMouseButtonUp(MouseButtons) Handles the mouse button up event. Declaration protected void HandleMouseButtonUp(MouseButtons button) Parameters Type Name Description MouseButtons button The button pressed. HandleMouseEnter(Point) Handles the mouse enter event. Declaration protected void HandleMouseEnter(Point position) Parameters Type Name Description Point position The mouse position. HandleMouseLeave(Point) Handles the mouse leave event. Declaration protected void HandleMouseLeave(Point position) Parameters Type Name Description Point position The mouse position. HandleMouseMove(Point) Handles the mouse move event. Declaration protected void HandleMouseMove(Point position) Parameters Type Name Description Point position The mouse position. HandleMouseScroll(MouseScrollDirections) Handles the mouse button scroll event. Declaration protected void HandleMouseScroll(MouseScrollDirections direction) Parameters Type Name Description MouseScrollDirections direction The scroll direction. IsButtonDown(MouseButtons) Gets a value indicating whether the current state of a mouse button is Pressing or Pressed. Declaration public bool IsButtonDown(MouseButtons button) Parameters Type Name Description MouseButtons button The button to be checked. Returns Type Description bool true if the button is down; otherwise, false. NativeSetCursorPosition(Point) Sets natively the cursor position. Declaration protected abstract bool NativeSetCursorPosition(Point position) Parameters Type Name Description Point position The new position. Returns Type Description bool True if the operation was successful. False otherwise. ReadButtonState(MouseButtons) Gets the current state of a mouse button. Declaration public ButtonState ReadButtonState(MouseButtons button) Parameters Type Name Description MouseButtons button The button to be checked. Returns Type Description ButtonState The state of the specified button. TrySetCursorPosition(Point) Tries to move the mouse cursor to the specified position. Declaration public bool TrySetCursorPosition(Point position) Parameters Type Name Description Point position The new position for the cursor. Returns Type Description bool true if successful; otherwise, false. TrySetCursorType(CursorTypes) Tries to change the mouse cursor type. Declaration public abstract bool TrySetCursorType(CursorTypes cursorType) Parameters Type Name Description CursorTypes cursorType The new cursor type. Returns Type Description bool true if successful; otherwise, false. Events MouseButtonDown Occurs when a mouse button is pressed. Declaration public event EventHandler<MouseButtonEventArgs> MouseButtonDown Event Type Type Description EventHandler<MouseButtonEventArgs> MouseButtonUp Occurs when a mouse button is released. Declaration public event EventHandler<MouseButtonEventArgs> MouseButtonUp Event Type Type Description EventHandler<MouseButtonEventArgs> MouseEnter Occurs when the mouse pointer enters the Surface or Window. Declaration public event EventHandler<MouseEventArgs> MouseEnter Event Type Type Description EventHandler<MouseEventArgs> MouseLeave Occurs when the mouse pointer leaves the Surface or Window. Declaration public event EventHandler<MouseEventArgs> MouseLeave Event Type Type Description EventHandler<MouseEventArgs> MouseMove Occurs when the mouse pointer is moved over the Surface or Window. Declaration public event EventHandler<MouseEventArgs> MouseMove Event Type Type Description EventHandler<MouseEventArgs> MouseScroll Occurs when the mouse wheel (vertical or horizontal) moves. Declaration public event EventHandler<MouseScrollEventArgs> MouseScroll Event Type Type Description EventHandler<MouseScrollEventArgs> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Mouse.MouseEventArgs.html": {
    "href": "api/Evergine.Common.Input.Mouse.MouseEventArgs.html",
    "title": "Class MouseEventArgs | Evergine Doc",
    "keywords": "Class MouseEventArgs Provides data for various events that report changes of a mouse device. Inheritance object EventArgs MouseEventArgs MouseButtonEventArgs MouseScrollEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Mouse Assembly: Evergine.Common.dll Syntax public class MouseEventArgs : EventArgs Properties Position Gets the mouse position. Declaration public Point Position { get; } Property Value Type Description Point State Gets the mouse buttons state. Declaration public MouseButtons State { get; } Property Value Type Description MouseButtons Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Mouse.MouseScrollDirections.html": {
    "href": "api/Evergine.Common.Input.Mouse.MouseScrollDirections.html",
    "title": "Enum MouseScrollDirections | Evergine Doc",
    "keywords": "Enum MouseScrollDirections Specifies the direction of a mouse wheel rotation. Namespace: Evergine.Common.Input.Mouse Assembly: Evergine.Common.dll Syntax public enum MouseScrollDirections Fields Name Description Down The mouse wheel is rotated in an downward direction (toward the user). Left The mouse wheel is rotated to the left. Right The mouse wheel is rotated to the right. Up The mouse wheel is rotated in an upward direction (away from the user). Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Mouse.MouseScrollEventArgs.html": {
    "href": "api/Evergine.Common.Input.Mouse.MouseScrollEventArgs.html",
    "title": "Class MouseScrollEventArgs | Evergine Doc",
    "keywords": "Class MouseScrollEventArgs Provides data for mouse scroll related events. Inheritance object EventArgs MouseEventArgs MouseScrollEventArgs Inherited Members MouseEventArgs.Position MouseEventArgs.State EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Mouse Assembly: Evergine.Common.dll Syntax public class MouseScrollEventArgs : MouseEventArgs Constructors MouseScrollEventArgs(MouseScrollDirections) Initializes a new instance of the MouseScrollEventArgs class. Declaration public MouseScrollEventArgs(MouseScrollDirections direction) Parameters Type Name Description MouseScrollDirections direction The direccion of the scroll movement. Properties Delta Gets the direccion of the scroll movement as a Point. Declaration public Point Delta { get; } Property Value Type Description Point Remarks The value of X indicates the horizontal scroll increment. This value is positive if the mouse wheel is rotated to the right or negative if the mouse wheel is rotated to the left. The value of Y indicates the vertical scroll increment. This value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user). Direction Gets the direccion of the scroll movement. Declaration public MouseScrollDirections Direction { get; } Property Value Type Description MouseScrollDirections Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.MouseState.html": {
    "href": "api/Evergine.Common.Input.MouseState.html",
    "title": "Struct MouseState | Evergine Doc",
    "keywords": "Struct MouseState Describes the mouse state. Implements IController Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct MouseState : IController Fields LeftButton Left button state. Declaration public ButtonState LeftButton Field Value Type Description ButtonState MiddleButton Middle button state. Declaration public ButtonState MiddleButton Field Value Type Description ButtonState RightButton Right button state. Declaration public ButtonState RightButton Field Value Type Description ButtonState Wheel Wheel value. Declaration public int Wheel Field Value Type Description int X X position. Declaration public int X Field Value Type Description int Y Y position. Declaration public int Y Field Value Type Description int Properties IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { readonly get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. Position Gets the current mouse position as vector2. Declaration public Vector2 Position { get; } Property Value Type Description Vector2 Implements IController Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.OrientationChangedArgs.html": {
    "href": "api/Evergine.Common.Input.OrientationChangedArgs.html",
    "title": "Class OrientationChangedArgs | Evergine Doc",
    "keywords": "Class OrientationChangedArgs Represents the orientation of the compass. Inheritance object EventArgs OrientationChangedArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public class OrientationChangedArgs : EventArgs Constructors OrientationChangedArgs(DisplayOrientation) Initializes a new instance of the OrientationChangedArgs class. Declaration public OrientationChangedArgs(DisplayOrientation orientation) Parameters Type Name Description DisplayOrientation orientation The orientation. Properties NewOrientation Gets the new orientation. Declaration public DisplayOrientation NewOrientation { get; } Property Value Type Description DisplayOrientation Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.PlayerIndex.html": {
    "href": "api/Evergine.Common.Input.PlayerIndex.html",
    "title": "Enum PlayerIndex | Evergine Doc",
    "keywords": "Enum PlayerIndex Index of the player. Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public enum PlayerIndex Fields Name Description Four Fourth player. One First player. Three Third player. Two Second player. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Pointer.html": {
    "href": "api/Evergine.Common.Input.Pointer.html",
    "title": "Namespace Evergine.Common.Input.Pointer | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Input.Pointer Classes PointerDispatcher Dispatch pointer events associated to a Surface or a Window. PointerEventArgs Provides data for various events that report changes of a pointer point. PointerPoint Class containing the pointer info."
  },
  "api/Evergine.Common.Input.Pointer.PointerDispatcher.html": {
    "href": "api/Evergine.Common.Input.Pointer.PointerDispatcher.html",
    "title": "Class PointerDispatcher | Evergine Doc",
    "keywords": "Class PointerDispatcher Dispatch pointer events associated to a Surface or a Window. Inheritance object PointerDispatcher MouseDispatcher FormsTouchDispatcher SDLTouchDispatcher WPFTouchDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Pointer Assembly: Evergine.Common.dll Syntax public abstract class PointerDispatcher Constructors PointerDispatcher() Initializes a new instance of the PointerDispatcher class. Declaration public PointerDispatcher() Properties Points Gets the points detected inside the Surface or Window. Declaration public IList<PointerPoint> Points { get; } Property Value Type Description IList<PointerPoint> Methods DispatchEvents() Dispatch accumulated events. Declaration public virtual void DispatchEvents() HandlePointerDown(long, Point) Handles the pointer down event. Declaration protected void HandlePointerDown(long pointId, Point position) Parameters Type Name Description long pointId The point id. Point position The point position. HandlePointerMove(long, Point) Handles the pointer move event. Declaration protected void HandlePointerMove(long pointId, Point position) Parameters Type Name Description long pointId The point id. Point position The point position. HandlePointerUp(long, Point) Handles the pointer up event. Declaration protected void HandlePointerUp(long pointId, Point position) Parameters Type Name Description long pointId The point id. Point position The pointer position. Events PointerDown Occurs when a new point is detected in the Surface or Window. Declaration public event EventHandler<PointerEventArgs> PointerDown Event Type Type Description EventHandler<PointerEventArgs> PointerMove Occurs when an existing point changes its position. Declaration public event EventHandler<PointerEventArgs> PointerMove Event Type Type Description EventHandler<PointerEventArgs> PointerUp Occurs when an existing point leaves the Surface or Window. Declaration public event EventHandler<PointerEventArgs> PointerUp Event Type Type Description EventHandler<PointerEventArgs> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Pointer.PointerEventArgs.html": {
    "href": "api/Evergine.Common.Input.Pointer.PointerEventArgs.html",
    "title": "Class PointerEventArgs | Evergine Doc",
    "keywords": "Class PointerEventArgs Provides data for various events that report changes of a pointer point. Inheritance object EventArgs PointerEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Pointer Assembly: Evergine.Common.dll Syntax public class PointerEventArgs : EventArgs Constructors PointerEventArgs(long, Point) Initializes a new instance of the PointerEventArgs class. Declaration public PointerEventArgs(long id, Point position) Parameters Type Name Description long id The identifier of the pointer point associated with the event. Point position The position of the pointer point associated with the event. Properties Id Gets the identifier of the pointer point associated with the event. Declaration public long Id { get; } Property Value Type Description long Position Gets the position of the pointer point associated with the event. Declaration public Point Position { get; } Property Value Type Description Point Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.Pointer.PointerPoint.html": {
    "href": "api/Evergine.Common.Input.Pointer.PointerPoint.html",
    "title": "Class PointerPoint | Evergine Doc",
    "keywords": "Class PointerPoint Class containing the pointer info. Inheritance object PointerPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Input.Pointer Assembly: Evergine.Common.dll Syntax public class PointerPoint Constructors PointerPoint(long, Point, ButtonStateTracker<long>) Initializes a new instance of the PointerPoint class. Declaration public PointerPoint(long id, Point position, ButtonStateTracker<long> stateTracker) Parameters Type Name Description long id The pointer id. Point position The pointer position. ButtonStateTracker<long> stateTracker The state tracker. Properties Id Gets the pointer id. Declaration public long Id { get; } Property Value Type Description long Position Gets the pointer position. Declaration public Point Position { get; } Property Value Type Description Point State Gets the pointer state. Declaration public ButtonState State { get; } Property Value Type Description ButtonState Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.SensorNotAvailableException.html": {
    "href": "api/Evergine.Common.Input.SensorNotAvailableException.html",
    "title": "Class SensorNotAvailableException | Evergine Doc",
    "keywords": "Class SensorNotAvailableException Exception for a sensor that it is not available. Inheritance object Exception SensorNotAvailableException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public class SensorNotAvailableException : Exception, ISerializable Constructors SensorNotAvailableException(string) Initializes a new instance of the SensorNotAvailableException class. Declaration public SensorNotAvailableException(string message) Parameters Type Name Description string message The message that describes the error. Implements ISerializable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.TouchLocation.html": {
    "href": "api/Evergine.Common.Input.TouchLocation.html",
    "title": "Struct TouchLocation | Evergine Doc",
    "keywords": "Struct TouchLocation Represents a touch location. Implements IEquatable<TouchLocation> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct TouchLocation : IEquatable<TouchLocation> Constructors TouchLocation(int, TouchLocationState, float, float, bool) Initializes a new instance of the TouchLocation struct. Declaration public TouchLocation(int id, TouchLocationState state, float x, float y, bool isNew) Parameters Type Name Description int id The id. TouchLocationState state The state. float x The x. float y The y. bool isNew if set to true [is new]. Fields Id Touch ID. Declaration public int Id Field Value Type Description int IsNew If the point is new or it previously existing. Declaration public bool IsNew Field Value Type Description bool Position Touch position. Declaration public Vector2 Position Field Value Type Description Vector2 State Touch state. Declaration public TouchLocationState State Field Value Type Description TouchLocationState Methods Equals(TouchLocation) Equalses the specified other. Declaration public bool Equals(TouchLocation other) Parameters Type Name Description TouchLocation other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(TouchLocation, TouchLocation) Implements the operator ==. Declaration public static bool operator ==(TouchLocation t1, TouchLocation t2) Parameters Type Name Description TouchLocation t1 The t1. TouchLocation t2 The t2. Returns Type Description bool The result of the operator. operator !=(TouchLocation, TouchLocation) Implements the operator !=. Declaration public static bool operator !=(TouchLocation t1, TouchLocation t2) Parameters Type Name Description TouchLocation t1 The t1. TouchLocation t2 The t2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.TouchLocationState.html": {
    "href": "api/Evergine.Common.Input.TouchLocationState.html",
    "title": "Enum TouchLocationState | Evergine Doc",
    "keywords": "Enum TouchLocationState Status of the touch location. Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public enum TouchLocationState Fields Name Description Invalid Invalid state. Moved Touch moved. Pressed Touch pressed. Release Touch released. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.TouchPanelState.Enumerator.html": {
    "href": "api/Evergine.Common.Input.TouchPanelState.Enumerator.html",
    "title": "Struct TouchPanelState.Enumerator | Evergine Doc",
    "keywords": "Struct TouchPanelState.Enumerator Touch panel enumerator. Implements IEnumerator<TouchLocation> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct TouchPanelState.Enumerator : IEnumerator<TouchLocation>, IEnumerator, IDisposable Properties Current Gets the current. Declaration public TouchLocation Current { get; } Property Value Type Description TouchLocation Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions Type Condition InvalidOperationException The collection was modified after the enumerator was created. Implements IEnumerator<T> IEnumerator IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Input.TouchPanelState.html": {
    "href": "api/Evergine.Common.Input.TouchPanelState.html",
    "title": "Struct TouchPanelState | Evergine Doc",
    "keywords": "Struct TouchPanelState Represents the state of the touch panel. Implements IController IList<TouchLocation> ICollection<TouchLocation> IEnumerable<TouchLocation> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Input Assembly: Evergine.Common.dll Syntax public struct TouchPanelState : IController, IList<TouchLocation>, ICollection<TouchLocation>, IEnumerable<TouchLocation>, IEnumerable Constructors TouchPanelState(TouchLocation[]) Initializes a new instance of the TouchPanelState struct. Declaration public TouchPanelState(TouchLocation[] touches) Parameters Type Name Description TouchLocation[] touches The touches. Fields MaxTouches Maximum number of touches. Declaration public const int MaxTouches = 16 Field Value Type Description int Properties Count Gets the count. Declaration public int Count { get; } Property Value Type Description int IsConnected Gets or sets a value indicating whether this instance is connected. Declaration public bool IsConnected { get; set; } Property Value Type Description bool true if this instance is connected; otherwise, false. IsReadOnly Gets a value indicating whether this instance is read only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if this instance is read only; otherwise, false. this[int] Gets or sets the TouchLocation at the specified index. Declaration public TouchLocation this[int index] { get; set; } Parameters Type Name Description int index Touch index. Property Value Type Description TouchLocation The result. Methods AddTouchLocation(int, TouchLocationState, float, float) Adds the touch location. Declaration [Obsolete(\"Use AddTouchLocation(int id, float x, float y) instead\")] public void AddTouchLocation(int id, TouchLocationState state, float x, float y) Parameters Type Name Description int id The id. TouchLocationState state The touch state. float x The x. float y The y. AddTouchLocation(int, float, float) Adds the touch location. Declaration public void AddTouchLocation(int id, float x, float y) Parameters Type Name Description int id The id. float x The x. float y The y. Clear() Clears this instance. Declaration public void Clear() Contains(TouchLocation) Determines whether [contains] [the specified item]. Declaration public bool Contains(TouchLocation item) Parameters Type Name Description TouchLocation item The item. Returns Type Description bool true if [contains] [the specified item]; otherwise, false. Contains(int) Determines whether [contains] [the specified id]. Declaration public bool Contains(int id) Parameters Type Name Description int id The id. Returns Type Description bool true if [contains] [the specified id]; otherwise, false. CopyTo(TouchLocation[], int) Copies to. Declaration public void CopyTo(TouchLocation[] array, int arrayIndex) Parameters Type Name Description TouchLocation[] array The array. int arrayIndex Index of the array. GetEnumerator() Gets the enumerator. Declaration public TouchPanelState.Enumerator GetEnumerator() Returns Type Description TouchPanelState.Enumerator The result. IndexOf(TouchLocation) Indexes the of. Declaration public int IndexOf(TouchLocation touch) Parameters Type Name Description TouchLocation touch The touch. Returns Type Description int The result. ModifyTouch(int, TouchLocationState, float, float) Modifies the touch. Declaration public void ModifyTouch(int id, TouchLocationState newState, float newX, float newY) Parameters Type Name Description int id The id. TouchLocationState newState The new state. float newX The new X. float newY The new Y. RemoveTouchLocation(int) Adds the touch location. Declaration public void RemoveTouchLocation(int id) Parameters Type Name Description int id The id. TryGetTouch(int, out TouchLocation) Tries the get touch. Declaration public bool TryGetTouch(int id, out TouchLocation touchLocation) Parameters Type Name Description int id The id. TouchLocation touchLocation The touch location. Returns Type Description bool The result. Update() Clears this instance. Declaration public void Update() Implements IController IList<T> ICollection<T> IEnumerable<T> IEnumerable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.IO.AssetsDirectoryBase.html": {
    "href": "api/Evergine.Common.IO.AssetsDirectoryBase.html",
    "title": "Class AssetsDirectoryBase | Evergine Doc",
    "keywords": "Class AssetsDirectoryBase Base class containing method for accessing assets in a directory. Inheritance object AssetsDirectoryBase AssetsDirectory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.IO Assembly: Evergine.Common.dll Syntax public abstract class AssetsDirectoryBase Constructors AssetsDirectoryBase() Initializes a new instance of the AssetsDirectoryBase class. Declaration public AssetsDirectoryBase() AssetsDirectoryBase(string) Initializes a new instance of the AssetsDirectoryBase class. Declaration public AssetsDirectoryBase(string rootPath) Parameters Type Name Description string rootPath The root path of the assets directory. Fields DefaultFolderName The default assets folder name. Declaration public const string DefaultFolderName = \"Content\" Field Value Type Description string Properties RootPath Gets the root path of the assets directory. Declaration public string RootPath { get; } Property Value Type Description string Methods EnumerateDirectories(string) Returns an enumerable collection of subdirectories the specified relative path in the assets directory. Declaration public IEnumerable<string> EnumerateDirectories(string path) Parameters Type Name Description string path The relative path in the assets directory. Returns Type Description IEnumerable<string> An enumerable collection of subdirectories the specified relative path in the assets directory, or an empty enumerable collection if no directories are found. Remarks If an existing directory is empty, it will be discarded in the enumerable collection. EnumerateDirectories(string, string) Returns an enumerable collection of subdirectories that match the specified search pattern in the specified relative path in the assets directory. Declaration public IEnumerable<string> EnumerateDirectories(string path, string searchPattern) Parameters Type Name Description string path The relative path in the assets directory. string searchPattern The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. Returns Type Description IEnumerable<string> An enumerable collection of subdirectories the specified relative path in the assets directory that match the specified criteria, or an empty enumerable collection if no directories are found. Remarks If an existing directory is empty, it will be discarded in the enumerable collection. EnumerateDirectories(string, string, SearchOption) Returns an enumerable collection of subdirectories that match the specified search pattern in the specified relative path in the assets directory, and optionally searches subdirectories. Declaration public abstract IEnumerable<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description string path The relative path in the assets directory. string searchPattern The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. SearchOption searchOption One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. Returns Type Description IEnumerable<string> An enumerable collection of subdirectories the specified relative path in the assets directory that match the specified criteria, or an empty enumerable collection if no directories are found. Remarks If an existing directory is empty, it will be discarded in the enumerable collection. EnumerateFiles(string) Returns the names of files in the specified relative path in the assets directory. Declaration public IEnumerable<string> EnumerateFiles(string path) Parameters Type Name Description string path The relative path in the assets directory. Returns Type Description IEnumerable<string> An enumerable collection of names for the files in the specified relative path in the assets directory, or an empty enumerable collection if no directories are found. EnumerateFiles(string, string) Returns the names of files that match the specified search pattern in the specified relative path in the assets directory. Declaration public IEnumerable<string> EnumerateFiles(string path, string searchPattern) Parameters Type Name Description string path The relative path in the assets directory. string searchPattern The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. Returns Type Description IEnumerable<string> An enumerable collection of names for the files in the specified relative path in the assets directory that match the specified criteria, or an empty enumerable collection if no directories are found. EnumerateFiles(string, string, SearchOption) Returns the names of files that match the specified search pattern in the specified relative path in the assets directory, and optionally searches subdirectories. Declaration public abstract IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description string path The relative path in the assets directory. string searchPattern The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. SearchOption searchOption One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory. Returns Type Description IEnumerable<string> An enumerable collection of names for the files in the specified relative path in the assets directory that match the specified criteria, or an empty enumerable collection if no directories are found. Exists(string) Determines whether the specified asset file exists. Declaration public abstract bool Exists(string path) Parameters Type Name Description string path The asset file path to check. Returns Type Description bool true if the assets directory contains the specified file name; otherwise, false. GetFullPath(string) Gets the full file path given a relative one. Declaration protected string GetFullPath(string path) Parameters Type Name Description string path The relative path in the assets directory. Returns Type Description string The full file path in the assets directory. Open(string) Opens the specified asset file. Declaration public abstract AssetStream Open(string path) Parameters Type Name Description string path The relative path to the asset file. Returns Type Description AssetStream The result. ReadAsStringAsync(string) Reads all characters of the specified asset file asynchronously and returns them as one string. Declaration public virtual Task<string> ReadAsStringAsync(string path) Parameters Type Name Description string path The relative path to the asset file. Returns Type Description Task<string> A task that represents the asynchronous read operation. The value of the TResult parameter contains a string with the characters of the specified asset file. UpdateRootPath(string) Updates the root path. Declaration public void UpdateRootPath(string rootPath) Parameters Type Name Description string rootPath The new root path. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.IO.AssetStream.html": {
    "href": "api/Evergine.Common.IO.AssetStream.html",
    "title": "Class AssetStream | Evergine Doc",
    "keywords": "Class AssetStream Stream containing an asset data, and its path. Inheritance object MarshalByRefObject Stream AssetStream Implements IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.IO Assembly: Evergine.Common.dll Syntax public class AssetStream : Stream, IDisposable Constructors AssetStream(string, Stream) Initializes a new instance of the AssetStream class. Declaration public AssetStream(string path, Stream stream) Parameters Type Name Description string path The asset path. Stream stream The asset stream. AssetStream(string, Stream, bool) Initializes a new instance of the AssetStream class. Declaration public AssetStream(string path, Stream stream, bool leaveOpen) Parameters Type Name Description string path The asset path. Stream stream The asset stream. bool leaveOpen true to leave the stream open after the AssetStream object is disposed; otherwise, false. AssetStream(string, string, Stream, bool) Initializes a new instance of the AssetStream class. Declaration public AssetStream(string path, string targetPath, Stream stream, bool leaveOpen) Parameters Type Name Description string path The asset path. string targetPath The target path. Stream stream The asset stream. bool leaveOpen true to leave the stream open after the AssetStream object is disposed; otherwise, false. Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description bool Overrides Stream.CanRead CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description bool Overrides Stream.CanSeek CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description bool Overrides Stream.CanWrite Length Declaration public override long Length { get; } Property Value Type Description long Overrides Stream.Length Path Gets the asset path. Declaration public string Path { get; } Property Value Type Description string Position Declaration public override long Position { get; set; } Property Value Type Description long Overrides Stream.Position TargetPath Gets or sets the environment path. Declaration public string TargetPath { get; set; } Property Value Type Description string Methods Dispose(bool) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Overrides Stream.Dispose(bool) Flush() Declaration public override void Flush() Overrides Stream.Flush() Read(byte[], int, int) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer int offset int count Returns Type Description int Overrides Stream.Read(byte[], int, int) Seek(long, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset SeekOrigin origin Returns Type Description long Overrides Stream.Seek(long, SeekOrigin) SetLength(long) Declaration public override void SetLength(long value) Parameters Type Name Description long value Overrides Stream.SetLength(long) Write(byte[], int, int) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer int offset int count Overrides Stream.Write(byte[], int, int) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.IO.html": {
    "href": "api/Evergine.Common.IO.html",
    "title": "Namespace Evergine.Common.IO | Evergine Doc",
    "keywords": "Namespace Evergine.Common.IO Classes AssetStream Stream containing an asset data, and its path. AssetsDirectoryBase Base class containing method for accessing assets in a directory. PathValidator Static class that contains path validation methods. ResourceLoader Loads resources embedded in the assembly. SerializableMember Marks the item as serializable by the infrastructure. Interfaces IIOManager Interface for I/O managers."
  },
  "api/Evergine.Common.IO.IIOManager.html": {
    "href": "api/Evergine.Common.IO.IIOManager.html",
    "title": "Interface IIOManager | Evergine Doc",
    "keywords": "Interface IIOManager Interface for I/O managers. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.IO Assembly: Evergine.Common.dll Syntax public interface IIOManager : IDisposable Properties Location Gets or sets the location. Declaration string Location { get; set; } Property Value Type Description string The location. Methods CreateDirectory(string) Creates the directory. Declaration void CreateDirectory(string directoryName) Parameters Type Name Description string directoryName Name of the directory. CreateStorageFile(string) Creates the storage file. Declaration Stream CreateStorageFile(string path) Parameters Type Name Description string path The path. Returns Type Description Stream The result. DeleteDirectory(string) Deletes the directory. Declaration void DeleteDirectory(string directoryName) Parameters Type Name Description string directoryName Name of the directory. DeleteStorageFile(string) Deletes the storage file. Declaration void DeleteStorageFile(string path) Parameters Type Name Description string path The path. DirectoryExists(string) Directories the exists. Declaration bool DirectoryExists(string directoryName) Parameters Type Name Description string directoryName Name of the directory. Returns Type Description bool The result. ExistsContentFile(string) Determines whether the specified file exists. Declaration bool ExistsContentFile(string path) Parameters Type Name Description string path The path. Returns Type Description bool true is file exists. ExistsStorageFile(string) Existses the storage file. Declaration bool ExistsStorageFile(string path) Parameters Type Name Description string path The path. Returns Type Description bool The result. GetContentDirectories(string) Gets the directory names under this content path. Declaration string[] GetContentDirectories(string path) Parameters Type Name Description string path The path. Returns Type Description string[] A list of the existing directories under this content path. GetContentFileNames(string) Gets the file names under this content path. Declaration string[] GetContentFileNames(string path) Parameters Type Name Description string path The path. Returns Type Description string[] A list of the existing files under this path. GetCreationTime(string) Gets the creation time. Declaration DateTimeOffset GetCreationTime(string path) Parameters Type Name Description string path The path. Returns Type Description DateTimeOffset The result. GetDirectoryNames(string) Gets the directory names. Declaration string[] GetDirectoryNames(string searchPattern) Parameters Type Name Description string searchPattern The search pattern. Returns Type Description string[] The result. GetFileNames(string) Gets the file names. Declaration string[] GetFileNames(string searchPattern) Parameters Type Name Description string searchPattern The search pattern. Returns Type Description string[] The result. GetRGBABytes(Stream, out int, out int) Gets the rgba bytes from an image stream. Declaration byte[] GetRGBABytes(Stream imageStream, out int imageWidth, out int imageHeight) Parameters Type Name Description Stream imageStream The source image stream. int imageWidth The width of the image in pixels. int imageHeight The height of the image in pixels. Returns Type Description byte[] An array containing the premultiplied RGBA bytes of the raw image. MoveStorageFile(string, string) Moves the storage file. Declaration void MoveStorageFile(string oldPath, string newPath) Parameters Type Name Description string oldPath The old path. string newPath The new path. OpenContentFile(string) Opens the content file. Declaration Stream OpenContentFile(string path) Parameters Type Name Description string path The path. Returns Type Description Stream The result. OpenStorageFile(string, FileMode) Opens the storage file. Declaration Stream OpenStorageFile(string path, FileMode mode) Parameters Type Name Description string path The path. FileMode mode The mode. Returns Type Description Stream The result. OpenStorageFile(string, FileMode, FileAccess) Opens the storage file. Declaration Stream OpenStorageFile(string path, FileMode mode, FileAccess access) Parameters Type Name Description string path The path. FileMode mode The mode. FileAccess access The access. Returns Type Description Stream The result. SavePictureToLibrary(string) Saves the picture to library. Declaration void SavePictureToLibrary(string path) Parameters Type Name Description string path The path. SavePictureToLibrary(string, Stream) Saves the picture to library. Declaration void SavePictureToLibrary(string fileName, Stream fileStream) Parameters Type Name Description string fileName Name of the file. Stream fileStream The file stream. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.IO.PathValidator.html": {
    "href": "api/Evergine.Common.IO.PathValidator.html",
    "title": "Class PathValidator | Evergine Doc",
    "keywords": "Class PathValidator Static class that contains path validation methods. Inheritance object PathValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.IO Assembly: Evergine.Common.dll Syntax public static class PathValidator Methods EnsureCorrectFileSystemName(string) Ensures the correct file system name. Declaration public static void EnsureCorrectFileSystemName(string filename) Parameters Type Name Description string filename The filename. Remarks Throws an exception if filename is not a correct file system path, otherwise no. Exceptions Type Condition ArgumentNullException filename is null. ArgumentException filename is a zero-length string, contains only white space, or contains invalid characters as defined in GetInvalidPathChars(). EnsureCorrectFileSystemPath(string) Ensures the correct file system path. Declaration public static void EnsureCorrectFileSystemPath(string path) Parameters Type Name Description string path The path to file or directory. Remarks Throws an exception if path is not a correct file system path, otherwise no. Exceptions Type Condition ArgumentNullException path is null. ArgumentException path is a zero-length string, contains only white space, or contains invalid characters as defined in GetInvalidPathChars()."
  },
  "api/Evergine.Common.IO.ResourceLoader.html": {
    "href": "api/Evergine.Common.IO.ResourceLoader.html",
    "title": "Class ResourceLoader | Evergine Doc",
    "keywords": "Class ResourceLoader Loads resources embedded in the assembly. Inheritance object ResourceLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.IO Assembly: Evergine.Common.dll Syntax public static class ResourceLoader Methods EmbeddedResourceExists(Assembly, string) Embeddeds the resource exists. Declaration public static bool EmbeddedResourceExists(Assembly targetAssembly, string name) Parameters Type Name Description Assembly targetAssembly The target assembly. string name The name. Returns Type Description bool returns System.Boolean. GetEmbeddedResourceData(Assembly, string) Gets the embedded resource data. Declaration public static byte[] GetEmbeddedResourceData(Assembly targetAssembly, string name) Parameters Type Name Description Assembly targetAssembly The assembly. string name The name. Returns Type Description byte[] Resource data. GetEmbeddedResourceStream(Assembly, string) Gets the embedded resource stream. Declaration public static Stream GetEmbeddedResourceStream(Assembly targetAssembly, string name) Parameters Type Name Description Assembly targetAssembly The assembly. string name The name. Returns Type Description Stream Resource stream. GetEmbeddedTextFile(Assembly, string) Gets the embedded text file. Declaration public static string GetEmbeddedTextFile(Assembly targetAssembly, string name) Parameters Type Name Description Assembly targetAssembly The assembly. string name The name. Returns Type Description string Resource string."
  },
  "api/Evergine.Common.IO.SerializableMember.html": {
    "href": "api/Evergine.Common.IO.SerializableMember.html",
    "title": "Class SerializableMember | Evergine Doc",
    "keywords": "Class SerializableMember Marks the item as serializable by the infrastructure. Inheritance object Attribute SerializableMember Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.IO Assembly: Evergine.Common.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class SerializableMember : Attribute Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.LoadableDependencyLink-1.html": {
    "href": "api/Evergine.Common.LoadableDependencyLink-1.html",
    "title": "Class LoadableDependencyLink<T> | Evergine Doc",
    "keywords": "Class LoadableDependencyLink<T> Represents a dependency link between a IDependencyObject and a ILoadable that implements IDependencyObject. Inheritance object LoadableDependencyLink<T> Implements IDependencyLink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public class LoadableDependencyLink<T> : IDependencyLink where T : class, ILoadable, IDependencyObject Type Parameters Name Description T The type of ILoadable. Constructors LoadableDependencyLink(IDependencyObject, T, MethodInfo, object[]) Initializes a new instance of the LoadableDependencyLink<T> class. Declaration public LoadableDependencyLink(IDependencyObject source, T target, MethodInfo methodInfo, object[] parameters) Parameters Type Name Description IDependencyObject source The source. T target The target. MethodInfo methodInfo The method information. object[] parameters The parameters. See Also IDependencyLink Properties Type Gets the dependency link type. Declaration public DependencyLinkTypes Type { get; } Property Value Type Description DependencyLinkTypes See Also IDependencyLink Value Gets or sets the value. Declaration public T Value { get; set; } Property Value Type Description T See Also IDependencyLink Methods IsTheSameLink(IDependencyObject, MethodInfo, object[]) Determines whether this instance represents the link for the specified parameters. Declaration public bool IsTheSameLink(IDependencyObject source, MethodInfo methodInfo, object[] parameters) Parameters Type Name Description IDependencyObject source The source. MethodInfo methodInfo The method information. object[] parameters The parameters. Returns Type Description bool true if this instance represents the link for the parameters; otherwise, return false. See Also IDependencyLink Register() Registers this instance. Declaration public void Register() See Also IDependencyLink SetTarget(T) Sets the target without invoke update method. Declaration public void SetTarget(T target) Parameters Type Name Description T target The target. See Also IDependencyLink Unregister(IDependencyObject) Unregisters this instance in the dependency list of source and target. Declaration public void Unregister(IDependencyObject caller) Parameters Type Name Description IDependencyObject caller The caller. See Also IDependencyLink Implements IDependencyLink Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object) See Also IDependencyLink"
  },
  "api/Evergine.Common.Media.CameraCaptureState.html": {
    "href": "api/Evergine.Common.Media.CameraCaptureState.html",
    "title": "Enum CameraCaptureState | Evergine Doc",
    "keywords": "Enum CameraCaptureState Specifies the Video state. Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public enum CameraCaptureState Fields Name Description Preview Camera capture is started. Recording Camera is recording. Stopped Camera capture is stopped. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.CameraCaptureType.html": {
    "href": "api/Evergine.Common.Media.CameraCaptureType.html",
    "title": "Enum CameraCaptureType | Evergine Doc",
    "keywords": "Enum CameraCaptureType Camera capture type enumeration. Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public enum CameraCaptureType Fields Name Description Back Back camera Front Front camera Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.html": {
    "href": "api/Evergine.Common.Media.html",
    "title": "Namespace Evergine.Common.Media | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Media Classes MicrophoneDataEventArgs Microphone Data Event args. MusicInfo Represents info about a music track. SoundBase Sound basic class. SoundEmitter Represent a Sound Emitter, used in 3D audio effects. SoundListener Represent a Sound Listener, used in 3D audio effects. VideoInfo Represents info about a video. WavFileWriter This class writes WAV data to a .wav file on disk. WavFormat Represents a Wave file format. Interfaces ICameraCapture Camera capture support. IMicrophone Microphone support. IMusicPlayer Interface for music player. IVideoInfo Interface for video info. IVideoPlayer Interface for video player. Enums CameraCaptureState Specifies the Video state. CameraCaptureType Camera capture type enumeration. MusicState Specifies the music state. PlayState Specifies the state (playing, paused, or stopped) of a media. VideoState Specifies the Video state."
  },
  "api/Evergine.Common.Media.ICameraCapture.html": {
    "href": "api/Evergine.Common.Media.ICameraCapture.html",
    "title": "Interface ICameraCapture | Evergine Doc",
    "keywords": "Interface ICameraCapture Camera capture support. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public interface ICameraCapture : IDisposable Properties IsConnected Gets a value indicating whether there is a camera available. Declaration bool IsConnected { get; } Property Value Type Description bool PreviewTexture Gets the camera previewtexture. Declaration Texture PreviewTexture { get; } Property Value Type Description Texture State Gets a value indicating the camera capture state. Declaration CameraCaptureState State { get; } Property Value Type Description CameraCaptureState Methods Start(CameraCaptureType) Starts the camera capture. Declaration void Start(CameraCaptureType cameraType) Parameters Type Name Description CameraCaptureType cameraType camera type. StartRecording(string) Start Video recording. Declaration void StartRecording(string videoFilePath) Parameters Type Name Description string videoFilePath file path where the video was recorded. Stop() Stops the camera capture. Declaration void Stop() StopRecording() Stop video recording. Declaration string StopRecording() Returns Type Description string stored video path. Update(TimeSpan) Update camera capture. Declaration void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime game time interval. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.IMicrophone.html": {
    "href": "api/Evergine.Common.Media.IMicrophone.html",
    "title": "Interface IMicrophone | Evergine Doc",
    "keywords": "Interface IMicrophone Microphone support. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public interface IMicrophone : IDisposable Properties CurrentSoundHandle Gets the current sound handle id. Declaration uint CurrentSoundHandle { get; } Property Value Type Description uint IsConnected Gets a value indicating whether there is a microphone available. Declaration bool IsConnected { get; } Property Value Type Description bool IsRecording Gets a value indicating whether the microphone is recording now. Declaration bool IsRecording { get; } Property Value Type Description bool true if this instance is recording; otherwise, false. Methods GetRecordedSound() Get a soundbase object. Declaration SoundBase GetRecordedSound() Returns Type Description SoundBase The recorded sound. Start() Starts the record. Declaration void Start() Start(Stream) Starts the record in a custom file. Declaration void Start(Stream fileStream) Parameters Type Name Description Stream fileStream Stream of the recorded file. Stop() Stops the record. Declaration void Stop() Events DataAvailable Event launched when there is data available. Declaration event EventHandler<MicrophoneDataEventArgs> DataAvailable Event Type Type Description EventHandler<MicrophoneDataEventArgs> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.IMusicPlayer.html": {
    "href": "api/Evergine.Common.Media.IMusicPlayer.html",
    "title": "Interface IMusicPlayer | Evergine Doc",
    "keywords": "Interface IMusicPlayer Interface for music player. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public interface IMusicPlayer : IDisposable Properties IsMuted Gets or sets a value indicating whether this instance is muted. Declaration bool IsMuted { get; set; } Property Value Type Description bool true if this instance is muted; otherwise, false. IsRepeat Gets or sets a value indicating whether this instance is repeat. Declaration bool IsRepeat { get; set; } Property Value Type Description bool true if this instance is repeat; otherwise, false. MusicEnabled Gets or sets a value indicating whether [music enabled]. Declaration bool MusicEnabled { get; set; } Property Value Type Description bool true if [music enabled]; otherwise, false. State Gets the state. Declaration MusicState State { get; } Property Value Type Description MusicState Volume Gets or sets the volume. Declaration float Volume { get; set; } Property Value Type Description float The volume. Methods OnActivated() Called when service activated. Declaration void OnActivated() OnDeactivated() Called when service deactivated. Declaration void OnDeactivated() Pause() Pauses this instance. Declaration void Pause() Play(MusicInfo) Plays the specified music. Declaration void Play(MusicInfo music) Parameters Type Name Description MusicInfo music The music. Resume() Resumes this instance. Declaration void Resume() Stop() Stops this instance. Declaration void Stop() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.IVideoInfo.html": {
    "href": "api/Evergine.Common.Media.IVideoInfo.html",
    "title": "Interface IVideoInfo | Evergine Doc",
    "keywords": "Interface IVideoInfo Interface for video info. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public interface IVideoInfo : IDisposable Properties Duration Gets the duration of the video. Declaration TimeSpan Duration { get; } Property Value Type Description TimeSpan Height Gets the height of this video, in pixels. Declaration int Height { get; } Property Value Type Description int Path Gets the path of this video. Declaration string Path { get; } Property Value Type Description string Width Gets the width of this video, in pixels. Declaration int Width { get; } Property Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.IVideoPlayer.html": {
    "href": "api/Evergine.Common.Media.IVideoPlayer.html",
    "title": "Interface IVideoPlayer | Evergine Doc",
    "keywords": "Interface IVideoPlayer Interface for video player. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public interface IVideoPlayer : IDisposable Properties IsLooped Gets or sets a value indicating whether the player is playing a video in a loop. Declaration bool IsLooped { get; set; } Property Value Type Description bool IsMuted Gets or sets a value indicating whether the muted setting for the video player. Declaration bool IsMuted { get; set; } Property Value Type Description bool IsVideoSupported Gets a value indicating whether if Video texture is supported on this device. Declaration bool IsVideoSupported { get; } Property Value Type Description bool PlayPosition Gets or sets a value indicating whether the play position within the currently playing video. Declaration TimeSpan PlayPosition { get; set; } Property Value Type Description TimeSpan State Gets the state. Declaration VideoState State { get; } Property Value Type Description VideoState Video Gets the video that is currently playing. Declaration IVideoInfo Video { get; } Property Value Type Description IVideoInfo VideoTexture Gets a Texture containing the frame of video being played;. Declaration Texture VideoTexture { get; } Property Value Type Description Texture Volume Gets or sets a value indicating the video player volume. Declaration float Volume { get; set; } Property Value Type Description float Methods Pause() Pauses the currently playing video. Declaration void Pause() Play(IVideoInfo) Plays the video. Declaration void Play(IVideoInfo video) Parameters Type Name Description IVideoInfo video video info instance. Resume() Resumes a paused video. Declaration void Resume() Stop() Stops playing a video. Declaration void Stop() Update(TimeSpan) Update video player. Declaration void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime game time. VideoInfoFromPath(string) Get video info from path. Declaration IVideoInfo VideoInfoFromPath(string path) Parameters Type Name Description string path video path. Returns Type Description IVideoInfo platform specific video info. Events OnComplete Event fired when the video play is completed Declaration event EventHandler OnComplete Event Type Type Description EventHandler OnError Event fired when the video play has an error Declaration event EventHandler OnError Event Type Type Description EventHandler OnVideoTexture Event fired when the video texture is updated Declaration event EventHandler OnVideoTexture Event Type Type Description EventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.MicrophoneDataEventArgs.html": {
    "href": "api/Evergine.Common.Media.MicrophoneDataEventArgs.html",
    "title": "Class MicrophoneDataEventArgs | Evergine Doc",
    "keywords": "Class MicrophoneDataEventArgs Microphone Data Event args. Inheritance object EventArgs MicrophoneDataEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class MicrophoneDataEventArgs : EventArgs Constructors MicrophoneDataEventArgs(byte[], int) Initializes a new instance of the MicrophoneDataEventArgs class. Declaration public MicrophoneDataEventArgs(byte[] buffer, int bytes) Parameters Type Name Description byte[] buffer buffer data. int bytes bytes recorded. Properties Buffer Gets the audio byte buffer. Declaration public byte[] Buffer { get; } Property Value Type Description byte[] BytesRecorded Gets the amount of bytes recorded. Declaration public int BytesRecorded { get; } Property Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.MusicInfo.html": {
    "href": "api/Evergine.Common.Media.MusicInfo.html",
    "title": "Class MusicInfo | Evergine Doc",
    "keywords": "Class MusicInfo Represents info about a music track. Inheritance object MusicInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class MusicInfo Constructors MusicInfo(string) Initializes a new instance of the MusicInfo class. Declaration public MusicInfo(string path) Parameters Type Name Description string path The path. Fields MusicId Unique ID of the track. Declaration public int MusicId Field Value Type Description int NumMusic Loaded song count. Declaration public static int NumMusic Field Value Type Description int Path Path of the song. Declaration public string Path Field Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.MusicState.html": {
    "href": "api/Evergine.Common.Media.MusicState.html",
    "title": "Enum MusicState | Evergine Doc",
    "keywords": "Enum MusicState Specifies the music state. Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public enum MusicState Fields Name Description Paused Music is paused. Playing Music is playing. Stopped Music is stopped. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.PlayState.html": {
    "href": "api/Evergine.Common.Media.PlayState.html",
    "title": "Enum PlayState | Evergine Doc",
    "keywords": "Enum PlayState Specifies the state (playing, paused, or stopped) of a media. Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public enum PlayState Fields Name Description Paused The media is currently paused. Playing The media is currently being played. Stopped The media is currently stopped. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.SoundBase.html": {
    "href": "api/Evergine.Common.Media.SoundBase.html",
    "title": "Class SoundBase | Evergine Doc",
    "keywords": "Class SoundBase Sound basic class. Inheritance object SoundBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class SoundBase Constructors SoundBase() Initializes a new instance of the SoundBase class. Declaration public SoundBase() Fields SoundHandle Sound handle. Declaration public uint SoundHandle Field Value Type Description uint Properties BitsPerSample Gets or sets the bits per sample. Declaration public int BitsPerSample { get; set; } Property Value Type Description int The bits per sample. Channels Gets or sets the channels. Declaration public int Channels { get; set; } Property Value Type Description int The channels. IsValidSound Gets a value indicating whether this instance is valid sound. Declaration public bool IsValidSound { get; } Property Value Type Description bool true if this instance is valid sound; otherwise, false. PCMData Gets or sets the PCM data. Declaration public byte[] PCMData { get; set; } Property Value Type Description byte[] The PCM data. Path Gets or sets the path of the sound asset. Declaration public string Path { get; set; } Property Value Type Description string SampleRate Gets or sets the sample rate. Declaration public int SampleRate { get; set; } Property Value Type Description int The sample rate. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.SoundEmitter.html": {
    "href": "api/Evergine.Common.Media.SoundEmitter.html",
    "title": "Class SoundEmitter | Evergine Doc",
    "keywords": "Class SoundEmitter Represent a Sound Emitter, used in 3D audio effects. Inheritance object SoundEmitter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class SoundEmitter Constructors SoundEmitter() Initializes a new instance of the SoundEmitter class. Declaration public SoundEmitter() Fields Velocity The sound emitter velocity. Declaration public Vector3 Velocity Field Value Type Description Vector3 WorldTransform The world transform of the sound emitter. Declaration public Matrix4x4 WorldTransform Field Value Type Description Matrix4x4 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.SoundListener.html": {
    "href": "api/Evergine.Common.Media.SoundListener.html",
    "title": "Class SoundListener | Evergine Doc",
    "keywords": "Class SoundListener Represent a Sound Listener, used in 3D audio effects. Inheritance object SoundListener Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class SoundListener Fields Velocity The sound listener velocity. Declaration public Vector3 Velocity Field Value Type Description Vector3 WorldTransform The world transform of the sound listener. Declaration public Matrix4x4 WorldTransform Field Value Type Description Matrix4x4 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.VideoInfo.html": {
    "href": "api/Evergine.Common.Media.VideoInfo.html",
    "title": "Class VideoInfo | Evergine Doc",
    "keywords": "Class VideoInfo Represents info about a video. Inheritance object VideoInfo Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class VideoInfo : IDisposable Constructors VideoInfo(IVideoInfo) Initializes a new instance of the VideoInfo class. Declaration public VideoInfo(IVideoInfo internalVideoInfo) Parameters Type Name Description IVideoInfo internalVideoInfo platform video info. Properties Duration Gets the duration of the video. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan Height Gets the height of this video, in pixels. Declaration public int Height { get; } Property Value Type Description int InternalVideoInfo Gets the specific IVideoInfo for the platform where the application is running. Declaration public IVideoInfo InternalVideoInfo { get; } Property Value Type Description IVideoInfo Path Gets the path of the video. Declaration public string Path { get; } Property Value Type Description string Width Gets the width of this video, in pixels. Declaration public int Width { get; } Property Value Type Description int Methods Dispose() Releases all resource used by the VideoInfo object. Declaration public void Dispose() Remarks Call Dispose() when you are finished using the VideoInfo. The Dispose() method leaves the VideoInfo in an unusable state. After calling Dispose(), you must release all references to the VideoInfo so the garbage collector can reclaim the memory that the VideoInfo was occupying. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.VideoState.html": {
    "href": "api/Evergine.Common.Media.VideoState.html",
    "title": "Enum VideoState | Evergine Doc",
    "keywords": "Enum VideoState Specifies the Video state. Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public enum VideoState Fields Name Description Paused Video is paused. Playing Video is playing. Stopped Video is stopped. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.WavFileWriter.html": {
    "href": "api/Evergine.Common.Media.WavFileWriter.html",
    "title": "Class WavFileWriter | Evergine Doc",
    "keywords": "Class WavFileWriter This class writes WAV data to a .wav file on disk. Inheritance object MarshalByRefObject Stream WavFileWriter Implements IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class WavFileWriter : Stream, IDisposable Constructors WavFileWriter(Stream, WavFormat) Initializes a new instance of the WavFileWriter class that actually writes to a stream. Declaration public WavFileWriter(Stream outStream, WavFormat format) Parameters Type Name Description Stream outStream Stream to be written to. WavFormat format Wave format to use. WavFileWriter(Stream, WavFormat, bool) Initializes a new instance of the WavFileWriter class that actually writes to a stream. Declaration public WavFileWriter(Stream outStream, WavFormat format, bool writeWPKHeader) Parameters Type Name Description Stream outStream Stream to be written to. WavFormat format Wave format to use. bool writeWPKHeader If writes wpk header. Properties CanRead Gets a value indicating whether can read (Returns false: Cannot read from a WaveFileWriter). Declaration public override bool CanRead { get; } Property Value Type Description bool Overrides Stream.CanRead CanSeek Gets a value indicating whether returns false: Cannot seek within a WaveFileWriter. Declaration public override bool CanSeek { get; } Property Value Type Description bool Overrides Stream.CanSeek CanWrite Gets a value indicating whether can write (Returns true: Can write to a WaveFileWriter). Declaration public override bool CanWrite { get; } Property Value Type Description bool Overrides Stream.CanWrite Length Gets the Number of bytes of audio in the data chunk. Declaration public override long Length { get; } Property Value Type Description long Overrides Stream.Length Position Gets or sets gets the Position in the WaveFile (i.e. number of bytes written so far). Declaration public override long Position { get; set; } Property Value Type Description long Overrides Stream.Position WaveFormat Gets the WaveFormat of this wave file. Declaration public WavFormat WaveFormat { get; } Property Value Type Description WavFormat Methods Dispose(bool) Actually performs the close,making sure the header contains the correct data. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing True if called from Dispose . Overrides Stream.Dispose(bool) ~WavFileWriter() Finalizes an instance of the WavFileWriter class. Should only be called if the user forgot to close this WaveFileWriter Declaration protected ~WavFileWriter() Flush() Ensures data is written to disk. Declaration public override void Flush() Overrides Stream.Flush() Read(byte[], int, int) Read is not supported for a WaveFileWriter. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer Byte read buffer. int offset Offset of the read in the buffer. int count Count of elements of the read operation. Returns Type Description int Bytes readed. Overrides Stream.Read(byte[], int, int) Seek(long, SeekOrigin) Seek is not supported for a WaveFileWriter. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset Offset to seek. SeekOrigin origin Origin of the seek. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) SetLength(long) SetLength is not supported for EvergineFileWriter. Declaration public override void SetLength(long value) Parameters Type Name Description long value New length. Overrides Stream.SetLength(long) UpdateHeader(BinaryWriter) Updates the header with file size information. Declaration protected virtual void UpdateHeader(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer Binary writer. Write(byte[], int, int) Appends bytes to the WaveFile (assumes they are already in the correct format). Declaration public override void Write(byte[] data, int offset, int count) Parameters Type Name Description byte[] data the buffer containing the wave data. int offset the offset from which to start writing. int count the number of bytes to write. Overrides Stream.Write(byte[], int, int) WriteData(short[], int, int) Writes 16 bit samples to the Wave file. Declaration [Obsolete(\"Use WriteSamples instead\")] public void WriteData(short[] samples, int offset, int count) Parameters Type Name Description short[] samples The buffer containing the 16 bit samples. int offset The offset from which to start writing. int count The number of 16 bit samples to write. WriteSample(float) Writes a single sample to the Wave file. Declaration public void WriteSample(float sample) Parameters Type Name Description float sample the sample to write (assumed floating point with 1.0f as max value). WriteSamples(short[], int, int) Writes 16 bit samples to the Wave file. Declaration public void WriteSamples(short[] samples, int offset, int count) Parameters Type Name Description short[] samples The buffer containing the 16 bit samples. int offset The offset from which to start writing. int count The number of 16 bit samples to write. WriteSamples(float[], int, int) Writes 32 bit floating point samples to the Wave file They will be converted to the appropriate bit depth depending on the WaveFormat of the WAV file. Declaration public void WriteSamples(float[] samples, int offset, int count) Parameters Type Name Description float[] samples The buffer containing the floating point samples. int offset The offset from which to start writing. int count The number of floating point samples to write. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Media.WavFormat.html": {
    "href": "api/Evergine.Common.Media.WavFormat.html",
    "title": "Class WavFormat | Evergine Doc",
    "keywords": "Class WavFormat Represents a Wave file format. Inheritance object WavFormat Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Media Assembly: Evergine.Common.dll Syntax public class WavFormat Constructors WavFormat() Initializes a new instance of the WavFormat class, a new PCM 44.1Khz stereo 16 bit format. Declaration public WavFormat() WavFormat(int, int) Initializes a new instance of the WavFormat class, a new 16 bit wave format with the specified sample rate and channel count. Declaration public WavFormat(int sampleRate, int channels) Parameters Type Name Description int sampleRate Sample Rate. int channels Number of channels. WavFormat(int, int, int) Initializes a new instance of the WavFormat class, a new PCM format with the specified sample rate, bit depth and channels. Declaration public WavFormat(int rate, int bits, int channels) Parameters Type Name Description int rate Sample rate. int bits Audio bits. int channels Audio channels. Fields averageBytesPerSecond for buffer estimation. Declaration protected int averageBytesPerSecond Field Value Type Description int bitsPerSample number of bits per sample of mono data. Declaration protected short bitsPerSample Field Value Type Description short blockAlign block size of data. Declaration protected short blockAlign Field Value Type Description short channels number of channels. Declaration protected short channels Field Value Type Description short extraSize number of following bytes. Declaration protected short extraSize Field Value Type Description short sampleRate sample rate. Declaration protected int sampleRate Field Value Type Description int Properties AverageBytesPerSecond Gets the average number of bytes used per second. Declaration public int AverageBytesPerSecond { get; } Property Value Type Description int BitsPerSample Gets the number of bits per sample (usually 16 or 32, sometimes 24 or 8) Can be 0 for some codecs. Declaration public int BitsPerSample { get; } Property Value Type Description int BlockAlign Gets the block alignment. Declaration public virtual int BlockAlign { get; } Property Value Type Description int Channels Gets the number of channels (1=mono,2=stereo etc). Declaration public int Channels { get; } Property Value Type Description int ExtraSize Gets the number of extra bytes used by this waveformat. Often 0, except for compressed formats which store extra data after the WAVEFORMATEX header. Declaration public int ExtraSize { get; } Property Value Type Description int SampleRate Gets the sample rate (samples per second). Declaration public int SampleRate { get; } Property Value Type Description int Methods ConvertLatencyToByteSize(int) Gets the size of a wave buffer equivalent to the latency in milliseconds. Declaration public int ConvertLatencyToByteSize(int milliseconds) Parameters Type Name Description int milliseconds The milliseconds. Returns Type Description int Size of the wave buffer equivaelent to the latency in milliseconds. Equals(object) Compares with another WaveFormat object. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare to. Returns Type Description bool True if the objects are the same. Overrides object.Equals(object) GetHashCode() Provides a Hashcode for this WaveFormat. Declaration public override int GetHashCode() Returns Type Description int A hashcode. Overrides object.GetHashCode() ToString() Reports this WaveFormat as a string. Declaration public override string ToString() Returns Type Description string String describing the wave format. Overrides object.ToString() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.OperatingSystemHelper.html": {
    "href": "api/Evergine.Common.OperatingSystemHelper.html",
    "title": "Class OperatingSystemHelper | Evergine Doc",
    "keywords": "Class OperatingSystemHelper Helper class to determine executing OS platform. Inheritance object OperatingSystemHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public static class OperatingSystemHelper Methods GetCurrentPlatfom() Gets current executing platform. Declaration public static PlatformType GetCurrentPlatfom() Returns Type Description PlatformType Executing platform if found. Returns Undefined if platform could not be determined. IsAnyOfOSPlatforms(IEnumerable<PlatformType>) Checks current executing platform is one of specified platforms. Declaration public static bool IsAnyOfOSPlatforms(IEnumerable<PlatformType> platforms) Parameters Type Name Description IEnumerable<PlatformType> platforms Lookup platforms. Returns Type Description bool True if any of the provided platforms matches; false otherwise. IsOSPlatform(PlatformType) Checks current executing platform. Declaration public static bool IsOSPlatform(PlatformType platform) Parameters Type Name Description PlatformType platform Platform to check. Returns Type Description bool True if platform check succees; false otherwise."
  },
  "api/Evergine.Common.Physics2D.AngleLimitsDef.html": {
    "href": "api/Evergine.Common.Physics2D.AngleLimitsDef.html",
    "title": "Class AngleLimitsDef | Evergine Doc",
    "keywords": "Class AngleLimitsDef Angle limit properties. Inheritance object AngleLimitsDef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class AngleLimitsDef Fields EnableLimits A flag to enable the joint limits. Declaration public bool EnableLimits Field Value Type Description bool LowerAngle The lower angle for the joint limit (radians). Declaration public float LowerAngle Field Value Type Description float UpperAngle The upper angle for the joint limit (radians). Declaration public float UpperAngle Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ColliderCategory2D.html": {
    "href": "api/Evergine.Common.Physics2D.ColliderCategory2D.html",
    "title": "Enum ColliderCategory2D | Evergine Doc",
    "keywords": "Enum ColliderCategory2D Physic 2d Collision categories. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax [Flags] public enum ColliderCategory2D Fields Name Description All All Categories Cat1 Cat1 Category Cat10 Cat10 Category Cat11 Cat11 Category Cat12 Cat12 Category Cat13 Cat13 Category Cat14 Cat14 Category Cat15 Cat15 Category Cat16 Cat16 Category Cat2 Cat2 Category Cat3 Cat3 Category Cat4 Cat4 Category Cat5 Cat5 Category Cat6 Cat6 Category Cat7 Cat7 Category Cat8 Cat8 Category Cat9 Cat9 Category None None Category Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ColliderDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.ColliderDef2D.html",
    "title": "Class ColliderDef2D | Evergine Doc",
    "keywords": "Class ColliderDef2D Definition of a 2D Collision Shape. Inheritance object ColliderDef2D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class ColliderDef2D Fields Density The density, usually in kg/m^2. Declaration public float Density Field Value Type Description float Friction The friction coefficient, usually in the range [0,1]. Declaration public float Friction Field Value Type Description float IsSensor A sensor shape collects contact information but never generates a collision response. Declaration public bool IsSensor Field Value Type Description bool Restitution The restitution (elasticity) usually in the range [0,1]. Declaration public float Restitution Field Value Type Description float Shape The Collider shape. Declaration public IColliderShape2D Shape Field Value Type Description IColliderShape2D UserData Use this to store application specific body data. Declaration public object UserData Field Value Type Description object Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ColliderShapeType2D.html": {
    "href": "api/Evergine.Common.Physics2D.ColliderShapeType2D.html",
    "title": "Enum ColliderShapeType2D | Evergine Doc",
    "keywords": "Enum ColliderShapeType2D Shape types. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public enum ColliderShapeType2D Fields Name Description Box Box shape Chain Chain shape Circle Circle shape Edge Edge type shape Polygon Polygon shape TypeCount Shape type count Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ContactDelegate.html": {
    "href": "api/Evergine.Common.Physics2D.ContactDelegate.html",
    "title": "Delegate ContactDelegate | Evergine Doc",
    "keywords": "Delegate ContactDelegate Contact delegate using in BeginContact and EndContact. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public delegate void ContactDelegate(ICollisionInfo2D contact) Parameters Type Name Description ICollisionInfo2D contact The contact instance. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.DebugDrawFlags.html": {
    "href": "api/Evergine.Common.Physics2D.DebugDrawFlags.html",
    "title": "Enum DebugDrawFlags | Evergine Doc",
    "keywords": "Enum DebugDrawFlags Debug draw flags. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public enum DebugDrawFlags Fields Name Description AabbBit Draw AABB (Axis Aligned Bounding Box) CenterOfMassBit Draw center of mass JointBit Draw joints PairBit Draw pairs ShapeBit Draw the shape Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.DistanceJointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.DistanceJointDef2D.html",
    "title": "Class DistanceJointDef2D | Evergine Doc",
    "keywords": "Class DistanceJointDef2D Definition of a 2D Distance Joint. Inheritance object JointDef2D JointDef2D<IDistanceJoint2D> DistanceJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class DistanceJointDef2D : JointDef2D<IDistanceJoint2D> Fields DampingRatio The damping ratio. 0 = no damping, 1 = critical damping. Declaration public float DampingRatio Field Value Type Description float FrequencyHz The mass-spring-damper frequency in Hertz. A value of 0 disables softness. Declaration public float FrequencyHz Field Value Type Description float Lenght /// The natural length between the anchor points. Declaration public float Lenght Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.html": {
    "href": "api/Evergine.Common.Physics2D.html",
    "title": "Namespace Evergine.Common.Physics2D | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Physics2D Classes AngleLimitsDef Angle limit properties. ColliderDef2D Definition of a 2D Collision Shape. DistanceJointDef2D Definition of a 2D Distance Joint. JointDef2D Definition of a 2D Joint. JointDef2D<T> Definition of a 2D Joint. LimitsDef Motor properties definition. MotorDef Motor properties definition. MouseJointDef2D Definition of a 2D Distance Joint. PrismaticJointDef2D Definition of a 2D Prismatic Joint. RevoluteJointDef2D Definition of a 2D Revolute Joint. RigidBodyDef2D Definition of a Rigid Body 2D. RopeJointDef2D Definition of a 2D Rope Joint. WeldJointDef2D Definition of a 2D Weld Joint. WheelJointDef2D Definition of a 2D Wheel Joint. Structs RigidBodyMassData2D This holds the mass data computed for a shape. Interfaces IBoxColliderShape2D Interface for a Box collider Shape of 2D physics. ICircleColliderShape2D Interface for a Circle Shape of 2D physics. ICollider2D Interface for a Collider Shape of 2D physics. IColliderShape2D Interface for a Collider Shape of 2D physics. ICollisionInfo2D Interface for a Collider Shape of 2D physics. IDistanceJoint2D Interface for a Distance Joint 2D physics. IEdgeColliderShape2D Interface for a Edge Shape of 2D physics. IJoint2D Interface for a Joint 2D physics. IMouseJoint2D Interface for a Mouse Joint 2D physics. IPolygonColliderShape2D Interface for a Polygon Shape of 2D physics. IPrismaticJoint2D Interface for a Prismatic Joint 2D physics. IRevoluteJoint2D Interface for a Revolute Joint 2D physics. IRigidBody2D Interface for RigidBody of 2D physics. IRopeJoint2D Interface for a Rope Joint 2D physics. ISimulation2D Interface for Simulation2D. ISimulationDebugDraw2D Interface for drawing debug information of Simulation 2D. IWeldJoint2D Interface for a Distance Joint 2D physics. IWheelJoint2D Interface for a Wheel Joint 2D physics. Enums ColliderCategory2D Physic 2d Collision categories. ColliderShapeType2D Shape types. DebugDrawFlags Debug draw flags. JointType2D Joint types. RigidBodyType2D Rigid body type 2D. Delegates ContactDelegate Contact delegate using in BeginContact and EndContact. OnBrokeEventHandler Event broke delegate."
  },
  "api/Evergine.Common.Physics2D.IBoxColliderShape2D.html": {
    "href": "api/Evergine.Common.Physics2D.IBoxColliderShape2D.html",
    "title": "Interface IBoxColliderShape2D | Evergine Doc",
    "keywords": "Interface IBoxColliderShape2D Interface for a Box collider Shape of 2D physics. Inherited Members IColliderShape2D.Radius IColliderShape2D.Type IColliderShape2D.ChildCount IColliderShape2D.InternalShape IColliderShape2D.TestPoint(ref Vector2, ref Vector2, float) IColliderShape2D.TestRectangle(ref RectangleF, ref Vector2, float) IColliderShape2D.TestShape(Vector2, float, IColliderShape2D, Vector2, float) Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IBoxColliderShape2D : IColliderShape2D Properties Angle Gets or sets the angle of the box shape. Declaration float Angle { get; set; } Property Value Type Description float Center Gets or sets the center of the Box collider shape. Declaration Vector2 Center { get; set; } Property Value Type Description Vector2 Height Gets or sets the height of the Box collider. Declaration float Height { get; set; } Property Value Type Description float Width Gets or sets the width of the Box collider. Declaration float Width { get; set; } Property Value Type Description float Methods SetShape(float, float) Setup the box collider shape. Declaration void SetShape(float width, float height) Parameters Type Name Description float width The width. float height The height. SetShape(float, float, Vector2, float) Build the shape to represent an oriented box. Declaration void SetShape(float width, float height, Vector2 center, float angle) Parameters Type Name Description float width The width. float height The height. Vector2 center The box center. float angle The box angle. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ICircleColliderShape2D.html": {
    "href": "api/Evergine.Common.Physics2D.ICircleColliderShape2D.html",
    "title": "Interface ICircleColliderShape2D | Evergine Doc",
    "keywords": "Interface ICircleColliderShape2D Interface for a Circle Shape of 2D physics. Inherited Members IColliderShape2D.Radius IColliderShape2D.Type IColliderShape2D.ChildCount IColliderShape2D.InternalShape IColliderShape2D.TestPoint(ref Vector2, ref Vector2, float) IColliderShape2D.TestRectangle(ref RectangleF, ref Vector2, float) IColliderShape2D.TestShape(Vector2, float, IColliderShape2D, Vector2, float) Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface ICircleColliderShape2D : IColliderShape2D Properties Position Gets or sets the circle position. Declaration Vector2 Position { get; set; } Property Value Type Description Vector2 Methods SetShape(float, Vector2) Set the shape of the circle collider. Declaration void SetShape(float radius, Vector2 position) Parameters Type Name Description float radius The radius of the circle. Vector2 position The position offset of the circle respect the rigid body. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ICollider2D.html": {
    "href": "api/Evergine.Common.Physics2D.ICollider2D.html",
    "title": "Interface ICollider2D | Evergine Doc",
    "keywords": "Interface ICollider2D Interface for a Collider Shape of 2D physics. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface ICollider2D Properties CollisionCategories Gets or sets the collision category bits. Declaration ColliderCategory2D CollisionCategories { get; set; } Property Value Type Description ColliderCategory2D Density Gets or sets the density, usually in kg/m^2. Declaration float Density { get; set; } Property Value Type Description float Friction Gets or sets the friction coefficient, usually in the range [0,1]. Declaration float Friction { get; set; } Property Value Type Description float GroupIndex Gets or sets the collision groups allow a certain group of objects to never collide (negative) or always collide (positive). Declaration short GroupIndex { get; set; } Property Value Type Description short InternalCollider Gets the internal Box2D fixture instance. Declaration object InternalCollider { get; } Property Value Type Description object IsSensor Gets or sets a value indicating whether this sensor shape collects contact information but never generates a collision response. Declaration bool IsSensor { get; set; } Property Value Type Description bool MaskBits Gets or sets the collision mask bits. Declaration ColliderCategory2D MaskBits { get; set; } Property Value Type Description ColliderCategory2D Restitution Gets or sets the restitution (elasticity) usually in the range [0,1]. Declaration float Restitution { get; set; } Property Value Type Description float RigidBody Gets the parent body of this collider. Declaration IRigidBody2D RigidBody { get; } Property Value Type Description IRigidBody2D Shape Gets the Collider shape. Declaration IColliderShape2D Shape { get; } Property Value Type Description IColliderShape2D UserData Gets or sets the object user data. Declaration object UserData { get; set; } Property Value Type Description object Methods ComputeDistance(ref Vector2, ref Vector2, float, out float, out Vector2) Compute the distance from the current shape to the specified point. This only works for convex shapes. Declaration void ComputeDistance(ref Vector2 point, ref Vector2 shapePosition, float shapeAngle, out float distance, out Vector2 normal) Parameters Type Name Description Vector2 point a point in world coordinates. Vector2 shapePosition the shape world position. float shapeAngle the shape world angle. float distance the distance from the current shape. Vector2 normal the direction in which the distance increases. Events BeginCollision Called when two fixtures begin to touch. Declaration event ContactDelegate BeginCollision Event Type Type Description ContactDelegate EndCollision Called when two fixtures cease to touch. Declaration event ContactDelegate EndCollision Event Type Type Description ContactDelegate Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IColliderShape2D.html": {
    "href": "api/Evergine.Common.Physics2D.IColliderShape2D.html",
    "title": "Interface IColliderShape2D | Evergine Doc",
    "keywords": "Interface IColliderShape2D Interface for a Collider Shape of 2D physics. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IColliderShape2D Properties ChildCount Gets the number of child primitives. Declaration int ChildCount { get; } Property Value Type Description int InternalShape Gets the internal shape. Declaration object InternalShape { get; } Property Value Type Description object Radius Gets or sets. Declaration float Radius { get; set; } Property Value Type Description float Type Gets the collider type. Declaration ColliderShapeType2D Type { get; } Property Value Type Description ColliderShapeType2D Methods TestPoint(ref Vector2, ref Vector2, float) Test a point for containment in this shape. Declaration bool TestPoint(ref Vector2 point, ref Vector2 shapePosition, float shapeAngle) Parameters Type Name Description Vector2 point a point in world coordinates. Vector2 shapePosition the shape world position. float shapeAngle the shape world angle. Returns Type Description bool True if the point is contained in the shape. TestRectangle(ref RectangleF, ref Vector2, float) Test a rectangle for containment in this shape. Declaration bool TestRectangle(ref RectangleF rectangle, ref Vector2 shapePosition, float shapeAngle) Parameters Type Name Description RectangleF rectangle a rectangle in world coordinates. Vector2 shapePosition the shape world position. float shapeAngle the shape world angle. Returns Type Description bool True if the point is contained in the shape. TestShape(Vector2, float, IColliderShape2D, Vector2, float) Test another shape for containment in this shape. Declaration bool TestShape(Vector2 positionA, float angleA, IColliderShape2D shapeB, Vector2 positionB, float angleB) Parameters Type Name Description Vector2 positionA The position of A shape. float angleA The angle of A shape. IColliderShape2D shapeB The second shape. Vector2 positionB The position of B shape. float angleB The angle of B shape. Returns Type Description bool If the two shapes collides. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ICollisionInfo2D.html": {
    "href": "api/Evergine.Common.Physics2D.ICollisionInfo2D.html",
    "title": "Interface ICollisionInfo2D | Evergine Doc",
    "keywords": "Interface ICollisionInfo2D Interface for a Collider Shape of 2D physics. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface ICollisionInfo2D Properties ColliderA Gets collider A in this contact. Declaration ICollider2D ColliderA { get; } Property Value Type Description ICollider2D ColliderB Gets collider B in this contact. Declaration ICollider2D ColliderB { get; } Property Value Type Description ICollider2D Friction Gets or sets the friction coefficient, usually in the range [0,1]. Declaration float Friction { get; set; } Property Value Type Description float IsEnabled Gets or sets a value indicating whether this contact is enabled. You can disable the contact in contact listener methods. Declaration bool IsEnabled { get; set; } Property Value Type Description bool IsTouching Gets a value indicating whether the two colliders is touching. Declaration bool IsTouching { get; } Property Value Type Description bool Normal Gets the collision normals. Declaration Vector2 Normal { get; } Property Value Type Description Vector2 Points Gets the collision points. Declaration Vector2[] Points { get; } Property Value Type Description Vector2[] Restitution Gets or sets the restitution (elasticity) usually in the range [0,1]. Declaration float Restitution { get; set; } Property Value Type Description float TangentSpeed Gets or sets the tangent speed. Declaration float TangentSpeed { get; set; } Property Value Type Description float Methods FlagForFiltering() Flag this contact for filtering. Filtering will occur the next time step. Declaration void FlagForFiltering() ResetFriction() Reset the friction mixture to the default value. Declaration void ResetFriction() Remarks You can modify contact properties in PreSolve/PostSolve methods in ContactListener. ResetRestitution() Reset the restitution to the default contact value. Declaration void ResetRestitution() Remarks You can modify contact properties in PreSolve/PostSolve methods in ContactListener. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IDistanceJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IDistanceJoint2D.html",
    "title": "Interface IDistanceJoint2D | Evergine Doc",
    "keywords": "Interface IDistanceJoint2D Interface for a Distance Joint 2D physics. Inherited Members IJoint2D.InternalJoint IJoint2D.BodyA IJoint2D.BodyB IJoint2D.LocalAnchorA IJoint2D.LocalAnchorB IJoint2D.ReactionForce IJoint2D.ReactionTorque IJoint2D.IsActive IJoint2D.BreakPoint IJoint2D.OnBroke Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IDistanceJoint2D : IJoint2D Properties DampingRatio Gets or sets the damping ratio. Declaration float DampingRatio { get; set; } Property Value Type Description float Distance Gets or sets the natural length. Manipulating the length can lead to non-physical behavior when the frequency is zero. Declaration float Distance { get; set; } Property Value Type Description float FrequencyHz Gets or sets the frequency in Hz. Declaration float FrequencyHz { get; set; } Property Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IEdgeColliderShape2D.html": {
    "href": "api/Evergine.Common.Physics2D.IEdgeColliderShape2D.html",
    "title": "Interface IEdgeColliderShape2D | Evergine Doc",
    "keywords": "Interface IEdgeColliderShape2D Interface for a Edge Shape of 2D physics. Inherited Members IColliderShape2D.Radius IColliderShape2D.Type IColliderShape2D.ChildCount IColliderShape2D.InternalShape IColliderShape2D.TestPoint(ref Vector2, ref Vector2, float) IColliderShape2D.TestRectangle(ref RectangleF, ref Vector2, float) IColliderShape2D.TestShape(Vector2, float, IColliderShape2D, Vector2, float) Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IEdgeColliderShape2D : IColliderShape2D Properties Normals Gets the Edge normals. Declaration Vector2[] Normals { get; } Property Value Type Description Vector2[] Vertices Gets the edge vertices. Declaration Vector2[] Vertices { get; } Property Value Type Description Vector2[] Methods SetShapeFromVertices(Vector2[]) Copy vertices. Declaration void SetShapeFromVertices(Vector2[] vertices) Parameters Type Name Description Vector2[] vertices The edge vertices. SetShapeFromVertices(Vector2[], Vector2, Vector2, float) Copy vertices. Declaration void SetShapeFromVertices(Vector2[] vertices, Vector2 scale, Vector2 center, float angle) Parameters Type Name Description Vector2[] vertices The edge vertices. Vector2 scale The scale of the shape. Vector2 center The box center. float angle The box angle. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IJoint2D.html",
    "title": "Interface IJoint2D | Evergine Doc",
    "keywords": "Interface IJoint2D Interface for a Joint 2D physics. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IJoint2D Properties BodyA Gets the first body attached to this joint. Declaration IRigidBody2D BodyA { get; } Property Value Type Description IRigidBody2D BodyB Gets the second body attached to this joint. Declaration IRigidBody2D BodyB { get; } Property Value Type Description IRigidBody2D BreakPoint Gets or sets the amount offorce that a joint can take before break. Declaration float BreakPoint { get; set; } Property Value Type Description float InternalJoint Gets the Box2D internal joint. Declaration object InternalJoint { get; } Property Value Type Description object IsActive Gets or sets a value indicating whether this joint is active. Declaration bool IsActive { get; set; } Property Value Type Description bool LocalAnchorA Gets the local anchor point relative to bodyA's origin. Declaration Vector2 LocalAnchorA { get; } Property Value Type Description Vector2 LocalAnchorB Gets the local anchor point relative to bodyB's origin. Declaration Vector2 LocalAnchorB { get; } Property Value Type Description Vector2 ReactionForce Gets the reaction force on bodyB at the joint anchor in Newtons. Declaration Vector2 ReactionForce { get; } Property Value Type Description Vector2 ReactionTorque Gets the reaction torque on bodyB in N*m. Declaration float ReactionTorque { get; } Property Value Type Description float Events OnBroke Event fired when the joint is broken Declaration event OnBrokeEventHandler OnBroke Event Type Type Description OnBrokeEventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IMouseJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IMouseJoint2D.html",
    "title": "Interface IMouseJoint2D | Evergine Doc",
    "keywords": "Interface IMouseJoint2D Interface for a Mouse Joint 2D physics. Inherited Members IJoint2D.InternalJoint IJoint2D.BodyA IJoint2D.BodyB IJoint2D.LocalAnchorA IJoint2D.LocalAnchorB IJoint2D.ReactionForce IJoint2D.ReactionTorque IJoint2D.IsActive IJoint2D.BreakPoint IJoint2D.OnBroke Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IMouseJoint2D : IJoint2D Properties DampingRatio Gets or sets the damping ratio. Declaration float DampingRatio { get; set; } Property Value Type Description float FrequencyHz Gets or sets the frequency in Hz. Declaration float FrequencyHz { get; set; } Property Value Type Description float MaxForce Gets or sets the maximum constraint force that can be exerted to move the candidate body. Usually you will express as some multiple of the weight (multiplier * mass * gravity). Declaration float MaxForce { get; set; } Property Value Type Description float Target Gets or sets the initial world target point. This is assumed to coincide with the body anchor initially. Declaration Vector2 Target { get; set; } Property Value Type Description Vector2 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IPolygonColliderShape2D.html": {
    "href": "api/Evergine.Common.Physics2D.IPolygonColliderShape2D.html",
    "title": "Interface IPolygonColliderShape2D | Evergine Doc",
    "keywords": "Interface IPolygonColliderShape2D Interface for a Polygon Shape of 2D physics. Inherited Members IColliderShape2D.Radius IColliderShape2D.Type IColliderShape2D.ChildCount IColliderShape2D.InternalShape IColliderShape2D.TestPoint(ref Vector2, ref Vector2, float) IColliderShape2D.TestRectangle(ref RectangleF, ref Vector2, float) IColliderShape2D.TestShape(Vector2, float, IColliderShape2D, Vector2, float) Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IPolygonColliderShape2D : IColliderShape2D Properties Data Gets the data. Declaration List<List<Vector2>> Data { get; } Property Value Type Description List<List<Vector2>> Normals Gets the polygon normals. Declaration Vector2[] Normals { get; } Property Value Type Description Vector2[] Vertices Gets the polygon shapes. Declaration Vector2[] Vertices { get; } Property Value Type Description Vector2[] Methods SetShapeFromData(Vector2[], List<List<Vector2>>, float, float, Vector2, Vector2, float) Shape generated from the implementation data. Declaration void SetShapeFromData(Vector2[] vertices, List<List<Vector2>> data, float width, float height, Vector2 scale, Vector2 center, float angle) Parameters Type Name Description Vector2[] vertices The polygon vertices. List<List<Vector2>> data The internal data. float width The width. float height The height. Vector2 scale The scale of the shape. Vector2 center The box center. float angle The box angle. SetShapeFromTexture(Texture, RectangleF, float, bool, Vector2, Vector2, float) Build the polygon shape from a texture. Declaration void SetShapeFromTexture(Texture texture, RectangleF rectangle, float alphaThreshold, bool holeDetection, Vector2 scale, Vector2 center, float angle) Parameters Type Name Description Texture texture The texture. RectangleF rectangle The source rectangle. float alphaThreshold The alpha threshold. bool holeDetection Hole detection in the image. Vector2 scale The scale of the shape. Vector2 center The box center. float angle The box angle. SetShapeFromVertices(Vector2[]) Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge. Declaration void SetShapeFromVertices(Vector2[] vertices) Parameters Type Name Description Vector2[] vertices The polygon vertices. SetShapeFromVertices(Vector2[], float, float, Vector2, Vector2, float) Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge. Declaration void SetShapeFromVertices(Vector2[] vertices, float width, float height, Vector2 scale, Vector2 center, float angle) Parameters Type Name Description Vector2[] vertices The polygon vertices. float width The width. float height The height. Vector2 scale The scale of the shape. Vector2 center The box center. float angle The box angle. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IPrismaticJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IPrismaticJoint2D.html",
    "title": "Interface IPrismaticJoint2D | Evergine Doc",
    "keywords": "Interface IPrismaticJoint2D Interface for a Prismatic Joint 2D physics. Inherited Members IJoint2D.InternalJoint IJoint2D.BodyA IJoint2D.BodyB IJoint2D.LocalAnchorA IJoint2D.LocalAnchorB IJoint2D.ReactionForce IJoint2D.ReactionTorque IJoint2D.IsActive IJoint2D.BreakPoint IJoint2D.OnBroke Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IPrismaticJoint2D : IJoint2D Properties EnableLimits Gets or sets a value indicating whether the joint limits are enabled. Declaration bool EnableLimits { get; set; } Property Value Type Description bool EnableMotor Gets or sets a value indicating whether the motor is enabled. Declaration bool EnableMotor { get; set; } Property Value Type Description bool JointTranslation Gets the current joint translation, usually in meters. Declaration float JointTranslation { get; } Property Value Type Description float JointTranslationSpeed Gets the current joint translation speed, usually in meters per second. Declaration float JointTranslationSpeed { get; } Property Value Type Description float LowerLimit Gets the lower angle for the joint limit (radians). Declaration float LowerLimit { get; } Property Value Type Description float MaxMotorForce Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m. Declaration float MaxMotorForce { get; set; } Property Value Type Description float MotorForce Gets the current motor force given the inverse time step, usually in N. Declaration float MotorForce { get; } Property Value Type Description float MotorSpeed Gets or sets the desired motor speed. Usually in radians per second. Declaration float MotorSpeed { get; set; } Property Value Type Description float ReferenceAngle Gets the reference angle. Declaration float ReferenceAngle { get; } Property Value Type Description float UpperLimit Gets the upper angle for the joint limit (radians). Declaration float UpperLimit { get; } Property Value Type Description float Methods SetLimits(float, float) Sets the joint limits. Declaration void SetLimits(float lower, float upper) Parameters Type Name Description float lower The lower limit. float upper The upper limit. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IRevoluteJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IRevoluteJoint2D.html",
    "title": "Interface IRevoluteJoint2D | Evergine Doc",
    "keywords": "Interface IRevoluteJoint2D Interface for a Revolute Joint 2D physics. Inherited Members IJoint2D.InternalJoint IJoint2D.BodyA IJoint2D.BodyB IJoint2D.LocalAnchorA IJoint2D.LocalAnchorB IJoint2D.ReactionForce IJoint2D.ReactionTorque IJoint2D.IsActive IJoint2D.BreakPoint IJoint2D.OnBroke Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IRevoluteJoint2D : IJoint2D Properties EnableLimits Gets or sets a value indicating whether the joint limits are enabled. Declaration bool EnableLimits { get; set; } Property Value Type Description bool EnableMotor Gets or sets a value indicating whether the motor is enabled. Declaration bool EnableMotor { get; set; } Property Value Type Description bool JointAngle Gets the current joint angle in radians. Declaration float JointAngle { get; } Property Value Type Description float JointAngleSpeed Gets the current joint angle speed in radians per second. Declaration float JointAngleSpeed { get; } Property Value Type Description float LowerAngle Gets the lower angle for the joint limit (radians). Declaration float LowerAngle { get; } Property Value Type Description float MaxMotorTorque Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m. Declaration float MaxMotorTorque { get; set; } Property Value Type Description float MotorSpeed Gets or sets the desired motor speed. Usually in radians per second. Declaration float MotorSpeed { get; set; } Property Value Type Description float MotorTorque Gets the current motor torque given the inverse time step. Unit is N*m. Declaration float MotorTorque { get; } Property Value Type Description float ReferenceAngle Gets the reference angle. Declaration float ReferenceAngle { get; } Property Value Type Description float UpperAngle Gets the upper angle for the joint limit (radians). Declaration float UpperAngle { get; } Property Value Type Description float Methods SetLimits(float, float) Sets the joint limits. Declaration void SetLimits(float lower, float upper) Parameters Type Name Description float lower The lower limit. float upper The upper limit. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IRigidBody2D.html": {
    "href": "api/Evergine.Common.Physics2D.IRigidBody2D.html",
    "title": "Interface IRigidBody2D | Evergine Doc",
    "keywords": "Interface IRigidBody2D Interface for RigidBody of 2D physics. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IRigidBody2D Properties Active Gets or sets a value indicating whether this body start out active?. Declaration bool Active { get; set; } Property Value Type Description bool AllowSleep Gets or sets a value indicating whether this flag to false if this body should never fall asleep. Note that this increases CPU usage. Declaration bool AllowSleep { get; set; } Property Value Type Description bool Angle Gets the world angle of the body in radians. Declaration float Angle { get; } Property Value Type Description float AngularDamping Gets or sets the Angular damping is use to reduce the angular velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large. Declaration float AngularDamping { get; set; } Property Value Type Description float AngularVelocity Gets or sets the angular velocity of the body. Declaration float AngularVelocity { get; set; } Property Value Type Description float Awake Gets or sets a value indicating whether this is this body initially awake or sleeping?. Declaration bool Awake { get; set; } Property Value Type Description bool Bullet Gets or sets a value indicating whether this is a fast moving body that should be prevented from tunneling through other moving bodies?. Note that all bodies are prevented from tunneling through kinematic and static bodies. This setting is only considered on dynamic bodies. Declaration bool Bullet { get; set; } Property Value Type Description bool ColliderList Gets the collider list. Declaration IEnumerable<ICollider2D> ColliderList { get; } Property Value Type Description IEnumerable<ICollider2D> FixedRotation Gets or sets a value indicating whether this body be prevented from rotating? Useful for characters. Declaration bool FixedRotation { get; set; } Property Value Type Description bool GravityScale Gets or sets the gravity scale applied to this body. Declaration float GravityScale { get; set; } Property Value Type Description float Inertia Gets the rotational inertia of the body about the local origin, usually in kg-m^2. Declaration float Inertia { get; } Property Value Type Description float LinearDamping Gets or sets the Linear damping is use to reduce the linear velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large. Declaration float LinearDamping { get; set; } Property Value Type Description float LinearVelocity Gets or sets the linear velocity of the body's origin in world co-ordinates. Declaration Vector2 LinearVelocity { get; set; } Property Value Type Description Vector2 LocalCenter Gets the local position of the center of the mass. Declaration Vector2 LocalCenter { get; } Property Value Type Description Vector2 Mass Gets the total mass of the body, usually in kg-m^2. Declaration float Mass { get; } Property Value Type Description float MassData Gets or sets the mass data of the body. Declaration RigidBodyMassData2D MassData { get; set; } Property Value Type Description RigidBodyMassData2D Position Gets the world position of the body. Declaration Vector2 Position { get; } Property Value Type Description Vector2 Type Gets or sets the rigid body 2D type. Declaration RigidBodyType2D Type { get; set; } Property Value Type Description RigidBodyType2D UserData Gets or sets the application specific body data. Declaration object UserData { get; set; } Property Value Type Description object WorldCenter Gets the world position of the center of mass. Declaration Vector2 WorldCenter { get; } Property Value Type Description Vector2 Methods ApplyForce(Vector2, Vector2, bool) Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body. Declaration void ApplyForce(Vector2 force, Vector2 point, bool wake = true) Parameters Type Name Description Vector2 force The world force vector, usually in Newtons (N). Vector2 point The world position of the point of application. bool wake Also wake up the body. ApplyForceToCenter(Vector2, bool) Apply a force to the center of mass. This wakes up the body. Declaration void ApplyForceToCenter(Vector2 force, bool wake = true) Parameters Type Name Description Vector2 force The world force vector, usually in Newtons (N). bool wake Also wake up the body. ApplyLinearImpulse(Vector2, Vector2, bool) pply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body. Declaration void ApplyLinearImpulse(Vector2 impulse, Vector2 point, bool wake = true) Parameters Type Name Description Vector2 impulse The world impulse vector, usually in N-seconds or kg-m/s. Vector2 point The world position of the point of application. bool wake Also wake up the body. ApplyTorque(float, bool) Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body. Declaration void ApplyTorque(float torque, bool wake = true) Parameters Type Name Description float torque About the z-axis (out of the screen), usually in N-m. bool wake Also wake up the body. CreateCollider(ColliderDef2D) Creates a collider with the specified definition. Declaration ICollider2D CreateCollider(ColliderDef2D def) Parameters Type Name Description ColliderDef2D def The collider 2D definition. Returns Type Description ICollider2D The collider 2D. DestroyCollider(ICollider2D) Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with this fixture. This will automatically adjust the mass of the body if the body is dynamic and the fixture has positive density. All fixtures attached to a body are implicitly destroyed when the body is destroyed. Declaration void DestroyCollider(ICollider2D collider) Parameters Type Name Description ICollider2D collider The collider 2D to be removed. GetLinearVelocityFromLocalPoint(Vector2) Get the world velocity of a local point. Declaration Vector2 GetLinearVelocityFromLocalPoint(Vector2 localPoint) Parameters Type Name Description Vector2 localPoint Point in local coordinates. Returns Type Description Vector2 The world velocity of a point. GetLinearVelocityFromWorldPoint(Vector2) Get the world linear velocity of a world point attached to this body.. Declaration Vector2 GetLinearVelocityFromWorldPoint(Vector2 localPoint) Parameters Type Name Description Vector2 localPoint Point in world coordinates. Returns Type Description Vector2 The world velocity of a point. GetLocalPoint(Vector2) Gets a local point relative to the body's origin given a world point. Declaration Vector2 GetLocalPoint(Vector2 worldPoint) Parameters Type Name Description Vector2 worldPoint Point in world coordinates. Returns Type Description Vector2 The corresponding local point relative to the body's origin. GetLocalVector(Vector2) Gets a local vector given a world vector. Declaration Vector2 GetLocalVector(Vector2 worldVector) Parameters Type Name Description Vector2 worldVector Vector in world coordinates. Returns Type Description Vector2 The corresponding local vector. GetWorldPoint(Vector2) Get the world coordinates of a point given the local coordinates. Declaration Vector2 GetWorldPoint(Vector2 localPoint) Parameters Type Name Description Vector2 localPoint A point on the body measured relative the the body's origin. Returns Type Description Vector2 The same point expressed in world coordinates. GetWorldVector(Vector2) Get the world coordinates of a vector given the local coordinates. Declaration Vector2 GetWorldVector(Vector2 localVector) Parameters Type Name Description Vector2 localVector A vector fixed in the body. Returns Type Description Vector2 The same vector expressed in world coordinates. ResetMassData() This resets the mass properties to the sum of the mass properties of the fixtures. Declaration void ResetMassData() Remarks This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass. SetTransform(Vector2, float) Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior. Declaration void SetTransform(Vector2 worldPosition, float angle) Parameters Type Name Description Vector2 worldPosition the world position of the body's local origin. float angle the world rotation in radians. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IRopeJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IRopeJoint2D.html",
    "title": "Interface IRopeJoint2D | Evergine Doc",
    "keywords": "Interface IRopeJoint2D Interface for a Rope Joint 2D physics. Inherited Members IJoint2D.InternalJoint IJoint2D.BodyA IJoint2D.BodyB IJoint2D.LocalAnchorA IJoint2D.LocalAnchorB IJoint2D.ReactionForce IJoint2D.ReactionTorque IJoint2D.IsActive IJoint2D.BreakPoint IJoint2D.OnBroke Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IRopeJoint2D : IJoint2D Properties MaxLength Gets or sets the maximum length of the rope. Declaration float MaxLength { get; set; } Property Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ISimulation2D.html": {
    "href": "api/Evergine.Common.Physics2D.ISimulation2D.html",
    "title": "Interface ISimulation2D | Evergine Doc",
    "keywords": "Interface ISimulation2D Interface for Simulation2D. Inherited Members IPausable.State IPausable.Initialize() IPausable.Pause() IPausable.Resume() IDisposable.Dispose() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface ISimulation2D : IPausable, IDisposable Properties AllowSleeping Gets or sets a value indicating whether allow sleeping. Declaration bool AllowSleeping { get; set; } Property Value Type Description bool CollisionList Gets the colllision list. Declaration IEnumerable<ICollisionInfo2D> CollisionList { get; } Property Value Type Description IEnumerable<ICollisionInfo2D> DrawFlags Gets or sets the debug draw flags. Declaration DebugDrawFlags DrawFlags { get; set; } Property Value Type Description DebugDrawFlags Gravity Gets or sets the global gravity vector. Declaration Vector2 Gravity { get; set; } Property Value Type Description Vector2 InternWorld Gets the internal native world instance. Declaration object InternWorld { get; } Property Value Type Description object IsLocked Gets a value indicating whether the world is locked (in the middle of a time step). Declaration bool IsLocked { get; } Property Value Type Description bool PositionIterations Gets or sets the position iterations. Declaration int PositionIterations { get; set; } Property Value Type Description int VelocityIterations Gets or sets the velocity iterations. Declaration int VelocityIterations { get; set; } Property Value Type Description int WorldScale Gets or sets the world scale. By default, the scale of the world is 1unit = 1meter. Declaration float WorldScale { get; set; } Property Value Type Description float WorldStaticBody Gets the world static body. Declaration IRigidBody2D WorldStaticBody { get; } Property Value Type Description IRigidBody2D Methods CreateColliderShape<T>() Instantiate a new Collider shape. Declaration T CreateColliderShape<T>() where T : IColliderShape2D Returns Type Description T The new collider shape. Type Parameters Name Description T The ColliderShape type. CreateJoint<T, J>(J) Creates a Joint. Declaration T CreateJoint<T, J>(J jointDef) where T : IJoint2D where J : JointDef2D<T> Parameters Type Name Description J jointDef The joint definition instance. Returns Type Description T The new joint instance. Type Parameters Name Description T The Joint type. J The Joint definition type. CreateRigidBody(RigidBodyDef2D) Creates a RigidBody 2D. Declaration IRigidBody2D CreateRigidBody(RigidBodyDef2D bodyDef) Parameters Type Name Description RigidBodyDef2D bodyDef Body definition. Returns Type Description IRigidBody2D The rigid body instance. DebugDraw() Draw the debug information. Declaration void DebugDraw() RemoveJoint(IJoint2D) Remove the joint from the physic world. Declaration void RemoveJoint(IJoint2D joint) Parameters Type Name Description IJoint2D joint The joint to remove. RemoveRigidBody(IRigidBody2D) Removes a RigidBody 2D from the world. Declaration void RemoveRigidBody(IRigidBody2D body) Parameters Type Name Description IRigidBody2D body The body to remove. SetDebugDraw(ISimulationDebugDraw2D) Sets the debug draw of Simulation 2D. Declaration void SetDebugDraw(ISimulationDebugDraw2D debugDraw) Parameters Type Name Description ISimulationDebugDraw2D debugDraw The deubg draw instance. Step(TimeSpan) Take a time step. This performs collision detection, integration, and constraint solution. Declaration void Step(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime the amount of time to simulate, this should not vary. Events BeginCollision Called when two fixtures begin to touch. Declaration event ContactDelegate BeginCollision Event Type Type Description ContactDelegate EndCollision Called when two fixtures cease to touch. Declaration event ContactDelegate EndCollision Event Type Type Description ContactDelegate OnPhysicStep Event fired when the physics will do an step Declaration event EventHandler OnPhysicStep Event Type Type Description EventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.ISimulationDebugDraw2D.html": {
    "href": "api/Evergine.Common.Physics2D.ISimulationDebugDraw2D.html",
    "title": "Interface ISimulationDebugDraw2D | Evergine Doc",
    "keywords": "Interface ISimulationDebugDraw2D Interface for drawing debug information of Simulation 2D. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface ISimulationDebugDraw2D Methods DrawCircle(Vector2, float, Color) Draw a circle. Declaration void DrawCircle(Vector2 center, float radius, Color color) Parameters Type Name Description Vector2 center The center. float radius The radius. Color color The color. DrawPolygon(Vector2[], Color) Draw a polygon. Declaration void DrawPolygon(Vector2[] vertices, Color color) Parameters Type Name Description Vector2[] vertices The vertices. Color color The color. DrawSegment(Vector2, Vector2, Color) Draw a segment. Declaration void DrawSegment(Vector2 p1, Vector2 p2, Color color) Parameters Type Name Description Vector2 p1 The first point of the segment. Vector2 p2 The second point of the segment. Color color The color. DrawSolidCircle(Vector2, float, Vector2, Color) Draw a solid circle. Declaration void DrawSolidCircle(Vector2 center, float radius, Vector2 axis, Color color) Parameters Type Name Description Vector2 center The center. float radius The radius. Vector2 axis The axis. Color color The color. DrawSolidPolygon(Vector2[], Color) Draw a solid polygon. Declaration void DrawSolidPolygon(Vector2[] vertices, Color color) Parameters Type Name Description Vector2[] vertices The vertices. Color color The color. DrawTransform(Vector2, float) Draw a transform. Declaration void DrawTransform(Vector2 position, float angle) Parameters Type Name Description Vector2 position The Draw. float angle The Angle. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IWeldJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IWeldJoint2D.html",
    "title": "Interface IWeldJoint2D | Evergine Doc",
    "keywords": "Interface IWeldJoint2D Interface for a Distance Joint 2D physics. Inherited Members IJoint2D.InternalJoint IJoint2D.BodyA IJoint2D.BodyB IJoint2D.LocalAnchorA IJoint2D.LocalAnchorB IJoint2D.ReactionForce IJoint2D.ReactionTorque IJoint2D.IsActive IJoint2D.BreakPoint IJoint2D.OnBroke Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IWeldJoint2D : IJoint2D Properties DampingRatio Gets or sets the damping ratio. Declaration float DampingRatio { get; set; } Property Value Type Description float FrequencyHz Gets or sets the frequency in Hz. Declaration float FrequencyHz { get; set; } Property Value Type Description float ReferenceAngle Gets the reference angle. Declaration float ReferenceAngle { get; } Property Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.IWheelJoint2D.html": {
    "href": "api/Evergine.Common.Physics2D.IWheelJoint2D.html",
    "title": "Interface IWheelJoint2D | Evergine Doc",
    "keywords": "Interface IWheelJoint2D Interface for a Wheel Joint 2D physics. Inherited Members IJoint2D.InternalJoint IJoint2D.BodyA IJoint2D.BodyB IJoint2D.LocalAnchorA IJoint2D.LocalAnchorB IJoint2D.ReactionForce IJoint2D.ReactionTorque IJoint2D.IsActive IJoint2D.BreakPoint IJoint2D.OnBroke Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public interface IWheelJoint2D : IJoint2D Properties EnableMotor Gets or sets a value indicating whether the motor is enabled. Declaration bool EnableMotor { get; set; } Property Value Type Description bool JointTranslation Gets the current joint translation, usually in meters. Declaration float JointTranslation { get; } Property Value Type Description float JointTranslationSpeed Gets the current joint translation speed, usually in meters per second. Declaration float JointTranslationSpeed { get; } Property Value Type Description float MaxMotorTorque Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m. Declaration float MaxMotorTorque { get; set; } Property Value Type Description float MotorSpeed Gets or sets the desired motor speed. Usually in radians per second. Declaration float MotorSpeed { get; set; } Property Value Type Description float MotorTorque Gets the current motor torque given the inverse time step, usually in N-m. Declaration float MotorTorque { get; } Property Value Type Description float SpringDampingRatio Gets or sets the damping ratio. Declaration float SpringDampingRatio { get; set; } Property Value Type Description float SpringFrequencyHz Gets or sets the frequency in Hz. Declaration float SpringFrequencyHz { get; set; } Property Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.JointDef2D-1.html": {
    "href": "api/Evergine.Common.Physics2D.JointDef2D-1.html",
    "title": "Class JointDef2D<T> | Evergine Doc",
    "keywords": "Class JointDef2D<T> Definition of a 2D Joint. Inheritance object JointDef2D JointDef2D<T> DistanceJointDef2D MouseJointDef2D PrismaticJointDef2D RevoluteJointDef2D RopeJointDef2D WeldJointDef2D WheelJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class JointDef2D<T> : JointDef2D where T : IJoint2D Type Parameters Name Description T The type of the joint that define. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.JointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.JointDef2D.html",
    "title": "Class JointDef2D | Evergine Doc",
    "keywords": "Class JointDef2D Definition of a 2D Joint. Inheritance object JointDef2D JointDef2D<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class JointDef2D Fields BodyA The first attached body. Declaration public IRigidBody2D BodyA Field Value Type Description IRigidBody2D BodyB The second attached body. Declaration public IRigidBody2D BodyB Field Value Type Description IRigidBody2D BreakPoint The amount of force needed to break the joint. Declaration public float BreakPoint Field Value Type Description float CollideConnected Set this flag to true if the attached bodies should collide. Declaration public bool CollideConnected Field Value Type Description bool IsActive The joint is active by default. Declaration public bool IsActive Field Value Type Description bool LocalAnchorA The local anchor point relative to bodyA's origin. Declaration public Vector2 LocalAnchorA Field Value Type Description Vector2 LocalAnchorB The local anchor point relative to bodyB's origin. Declaration public Vector2 LocalAnchorB Field Value Type Description Vector2 UserData Use this to attach application specific data to your joints. Declaration public object UserData Field Value Type Description object Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.JointType2D.html": {
    "href": "api/Evergine.Common.Physics2D.JointType2D.html",
    "title": "Enum JointType2D | Evergine Doc",
    "keywords": "Enum JointType2D Joint types. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public enum JointType2D Fields Name Description DistanceJoint Distance joint FrictionJoint Friction joint GearJoint Gear joint MotorJoint Motor joint MouseJoint Mouse joint PrismaticJoint Prismatic joint PulleyJoint Pulley joint RevoluteJoint Revolute joint RopeJoint Rope joint UnknownJoint Unknown joint WeldJoint Weld joint WheelJoint Wheel joint Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.LimitsDef.html": {
    "href": "api/Evergine.Common.Physics2D.LimitsDef.html",
    "title": "Class LimitsDef | Evergine Doc",
    "keywords": "Class LimitsDef Motor properties definition. Inheritance object LimitsDef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class LimitsDef Fields EnableLimits A flag to enable the joint limits. Declaration public bool EnableLimits Field Value Type Description bool LowerLimit The lower translation limit. Declaration public float LowerLimit Field Value Type Description float UpperLimit The upper translation limit. Declaration public float UpperLimit Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.MotorDef.html": {
    "href": "api/Evergine.Common.Physics2D.MotorDef.html",
    "title": "Class MotorDef | Evergine Doc",
    "keywords": "Class MotorDef Motor properties definition. Inheritance object MotorDef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class MotorDef Fields EnableMotor A flag to enable the joint motor. Declaration public bool EnableMotor Field Value Type Description bool MaxMotorTorque The maximum motor torque used to achieve the desired motor speed. Usually in N-m. Declaration public float MaxMotorTorque Field Value Type Description float MotorSpeed The desired motor speed. Usually in radians per second. Declaration public float MotorSpeed Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.MouseJointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.MouseJointDef2D.html",
    "title": "Class MouseJointDef2D | Evergine Doc",
    "keywords": "Class MouseJointDef2D Definition of a 2D Distance Joint. Inheritance object JointDef2D JointDef2D<IMouseJoint2D> MouseJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class MouseJointDef2D : JointDef2D<IMouseJoint2D> Fields DampingRatio The damping ratio. 0 = no damping, 1 = critical damping. Declaration public float DampingRatio Field Value Type Description float FrequencyHz The response speed. Declaration public float FrequencyHz Field Value Type Description float MaxForce The maximum constraint force that can be exerted to move the candidate body. Usually you will express as some multiple of the weight (multiplier * mass * gravity). Declaration public float MaxForce Field Value Type Description float Target The initial world target point. This is assumed to coincide with the body anchor initially. Declaration public Vector2 Target Field Value Type Description Vector2 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.OnBrokeEventHandler.html": {
    "href": "api/Evergine.Common.Physics2D.OnBrokeEventHandler.html",
    "title": "Delegate OnBrokeEventHandler | Evergine Doc",
    "keywords": "Delegate OnBrokeEventHandler Event broke delegate. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public delegate void OnBrokeEventHandler(object sender, float jointError) Parameters Type Name Description object sender Sender Object. float jointError The force that the joint has received to be broke. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.PrismaticJointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.PrismaticJointDef2D.html",
    "title": "Class PrismaticJointDef2D | Evergine Doc",
    "keywords": "Class PrismaticJointDef2D Definition of a 2D Prismatic Joint. Inheritance object JointDef2D JointDef2D<IPrismaticJoint2D> PrismaticJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class PrismaticJointDef2D : JointDef2D<IPrismaticJoint2D> Fields AxisAngle The local translation axis (radians). Declaration public float AxisAngle Field Value Type Description float MotorDef Motor properties. Declaration public MotorDef MotorDef Field Value Type Description MotorDef ReferenceAngle The bodyB angle minus bodyA angle in the reference state (radians). Declaration public float ReferenceAngle Field Value Type Description float TranslationLimitsDef Translation limits. Declaration public LimitsDef TranslationLimitsDef Field Value Type Description LimitsDef Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.RevoluteJointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.RevoluteJointDef2D.html",
    "title": "Class RevoluteJointDef2D | Evergine Doc",
    "keywords": "Class RevoluteJointDef2D Definition of a 2D Revolute Joint. Inheritance object JointDef2D JointDef2D<IRevoluteJoint2D> RevoluteJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class RevoluteJointDef2D : JointDef2D<IRevoluteJoint2D> Fields AngleLimitDef Angle limits. Declaration public AngleLimitsDef AngleLimitDef Field Value Type Description AngleLimitsDef MotorDef Motor properties. Declaration public MotorDef MotorDef Field Value Type Description MotorDef ReferenceAngle The bodyB angle minus bodyA angle in the reference state (radians). Declaration public float ReferenceAngle Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.RigidBodyDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.RigidBodyDef2D.html",
    "title": "Class RigidBodyDef2D | Evergine Doc",
    "keywords": "Class RigidBodyDef2D Definition of a Rigid Body 2D. Inheritance object RigidBodyDef2D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class RigidBodyDef2D Fields Active Does this body start out active?. Declaration public bool Active Field Value Type Description bool AllowSleep Set this flag to false if this body should never fall asleep. Note that this increases CPU usage. Declaration public bool AllowSleep Field Value Type Description bool Angle The world angle of the body in radians. Declaration public float Angle Field Value Type Description float AngularDamping Angular damping is use to reduce the angular velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large. Declaration public float AngularDamping Field Value Type Description float AngularVelocity The angular velocity of the body. Declaration public float AngularVelocity Field Value Type Description float Awake Is this body initially awake or sleeping?. Declaration public bool Awake Field Value Type Description bool Bullet Is this a fast moving body that should be prevented from tunneling through other moving bodies?. Note that all bodies are prevented from tunneling through kinematic and static bodies. This setting is only considered on dynamic bodies. Declaration public bool Bullet Field Value Type Description bool FixedRotation Should this body be prevented from rotating? Useful for characters. Declaration public bool FixedRotation Field Value Type Description bool GravityScale Scale the gravity applied to this body. Declaration public float GravityScale Field Value Type Description float LinearDamping Linear damping is use to reduce the linear velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large. Declaration public float LinearDamping Field Value Type Description float LinearVelocity The linear velocity of the body's origin in world co-ordinates. Declaration public Vector2 LinearVelocity Field Value Type Description Vector2 Position The world position of the body. Avoid creating bodies at the origin since this can lead to many overlapping shapes. Declaration public Vector2 Position Field Value Type Description Vector2 Type The rigid body 2D type. Declaration public RigidBodyType2D Type Field Value Type Description RigidBodyType2D UserData Use this to store application specific body data. Declaration public object UserData Field Value Type Description object Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.RigidBodyMassData2D.html": {
    "href": "api/Evergine.Common.Physics2D.RigidBodyMassData2D.html",
    "title": "Struct RigidBodyMassData2D | Evergine Doc",
    "keywords": "Struct RigidBodyMassData2D This holds the mass data computed for a shape. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public struct RigidBodyMassData2D Fields Center The position of the shape's centroid relative to the shape's origin. Declaration public Vector2 Center Field Value Type Description Vector2 I The rotational inertia of the shape about the local origin. Declaration public float I Field Value Type Description float Mass The position of the shape's centroid relative to the shape's origin. Declaration public float Mass Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.RigidBodyType2D.html": {
    "href": "api/Evergine.Common.Physics2D.RigidBodyType2D.html",
    "title": "Enum RigidBodyType2D | Evergine Doc",
    "keywords": "Enum RigidBodyType2D Rigid body type 2D. Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public enum RigidBodyType2D Fields Name Description Dynamic Zero mass, non-zero velocity set by user, moved by solver. Kinematic Zero mass, non-zero velocity set by user, moved by solver. Static Zero mass, zero velocity, may be manually moved. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.RopeJointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.RopeJointDef2D.html",
    "title": "Class RopeJointDef2D | Evergine Doc",
    "keywords": "Class RopeJointDef2D Definition of a 2D Rope Joint. Inheritance object JointDef2D JointDef2D<IRopeJoint2D> RopeJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class RopeJointDef2D : JointDef2D<IRopeJoint2D> Fields MaxLength The maximum length of the rope. Declaration public float MaxLength Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.WeldJointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.WeldJointDef2D.html",
    "title": "Class WeldJointDef2D | Evergine Doc",
    "keywords": "Class WeldJointDef2D Definition of a 2D Weld Joint. Inheritance object JointDef2D JointDef2D<IWeldJoint2D> WeldJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class WeldJointDef2D : JointDef2D<IWeldJoint2D> Fields DampingRatio The damping ratio. 0 = no damping, 1 = critical damping. Declaration public float DampingRatio Field Value Type Description float FrequencyHz The mass-spring-damper frequency in Hertz. A value of 0 disables softness. Declaration public float FrequencyHz Field Value Type Description float ReferenceAngle The bodyB angle minus bodyA angle in the reference state (radians). Declaration public float ReferenceAngle Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Physics2D.WheelJointDef2D.html": {
    "href": "api/Evergine.Common.Physics2D.WheelJointDef2D.html",
    "title": "Class WheelJointDef2D | Evergine Doc",
    "keywords": "Class WheelJointDef2D Definition of a 2D Wheel Joint. Inheritance object JointDef2D JointDef2D<IWheelJoint2D> WheelJointDef2D Inherited Members JointDef2D.BodyA JointDef2D.BodyB JointDef2D.LocalAnchorA JointDef2D.LocalAnchorB JointDef2D.CollideConnected JointDef2D.UserData JointDef2D.IsActive JointDef2D.BreakPoint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Physics2D Assembly: Evergine.Common.dll Syntax public class WheelJointDef2D : JointDef2D<IWheelJoint2D> Fields AxisAngle The local translation axis (radians). Declaration public float AxisAngle Field Value Type Description float DampingRatio Suspension damping ratio, one indicates critical damping. Declaration public float DampingRatio Field Value Type Description float FrequencyHz Suspension frequency, zero indicates no suspension. Declaration public float FrequencyHz Field Value Type Description float MotorDef Motor properties. Declaration public MotorDef MotorDef Field Value Type Description MotorDef Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.PlatformFamily.html": {
    "href": "api/Evergine.Common.PlatformFamily.html",
    "title": "Enum PlatformFamily | Evergine Doc",
    "keywords": "Enum PlatformFamily Specifies the platform family. Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public enum PlatformFamily Fields Name Description Console Console family. Desktop Desktop family. Mobile Mobile family. Unsupported Unsupported family. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.PlatformType.html": {
    "href": "api/Evergine.Common.PlatformType.html",
    "title": "Enum PlatformType | Evergine Doc",
    "keywords": "Enum PlatformType Specifies the platform type. Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public enum PlatformType Fields Name Description Android Google Android Platform. Linux Linux platform. MacOS Apple MacOS platform. UWP Universal Windows App Undefined Undefined platform. Web Web platform. Windows Microsoft Windows platform. iOS Apple iOS platform. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.ProjectAddOn.html": {
    "href": "api/Evergine.Common.ProjectAddOn.html",
    "title": "Class ProjectAddOn | Evergine Doc",
    "keywords": "Class ProjectAddOn Class that represents a project add-on. Inheritance object ProjectAddOn Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public class ProjectAddOn Properties Id Gets or sets the add-on id. Declaration public string Id { get; set; } Property Value Type Description string LocalPath Gets or sets the path to add-on source project. Declaration public string LocalPath { get; set; } Property Value Type Description string Version Gets or sets the add-on version. Declaration public string Version { get; set; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.ProjectModel.html": {
    "href": "api/Evergine.Common.ProjectModel.html",
    "title": "Class ProjectModel | Evergine Doc",
    "keywords": "Class ProjectModel Class that represents a project file. Inheritance object ProjectModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public class ProjectModel Properties Packages Gets or sets the add-ons data. Declaration public List<ProjectAddOn> Packages { get; set; } Property Value Type Description List<ProjectAddOn> Profiles Gets or sets profiles data. Declaration public List<ProjectProfile> Profiles { get; set; } Property Value Type Description List<ProjectProfile> ResourcesPath Gets or sets the content path. Declaration public string ResourcesPath { get; set; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.ProjectProfile.html": {
    "href": "api/Evergine.Common.ProjectProfile.html",
    "title": "Class ProjectProfile | Evergine Doc",
    "keywords": "Class ProjectProfile Profile element class. Inheritance object ProjectProfile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public class ProjectProfile Properties AdditionalEffectTechniqueCombinations Gets or sets the additional effect directives. Example1: A-B,B-C,... Example2: A, B-A, B-C,... Declaration public string AdditionalEffectTechniqueCombinations { get; set; } Property Value Type Description string AlphaCompressionFormat Gets or sets the alpha compression format. Declaration public PixelFormat AlphaCompressionFormat { get; set; } Property Value Type Description PixelFormat CompileEffects Gets or sets a value indicating whether the effects will be compiled. Declaration public bool CompileEffects { get; set; } Property Value Type Description bool GraphicsBackend Gets or sets the graphics backend. Declaration public GraphicsBackend GraphicsBackend { get; set; } Property Value Type Description GraphicsBackend LauncherType Gets or sets the launcher type. Declaration public string LauncherType { get; set; } Property Value Type Description string Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description string NonAlphaCompressionFormat Gets or sets non alpha compresion format. Declaration public PixelFormat NonAlphaCompressionFormat { get; set; } Property Value Type Description PixelFormat Platform Gets or sets the platform. Declaration public PlatformType Platform { get; set; } Property Value Type Description PlatformType Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.html": {
    "href": "api/Evergine.Common.Serialization.html",
    "title": "Namespace Evergine.Common.Serialization | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Serialization Classes SerializerYaml Yaml serializer. Interfaces ISerializer Interfaces that represents a serializer."
  },
  "api/Evergine.Common.Serialization.ISerializer.html": {
    "href": "api/Evergine.Common.Serialization.ISerializer.html",
    "title": "Interface ISerializer | Evergine Doc",
    "keywords": "Interface ISerializer Interfaces that represents a serializer. Namespace: Evergine.Common.Serialization Assembly: Evergine.Common.dll Syntax public interface ISerializer Methods Deserialize(Stream) Deserializes the specified stream. Declaration object Deserialize(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description object Deserialize object. DeserializeInto<T>(Stream, T) Deserializes the specified stream. Declaration T DeserializeInto<T>(Stream stream, T existingObject) Parameters Type Name Description Stream stream The stream. T existingObject The object to deserialize into. If null (the default) then a new object will be created. Returns Type Description T Deserialize object. Type Parameters Name Description T The type to be deserialized. Serialize(Stream, object) Serializes the specified stream. Declaration void Serialize(Stream stream, object obj) Parameters Type Name Description Stream stream The stream. object obj The object. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.SerializerYaml.html": {
    "href": "api/Evergine.Common.Serialization.SerializerYaml.html",
    "title": "Class SerializerYaml | Evergine Doc",
    "keywords": "Class SerializerYaml Yaml serializer. Inheritance object SerializerYaml Implements ISerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization Assembly: Evergine.Common.dll Syntax public class SerializerYaml : ISerializer Methods CleanCache() Clean the cache of serializer types. Declaration public static void CleanCache() Deserialize(Stream) Deserializes the specified stream. Declaration public object Deserialize(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description object Deserialized object. Deserialize(Stream, Type) Deserializes the specified stream. Declaration public object Deserialize(Stream stream, Type type) Parameters Type Name Description Stream stream The stream. Type type The expected type. Returns Type Description object Deserialized object. DeserializeInto<T>(Stream, T) Deserializes the specified stream. Declaration public T DeserializeInto<T>(Stream stream, T existingObject) Parameters Type Name Description Stream stream The stream. T existingObject The object to deserialize into. If null (the default) then a new object will be created. Returns Type Description T Deserialize object. Type Parameters Name Description T The type to be deserialized. GetSerializer(Type) Get a new serializer instance. Declaration public static SerializerYaml GetSerializer(Type type) Parameters Type Name Description Type type The serializer type. Returns Type Description SerializerYaml ISerializer instance. GetSerializer<T>() Get a new serializer instance. Declaration public static ISerializer GetSerializer<T>() Returns Type Description ISerializer ISerializer instance. Type Parameters Name Description T Generic type. Serialize(Stream, object) Serializes the specified obj into the stream. Declaration public void Serialize(Stream stream, object obj) Parameters Type Name Description Stream stream The stream. object obj The object. Serialize(Stream, object, Type) Serializes the specified obj into the stream using the specified type. Declaration public void Serialize(Stream stream, object obj, Type type) Parameters Type Name Description Stream stream The stream. object obj The object. Type type The object type. Implements ISerializer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.ByteArraySerializer.html": {
    "href": "api/Evergine.Common.Serialization.YAML.ByteArraySerializer.html",
    "title": "Class ByteArraySerializer | Evergine Doc",
    "keywords": "Class ByteArraySerializer Class that serializes a byte array into Yaml. Inheritance object ScalarSerializerBase CustomYamlScalarSerializer ByteArraySerializer Implements IYamlSerializable IYamlSerializableFactory Inherited Members CustomYamlScalarSerializer.IsFactory CustomYamlScalarSerializer.TryCreate(SerializerContext, ITypeDescriptor) CustomYamlScalarSerializer.ConvertFrom(ref ObjectContext, Scalar) CustomYamlScalarSerializer.ConvertTo(ref ObjectContext) ScalarSerializerBase.ReadYaml(ref ObjectContext) ScalarSerializerBase.WriteYaml(ref ObjectContext) ScalarSerializerBase.WriteScalar(ref ObjectContext, ScalarEventInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public class ByteArraySerializer : CustomYamlScalarSerializer, IYamlSerializable, IYamlSerializableFactory Properties Type Gets the type of the scalar. Declaration public override Type Type { get; } Property Value Type Description Type Overrides CustomYamlScalarSerializer.Type Methods ConvertFromString(string) Converts a string into the scalar type instance. Declaration public override object ConvertFromString(string value) Parameters Type Name Description string value The string value containing the scalar info. Returns Type Description object The scalar type instance. Overrides CustomYamlScalarSerializer.ConvertFromString(string) ConvertToString(object) Converts the scalar instance into a string. Declaration public override string ConvertToString(object value) Parameters Type Name Description object value The scalar instance. Returns Type Description string A string containing the scalar info. Overrides CustomYamlScalarSerializer.ConvertToString(object) Implements SharpYaml.Serialization.IYamlSerializable SharpYaml.Serialization.IYamlSerializableFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.CustomYamlCollectionSerializer.html": {
    "href": "api/Evergine.Common.Serialization.YAML.CustomYamlCollectionSerializer.html",
    "title": "Class CustomYamlCollectionSerializer | Evergine Doc",
    "keywords": "Class CustomYamlCollectionSerializer Class that customizes the serializes a collection in Yaml. Inheritance object ObjectSerializer CollectionSerializer CustomYamlCollectionSerializer Implements IYamlSerializable IYamlSerializableFactory Inherited Members CollectionSerializer.CheckIsSequence(ref ObjectContext) CollectionSerializer.ReadMember(ref ObjectContext) CollectionSerializer.WriteMembers(ref ObjectContext) CollectionSerializer.ReadCollectionItems(ref ObjectContext) CollectionSerializer.ReadAddCollectionItem(ref ObjectContext, Type, CollectionDescriptor, object, int) CollectionSerializer.ReadCollectionItem(ref ObjectContext, object, Type, int) CollectionSerializer.WriteCollectionItems(ref ObjectContext) CollectionSerializer.WriteCollectionItem(ref ObjectContext, object, Type, int) ObjectSerializer.GetStyle(ref ObjectContext) ObjectSerializer.CreateOrTransformObject(ref ObjectContext) ObjectSerializer.TransformObjectAfterRead(ref ObjectContext) ObjectSerializer.ReadMembers<TStart, TEnd>(ref ObjectContext) ObjectSerializer.TryReadMember(ref ObjectContext, out string) ObjectSerializer.TryReadMember(ref ObjectContext, out Scalar, out string) ObjectSerializer.ReadMemberName(ref ObjectContext, string, out bool) ObjectSerializer.ReadMemberValue(ref ObjectContext, IMemberDescriptor, object, Type) ObjectSerializer.WriteYaml(ref ObjectContext) ObjectSerializer.WriteMember(ref ObjectContext, IMemberDescriptor) ObjectSerializer.WriteMemberName(ref ObjectContext, IMemberDescriptor, string) ObjectSerializer.WriteMemberValue(ref ObjectContext, IMemberDescriptor, object, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public abstract class CustomYamlCollectionSerializer : CollectionSerializer, IYamlSerializable, IYamlSerializableFactory Properties IsFactory Gets a value indicating whether the serializer is a factory. Declaration public virtual bool IsFactory { get; } Property Value Type Description bool Type Gets the type of the collection to serialize. Declaration public abstract Type Type { get; } Property Value Type Description Type Methods ReadYaml(ref ObjectContext) Declaration public override object ReadYaml(ref ObjectContext objectContext) Parameters Type Name Description ObjectContext objectContext Returns Type Description object Overrides ObjectSerializer.ReadYaml(ref ObjectContext) TryCreate(SerializerContext, ITypeDescriptor) Declaration public override IYamlSerializable TryCreate(SerializerContext context, ITypeDescriptor typeDescriptor) Parameters Type Name Description SerializerContext context ITypeDescriptor typeDescriptor Returns Type Description IYamlSerializable Overrides CollectionSerializer.TryCreate(SerializerContext, ITypeDescriptor) Implements SharpYaml.Serialization.IYamlSerializable SharpYaml.Serialization.IYamlSerializableFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.CustomYamlObjectSerializer.html": {
    "href": "api/Evergine.Common.Serialization.YAML.CustomYamlObjectSerializer.html",
    "title": "Class CustomYamlObjectSerializer | Evergine Doc",
    "keywords": "Class CustomYamlObjectSerializer Class that represent a custom object serializer in Yaml. Inheritance object ObjectSerializer CustomYamlObjectSerializer WaveFormatSerializer Implements IYamlSerializable IYamlSerializableFactory Inherited Members ObjectSerializer.CheckIsSequence(ref ObjectContext) ObjectSerializer.GetStyle(ref ObjectContext) ObjectSerializer.CreateOrTransformObject(ref ObjectContext) ObjectSerializer.TransformObjectAfterRead(ref ObjectContext) ObjectSerializer.ReadMembers<TStart, TEnd>(ref ObjectContext) ObjectSerializer.ReadMember(ref ObjectContext) ObjectSerializer.TryReadMember(ref ObjectContext, out string) ObjectSerializer.TryReadMember(ref ObjectContext, out Scalar, out string) ObjectSerializer.ReadMemberName(ref ObjectContext, string, out bool) ObjectSerializer.ReadMemberValue(ref ObjectContext, IMemberDescriptor, object, Type) ObjectSerializer.WriteYaml(ref ObjectContext) ObjectSerializer.WriteMembers(ref ObjectContext) ObjectSerializer.WriteMember(ref ObjectContext, IMemberDescriptor) ObjectSerializer.WriteMemberName(ref ObjectContext, IMemberDescriptor, string) ObjectSerializer.WriteMemberValue(ref ObjectContext, IMemberDescriptor, object, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public abstract class CustomYamlObjectSerializer : ObjectSerializer, IYamlSerializable, IYamlSerializableFactory Properties IsFactory Gets a value indicating whether the serialzier is a factory. Declaration public virtual bool IsFactory { get; } Property Value Type Description bool Type Gets the type of the object to serialize. Declaration public abstract Type Type { get; } Property Value Type Description Type Methods ReadYaml(ref ObjectContext) Declaration public override object ReadYaml(ref ObjectContext objectContext) Parameters Type Name Description ObjectContext objectContext Returns Type Description object Overrides ObjectSerializer.ReadYaml(ref ObjectContext) TryCreate(SerializerContext, ITypeDescriptor) Declaration public override IYamlSerializable TryCreate(SerializerContext context, ITypeDescriptor typeDescriptor) Parameters Type Name Description SerializerContext context ITypeDescriptor typeDescriptor Returns Type Description IYamlSerializable Overrides ObjectSerializer.TryCreate(SerializerContext, ITypeDescriptor) Implements SharpYaml.Serialization.IYamlSerializable SharpYaml.Serialization.IYamlSerializableFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.html": {
    "href": "api/Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.html",
    "title": "Class CustomYamlScalarSerializer | Evergine Doc",
    "keywords": "Class CustomYamlScalarSerializer Class that represents a custom scalar type serializer in Yaml. Inheritance object ScalarSerializerBase CustomYamlScalarSerializer ByteArraySerializer GuidSerializer StringSerializer Implements IYamlSerializable IYamlSerializableFactory Inherited Members ScalarSerializerBase.ReadYaml(ref ObjectContext) ScalarSerializerBase.WriteYaml(ref ObjectContext) ScalarSerializerBase.WriteScalar(ref ObjectContext, ScalarEventInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public abstract class CustomYamlScalarSerializer : ScalarSerializerBase, IYamlSerializable, IYamlSerializableFactory Properties IsFactory Gets a value indicating whether the serializer is a factory. Declaration public virtual bool IsFactory { get; } Property Value Type Description bool Type Gets the type of the scalar. Declaration public abstract Type Type { get; } Property Value Type Description Type Methods ConvertFrom(ref ObjectContext, Scalar) Declaration public override object ConvertFrom(ref ObjectContext context, Scalar fromScalar) Parameters Type Name Description ObjectContext context Scalar fromScalar Returns Type Description object Overrides ScalarSerializerBase.ConvertFrom(ref ObjectContext, Scalar) ConvertFromString(string) Converts a string into the scalar type instance. Declaration public abstract object ConvertFromString(string value) Parameters Type Name Description string value The string value containing the scalar info. Returns Type Description object The scalar type instance. ConvertTo(ref ObjectContext) Declaration public override string ConvertTo(ref ObjectContext objectContext) Parameters Type Name Description ObjectContext objectContext Returns Type Description string Overrides ScalarSerializerBase.ConvertTo(ref ObjectContext) ConvertToString(object) Converts the scalar instance into a string. Declaration public abstract string ConvertToString(object value) Parameters Type Name Description object value The scalar instance. Returns Type Description string A string containing the scalar info. TryCreate(SerializerContext, ITypeDescriptor) Declaration public IYamlSerializable TryCreate(SerializerContext context, ITypeDescriptor typeDescriptor) Parameters Type Name Description SerializerContext context ITypeDescriptor typeDescriptor Returns Type Description IYamlSerializable Implements SharpYaml.Serialization.IYamlSerializable SharpYaml.Serialization.IYamlSerializableFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.GuidSerializer.html": {
    "href": "api/Evergine.Common.Serialization.YAML.GuidSerializer.html",
    "title": "Class GuidSerializer | Evergine Doc",
    "keywords": "Class GuidSerializer Class that serializes a Guid object in Yaml. Inheritance object ScalarSerializerBase CustomYamlScalarSerializer GuidSerializer Implements IYamlSerializable IYamlSerializableFactory Inherited Members CustomYamlScalarSerializer.IsFactory CustomYamlScalarSerializer.TryCreate(SerializerContext, ITypeDescriptor) CustomYamlScalarSerializer.ConvertFrom(ref ObjectContext, Scalar) CustomYamlScalarSerializer.ConvertTo(ref ObjectContext) ScalarSerializerBase.ReadYaml(ref ObjectContext) ScalarSerializerBase.WriteYaml(ref ObjectContext) ScalarSerializerBase.WriteScalar(ref ObjectContext, ScalarEventInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public class GuidSerializer : CustomYamlScalarSerializer, IYamlSerializable, IYamlSerializableFactory Properties Type Gets the type of the scalar. Declaration public override Type Type { get; } Property Value Type Description Type Overrides CustomYamlScalarSerializer.Type Methods ConvertFromString(string) Converts a string into the scalar type instance. Declaration public override object ConvertFromString(string value) Parameters Type Name Description string value The string value containing the scalar info. Returns Type Description object The scalar type instance. Overrides CustomYamlScalarSerializer.ConvertFromString(string) ConvertToString(object) Converts the scalar instance into a string. Declaration public override string ConvertToString(object value) Parameters Type Name Description object value The scalar instance. Returns Type Description string A string containing the scalar info. Overrides CustomYamlScalarSerializer.ConvertToString(object) Implements SharpYaml.Serialization.IYamlSerializable SharpYaml.Serialization.IYamlSerializableFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.html": {
    "href": "api/Evergine.Common.Serialization.YAML.html",
    "title": "Namespace Evergine.Common.Serialization.YAML | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Serialization.YAML Classes ByteArraySerializer Class that serializes a byte array into Yaml. CustomYamlCollectionSerializer Class that customizes the serializes a collection in Yaml. CustomYamlObjectSerializer Class that represent a custom object serializer in Yaml. CustomYamlScalarSerializer Class that represents a custom scalar type serializer in Yaml. GuidSerializer Class that serializes a Guid object in Yaml. StringSerializer Class that ensures correct string serialization. ToMutable<T> Abstract class that helps converting an immutable type object into another mutable object, helping it in the serialization. WaveFormatSerializer Class that helps serializing a WaveFormat object in Yaml."
  },
  "api/Evergine.Common.Serialization.YAML.StringSerializer.html": {
    "href": "api/Evergine.Common.Serialization.YAML.StringSerializer.html",
    "title": "Class StringSerializer | Evergine Doc",
    "keywords": "Class StringSerializer Class that ensures correct string serialization. Inheritance object ScalarSerializerBase CustomYamlScalarSerializer StringSerializer Implements IYamlSerializable IYamlSerializableFactory Inherited Members CustomYamlScalarSerializer.IsFactory CustomYamlScalarSerializer.TryCreate(SerializerContext, ITypeDescriptor) CustomYamlScalarSerializer.ConvertFrom(ref ObjectContext, Scalar) CustomYamlScalarSerializer.ConvertTo(ref ObjectContext) ScalarSerializerBase.ReadYaml(ref ObjectContext) ScalarSerializerBase.WriteYaml(ref ObjectContext) ScalarSerializerBase.WriteScalar(ref ObjectContext, ScalarEventInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public class StringSerializer : CustomYamlScalarSerializer, IYamlSerializable, IYamlSerializableFactory Properties Type Gets the type of the scalar. Declaration public override Type Type { get; } Property Value Type Description Type Overrides CustomYamlScalarSerializer.Type Methods ConvertFromString(string) Converts a string into the scalar type instance. Declaration public override object ConvertFromString(string value) Parameters Type Name Description string value The string value containing the scalar info. Returns Type Description object The scalar type instance. Overrides CustomYamlScalarSerializer.ConvertFromString(string) ConvertToString(object) Converts the scalar instance into a string. Declaration public override string ConvertToString(object value) Parameters Type Name Description object value The scalar instance. Returns Type Description string A string containing the scalar info. Overrides CustomYamlScalarSerializer.ConvertToString(object) Implements SharpYaml.Serialization.IYamlSerializable SharpYaml.Serialization.IYamlSerializableFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.ToMutable-1.html": {
    "href": "api/Evergine.Common.Serialization.YAML.ToMutable-1.html",
    "title": "Class ToMutable<T> | Evergine Doc",
    "keywords": "Class ToMutable<T> Abstract class that helps converting an immutable type object into another mutable object, helping it in the serialization. Inheritance object ToMutable<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public abstract class ToMutable<T> Type Parameters Name Description T The generic immutable type. Methods ToImmutable() Converts the element into the original immutable type. Declaration public abstract T ToImmutable() Returns Type Description T An immutable instance containing the this instance data. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Serialization.YAML.WaveFormatSerializer.html": {
    "href": "api/Evergine.Common.Serialization.YAML.WaveFormatSerializer.html",
    "title": "Class WaveFormatSerializer | Evergine Doc",
    "keywords": "Class WaveFormatSerializer Class that helps serializing a WaveFormat object in Yaml. Inheritance object ObjectSerializer CustomYamlObjectSerializer WaveFormatSerializer Implements IYamlSerializable IYamlSerializableFactory Inherited Members CustomYamlObjectSerializer.ReadYaml(ref ObjectContext) CustomYamlObjectSerializer.IsFactory CustomYamlObjectSerializer.TryCreate(SerializerContext, ITypeDescriptor) ObjectSerializer.CheckIsSequence(ref ObjectContext) ObjectSerializer.GetStyle(ref ObjectContext) ObjectSerializer.ReadMembers<TStart, TEnd>(ref ObjectContext) ObjectSerializer.ReadMember(ref ObjectContext) ObjectSerializer.TryReadMember(ref ObjectContext, out string) ObjectSerializer.TryReadMember(ref ObjectContext, out Scalar, out string) ObjectSerializer.ReadMemberName(ref ObjectContext, string, out bool) ObjectSerializer.ReadMemberValue(ref ObjectContext, IMemberDescriptor, object, Type) ObjectSerializer.WriteYaml(ref ObjectContext) ObjectSerializer.WriteMembers(ref ObjectContext) ObjectSerializer.WriteMember(ref ObjectContext, IMemberDescriptor) ObjectSerializer.WriteMemberName(ref ObjectContext, IMemberDescriptor, string) ObjectSerializer.WriteMemberValue(ref ObjectContext, IMemberDescriptor, object, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.Serialization.YAML Assembly: Evergine.Common.dll Syntax public class WaveFormatSerializer : CustomYamlObjectSerializer, IYamlSerializable, IYamlSerializableFactory Properties Type Gets the type of the object to serialize. Declaration public override Type Type { get; } Property Value Type Description Type Overrides CustomYamlObjectSerializer.Type Methods CreateOrTransformObject(ref ObjectContext) Declaration protected override void CreateOrTransformObject(ref ObjectContext objectContext) Parameters Type Name Description ObjectContext objectContext Overrides ObjectSerializer.CreateOrTransformObject(ref ObjectContext) TransformObjectAfterRead(ref ObjectContext) Declaration protected override void TransformObjectAfterRead(ref ObjectContext objectContext) Parameters Type Name Description ObjectContext objectContext Overrides ObjectSerializer.TransformObjectAfterRead(ref ObjectContext) Implements SharpYaml.Serialization.IYamlSerializable SharpYaml.Serialization.IYamlSerializableFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.Shared.Graphics.html": {
    "href": "api/Evergine.Common.Shared.Graphics.html",
    "title": "Namespace Evergine.Common.Shared.Graphics | Evergine Doc",
    "keywords": "Namespace Evergine.Common.Shared.Graphics Enums ModelType The type of the model."
  },
  "api/Evergine.Common.Shared.Graphics.ModelType.html": {
    "href": "api/Evergine.Common.Shared.Graphics.ModelType.html",
    "title": "Enum ModelType | Evergine Doc",
    "keywords": "Enum ModelType The type of the model. Namespace: Evergine.Common.Shared.Graphics Assembly: Evergine.Common.dll Syntax public enum ModelType : byte Fields Name Description Capsule Capsule model Cone Cone model Cube Cube model Custom Custom model Cylinder Cylinder model Plane Plane model Pyramid Pyramid model Sphere Sphere model Teapot Teapot model Torus Torus model Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.System.DownloadStringEventArgs.html": {
    "href": "api/Evergine.Common.System.DownloadStringEventArgs.html",
    "title": "Class DownloadStringEventArgs | Evergine Doc",
    "keywords": "Class DownloadStringEventArgs Event args for string download completed. Inheritance object EventArgs DownloadStringEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.System Assembly: Evergine.Common.dll Syntax public class DownloadStringEventArgs : EventArgs Constructors DownloadStringEventArgs(string, Exception) Initializes a new instance of the DownloadStringEventArgs class. Declaration public DownloadStringEventArgs(string result, Exception exception) Parameters Type Name Description string result The result. Exception exception The exception. Properties Exception Gets the exception. Declaration public Exception Exception { get; } Property Value Type Description Exception Result Gets the result. Declaration public string Result { get; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.System.html": {
    "href": "api/Evergine.Common.System.html",
    "title": "Namespace Evergine.Common.System | Evergine Doc",
    "keywords": "Namespace Evergine.Common.System Classes DownloadStringEventArgs Event args for string download completed. Stopwatch Class for representing a stop watch. WebClient Represents a web client for downloading strings. Interfaces IStopwatch Interface for stopwatchs. ISystem Interface for system."
  },
  "api/Evergine.Common.System.IStopwatch.html": {
    "href": "api/Evergine.Common.System.IStopwatch.html",
    "title": "Interface IStopwatch | Evergine Doc",
    "keywords": "Interface IStopwatch Interface for stopwatchs. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.System Assembly: Evergine.Common.dll Syntax public interface IStopwatch : IDisposable Properties ElapsedMilliseconds Gets the elapsed milliseconds. Declaration double ElapsedMilliseconds { get; } Property Value Type Description double Methods Reset() Resets this instance. Declaration void Reset() Start() Starts this instance. Declaration void Start() Stop() Stops this instance. Declaration void Stop() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.System.ISystem.html": {
    "href": "api/Evergine.Common.System.ISystem.html",
    "title": "Interface ISystem | Evergine Doc",
    "keywords": "Interface ISystem Interface for system. Inherited Members IDisposable.Dispose() Namespace: Evergine.Common.System Assembly: Evergine.Common.dll Syntax public interface ISystem : IDisposable Methods BeginTask() Begins the task. Declaration void BeginTask() EndTask() Ends the task. Declaration void EndTask() SetTaskContext() Sets the task context. Declaration void SetTaskContext() StartStopwatch() Starts the stopwatch. Declaration IStopwatch StartStopwatch() Returns Type Description IStopwatch The result. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.System.Stopwatch.html": {
    "href": "api/Evergine.Common.System.Stopwatch.html",
    "title": "Class Stopwatch | Evergine Doc",
    "keywords": "Class Stopwatch Class for representing a stop watch. Inheritance object Stopwatch Implements IStopwatch IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.System Assembly: Evergine.Common.dll Syntax public class Stopwatch : IStopwatch, IDisposable Constructors Stopwatch() Initializes a new instance of the Stopwatch class. Declaration public Stopwatch() Properties ElapsedMilliseconds Gets the elapsed milliseconds. Declaration public double ElapsedMilliseconds { get; } Property Value Type Description double Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Reset() Resets this instance. Declaration public void Reset() Start() Starts this instance. Declaration public void Start() Stop() Stops this instance. Declaration public void Stop() Implements IStopwatch IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.System.WebClient.html": {
    "href": "api/Evergine.Common.System.WebClient.html",
    "title": "Class WebClient | Evergine Doc",
    "keywords": "Class WebClient Represents a web client for downloading strings. Inheritance object WebClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common.System Assembly: Evergine.Common.dll Syntax public sealed class WebClient Constructors WebClient() Initializes a new instance of the WebClient class. Declaration public WebClient() Methods DownloadStringAsync(Uri) Downloads the string async. Declaration public void DownloadStringAsync(Uri downloadUri) Parameters Type Name Description Uri downloadUri The download URI. Events DownloadStringCompleted Occurs when [download string completed]. Declaration public event EventHandler<DownloadStringEventArgs> DownloadStringCompleted Event Type Type Description EventHandler<DownloadStringEventArgs> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Common.UnsafeMethods.html": {
    "href": "api/Evergine.Common.UnsafeMethods.html",
    "title": "Class UnsafeMethods | Evergine Doc",
    "keywords": "Class UnsafeMethods Unsafe and native methods. Inheritance object UnsafeMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Common Assembly: Evergine.Common.dll Syntax public static class UnsafeMethods Methods ClonePointer(IntPtr, int) Clones the pointer. Declaration public static IntPtr ClonePointer(IntPtr source, int dataSize) Parameters Type Name Description IntPtr source The source. int dataSize Size of the data. Returns Type Description IntPtr New IntPtr created. CopyPointer(IntPtr, IntPtr, int) Copies the pointers. Declaration public static void CopyPointer(IntPtr source, IntPtr destination, int count) Parameters Type Name Description IntPtr source The source. IntPtr destination The destination. int count The count."
  },
  "api/Evergine.Components.Cameras.FreeCamera3D.html": {
    "href": "api/Evergine.Components.Cameras.FreeCamera3D.html",
    "title": "Class FreeCamera3D | Evergine Doc",
    "keywords": "Class FreeCamera3D Behavior that allows a 3D camera to move freely. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior FreeCamera3D Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Cameras Assembly: Evergine.Components.dll Syntax public class FreeCamera3D : Behavior, IDependencyObject Constructors FreeCamera3D() Initializes a new instance of the FreeCamera3D class. Declaration public FreeCamera3D() Fields graphicsPresenter The Camera3D Graphics Presenter. Declaration [BindService(true)] protected GraphicsPresenter graphicsPresenter Field Value Type Description GraphicsPresenter Properties MaxPitch Gets or sets the maximum pitch angle. Declaration public float MaxPitch { get; set; } Property Value Type Description float MouseSensibility Gets or sets the Mouse sensibility. Declaration public float MouseSensibility { get; set; } Property Value Type Description float Remarks 0.5 is for stop, 1 is for raw delta, 2 is twice delta. MoveSpeed Gets or sets the move speed of the camera. Declaration public float MoveSpeed { get; set; } Property Value Type Description float RotationSpeed Gets or sets the rotation speed of the camera. Declaration public float RotationSpeed { get; set; } Property Value Type Description float TouchMoveAndOrientationRatio Gets or sets the Move/Orientation screen ratio. Declaration public float TouchMoveAndOrientationRatio { get; set; } Property Value Type Description float Remarks 0.5f sets the same area to move and orientation actions. 0.1f sets the 10% of the screen to move action and 90% to orientation area. TouchSensibility Gets or sets the touch sensibility. Declaration public float TouchSensibility { get; set; } Property Value Type Description float Remarks 0.5 is for stop, 1 is for raw delta, 2 is twice delta. Methods Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Cameras.html": {
    "href": "api/Evergine.Components.Cameras.html",
    "title": "Namespace Evergine.Components.Cameras | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Cameras Classes FreeCamera3D Behavior that allows a 3D camera to move freely."
  },
  "api/Evergine.Components.Environment.AtmosphereController.html": {
    "href": "api/Evergine.Components.Environment.AtmosphereController.html",
    "title": "Class AtmosphereController | Evergine Doc",
    "keywords": "Class AtmosphereController This component controls the sky and atmosphere of the scene. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior AtmosphereController Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Environment Assembly: Evergine.Components.dll Syntax public class AtmosphereController : Behavior, IDependencyObject Constructors AtmosphereController() Initializes a new instance of the AtmosphereController class. Declaration public AtmosphereController() Properties AtmosphereRadiusInKm Gets or sets the atmosphere radius in Km. Declaration public float AtmosphereRadiusInKm { get; set; } Property Value Type Description float MiePreferredScatteringDirection Gets or sets the Mie preffered scattering direction. Declaration public float MiePreferredScatteringDirection { get; set; } Property Value Type Description float MieScaleHeight Gets or sets the Mie scale heigh in meters. Declaration public float MieScaleHeight { get; set; } Property Value Type Description float MieScatteringCoefficient Gets or sets the Mie scattering coefficient. Declaration public float MieScatteringCoefficient { get; set; } Property Value Type Description float ModifySunColor Gets or sets a value indicating whether the sun color is modified by the atmosphere scattering. Declaration public bool ModifySunColor { get; set; } Property Value Type Description bool PlanetRadiusInKm Gets or sets the planet radius in Km. Declaration public float PlanetRadiusInKm { get; set; } Property Value Type Description float RayleighScaleHeight Gets or sets the Rayleigh scale height in meters. Declaration public float RayleighScaleHeight { get; set; } Property Value Type Description float RayleighScatteringCoefficient Gets or sets the Rayleigh scattering coefficient. Declaration public Vector3 RayleighScatteringCoefficient { get; set; } Property Value Type Description Vector3 SunDiskEnabled Gets or sets a value indicating whether the Sun disk is enabled. Declaration public bool SunDiskEnabled { get; set; } Property Value Type Description bool SunDiskSize Gets or sets a value indicating the size of the Sun disk. Declaration public float SunDiskSize { get; set; } Property Value Type Description float SunIntensity Gets or sets the sun intensity. Declaration public float SunIntensity { get; set; } Property Value Type Description float Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Environment.html": {
    "href": "api/Evergine.Components.Environment.html",
    "title": "Namespace Evergine.Components.Environment | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Environment Classes AtmosphereController This component controls the sky and atmosphere of the scene."
  },
  "api/Evergine.Components.Fonts.GlyphRenderInfo.html": {
    "href": "api/Evergine.Components.Fonts.GlyphRenderInfo.html",
    "title": "Struct GlyphRenderInfo | Evergine Doc",
    "keywords": "Struct GlyphRenderInfo The render info to draw a glyph. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Components.Fonts Assembly: Evergine.Components.dll Syntax public struct GlyphRenderInfo Fields Character The character. Declaration public char Character Field Value Type Description char Glyph The Glyph. Declaration public Glyph Glyph Field Value Type Description Glyph Position The pen position. Declaration public Vector2 Position Field Value Type Description Vector2 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Fonts.HorizontalAlignment.html": {
    "href": "api/Evergine.Components.Fonts.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | Evergine Doc",
    "keywords": "Enum HorizontalAlignment Text alignment. Namespace: Evergine.Components.Fonts Assembly: Evergine.Components.dll Syntax public enum HorizontalAlignment Fields Name Description Center Text is centered. Left Default.Text is aligned to the left. Right Text is aligned to the right. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Fonts.html": {
    "href": "api/Evergine.Components.Fonts.html",
    "title": "Namespace Evergine.Components.Fonts | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Fonts Classes Text3DMesh The text 3D component. Text3DRenderer Render text 3D. Structs GlyphRenderInfo The render info to draw a glyph. LineInfo The text line info to render. Enums HorizontalAlignment Text alignment. VerticalAlignment Text alignment."
  },
  "api/Evergine.Components.Fonts.LineInfo.html": {
    "href": "api/Evergine.Components.Fonts.LineInfo.html",
    "title": "Struct LineInfo | Evergine Doc",
    "keywords": "Struct LineInfo The text line info to render. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Components.Fonts Assembly: Evergine.Components.dll Syntax public struct LineInfo Fields AlignmentOffsetX The offset X need for different horizontal alignments (Left, Center, Right). Declaration public float AlignmentOffsetX Field Value Type Description float Glyphs The line glyphs collection. Declaration public List<GlyphRenderInfo> Glyphs Field Value Type Description List<GlyphRenderInfo> Position The text line start position. Declaration public Vector2 Position Field Value Type Description Vector2 Size The bounding box of the text line. Declaration public Vector2 Size Field Value Type Description Vector2 Text The single line text. Declaration public string Text Field Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Fonts.Text3DMesh.html": {
    "href": "api/Evergine.Components.Fonts.Text3DMesh.html",
    "title": "Class Text3DMesh | Evergine Doc",
    "keywords": "Class Text3DMesh The text 3D component. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent Text3DMesh Implements IDependencyObject Inherited Members MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Fonts Assembly: Evergine.Components.dll Syntax public class Text3DMesh : MeshComponent, IDependencyObject Constructors Text3DMesh() Initializes a new instance of the Text3DMesh class. Declaration public Text3DMesh() Properties Color Gets or sets the Color value. Declaration public Color Color { get; set; } Property Value Type Description Color Ellipsis Gets or sets a value indicating whether the text add elllipsis to the end when the text haven't enough space. Declaration public bool Ellipsis { get; set; } Property Value Type Description bool Font Gets or sets the text font. Declaration public Font Font { get; set; } Property Value Type Description Font HorizontalAlignment Gets or sets the horizontal text alignment. Values: Left, Center or Right Default: Left. Declaration public HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment Layer Gets or sets the layer. Declaration public RenderLayerDescription Layer { get; set; } Property Value Type Description RenderLayerDescription LineSpacing Gets or sets the spacing between text lines. Declaration public float LineSpacing { get; set; } Property Value Type Description float Model Gets the model data. Declaration public Model Model { get; } Property Value Type Description Model ModelMeshName Gets the mesh name to render. Declaration public string ModelMeshName { get; } Property Value Type Description string Origin Gets or sets the text origin (Default top-left corner). Declaration public Vector2 Origin { get; set; } Property Value Type Description Vector2 ScaleFactor Gets or sets the font scale factor (Default value 1.0). Declaration public float ScaleFactor { get; set; } Property Value Type Description float Size Gets or sets the maximun size dimension. (This feature is commonly used together with Wrapping and Ellipsis). Declaration public Vector2 Size { get; set; } Property Value Type Description Vector2 Softness Gets or sets the softness of the font. (anti-aliasing). Declaration [RenderPropertyAsFInput(AsSlider = true, DefaultValue = 0.7, MinLimit = 0, MaxLimit = 2)] public float Softness { get; set; } Property Value Type Description float Text Gets or sets the Text value. Declaration public string Text { get; set; } Property Value Type Description string TextSize Gets the text space size. Declaration public Vector2 TextSize { get; } Property Value Type Description Vector2 VerticalAlignment Gets or sets the vertical text alignment. Values: Top, Center or Bottom Default: Top. Declaration public VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment Wrapping Gets or sets a value indicating whether the text can do wrapping. Declaration public bool Wrapping { get; set; } Property Value Type Description bool Methods Destroy() Destroy this object. Declaration public override void Destroy() Overrides Evergine.Framework.AttachableObject.Destroy() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Components.Graphics3D.MeshComponent.OnAttached() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Fonts.Text3DRenderer.html": {
    "href": "api/Evergine.Components.Fonts.Text3DRenderer.html",
    "title": "Class Text3DRenderer | Evergine Doc",
    "keywords": "Class Text3DRenderer Render text 3D. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Drawable Drawable3D Text3DRenderer Implements IDependencyObject Inherited Members Drawable3D.RenderFlags Drawable3D.CastShadows Drawable3D.DrawDebugLines() Drawable.DrawableType Drawable.RenderManager Drawable.IsCullingEnabled Drawable.BoundingBox Drawable.DebugBoundingbox Drawable.OrderBias Drawable.BaseDraw(DrawContext) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Fonts Assembly: Evergine.Components.dll Syntax public class Text3DRenderer : Drawable3D, IDependencyObject Fields Text3DMesh The text 3D component. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] public Text3DMesh Text3DMesh Field Value Type Description Text3DMesh Transform The transform 3D component. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] public Transform3D Transform Field Value Type Description Transform3D renderMeshInfo The render mesh info. Declaration protected RenderMeshInfo renderMeshInfo Field Value Type Description RenderMeshInfo Properties DebugMode Gets or sets a value indicating whether debug mode is enabled. Declaration public bool DebugMode { get; set; } Property Value Type Description bool Methods Draw(DrawContext) Allows to perform custom drawing. Declaration public override void Draw(DrawContext drawContext) Parameters Type Name Description DrawContext drawContext The draw context. Overrides Evergine.Framework.Drawable.Draw(Evergine.Framework.Graphics.DrawContext) Remarks This method will only be called if all the following points are true: The entity passes the culling test. The parent of the owner Evergine.Framework.Entity of the Evergine.Framework.Drawable cascades its visibility to its children and it is visible. The Evergine.Framework.Drawable is active. The owner Evergine.Framework.Entity of the Evergine.Framework.Drawable is active and visible. OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Drawable.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Drawable.OnDetach() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Fonts.VerticalAlignment.html": {
    "href": "api/Evergine.Components.Fonts.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | Evergine Doc",
    "keywords": "Enum VerticalAlignment Text alignment. Namespace: Evergine.Components.Fonts Assembly: Evergine.Components.dll Syntax public enum VerticalAlignment Fields Name Description Bottom Text is aligned to the bottom. Center Text is aligned to the center. Top Default.Text is aligned to the top. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics2D.html": {
    "href": "api/Evergine.Components.Graphics2D.html",
    "title": "Namespace Evergine.Components.Graphics2D | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Graphics2D Classes LineMeshRenderer2D Renders a line mesh on the screen. Sprite Represents a 2D image. Such image is loaded from a content file (.wpk), which is generated from a main PNG or JPEG file format. SpriteRenderer Renders a Sprite on the screen. The owner Evergine.Framework.Entity must contain the Sprite to be drawn, plus a Evergine.Framework.Graphics.Transform2D."
  },
  "api/Evergine.Components.Graphics2D.LineMeshRenderer2D.html": {
    "href": "api/Evergine.Components.Graphics2D.LineMeshRenderer2D.html",
    "title": "Class LineMeshRenderer2D | Evergine Doc",
    "keywords": "Class LineMeshRenderer2D Renders a line mesh on the screen. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Drawable Drawable2D LineMeshRenderer2D Implements IDependencyObject Inherited Members Drawable2D.Delta Drawable2D.DebugAlpha Drawable2D.Transform2D Drawable.DrawableType Drawable.RenderManager Drawable.IsCullingEnabled Drawable.BoundingBox Drawable.DebugBoundingbox Drawable.OrderBias Drawable.BaseDraw(DrawContext) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics2D Assembly: Evergine.Components.dll Syntax [DataContract(Namespace = \"Evergine.Components.Graphics2D\")] public class LineMeshRenderer2D : Drawable2D, IDependencyObject Fields lineMesh LineMeshBase to render. Declaration [BindComponent(false, true, BindComponentSource.Owner, null, true)] protected LineMeshBase lineMesh Field Value Type Description LineMeshBase Properties Layer Gets or sets the type of the layer. Declaration public override RenderLayerDescription Layer { get; set; } Property Value Type Description RenderLayerDescription The type of the layer. Overrides Evergine.Framework.Graphics.Drawable2D.Layer Methods Draw(DrawContext) Allows to perform custom drawing. Declaration public override void Draw(DrawContext drawContext) Parameters Type Name Description DrawContext drawContext The draw context. Overrides Evergine.Framework.Drawable.Draw(Evergine.Framework.Graphics.DrawContext) Remarks This method will only be called if all the following points are true: The entity passes the culling test. The parent of the owner Evergine.Framework.Entity of the Evergine.Framework.Drawable cascades its visibility to its children and it is visible. The Evergine.Framework.Drawable is active. The owner Evergine.Framework.Entity of the Evergine.Framework.Drawable is active and visible. DrawDebugLines() Helper method that draws debug lines. Declaration protected override void DrawDebugLines() Overrides Evergine.Framework.Graphics.Drawable2D.DrawDebugLines() Remarks This method will only work on debug mode and if RenderManager.DebugLines /> is set to true. OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Drawable.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Drawable.OnDetach() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics2D.Sprite.html": {
    "href": "api/Evergine.Components.Graphics2D.Sprite.html",
    "title": "Class Sprite | Evergine Doc",
    "keywords": "Class Sprite Represents a 2D image. Such image is loaded from a content file (.wpk), which is generated from a main PNG or JPEG file format. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Sprite Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics2D Assembly: Evergine.Components.dll Syntax public class Sprite : Component, IDependencyObject Constructors Sprite() Initializes a new instance of the Sprite class based on a content file. Declaration public Sprite() Sprite(Texture) Initializes a new instance of the Sprite class based on a texture. See Texture for more information. Declaration public Sprite(Texture texture) Parameters Type Name Description Texture texture The texture. Exceptions Type Condition ArgumentException Texture can not be null. Sprite(Texture, SamplerState) Initializes a new instance of the Sprite class. Declaration public Sprite(Texture texture, SamplerState sampler) Parameters Type Name Description Texture texture The texture. SamplerState sampler The sampler. Fields Transform2D Required 2D transform. See Transform2D for more information. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] public Transform2D Transform2D Field Value Type Description Transform2D sampler The sprite sampler. Declaration protected SamplerState sampler Field Value Type Description SamplerState sliceIndex Only when use textures (Texture2DArray). Declaration protected int sliceIndex Field Value Type Description int texture The sprite texture. Declaration protected Texture texture Field Value Type Description Texture Properties Sampler Gets or sets the sampler. See SamplerState for more information. Declaration public SamplerState Sampler { get; set; } Property Value Type Description SamplerState SliceIndex Gets or sets the array slice index of texture (Only Texture2DArray). Declaration public int SliceIndex { get; set; } Property Value Type Description int SourceRectangle Gets or sets the Rectangle that represents this sprite in case it is part of a bigger image. Most of the cases this field will be null, which means the entire texture is used. On the other side, if a value is provided, will mean the rectangle (inside the original texture's rectangle) to be drawn. Declaration public Rectangle? SourceRectangle { get; set; } Property Value Type Description Rectangle? Texture Gets or sets the texture. Such is the in-memory representation for the given asset. See Texture for more information. Declaration public Texture Texture { get; set; } Property Value Type Description Texture The texture. TintColor Gets or sets the tint color. Each pixel of the sprite will be multiplied by such color during the drawing. By default, it is white. Declaration public Color TintColor { get; set; } Property Value Type Description Color The tint color. Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() UpdateSourceRectangle() The update source rectangle. Declaration protected void UpdateSourceRectangle() Exceptions Type Condition ObjectDisposedException Sprite has been disposed. Events SamplerChanged Event fired when this sprite sampler is changed Declaration public event EventHandler SamplerChanged Event Type Type Description EventHandler TextureChanged Event fired when this sprite texture is changed Declaration public event EventHandler TextureChanged Event Type Type Description EventHandler Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics2D.SpriteRenderer.html": {
    "href": "api/Evergine.Components.Graphics2D.SpriteRenderer.html",
    "title": "Class SpriteRenderer | Evergine Doc",
    "keywords": "Class SpriteRenderer Renders a Sprite on the screen. The owner Evergine.Framework.Entity must contain the Sprite to be drawn, plus a Evergine.Framework.Graphics.Transform2D. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Drawable Drawable2D SpriteRenderer Implements IDependencyObject Inherited Members Drawable2D.Delta Drawable2D.DebugAlpha Drawable2D.Transform2D Drawable2D.Layer Drawable2D.DrawDebugLines() Drawable.DrawableType Drawable.RenderManager Drawable.IsCullingEnabled Drawable.BoundingBox Drawable.DebugBoundingbox Drawable.OrderBias Drawable.BaseDraw(DrawContext) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics2D Assembly: Evergine.Components.dll Syntax public class SpriteRenderer : Drawable2D, IDependencyObject Constructors SpriteRenderer() Initializes a new instance of the SpriteRenderer class. Declaration public SpriteRenderer() Fields Sprite Required Sprite. It provides the in memory representation for a visual asset. Declaration [BindComponent(false, true, BindComponentSource.Owner, null, true)] public Sprite Sprite Field Value Type Description Sprite Properties DrawMode Gets or sets the draw mode. Declaration public SpriteDrawMode DrawMode { get; set; } Property Value Type Description SpriteDrawMode Methods Draw(DrawContext) Allows to perform custom drawing. Declaration public override void Draw(DrawContext drawContext) Parameters Type Name Description DrawContext drawContext The draw context. Overrides Evergine.Framework.Drawable.Draw(Evergine.Framework.Graphics.DrawContext) Remarks This method will only be called if all the following points are true: The entity passes the culling test. The parent of the owner Evergine.Framework.Entity of the Evergine.Framework.Drawable cascades its visibility to its children and it is visible. The Evergine.Framework.Drawable is active. The owner Evergine.Framework.Entity of the Evergine.Framework.Drawable is active and visible. OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Drawable.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDestroy() Invoked when the object is going to be disposed. Declaration protected override void OnDestroy() Overrides Evergine.Framework.Component.OnDestroy() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Drawable.OnDetach() OnLoaded() Invoked when the object is loaded. Declaration protected override void OnLoaded() Overrides Evergine.Framework.Component.OnLoaded() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.Billboard.html": {
    "href": "api/Evergine.Components.Graphics3D.Billboard.html",
    "title": "Class Billboard | Evergine Doc",
    "keywords": "Class Billboard Represents a 2D image. Such image is loaded from a content file (.wpk), which is generated from a main PNG or JPEG file format. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Billboard Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class Billboard : Component, IDependencyObject Constructors Billboard() Initializes a new instance of the Billboard class based on a content file. Declaration public Billboard() Billboard(Texture) Initializes a new instance of the Billboard class based on a texture. See Texture for more information. Declaration public Billboard(Texture texture) Parameters Type Name Description Texture texture The texture. Exceptions Type Condition ArgumentException Texture can not be null. Fields sampler The billboard sampler. Declaration protected SamplerState sampler Field Value Type Description SamplerState texture The billboard texture. Declaration protected Texture texture Field Value Type Description Texture Properties BillboardType Gets or sets the Billboard look at camera type. Declaration public BillboardType BillboardType { get; set; } Property Value Type Description BillboardType FlipMode Gets or sets the flip mode. Declaration public FlipMode FlipMode { get; set; } Property Value Type Description FlipMode Origin Gets or sets the Billboard Origin. The origin (also known as pivot) from where the entity scales, rotates and translates. Its values are included in [0, 1] where (0, 0) indicates the top left corner. Such values are percentages where 1 means the 100% of the rectangle's width/height. Declaration public Vector2 Origin { get; set; } Property Value Type Description Vector2 Rotation Gets or sets the Billboard rotation. Declaration public float Rotation { get; set; } Property Value Type Description float Sampler Gets or sets the sampler. See SamplerState for more information. Declaration public SamplerState Sampler { get; set; } Property Value Type Description SamplerState Texture Gets or sets the texture. Such is the in-memory representation for the given asset. See Texture for more information. Declaration public Texture Texture { get; set; } Property Value Type Description Texture The texture. TintColor Gets or sets the tint color. Each pixel of the Billboard will be multiplied by such color during the drawing. By default, it is white. Declaration public Color TintColor { get; set; } Property Value Type Description Color The tint color. Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() Events SamplerChanged Event fired when this sprite sampler is changed Declaration public event EventHandler<SamplerState> SamplerChanged Event Type Type Description EventHandler<SamplerState> TextureChanged Event fired when this sprite texture is changed Declaration public event EventHandler<Texture> TextureChanged Event Type Type Description EventHandler<Texture> Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.BillboardRenderer.html": {
    "href": "api/Evergine.Components.Graphics3D.BillboardRenderer.html",
    "title": "Class BillboardRenderer | Evergine Doc",
    "keywords": "Class BillboardRenderer Renders a Billboard on the screen. The owner Evergine.Framework.Entity must contain the Billboard to be drawn, plus a Transform3D. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Drawable Drawable3D BillboardRenderer Implements IDependencyObject Inherited Members Drawable3D.RenderFlags Drawable3D.CastShadows Drawable3D.DrawDebugLines() Drawable.DrawableType Drawable.RenderManager Drawable.IsCullingEnabled Drawable.BoundingBox Drawable.DebugBoundingbox Drawable.OrderBias Drawable.BaseDraw(DrawContext) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class BillboardRenderer : Drawable3D, IDependencyObject Constructors BillboardRenderer() Initializes a new instance of the BillboardRenderer class. Declaration public BillboardRenderer() Fields Billboard Required Transform3D. It provides where to draw the Billboard, which rotation to apply and which scale. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] public Billboard Billboard Field Value Type Description Billboard Transform3D Required Transform3D. It provides where to draw the Billboard, which rotation to apply and which scale. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] public Transform3D Transform3D Field Value Type Description Transform3D assetsService The Assets Service. Declaration [BindService(true)] protected AssetsService assetsService Field Value Type Description AssetsService Properties Layer Gets or sets the type of the layer. Declaration public RenderLayerDescription Layer { get; set; } Property Value Type Description RenderLayerDescription The type of the layer. Methods Draw(DrawContext) Allows to perform custom drawing. Declaration public override void Draw(DrawContext drawContext) Parameters Type Name Description DrawContext drawContext The draw context. Overrides Evergine.Framework.Drawable.Draw(Evergine.Framework.Graphics.DrawContext) Remarks This method will only be called if all the following points are true: The entity passes the culling test. The parent of the owner Evergine.Framework.Entity of the Evergine.Framework.Drawable cascades its visibility to its children and it is visible. The Evergine.Framework.Drawable is active. The owner Evergine.Framework.Entity of the Evergine.Framework.Drawable is active and visible. OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Drawable.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDestroy() Invoked when the object is going to be disposed. Declaration protected override void OnDestroy() Overrides Evergine.Framework.Component.OnDestroy() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Drawable.OnDetach() OnLoaded() Invoked when the object is loaded. Declaration protected override void OnLoaded() Overrides Evergine.Framework.Component.OnLoaded() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.CapsuleMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.CapsuleMesh.html",
    "title": "Class CapsuleMesh | Evergine Doc",
    "keywords": "Class CapsuleMesh Capsule primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh CapsuleMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class CapsuleMesh : PrimitiveBaseMesh, IDependencyObject Constructors CapsuleMesh() Initializes a new instance of the CapsuleMesh class. Declaration public CapsuleMesh() Properties Height Gets or sets the height of the capsule. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Height { get; set; } Property Value Type Description float Radius Gets or sets the radius of the capsule. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Radius { get; set; } Property Value Type Description float Tessellation Gets or sets the tessellation of the capsule. Must be even. Declaration [RenderPropertyAsInput(2, 25, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2, DefaultValue = 16)] public int Tessellation { get; set; } Property Value Type Description int Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.ConeMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.ConeMesh.html",
    "title": "Class ConeMesh | Evergine Doc",
    "keywords": "Class ConeMesh Cone primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh ConeMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class ConeMesh : PrimitiveBaseMesh, IDependencyObject Constructors ConeMesh() Initializes a new instance of the ConeMesh class. Declaration public ConeMesh() Properties Diameter Gets or sets the diameter of the cone. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Diameter { get; set; } Property Value Type Description float Height Gets or sets the height of the cone. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Height { get; set; } Property Value Type Description float Tessellation Gets or sets the tessellation of the cone. Declaration [RenderPropertyAsInput(3, 50, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2, DefaultValue = 16)] public int Tessellation { get; set; } Property Value Type Description int Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.CubeMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.CubeMesh.html",
    "title": "Class CubeMesh | Evergine Doc",
    "keywords": "Class CubeMesh Cube primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh CubeMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class CubeMesh : PrimitiveBaseMesh, IDependencyObject Constructors CubeMesh() Initializes a new instance of the CubeMesh class. Declaration public CubeMesh() Properties Size Gets or sets the size of the cube. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Size { get; set; } Property Value Type Description float UMirror Gets or sets a value indicating whether to flip the horizontal texture coordinate. Declaration public bool UMirror { get; set; } Property Value Type Description bool UOffset Gets or sets the horizontal texture coordinate offset. Declaration public float UOffset { get; set; } Property Value Type Description float UTile Gets or sets the horizontal texture coordinate scale factor. Declaration public float UTile { get; set; } Property Value Type Description float VMirror Gets or sets a value indicating whether to flip the vertical texture coordinate. Declaration public bool VMirror { get; set; } Property Value Type Description bool VOffset Gets or sets the vertical texture coordinate offset. Declaration public float VOffset { get; set; } Property Value Type Description float VTile Gets or sets the vertical texture coordinate scale factor. Declaration public float VTile { get; set; } Property Value Type Description float Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.CylinderMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.CylinderMesh.html",
    "title": "Class CylinderMesh | Evergine Doc",
    "keywords": "Class CylinderMesh Cylinder primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh CylinderMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class CylinderMesh : PrimitiveBaseMesh, IDependencyObject Constructors CylinderMesh() Initializes a new instance of the CylinderMesh class. Declaration public CylinderMesh() Properties Diameter Gets or sets the diameter of the cylinder. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Diameter { get; set; } Property Value Type Description float Height Gets or sets the height of the cylinder. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Height { get; set; } Property Value Type Description float Tessellation Gets or sets the tessellation of the cylinder. Must be greater than 3. Declaration [RenderPropertyAsInput(3, 50, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2, DefaultValue = 16)] public int Tessellation { get; set; } Property Value Type Description int Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.html": {
    "href": "api/Evergine.Components.Graphics3D.html",
    "title": "Namespace Evergine.Components.Graphics3D | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Graphics3D Classes Billboard Represents a 2D image. Such image is loaded from a content file (.wpk), which is generated from a main PNG or JPEG file format. BillboardRenderer Renders a Billboard on the screen. The owner Evergine.Framework.Entity must contain the Billboard to be drawn, plus a Transform3D. CapsuleMesh Capsule primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. ConeMesh Cone primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. CubeMesh Cube primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. CylinderMesh Cylinder primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. LineMeshRenderer3D Renders a line mesh on the screen. PlaneMesh Plane primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. PostProcessingGraphRenderer Renders a post-processing graph on the screen. PrimitiveBaseMesh Base class for primitive mesh components. PyramidMesh Pyramid primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. SphereMesh Sphere primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Spinner Spins a Evergine.Framework.Graphics.Transform3D component from an Evergine.Framework.Entity around any arbitrary axis. TeapotMesh Teapot primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. TorusMesh Torus primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Enums PlaneMesh.NormalAxis Represents axis aligned normal values."
  },
  "api/Evergine.Components.Graphics3D.LineMeshRenderer3D.html": {
    "href": "api/Evergine.Components.Graphics3D.LineMeshRenderer3D.html",
    "title": "Class LineMeshRenderer3D | Evergine Doc",
    "keywords": "Class LineMeshRenderer3D Renders a line mesh on the screen. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Drawable Drawable3D LineMeshRenderer3D Implements IDependencyObject Inherited Members Drawable3D.RenderFlags Drawable3D.CastShadows Drawable.DrawableType Drawable.RenderManager Drawable.IsCullingEnabled Drawable.BoundingBox Drawable.DebugBoundingbox Drawable.OrderBias Drawable.BaseDraw(DrawContext) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class LineMeshRenderer3D : Drawable3D, IDependencyObject Constructors LineMeshRenderer3D() Initializes a new instance of the LineMeshRenderer3D class. Declaration public LineMeshRenderer3D() Fields lineMesh LineMeshBase to render. Declaration [BindComponent(false, true, BindComponentSource.Owner, null, true)] protected LineMeshBase lineMesh Field Value Type Description LineMeshBase transform The Evergine.Framework.Graphics.Transform3D. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform Field Value Type Description Transform3D Properties Layer Gets or sets the type of the layer. Declaration public RenderLayerDescription Layer { get; set; } Property Value Type Description RenderLayerDescription The type of the layer. Methods Draw(DrawContext) Allows to perform custom drawing. Declaration public override void Draw(DrawContext drawContext) Parameters Type Name Description DrawContext drawContext The draw context. Overrides Evergine.Framework.Drawable.Draw(Evergine.Framework.Graphics.DrawContext) Remarks This method will only be called if all the following points are true: The entity passes the culling test. The parent of the owner Evergine.Framework.Entity of the Evergine.Framework.Drawable cascades its visibility to its children and it is visible. The Evergine.Framework.Drawable is active. The owner Evergine.Framework.Entity of the Evergine.Framework.Drawable is active and visible. DrawDebugLines() Helper method that draws debug lines showing the bounding of this instance. Declaration protected override void DrawDebugLines() Overrides Evergine.Framework.Graphics.Drawable3D.DrawDebugLines() Remarks This method will only work on debug mode and if Evergine.Framework.Managers.RenderManager.DebugLines is set to true. OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Drawable.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Drawable.OnDetach() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.PlaneMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.PlaneMesh.html",
    "title": "Class PlaneMesh | Evergine Doc",
    "keywords": "Class PlaneMesh Plane primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh PlaneMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class PlaneMesh : PrimitiveBaseMesh, IDependencyObject Constructors PlaneMesh() Initializes a new instance of the PlaneMesh class. Declaration public PlaneMesh() Properties Height Gets or sets the plane height. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Height { get; set; } Property Value Type Description float Origin Gets or sets the normal of the plane. Declaration public Vector2 Origin { get; set; } Property Value Type Description Vector2 PlaneNormal Gets or sets the normal of the plane. Declaration public PlaneMesh.NormalAxis PlaneNormal { get; set; } Property Value Type Description PlaneMesh.NormalAxis TwoSides Gets or sets a value indicating whether the plane has two sides. Declaration public bool TwoSides { get; set; } Property Value Type Description bool UMirror Gets or sets a value indicating whether to mirror the U (horizontal) texture coordinate. Declaration public bool UMirror { get; set; } Property Value Type Description bool UOffset Gets or sets the horizontal texture coordinate offset. Declaration public float UOffset { get; set; } Property Value Type Description float UTile Gets or sets the horizontal texture coordinate scale factor. Declaration public float UTile { get; set; } Property Value Type Description float VMirror Gets or sets a value indicating whether to mirror the V (vertical) texture coordinate. Declaration public bool VMirror { get; set; } Property Value Type Description bool VOffset Gets or sets the vertical texture coordinate offset. Declaration public float VOffset { get; set; } Property Value Type Description float VTile Gets or sets the vertical texture coordinate scale factor. Declaration public float VTile { get; set; } Property Value Type Description float Width Gets or sets the width of the plane. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Width { get; set; } Property Value Type Description float Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() OnLoaded() Invoked when the object is loaded. Declaration protected override void OnLoaded() Overrides Evergine.Framework.Component.OnLoaded() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.PlaneMesh.NormalAxis.html": {
    "href": "api/Evergine.Components.Graphics3D.PlaneMesh.NormalAxis.html",
    "title": "Enum PlaneMesh.NormalAxis | Evergine Doc",
    "keywords": "Enum PlaneMesh.NormalAxis Represents axis aligned normal values. Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public enum PlaneMesh.NormalAxis Fields Name Description XNegative Negative in X axis. XPositive Positive in X axis. YNegative Negative in Y axis. YPositive Positive in Y axis. ZNegative Negative in Z axis. ZPositive Positive in Z axis. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.PostProcessingGraphRenderer.html": {
    "href": "api/Evergine.Components.Graphics3D.PostProcessingGraphRenderer.html",
    "title": "Class PostProcessingGraphRenderer | Evergine Doc",
    "keywords": "Class PostProcessingGraphRenderer Renders a post-processing graph on the screen. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Drawable Drawable3D PostProcessingGraphRenderer Implements IDependencyObject Inherited Members Drawable3D.RenderFlags Drawable3D.CastShadows Drawable3D.DrawDebugLines() Drawable.DrawableType Drawable.RenderManager Drawable.IsCullingEnabled Drawable.BoundingBox Drawable.DebugBoundingbox Drawable.OrderBias Drawable.BaseDraw(DrawContext) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class PostProcessingGraphRenderer : Drawable3D, IDependencyObject Constructors PostProcessingGraphRenderer() Initializes a new instance of the PostProcessingGraphRenderer class. Declaration public PostProcessingGraphRenderer() Fields Transform3D Required Transform3D. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D Transform3D Field Value Type Description Transform3D assetsService The Assets Service. Declaration [BindService(true)] protected AssetsService assetsService Field Value Type Description AssetsService collider Required Evergine.Framework.Physics3D.Collider3D. Declaration [BindComponent(true, false, BindComponentSource.Owner, null, true)] protected BoxCollider3D collider Field Value Type Description BoxCollider3D graphicsContext The Graphics Context. Declaration [BindService(true)] protected GraphicsContext graphicsContext Field Value Type Description GraphicsContext Properties IsGlobal Gets or sets a value indicating whether the post-processing graph is applied to whole cameras or only the cameras inside of its volume. Declaration public bool IsGlobal { get; set; } Property Value Type Description bool LayerOrder Gets or sets the type of the layer. Declaration public int LayerOrder { get; set; } Property Value Type Description int ppGraph Gets or sets the post-processing graph. Declaration public PostProcessingGraph ppGraph { get; set; } Property Value Type Description PostProcessingGraph Methods Draw(DrawContext) Allows to perform custom drawing. Declaration public override void Draw(DrawContext drawContext) Parameters Type Name Description DrawContext drawContext The draw context. Overrides Evergine.Framework.Drawable.Draw(Evergine.Framework.Graphics.DrawContext) Remarks This method will only be called if all the following points are true: The entity passes the culling test. The parent of the owner Evergine.Framework.Entity of the Evergine.Framework.Drawable cascades its visibility to its children and it is visible. The Evergine.Framework.Drawable is active. The owner Evergine.Framework.Entity of the Evergine.Framework.Drawable is active and visible. OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Drawable.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDestroy() Invoked when the object is going to be disposed. Declaration protected override void OnDestroy() Overrides Evergine.Framework.Component.OnDestroy() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Drawable.OnDetach() OnLoaded() Invoked when the object is loaded. Declaration protected override void OnLoaded() Overrides Evergine.Framework.Component.OnLoaded() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.PrimitiveBaseMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.PrimitiveBaseMesh.html",
    "title": "Class PrimitiveBaseMesh | Evergine Doc",
    "keywords": "Class PrimitiveBaseMesh Base class for primitive mesh components. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh CapsuleMesh ConeMesh CubeMesh CylinderMesh PlaneMesh PyramidMesh SphereMesh TeapotMesh TorusMesh Implements IDependencyObject Inherited Members MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public abstract class PrimitiveBaseMesh : MeshComponent, IDependencyObject Constructors PrimitiveBaseMesh() Initializes a new instance of the PrimitiveBaseMesh class. Declaration public PrimitiveBaseMesh() Properties Model Gets the model data. Declaration public Model Model { get; } Property Value Type Description Model ModelMeshName Gets the mesh name to render. Declaration public string ModelMeshName { get; } Property Value Type Description string Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected abstract void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Destroy() Destroy this object. Declaration public override void Destroy() Overrides Evergine.Framework.AttachableObject.Destroy() GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected abstract int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. NotifyPropertyChange() Notifies that the primitive definition has changed and the model should be refreshed. Declaration protected void NotifyPropertyChange() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Components.Graphics3D.MeshComponent.OnAttached() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.PyramidMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.PyramidMesh.html",
    "title": "Class PyramidMesh | Evergine Doc",
    "keywords": "Class PyramidMesh Pyramid primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh PyramidMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class PyramidMesh : PrimitiveBaseMesh, IDependencyObject Constructors PyramidMesh() Initializes a new instance of the PyramidMesh class. Declaration public PyramidMesh() Properties Size Gets or sets the size of the pyramid. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Size { get; set; } Property Value Type Description float Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.SphereMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.SphereMesh.html",
    "title": "Class SphereMesh | Evergine Doc",
    "keywords": "Class SphereMesh Sphere primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh SphereMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class SphereMesh : PrimitiveBaseMesh, IDependencyObject Constructors SphereMesh() Initializes a new instance of the SphereMesh class. Declaration public SphereMesh() Properties Diameter Gets or sets the diameter of the sphere. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Diameter { get; set; } Property Value Type Description float Tessellation Gets or sets the tessellation of the sphere. Must be greater than 3. Declaration [RenderPropertyAsInput(3, 50, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2, DefaultValue = 16)] public int Tessellation { get; set; } Property Value Type Description int UMirror Gets or sets a value indicating whether to flip the horizontal texture coordinate. Declaration public bool UMirror { get; set; } Property Value Type Description bool VMirror Gets or sets a value indicating whether to flip the vertical texture coordinate. Declaration public bool VMirror { get; set; } Property Value Type Description bool Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.Spinner.html": {
    "href": "api/Evergine.Components.Graphics3D.Spinner.html",
    "title": "Class Spinner | Evergine Doc",
    "keywords": "Class Spinner Spins a Evergine.Framework.Graphics.Transform3D component from an Evergine.Framework.Entity around any arbitrary axis. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior Spinner Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class Spinner : Behavior, IDependencyObject Constructors Spinner() Initializes a new instance of the Spinner class. Declaration public Spinner() Fields AxisIncrease The increase amount by axis. Declaration public Vector3 AxisIncrease Field Value Type Description Vector3 Methods Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.TeapotMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.TeapotMesh.html",
    "title": "Class TeapotMesh | Evergine Doc",
    "keywords": "Class TeapotMesh Teapot primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh TeapotMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class TeapotMesh : PrimitiveBaseMesh, IDependencyObject Constructors TeapotMesh() Initializes a new instance of the TeapotMesh class. Declaration public TeapotMesh() Properties Size Gets or sets the size of the teapot. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Size { get; set; } Property Value Type Description float Tessellation Gets or sets the tessellation of the teapot. Must be greater than 3. Declaration [RenderPropertyAsInput(3, 25, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2, DefaultValue = 16)] public int Tessellation { get; set; } Property Value Type Description int Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Graphics3D.TorusMesh.html": {
    "href": "api/Evergine.Components.Graphics3D.TorusMesh.html",
    "title": "Class TorusMesh | Evergine Doc",
    "keywords": "Class TorusMesh Torus primitive mesh. To render this mesh use the Evergine.Components.Graphics3D.MeshRenderer class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent PrimitiveBaseMesh TorusMesh Implements IDependencyObject Inherited Members PrimitiveBaseMesh.Model PrimitiveBaseMesh.ModelMeshName PrimitiveBaseMesh.OnAttached() PrimitiveBaseMesh.NotifyPropertyChange() PrimitiveBaseMesh.Destroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Graphics3D Assembly: Evergine.Components.dll Syntax public class TorusMesh : PrimitiveBaseMesh, IDependencyObject Constructors TorusMesh() Initializes a new instance of the TorusMesh class. Declaration public TorusMesh() Properties Diameter Gets or sets the diameter of the torus. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Diameter { get; set; } Property Value Type Description float Tessellation Gets or sets the tessellation of the torus. Must be greater than 3. Declaration [RenderPropertyAsInput(3, 50, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2, DefaultValue = 16)] public int Tessellation { get; set; } Property Value Type Description int Thickness Gets or sets the thickness of the torus. Must be greater than 0. Declaration [RenderPropertyAsFInput(1.1920929E-07, 3.4028235E+38)] public float Thickness { get; set; } Property Value Type Description float Methods Build(PrimitiveModelBuilder) Builds a primitive instance using the given builder. Declaration protected override void Build(PrimitiveModelBuilder builder) Parameters Type Name Description PrimitiveModelBuilder builder The primitive model builder. Overrides PrimitiveBaseMesh.Build(PrimitiveModelBuilder) GetPrimitiveHashCode() Gets an unique identifier of the primitive definition. Declaration protected override int GetPrimitiveHashCode() Returns Type Description int An unique identifier of the primitive definition. Overrides PrimitiveBaseMesh.GetPrimitiveHashCode() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.BezierPointInfo.html": {
    "href": "api/Evergine.Components.Primitives.BezierPointInfo.html",
    "title": "Class BezierPointInfo | Evergine Doc",
    "keywords": "Class BezierPointInfo A class that contains the information of each point of a LineBezierMesh. Inheritance object BezierPointInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class BezierPointInfo Fields Color The color of the line at this point. Declaration public Color Color Field Value Type Description Color InboundHandle The relative position of the inbound handle. Declaration [RenderProperty(ShowConditionFunction = \"HasInboundHandleVisible\")] public Vector3 InboundHandle Field Value Type Description Vector3 OutboundHandle The relative position of the outbound handle. Declaration [RenderProperty(ShowConditionFunction = \"HasOutboundHandleVisible\")] public Vector3 OutboundHandle Field Value Type Description Vector3 Position The position of the point. Declaration public Vector3 Position Field Value Type Description Vector3 Thickness The thickness of the line at this point. Declaration public float Thickness Field Value Type Description float Methods ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.BezierTypes.html": {
    "href": "api/Evergine.Components.Primitives.BezierTypes.html",
    "title": "Enum BezierTypes | Evergine Doc",
    "keywords": "Enum BezierTypes Defines the types of supported Bezier curves. Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public enum BezierTypes Fields Name Description Cubic Bezier of third order Quadratic Bezier of second order Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.html": {
    "href": "api/Evergine.Components.Primitives.html",
    "title": "Namespace Evergine.Components.Primitives | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Primitives Classes BezierPointInfo A class that contains the information of each point of a LineBezierMesh. LineArcMesh Arc primitive mesh component. To render this mesh use the LineMeshRenderer3D class. LineArcMeshBase Arc primitive mesh component. To render this mesh use the LineMeshRenderer3D class. LineBezierMesh Bezier line primitive mesh component. To render this mesh use the LineMeshRenderer3D class. LineCubeMesh Line primitive mesh. To render this mesh use the LineMeshRenderer3D class. LineMesh Line primitive mesh. To render this mesh use the LineMeshRenderer3D class. LineMeshBase Line primitive mesh base component. To render this mesh use the LineMeshRenderer3D class. LinePointInfo A class that contains the information of each point of a LineMeshBase. LinePolygonMesh Arc primitive mesh component. To render this mesh use the LineMeshRenderer3D class. LineRectangleMesh Line primitive mesh. To render this mesh use the LineMeshRenderer3D class. PrimitiveModelBuilder Represents a builder for primitive models. PrimitiveModelCache Cache for models generated using PrimitiveModelBuilder. Enums BezierTypes Defines the types of supported Bezier curves. LineType Defines the line composition types."
  },
  "api/Evergine.Components.Primitives.LineArcMesh.html": {
    "href": "api/Evergine.Components.Primitives.LineArcMesh.html",
    "title": "Class LineArcMesh | Evergine Doc",
    "keywords": "Class LineArcMesh Arc primitive mesh component. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineArcMeshBase LineArcMesh Implements IDependencyObject Inherited Members LineArcMeshBase.radius LineArcMeshBase.thickness LineArcMeshBase.color LineArcMeshBase.angle LineArcMeshBase.tessellation LineArcMeshBase.Radius LineArcMeshBase.Thickness LineArcMeshBase.Color LineArcMeshBase.RefreshMeshes() LineMeshBase.graphicsContext LineMeshBase.is2DMode LineMeshBase.linePoints LineMeshBase.lineType LineMeshBase.isLoop LineMeshBase.Model LineMeshBase.UseWorldSpace LineMeshBase.TexcoordOffset LineMeshBase.DiffuseTexture LineMeshBase.DiffuseSampler LineMeshBase.IsCameraAligned LineMeshBase.TextureTiling LineMeshBase.ModelMeshName LineMeshBase.BoundingBox LineMeshBase.OnAttached() LineMeshBase.OnActivated() LineMeshBase.OnDeactivated() LineMeshBase.OnDetach() LineMeshBase.OnDestroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class LineArcMesh : LineArcMeshBase, IDependencyObject Properties Angle Gets or sets the angle of the arc in degrees. Declaration [RenderPropertyAsFInput(typeof(FloatRadianToDegreeConverter), MinLimit = 0, MaxLimit = 360, Tooltip = \"Angle of the arc in degrees\", AsSlider = true, DesiredChange = 1, DesiredLargeChange = 5)] public float Angle { get; set; } Property Value Type Description float Tessellation Gets or sets the number of iterations used for generating the line mesh. Declaration [RenderPropertyAsInput(MinLimit = 3, MaxLimit = 50, Tooltip = \"The number of iterations used for generating the line mesh\", AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2)] public int Tessellation { get; set; } Property Value Type Description int Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LineArcMeshBase.html": {
    "href": "api/Evergine.Components.Primitives.LineArcMeshBase.html",
    "title": "Class LineArcMeshBase | Evergine Doc",
    "keywords": "Class LineArcMeshBase Arc primitive mesh component. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineArcMeshBase LineArcMesh LinePolygonMesh Implements IDependencyObject Inherited Members LineMeshBase.graphicsContext LineMeshBase.is2DMode LineMeshBase.linePoints LineMeshBase.lineType LineMeshBase.isLoop LineMeshBase.Model LineMeshBase.UseWorldSpace LineMeshBase.TexcoordOffset LineMeshBase.DiffuseTexture LineMeshBase.DiffuseSampler LineMeshBase.IsCameraAligned LineMeshBase.TextureTiling LineMeshBase.ModelMeshName LineMeshBase.BoundingBox LineMeshBase.OnAttached() LineMeshBase.OnActivated() LineMeshBase.OnDeactivated() LineMeshBase.OnDetach() LineMeshBase.OnDestroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public abstract class LineArcMeshBase : LineMeshBase, IDependencyObject Constructors LineArcMeshBase() Initializes a new instance of the LineArcMeshBase class. Declaration public LineArcMeshBase() Fields angle The angle. Declaration protected float angle Field Value Type Description float color Tint color for the texture. Declaration protected Color color Field Value Type Description Color radius The radius. Declaration protected Vector2 radius Field Value Type Description Vector2 tessellation The tessellation. Declaration protected int tessellation Field Value Type Description int thickness Thickness of the lines of the polygon. Declaration protected float thickness Field Value Type Description float Properties Color Gets or sets the color for the line, or tint color for the texture. Declaration [RenderProperty(CustomPropertyName = \"Tint Color\", Tooltip = \"Color for the line, or tint color for the texture\")] public Color Color { get; set; } Property Value Type Description Color Radius Gets or sets the radius. Declaration [RenderProperty(Tooltip = \"Polygon radius\")] public Vector2 Radius { get; set; } Property Value Type Description Vector2 Thickness Gets or sets the line thickness. Declaration [RenderPropertyAsFInput(MinLimit = 0, Tooltip = \"Line thickness\")] public float Thickness { get; set; } Property Value Type Description float Methods RefreshMeshes() Refresh meshes method. Declaration protected override void RefreshMeshes() Overrides LineMeshBase.RefreshMeshes() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LineBezierMesh.html": {
    "href": "api/Evergine.Components.Primitives.LineBezierMesh.html",
    "title": "Class LineBezierMesh | Evergine Doc",
    "keywords": "Class LineBezierMesh Bezier line primitive mesh component. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineBezierMesh Implements IDependencyObject Inherited Members LineMeshBase.graphicsContext LineMeshBase.is2DMode LineMeshBase.linePoints LineMeshBase.lineType LineMeshBase.isLoop LineMeshBase.Model LineMeshBase.UseWorldSpace LineMeshBase.TexcoordOffset LineMeshBase.DiffuseTexture LineMeshBase.DiffuseSampler LineMeshBase.IsCameraAligned LineMeshBase.TextureTiling LineMeshBase.ModelMeshName LineMeshBase.BoundingBox LineMeshBase.OnActivated() LineMeshBase.OnDeactivated() LineMeshBase.OnDetach() LineMeshBase.OnDestroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class LineBezierMesh : LineMeshBase, IDependencyObject Constructors LineBezierMesh() Initializes a new instance of the LineBezierMesh class. Declaration public LineBezierMesh() Properties LinePoints Gets or sets a list with the points that defines the line. Declaration public List<BezierPointInfo> LinePoints { get; set; } Property Value Type Description List<BezierPointInfo> Resolution Gets or sets the resolution of each bezier segment. Declaration [RenderPropertyAsInput(MinLimit = 3, MaxLimit = 50, AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2)] public int Resolution { get; set; } Property Value Type Description int Type Gets or sets the type of bezier curve. Declaration public BezierTypes Type { get; set; } Property Value Type Description BezierTypes Methods CloneLastPoint(BezierPointInfo) Updates last point added with the previous point. Declaration public void CloneLastPoint(BezierPointInfo point) Parameters Type Name Description BezierPointInfo point Last point added to the list. OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides LineMeshBase.OnAttached() RefreshItems(BezierPointInfo) Refresh mesh when a value from the list has changed. Declaration public void RefreshItems(BezierPointInfo point) Parameters Type Name Description BezierPointInfo point point. RefreshMeshes() Refresh meshes method. Declaration protected override void RefreshMeshes() Overrides LineMeshBase.RefreshMeshes() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LineCubeMesh.html": {
    "href": "api/Evergine.Components.Primitives.LineCubeMesh.html",
    "title": "Class LineCubeMesh | Evergine Doc",
    "keywords": "Class LineCubeMesh Line primitive mesh. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineCubeMesh Implements IDependencyObject Inherited Members LineMeshBase.graphicsContext LineMeshBase.is2DMode LineMeshBase.linePoints LineMeshBase.lineType LineMeshBase.isLoop LineMeshBase.Model LineMeshBase.UseWorldSpace LineMeshBase.TexcoordOffset LineMeshBase.DiffuseTexture LineMeshBase.DiffuseSampler LineMeshBase.IsCameraAligned LineMeshBase.TextureTiling LineMeshBase.ModelMeshName LineMeshBase.BoundingBox LineMeshBase.OnAttached() LineMeshBase.OnActivated() LineMeshBase.OnDeactivated() LineMeshBase.OnDetach() LineMeshBase.OnDestroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class LineCubeMesh : LineMeshBase, IDependencyObject Constructors LineCubeMesh() Initializes a new instance of the LineCubeMesh class. Declaration public LineCubeMesh() Properties Color Gets or sets the color for the line, or tint color for the texture. Declaration [RenderProperty(Tooltip = \"Color for the line, or tint color for the texture\")] public Color Color { get; set; } Property Value Type Description Color Origin Gets or sets the origin (also known as pivot) from where the cube scales, rotates and translates. Its values are included in [0, 1] where (0, 0) indicates the top left corner. Such values are percentages where 1 means the 100% of the cube's width/height/depth. Declaration public Vector3 Origin { get; set; } Property Value Type Description Vector3 Size Gets or sets the width of the rectangle to draw. Declaration [RenderProperty(Tooltip = \"Cube Size\")] public Vector3 Size { get; set; } Property Value Type Description Vector3 Thickness Gets or sets the thickness of the rectangle's line to draw. Declaration [RenderPropertyAsFInput(MinLimit = 0, Tooltip = \"Thickness of the rectangle's line\")] public float Thickness { get; set; } Property Value Type Description float Methods RefreshMeshes() Refresh meshes method. Declaration protected override void RefreshMeshes() Overrides LineMeshBase.RefreshMeshes() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LineMesh.html": {
    "href": "api/Evergine.Components.Primitives.LineMesh.html",
    "title": "Class LineMesh | Evergine Doc",
    "keywords": "Class LineMesh Line primitive mesh. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineMesh Implements IDependencyObject Inherited Members LineMeshBase.graphicsContext LineMeshBase.is2DMode LineMeshBase.linePoints LineMeshBase.lineType LineMeshBase.isLoop LineMeshBase.Model LineMeshBase.UseWorldSpace LineMeshBase.TexcoordOffset LineMeshBase.DiffuseTexture LineMeshBase.DiffuseSampler LineMeshBase.IsCameraAligned LineMeshBase.TextureTiling LineMeshBase.ModelMeshName LineMeshBase.BoundingBox LineMeshBase.OnAttached() LineMeshBase.OnActivated() LineMeshBase.OnDeactivated() LineMeshBase.OnDetach() LineMeshBase.OnDestroy() LineMeshBase.RefreshMeshes() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class LineMesh : LineMeshBase, IDependencyObject Properties IsLoop Gets or sets a value indicating whether the first point of the list is appended with the last one. Declaration [RenderProperty(CustomPropertyName = \"Is Loop\", Tooltip = \"Enable this to connect the first and last positions of the line. This forms a closed loop.\")] public bool IsLoop { get; set; } Property Value Type Description bool LinePoints Gets or sets a list with the points that defines the line. Declaration public List<LinePointInfo> LinePoints { get; set; } Property Value Type Description List<LinePointInfo> LineType Gets or sets the type of the line to draw. Declaration [RenderProperty(CustomPropertyName = \"Line Type\", Tooltip = \"The type of the line to draw. Use LineStrip to compose the line connecting the dots. Use LineList to compose the line with isolated, straight line segments\")] public LineType LineType { get; set; } Property Value Type Description LineType Methods CloneLastPoint(LinePointInfo) Updates last point added with the previous point. Declaration public void CloneLastPoint(LinePointInfo point) Parameters Type Name Description LinePointInfo point Last point added to the list. Refresh() Refresh mesh when a value from the list has changed. Declaration public void Refresh() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LineMeshBase.html": {
    "href": "api/Evergine.Components.Primitives.LineMeshBase.html",
    "title": "Class LineMeshBase | Evergine Doc",
    "keywords": "Class LineMeshBase Line primitive mesh base component. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineArcMeshBase LineBezierMesh LineCubeMesh LineMesh LineRectangleMesh Implements IDependencyObject Inherited Members MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public abstract class LineMeshBase : MeshComponent, IDependencyObject Constructors LineMeshBase() Initializes a new instance of the LineMeshBase class. Declaration public LineMeshBase() Fields graphicsContext Graphics Context. Declaration [BindService(true)] protected GraphicsContext graphicsContext Field Value Type Description GraphicsContext is2DMode Indicates whether the mesh will be renderer by a LineMeshRenderer2D. Declaration protected bool is2DMode Field Value Type Description bool isLoop Indicates whether the first point of the list is appended with the last one. Declaration protected bool isLoop Field Value Type Description bool linePoints The line points list. Declaration public List<LinePointInfo> linePoints Field Value Type Description List<LinePointInfo> lineType The line type. Declaration public LineType lineType Field Value Type Description LineType Properties BoundingBox Gets the mesh bounding box. Declaration public override BoundingBox? BoundingBox { get; } Property Value Type Description BoundingBox? The bounding box. Overrides Evergine.Components.Graphics3D.MeshComponent.BoundingBox DiffuseSampler Gets or sets the line diffuse texture. Such is the in-memory representation for the given asset. See Texture for more information. Declaration public SamplerState DiffuseSampler { get; set; } Property Value Type Description SamplerState The line diffuse texture. DiffuseTexture Gets or sets the line diffuse texture. Such is the in-memory representation for the given asset. See Texture for more information. Declaration public Texture DiffuseTexture { get; set; } Property Value Type Description Texture The line diffuse texture. IsCameraAligned Gets or sets a value indicating whether the line will be oriented to the camera. Declaration [RenderProperty(CustomPropertyName = \"Is Camera Aligned\", Tooltip = \"Indicates whether the line will be oriented to the camera\")] public bool IsCameraAligned { get; set; } Property Value Type Description bool Model Gets or sets the model data. Declaration public override Model Model { get; set; } Property Value Type Description Model Overrides Evergine.Components.Graphics3D.MeshComponent.Model ModelMeshName Gets or sets the specify the mesh name to render. Declaration public override string ModelMeshName { get; } Property Value Type Description string Overrides Evergine.Components.Graphics3D.MeshComponent.ModelMeshName TexcoordOffset Gets or sets the texture coordinates offset. Declaration [RenderProperty(CustomPropertyName = \"Texture Coordinate Offset\", Tooltip = \"Texture coordinate offset\")] public Vector2 TexcoordOffset { get; set; } Property Value Type Description Vector2 TextureTiling Gets or sets a value indicating texture tiling (U,V). Declaration [RenderProperty(CustomPropertyName = \"Texture Tiling\", Tooltip = \"Sets the tiling for the texture [U,V] coordinates\")] public Vector2 TextureTiling { get; set; } Property Value Type Description Vector2 UseWorldSpace Gets or sets a value indicating whether the points are considered as world space coordinates, instead of being subject to the Evergine.Framework.Graphics.Transform3D of the owner Evergine.Framework.Entity of this component. Declaration [RenderProperty(CustomPropertyName = \"Use World Space\", Tooltip = \"Indicates whether the points are considered as world space coordinates\")] public bool UseWorldSpace { get; set; } Property Value Type Description bool Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Components.Graphics3D.MeshComponent.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDestroy() Invoked when the object is going to be disposed. Declaration protected override void OnDestroy() Overrides Evergine.Components.Graphics3D.MeshComponent.OnDestroy() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() RefreshMeshes() Refresh meshes method. Declaration protected virtual void RefreshMeshes() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LinePointInfo.html": {
    "href": "api/Evergine.Components.Primitives.LinePointInfo.html",
    "title": "Class LinePointInfo | Evergine Doc",
    "keywords": "Class LinePointInfo A class that contains the information of each point of a LineMeshBase. Inheritance object LinePointInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class LinePointInfo Fields Color The color of the line at this point. Declaration public Color Color Field Value Type Description Color Position The position of the point. Declaration public Vector3 Position Field Value Type Description Vector3 Thickness The thickness of the line at this point. Declaration public float Thickness Field Value Type Description float Methods ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LinePolygonMesh.html": {
    "href": "api/Evergine.Components.Primitives.LinePolygonMesh.html",
    "title": "Class LinePolygonMesh | Evergine Doc",
    "keywords": "Class LinePolygonMesh Arc primitive mesh component. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineArcMeshBase LinePolygonMesh Implements IDependencyObject Inherited Members LineArcMeshBase.radius LineArcMeshBase.thickness LineArcMeshBase.color LineArcMeshBase.angle LineArcMeshBase.tessellation LineArcMeshBase.Radius LineArcMeshBase.Thickness LineArcMeshBase.Color LineArcMeshBase.RefreshMeshes() LineMeshBase.graphicsContext LineMeshBase.is2DMode LineMeshBase.linePoints LineMeshBase.lineType LineMeshBase.isLoop LineMeshBase.Model LineMeshBase.UseWorldSpace LineMeshBase.TexcoordOffset LineMeshBase.DiffuseTexture LineMeshBase.DiffuseSampler LineMeshBase.IsCameraAligned LineMeshBase.TextureTiling LineMeshBase.ModelMeshName LineMeshBase.BoundingBox LineMeshBase.OnAttached() LineMeshBase.OnActivated() LineMeshBase.OnDeactivated() LineMeshBase.OnDetach() LineMeshBase.OnDestroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class LinePolygonMesh : LineArcMeshBase, IDependencyObject Constructors LinePolygonMesh() Initializes a new instance of the LinePolygonMesh class. Declaration public LinePolygonMesh() Properties Vertices Gets or sets the number of vertices of the regular polygon. Declaration [RenderPropertyAsInput(MinLimit = 3, MaxLimit = 50, Tooltip = \"Number of vertices that defines the regular polygon\", AsSlider = true, DesiredChange = 1, DesiredLargeChange = 2)] public int Vertices { get; set; } Property Value Type Description int Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LineRectangleMesh.html": {
    "href": "api/Evergine.Components.Primitives.LineRectangleMesh.html",
    "title": "Class LineRectangleMesh | Evergine Doc",
    "keywords": "Class LineRectangleMesh Line primitive mesh. To render this mesh use the LineMeshRenderer3D class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent LineMeshBase LineRectangleMesh Implements IDependencyObject Inherited Members LineMeshBase.graphicsContext LineMeshBase.is2DMode LineMeshBase.linePoints LineMeshBase.lineType LineMeshBase.isLoop LineMeshBase.Model LineMeshBase.UseWorldSpace LineMeshBase.TexcoordOffset LineMeshBase.DiffuseTexture LineMeshBase.DiffuseSampler LineMeshBase.IsCameraAligned LineMeshBase.TextureTiling LineMeshBase.ModelMeshName LineMeshBase.BoundingBox LineMeshBase.OnAttached() LineMeshBase.OnActivated() LineMeshBase.OnDeactivated() LineMeshBase.OnDetach() LineMeshBase.OnDestroy() MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class LineRectangleMesh : LineMeshBase, IDependencyObject Constructors LineRectangleMesh() Initializes a new instance of the LineRectangleMesh class. Declaration public LineRectangleMesh() Properties Color Gets or sets the color for the line, or tint color for the texture. Declaration [RenderProperty(Tooltip = \"Color for the line, or tint color for the texture\")] public Color Color { get; set; } Property Value Type Description Color Height Gets or sets the height of the rectangle to draw. Declaration [RenderProperty(Tooltip = \"Rectangle height\")] public float Height { get; set; } Property Value Type Description float Origin Gets or sets the origin (also known as pivot) from where the rectangle scales, rotates and translates. Its values are included in [0, 1] where (0, 0) indicates the top left corner. Such values are percentages where 1 means the 100% of the rectangle's width/height. Declaration [RenderProperty(Tooltip = \"The origin (also known as pivot) from where the rectangle scales, rotates and translates. Its values are included in [0, 1] where (0, 0) indicates the top left corner. Such values are percentages where 1 means the 100% of the rectangle's width/height.\")] public Vector2 Origin { get; set; } Property Value Type Description Vector2 Thickness Gets or sets the thickness of the rectangle's line to draw. Declaration [RenderPropertyAsFInput(MinLimit = 0, Tooltip = \"Thickness of the rectangle's line\")] public float Thickness { get; set; } Property Value Type Description float Width Gets or sets the width of the rectangle to draw. Declaration [RenderProperty(Tooltip = \"Rectangle width\")] public float Width { get; set; } Property Value Type Description float Methods RefreshMeshes() Refresh meshes method. Declaration protected override void RefreshMeshes() Overrides LineMeshBase.RefreshMeshes() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.LineType.html": {
    "href": "api/Evergine.Components.Primitives.LineType.html",
    "title": "Enum LineType | Evergine Doc",
    "keywords": "Enum LineType Defines the line composition types. Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public enum LineType Fields Name Description LineList A line list is a list of isolated, straight line segments LineStrip A line strip is a primitive that is composed of connected line segments Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.Materials.html": {
    "href": "api/Evergine.Components.Primitives.Materials.html",
    "title": "Namespace Evergine.Components.Primitives.Materials | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Primitives.Materials Classes LineEffect"
  },
  "api/Evergine.Components.Primitives.Materials.LineEffect.html": {
    "href": "api/Evergine.Components.Primitives.Materials.LineEffect.html",
    "title": "Class LineEffect | Evergine Doc",
    "keywords": "Class LineEffect Inheritance object BaseMaterialDecorator MaterialDecorator LineEffect Inherited Members MaterialDecorator.Material MaterialDecorator.AllowInstancing MaterialDecorator.Id MaterialDecorator.OrderBias MaterialDecorator.LayerDescription BaseMaterialDecorator.material BaseMaterialDecorator.ActiveDirectivesNames BaseMaterialDecorator.Effect BaseMaterialDecorator.GetMaterialPassResources(string, bool) BaseMaterialDecorator.Prepare(CommandBuffer) BaseMaterialDecorator.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives.Materials Assembly: Evergine.Components.dll Syntax public class LineEffect : MaterialDecorator Constructors LineEffect(Effect) Declaration public LineEffect(Effect effect) Parameters Type Name Description Effect effect Properties DiffuseSampler Declaration public SamplerState DiffuseSampler { get; set; } Property Value Type Description SamplerState DiffuseTexture Declaration public Texture DiffuseTexture { get; set; } Property Value Type Description Texture IsCameraAligned Declaration public bool IsCameraAligned { get; set; } Property Value Type Description bool TexcoordOffset Declaration public Vector2 TexcoordOffset { get; set; } Property Value Type Description Vector2 TextureTiling Declaration public Vector2 TextureTiling { get; set; } Property Value Type Description Vector2 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.PrimitiveModelBuilder.html": {
    "href": "api/Evergine.Components.Primitives.PrimitiveModelBuilder.html",
    "title": "Class PrimitiveModelBuilder | Evergine Doc",
    "keywords": "Class PrimitiveModelBuilder Represents a builder for primitive models. Inheritance object PrimitiveModelBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class PrimitiveModelBuilder Properties VerticesCount Gets the vertices count. Declaration public int VerticesCount { get; } Property Value Type Description int Methods AddIndex(int) Adds a new index to the primitive model. Declaration public void AddIndex(int index) Parameters Type Name Description int index The index. Remarks This should only be called during the initialization process, before InitializePrimitive. AddVertex(Vector3, Vector3) Adds a new vertex to the primitive model. Declaration public void AddVertex(Vector3 position, Vector3 normal) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Remarks This should only be called during the initialization process, before InitializePrimitive. AddVertex(Vector3, Vector3, Vector2) Adds a new vertex to the primitive model. Declaration public void AddVertex(Vector3 position, Vector3 normal, Vector2 texcoord) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Vector2 texcoord The texture coordinate. Remarks This should only be called during the initialization process, before InitializePrimitive. AddVertex(Vector3, Vector3, Vector3, Vector2) Adds a new vertex to the primitive model. Declaration public void AddVertex(Vector3 position, Vector3 normal, Vector3 tangent, Vector2 texcoord) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Vector3 tangent The tangent. Vector2 texcoord The texture coordinate. Remarks This should only be called during the initialization process, before InitializePrimitive. AddVertex(Vector3, Vector3, Vector3, Vector2, Color) Adds a new vertex to the primitive model. Declaration public void AddVertex(Vector3 position, Vector3 normal, Vector3 tangent, Vector2 texcoord, Color color) Parameters Type Name Description Vector3 position The position. Vector3 normal The normal. Vector3 tangent The tangent. Vector2 texcoord The texture coordinate. Color color The color. Remarks This should only be called during the initialization process, before InitializePrimitive. CalculateTangentSpace() Calculate tangent space of the geometry. Declaration public void CalculateTangentSpace() Clear() Clears the internal structure. Declaration public void Clear() CreateMesh(GraphicsContext) Gets the Mesh by vertex and index information. Declaration public Mesh CreateMesh(GraphicsContext graphicsContext) Parameters Type Name Description GraphicsContext graphicsContext The GraphicsContext used for mesh buffers generation. Returns Type Description Mesh Mesh instance. GetSphericalTexCoord(Vector3) Gets the spherical texture coordinates. Declaration public Vector2 GetSphericalTexCoord(Vector3 normal) Parameters Type Name Description Vector3 normal The normal. Returns Type Description Vector2 Spherical coordinates. SetCapacity(int, int) Prepares the internal structure with the specified size for indices and vertices. Declaration public void SetCapacity(int indicesCount, int vertexCount) Parameters Type Name Description int indicesCount The maximum indices count. int vertexCount The maximum vertex count. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Primitives.PrimitiveModelCache.html": {
    "href": "api/Evergine.Components.Primitives.PrimitiveModelCache.html",
    "title": "Class PrimitiveModelCache | Evergine Doc",
    "keywords": "Class PrimitiveModelCache Cache for models generated using PrimitiveModelBuilder. Inheritance object IdentifiableObject DependencyObject AttachableObject SceneManager PrimitiveModelCache Implements IDependencyObject Inherited Members SceneManager.Managers SceneManager.Scene SceneManager.OnLoaded() SceneManager.OnAttached() SceneManager.OnActivated() SceneManager.Start() SceneManager.OnDeactivated() SceneManager.OnDetach() SceneManager.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Components.Primitives Assembly: Evergine.Components.dll Syntax public class PrimitiveModelCache : SceneManager, IDependencyObject Fields graphicsContext The graphics context dependency used for model buffer generation. Declaration [BindService(true)] protected GraphicsContext graphicsContext Field Value Type Description GraphicsContext Properties LoadedModelsCount Gets the number of different model instances loaded. Declaration public int LoadedModelsCount { get; } Property Value Type Description int Methods LoadOrCreateModel(int, string, Action<PrimitiveModelBuilder>) Loads a model from the cache. If the model does not exists a new one is created. Declaration public Model LoadOrCreateModel(int primitiveHashCode, string primitiveName, Action<PrimitiveModelBuilder> buildAction) Parameters Type Name Description int primitiveHashCode The hash code of the primitive to load. string primitiveName A string representation of the primitive name. Action<PrimitiveModelBuilder> buildAction The build action based on PrimitiveModelBuilder. Returns Type Description Model The model for the given primitive. ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() UnloadModel(int) Dereferences the model associated with the primitive hash code from the cache. If no other reference exists, the model is disposed. Declaration public bool UnloadModel(int primitiveHashCode) Parameters Type Name Description int primitiveHashCode The hash code of the primitive to unload. Returns Type Description bool true if the model was found and unloaded from the cache. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Sound.html": {
    "href": "api/Evergine.Components.Sound.html",
    "title": "Namespace Evergine.Components.Sound | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Sound Classes SoundEmitter3D This class represent a Sound emitter in a 3D environment. SoundListener3D This class represent a Sound listener in a 3D environment."
  },
  "api/Evergine.Components.Sound.SoundEmitter3D.html": {
    "href": "api/Evergine.Components.Sound.SoundEmitter3D.html",
    "title": "Class SoundEmitter3D | Evergine Doc",
    "keywords": "Class SoundEmitter3D This class represent a Sound emitter in a 3D environment. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior SoundEmitter3D Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Sound Assembly: Evergine.Components.dll Syntax public class SoundEmitter3D : Behavior, IDependencyObject Constructors SoundEmitter3D() Initializes a new instance of the SoundEmitter3D class. Declaration public SoundEmitter3D() Fields Apply3D Apply sound 3D effects. Declaration public bool Apply3D Field Value Type Description bool Properties Audio Gets or sets the sound source. Declaration public AudioBuffer Audio { get; set; } Property Value Type Description AudioBuffer DistanceScaleFactor Gets or sets the distance scale factor of sound emitter. Declaration public float DistanceScaleFactor { get; set; } Property Value Type Description float IsMuted Gets or sets a value indicating whether the sound emitter is muted. Declaration public bool IsMuted { get; set; } Property Value Type Description bool Loop Gets or sets a value indicating whether current sound is looping. Declaration public bool Loop { get; set; } Property Value Type Description bool true if the sound is looping; otherwise, false. Pitch Gets or sets the pitch of sound emitter. Declaration [RenderPropertyAsFInput(MinLimit = 0.01, MaxLimit = 1, AsSlider = true, DesiredChange = 0.01, DesiredLargeChange = 0.02)] public float Pitch { get; set; } Property Value Type Description float PlayAutomatically Gets or sets a value indicating whether the sound is played automatically when the SoundPath is refreshed. Declaration public bool PlayAutomatically { get; set; } Property Value Type Description bool true if [play automatically]; otherwise, false. PlayState Gets the play state of this emitter. Declaration public PlayState PlayState { get; } Property Value Type Description PlayState Volume Gets or sets the volume of sound emitter. Declaration [RenderPropertyAsFInput(MinLimit = 0.01, MaxLimit = 1, AsSlider = true, DesiredChange = 0.01, DesiredLargeChange = 0.02)] public float Volume { get; set; } Property Value Type Description float Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() OnLoaded() Invoked when the object is loaded. Declaration protected override void OnLoaded() Overrides Evergine.Framework.Component.OnLoaded() Pause() Play the current sound. Declaration public void Pause() Play() Play the current sound. Declaration public void Play() Start() Invoked to start the object. Declaration protected override void Start() Overrides Evergine.Framework.Component.Start() Stop() Play the current sound. Declaration public void Stop() Update(TimeSpan) Update 3d instance. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Events OnAudioEnd Event fired when the playing audio has finished Declaration public event EventHandler<AudioBuffer> OnAudioEnd Event Type Type Description EventHandler<AudioBuffer> Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Sound.SoundListener3D.html": {
    "href": "api/Evergine.Components.Sound.SoundListener3D.html",
    "title": "Class SoundListener3D | Evergine Doc",
    "keywords": "Class SoundListener3D This class represent a Sound listener in a 3D environment. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior SoundListener3D Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Sound Assembly: Evergine.Components.dll Syntax public class SoundListener3D : Behavior, IDependencyObject Constructors SoundListener3D() Initializes a new instance of the SoundListener3D class. Declaration public SoundListener3D() Fields DopplerFactor The Doppler factor of this listener. Declaration public float DopplerFactor Field Value Type Description float Properties Listener Gets the sound listener. Declaration public AudioListener Listener { get; } Property Value Type Description AudioListener Methods Start() Invoked to start the object. Declaration protected override void Start() Overrides Evergine.Framework.Component.Start() Update(TimeSpan) Update 3D listener. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.GazeBehavior.html": {
    "href": "api/Evergine.Components.Toolkit.GazeBehavior.html",
    "title": "Class GazeBehavior | Evergine Doc",
    "keywords": "Class GazeBehavior Gaze behavior class. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior GazeBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public class GazeBehavior : Behavior, IDependencyObject Fields AirTapEntity Gets or sets AirTap prefab instance. Declaration public Entity AirTapEntity Field Value Type Description Entity DefaultDistance Gets or sets cursor distance (meters). Declaration [RenderPropertyAsFInput(0.1, 20, Tooltip = \"Maximum gaze distance, in meters, for calculating a hit.\", AsSlider = true, DesiredChange = 0.1, DesiredLargeChange = 1, DefaultValue = 2)] public float DefaultDistance Field Value Type Description float HandleMouse Gets a value indicating whether this gaze will handle mouse inputs. Declaration public bool HandleMouse Field Value Type Description bool KeepScale Gets or sets a value indicating whether gets or sets cursor keep scale behavior. Declaration [RenderProperty(Tooltip = \"Always maintain cursor scale.\")] public bool KeepScale Field Value Type Description bool MaxGazeDistance Gets or sets cursor distance (meters). Declaration [RenderPropertyAsFInput(0.2, 100000, Tooltip = \"Maximum gaze distance, in meters, for calculating a hit.\", DefaultValue = 100)] public float MaxGazeDistance Field Value Type Description float ReadyEntity Gets or sets ready prefab instance. Declaration public Entity ReadyEntity Field Value Type Description Entity UndetectedEntity Gets or sets undetected prefab instance. Declaration public Entity UndetectedEntity Field Value Type Description Entity Properties CurrentState Gets cursor current state. Declaration public GazeBehavior.States CurrentState { get; } Property Value Type Description GazeBehavior.States GazeAirTapState Gets the current gaze button state. Declaration public ButtonState GazeAirTapState { get; } Property Value Type Description ButtonState GazeHitResult Gets the current gaze hit result. Declaration public HitResult3D GazeHitResult { get; } Property Value Type Description HitResult3D GazeRay Gets gaze ray. Declaration public Ray GazeRay { get; } Property Value Type Description Ray Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() Update(TimeSpan) Update method. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime game time. Overrides Behavior.Update(TimeSpan) Events AirTapEvent AirTap state event Declaration public event EventHandler<HitResult3D> AirTapEvent Event Type Type Description EventHandler<HitResult3D> ReadyEvent Ready state event Declaration public event EventHandler ReadyEvent Event Type Type Description EventHandler UndetectedEvent Undetected state event Declaration public event EventHandler UndetectedEvent Event Type Type Description EventHandler Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.GazeBehavior.States.html": {
    "href": "api/Evergine.Components.Toolkit.GazeBehavior.States.html",
    "title": "Enum GazeBehavior.States | Evergine Doc",
    "keywords": "Enum GazeBehavior.States Gaze states. Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public enum GazeBehavior.States Fields Name Description AirTap AirTap state Ready Ready state Undetected Undetected state Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.GazeCollision.CursorHit.html": {
    "href": "api/Evergine.Components.Toolkit.GazeCollision.CursorHit.html",
    "title": "Struct GazeCollision.CursorHit | Evergine Doc",
    "keywords": "Struct GazeCollision.CursorHit CursorHit. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public struct GazeCollision.CursorHit Fields Hit Hit. Declaration public bool Hit Field Value Type Description bool HitResult The HitResult structure. Declaration public HitResult3D HitResult Field Value Type Description HitResult3D Position Position. Declaration public Vector3 Position Field Value Type Description Vector3 Target Target. Declaration public Vector3 Target Field Value Type Description Vector3 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.GazeCollision.html": {
    "href": "api/Evergine.Components.Toolkit.GazeCollision.html",
    "title": "Class GazeCollision | Evergine Doc",
    "keywords": "Class GazeCollision GazeCollision. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component GazeCollision Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public class GazeCollision : Component, IDependencyObject Fields gazeBehavior gazeBehavior. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected GazeBehavior gazeBehavior Field Value Type Description GazeBehavior Properties NormalAligned Gets or sets a value indicating whether normalAligned. Declaration [RenderProperty(Tooltip = \"Indicate whether cursor will be aligned with the surfaces or no in otherwise\")] public bool NormalAligned { get; set; } Property Value Type Description bool SurfaceOffset Gets or sets surfaceOffset. Declaration [RenderProperty(Tooltip = \"Offset value in meters between the surface and cursor\")] public float SurfaceOffset { get; set; } Property Value Type Description float Methods CheckCursorCollision(ref Ray, float, out CursorHit) Check cursor collision. Declaration public bool CheckCursorCollision(ref Ray ray, float rayDistance, out GazeCollision.CursorHit cursorHit) Parameters Type Name Description Ray ray ray cast. float rayDistance The ray distance to test. GazeCollision.CursorHit cursorHit The cursor hit structure. Returns Type Description bool True if there are collision with an object. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.GazeIndicator.html": {
    "href": "api/Evergine.Components.Toolkit.GazeIndicator.html",
    "title": "Class GazeIndicator | Evergine Doc",
    "keywords": "Class GazeIndicator GazeIndicator. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component GazeIndicator Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public class GazeIndicator : Component, IDependencyObject Fields Indicator The indicator entity. Declaration public Entity Indicator Field Value Type Description Entity gazeBehavior The gaze behavior. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected GazeBehavior gazeBehavior Field Value Type Description GazeBehavior Properties RadialOffset Gets or sets radialOffset. Declaration [RenderProperty(Tooltip = \"Radial offset distance between cursor and indicator.\")] public float RadialOffset { get; set; } Property Value Type Description float RadialVisibilityDistance Gets or sets radialVisibilityDistance. Declaration public float RadialVisibilityDistance { get; set; } Property Value Type Description float TargetPoint Gets or sets targetPoint. Declaration [RenderProperty(Tooltip = \"A single 3D point to follow\")] public Vector3 TargetPoint { get; set; } Property Value Type Description Vector3 Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() UpdateIndicator(Vector3, Vector3) Update Indicator method. Declaration public void UpdateIndicator(Vector3 cursorPosition, Vector3 cursorScale) Parameters Type Name Description Vector3 cursorPosition cursorPosition. Vector3 cursorScale cursorScale. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.GazeStabilizer.html": {
    "href": "api/Evergine.Components.Toolkit.GazeStabilizer.html",
    "title": "Class GazeStabilizer | Evergine Doc",
    "keywords": "Class GazeStabilizer GazeStabilizer. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component GazeStabilizer Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax [DataContract] public class GazeStabilizer : Component, IDependencyObject Fields gazeBehavior gazeBehavior. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected GazeBehavior gazeBehavior Field Value Type Description GazeBehavior Properties StoredStabilitySamples Gets or sets storedStabilitySamples. Declaration [DataMember] [RenderPropertyAsInput(1, 120, Tooltip = \"Number of samples that you want to iterate on.\", AsSlider = true, DesiredChange = 1, DesiredLargeChange = 5, DefaultValue = 10)] public int StoredStabilitySamples { get; set; } Property Value Type Description int Methods UpdateSmoothCursorPosition(Vector3) Update Cu. Declaration public Vector3 UpdateSmoothCursorPosition(Vector3 cursorPosition) Parameters Type Name Description Vector3 cursorPosition Cursor position. Returns Type Description Vector3 Smooth cursor position. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.html": {
    "href": "api/Evergine.Components.Toolkit.html",
    "title": "Namespace Evergine.Components.Toolkit | Evergine Doc",
    "keywords": "Namespace Evergine.Components.Toolkit Classes GazeBehavior Gaze behavior class. GazeCollision GazeCollision. GazeIndicator GazeIndicator. GazeStabilizer GazeStabilizer. LookAtBehavior Behavior that allows an entity to look to the camera or another entity. Tagalong Behavior for an entity that follows the camera. Structs GazeCollision.CursorHit CursorHit. Enums GazeBehavior.States Gaze states. LookAtBehavior.AxisEnum Enumeration for the axis."
  },
  "api/Evergine.Components.Toolkit.LookAtBehavior.AxisEnum.html": {
    "href": "api/Evergine.Components.Toolkit.LookAtBehavior.AxisEnum.html",
    "title": "Enum LookAtBehavior.AxisEnum | Evergine Doc",
    "keywords": "Enum LookAtBehavior.AxisEnum Enumeration for the axis. Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public enum LookAtBehavior.AxisEnum Fields Name Description X X axis Y Y axis Z Z axis Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.LookAtBehavior.html": {
    "href": "api/Evergine.Components.Toolkit.LookAtBehavior.html",
    "title": "Class LookAtBehavior | Evergine Doc",
    "keywords": "Class LookAtBehavior Behavior that allows an entity to look to the camera or another entity. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior LookAtBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public class LookAtBehavior : Behavior, IDependencyObject Fields transform The owner transform. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform Field Value Type Description Transform3D Properties Axis Gets or sets a value indicating the axis of the entity to be aligned. Declaration [RenderProperty(Tooltip = \"The axis of the entity used for the alignment\")] public LookAtBehavior.AxisEnum Axis { get; set; } Property Value Type Description LookAtBehavior.AxisEnum AxisConstraint Gets or sets a value indicating whether the entity look at the target rotating just in one axis. Declaration [RenderProperty(Tag = 1, CustomPropertyName = \"Axis Constraint\", Tooltip = \"If true, the orientation is restricted to just one axis.\")] public bool AxisConstraint { get; set; } Property Value Type Description bool Flip Gets or sets a value indicating whether the alignment is flipped. Declaration [RenderProperty(Tooltip = \"Flips the alignment\")] public bool Flip { get; set; } Property Value Type Description bool IsLocalOriented Gets or sets a value indicating whether the alignment is in local axis or absolute axis. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true, CustomPropertyName = \"Is Local Oriented\", Tooltip = \"If true, the constraint alignment is made using local orientations\")] public bool IsLocalOriented { get; set; } Property Value Type Description bool KeepUpVector Gets or sets a value indicating whether the up vector must be always up. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true, Tooltip = \"Keep up vector.\")] public bool KeepUpVector { get; set; } Property Value Type Description bool LookAtEntity Gets or sets a value indicating whether the entity looks to another entity, instead of the camera. Declaration [RenderProperty(Tag = 2, CustomPropertyName = \"Look At Entity\", Tooltip = \"If true, the entity looks at another entity. If false, it looks to the camera\")] public bool LookAtEntity { get; set; } Property Value Type Description bool OrientationAxis Gets or sets a value indicating the rotating axis of the alignment. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true, CustomPropertyName = \"Orientation Axis\", Tooltip = \"The constraint axis used by the entity to orientate to its target\")] public LookAtBehavior.AxisEnum OrientationAxis { get; set; } Property Value Type Description LookAtBehavior.AxisEnum TargetEntity Gets or sets the target entity path. Declaration public Entity TargetEntity { get; set; } Property Value Type Description Entity Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() Update(TimeSpan) Updates the behavior. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed game time. Overrides Behavior.Update(TimeSpan) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.Toolkit.Tagalong.html": {
    "href": "api/Evergine.Components.Toolkit.Tagalong.html",
    "title": "Class Tagalong | Evergine Doc",
    "keywords": "Class Tagalong Behavior for an entity that follows the camera. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior Tagalong Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.Toolkit Assembly: Evergine.Components.dll Syntax public class Tagalong : Behavior, IDependencyObject Fields transform The transform component. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform Field Value Type Description Transform3D Properties MaxAngle Gets or sets the max angle of the panel. Declaration [RenderProperty(typeof(FloatRadianToDegreeConverter))] public float MaxAngle { get; set; } Property Value Type Description float MaxDistance Gets or sets the maximum distance. Declaration public float MaxDistance { get; set; } Property Value Type Description float MinDistance Gets or sets the minimum distance. Declaration public float MinDistance { get; set; } Property Value Type Description float SmoothDistanceFactor Gets or sets the smooth factor for the distance. Declaration public float SmoothDistanceFactor { get; set; } Property Value Type Description float SmoothPositionFactor Gets or sets the smooth factor for the position. Declaration public float SmoothPositionFactor { get; set; } Property Value Type Description float Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() Update(TimeSpan) Updates the behavior. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed game time. Overrides Behavior.Update(TimeSpan) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.ActionWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.ActionWorkAction.html",
    "title": "Class ActionWorkAction | Evergine Doc",
    "keywords": "Class ActionWorkAction A work action that execute an Action. Inheritance object WorkAction ActionWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() WorkAction.PerformCancel() WorkAction.PerformSkip() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class ActionWorkAction : WorkAction, IWorkAction Constructors ActionWorkAction(IWorkAction, Action) Initializes a new instance of the ActionWorkAction class. Declaration public ActionWorkAction(IWorkAction parent, Action action) Parameters Type Name Description IWorkAction parent The parent task. Action action The action to execute. ActionWorkAction(Action, Scene) Initializes a new instance of the ActionWorkAction class. Declaration public ActionWorkAction(Action action, Scene scene = null) Parameters Type Name Description Action action The action to execute. Scene scene The associated scene. Methods PerformRun() Perform run action. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.ActiveWaitConditionWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.ActiveWaitConditionWorkAction.html",
    "title": "Class ActiveWaitConditionWorkAction | Evergine Doc",
    "keywords": "Class ActiveWaitConditionWorkAction A work action to wait an event for a time. Inheritance object WorkAction ActiveWaitConditionWorkAction Implements IUpdatableWorkAction IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() WorkAction.PerformCancel() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class ActiveWaitConditionWorkAction : WorkAction, IUpdatableWorkAction, IWorkAction Constructors ActiveWaitConditionWorkAction(IWorkAction, Func<bool>, int) Initializes a new instance of the ActiveWaitConditionWorkAction class. Declaration public ActiveWaitConditionWorkAction(IWorkAction parent, Func<bool> breakPredicate, int eventCount = 1) Parameters Type Name Description IWorkAction parent The parent action. Func<bool> breakPredicate The condition predicate. int eventCount The event count. ActiveWaitConditionWorkAction(Func<bool>, Scene, int) Initializes a new instance of the ActiveWaitConditionWorkAction class. Declaration public ActiveWaitConditionWorkAction(Func<bool> breakPredicate, Scene scene = null, int eventCount = 1) Parameters Type Name Description Func<bool> breakPredicate The condition predicate. Scene scene The scene. int eventCount The event count. Properties EventCount Gets the event count. Declaration public int EventCount { get; } Property Value Type Description int Predicate Gets the predicate. Declaration public Func<bool> Predicate { get; } Property Value Type Description Func<bool> Methods PerformRun() Perform Run actions. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() PerformSkip() Skip the action. Declaration protected override bool PerformSkip() Returns Type Description bool A value indicating it the work action is successfully skipped. Overrides WorkAction.PerformSkip() Update(TimeSpan) Update the work action. Declaration public void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The current game time. Implements Evergine.Framework.Services.IUpdatableWorkAction Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.BasicWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.BasicWorkAction.html",
    "title": "Class BasicWorkAction | Evergine Doc",
    "keywords": "Class BasicWorkAction A work action to play a sound. Inheritance object WorkAction BasicWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() WorkAction.PerformCancel() WorkAction.PerformSkip() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class BasicWorkAction : WorkAction, IWorkAction Constructors BasicWorkAction(Scene) Initializes a new instance of the BasicWorkAction class. Declaration public BasicWorkAction(Scene scene = null) Parameters Type Name Description Scene scene The associated scene. Methods NotifyActionCompleted() Notifies that the action is completed. Declaration public void NotifyActionCompleted() PerformRun() Perform Run actions. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() Events OnRun Occurs when the action is running. Declaration public event Action OnRun Event Type Type Description Action Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.EaseFunction.html": {
    "href": "api/Evergine.Components.WorkActions.EaseFunction.html",
    "title": "Enum EaseFunction | Evergine Doc",
    "keywords": "Enum EaseFunction The Ease functions. Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public enum EaseFunction Fields Name Description BackInEase Back in Ease BackInOutEase Back In Out Ease BackOutEase Back out Ease BounceInEase Bounce In Ease, BounceInOutEase Bounce In Out Ease BounceOutEase Bounce Out Ease CircleInEase Circle In Ease CircleInOutEase Circle In Out Ease CircleOutEase Circle Out Ease CubicInEase Cubic In Ease CubicInOutEase Cubic In Out Ease CubicOutEase Cubic Out Ease ElasticInEase Elastic In Ease ElasticInOutEase Elastic In Out Ease ElasticOutEase Elastic Out Ease ExponentialInEase Exponential In Ease ExponentialInOutEase Exponential In Out Ease ExponentialOutEase Exponential Out Ease None None Ease QuadraticInEase Quadratic In Ease QuadraticInOutEase Quadratic In Out Ease QuadraticOutEase Quadratic Out Ease QuarticInEase Quartic In Ease QuarticInOutEase Quartic In Out Ease QuarticOutEase Quartic Out Ease QuinticInEase Quintic In Ease QuinticInOutEase Quintic In Out Ease QuinticOutEase Quintic Out Ease SineInEase Sine In Ease SineInOutEase Sine In Out Ease SineOutEase Sine Out Ease Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.FloatAnimationWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.FloatAnimationWorkAction.html",
    "title": "Class FloatAnimationWorkAction | Evergine Doc",
    "keywords": "Class FloatAnimationWorkAction Work action of a single float value. Inheritance object WorkAction UpdatableWorkAction FloatAnimationWorkAction RotateTo2DWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class FloatAnimationWorkAction : UpdatableWorkAction, IWorkAction Constructors FloatAnimationWorkAction(Entity, float, float, TimeSpan, EaseFunction) Initializes a new instance of the FloatAnimationWorkAction class. Declaration protected FloatAnimationWorkAction(Entity entity, float from, float to, TimeSpan time, EaseFunction ease) Parameters Type Name Description Entity entity The entity. float from Initial value. float to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. FloatAnimationWorkAction(Entity, float, float, TimeSpan, EaseFunction, Action<float>) Initializes a new instance of the FloatAnimationWorkAction class. Declaration public FloatAnimationWorkAction(Entity entity, float from, float to, TimeSpan time, EaseFunction ease, Action<float> updateAction) Parameters Type Name Description Entity entity The entity. float from Initial value. float to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. Action<float> updateAction The action when needs to be updated. Fields from Initial value. Declaration protected float from Field Value Type Description float to End value. Declaration protected float to Field Value Type Description float updateAction The update action of the. Declaration protected Action<float> updateAction Field Value Type Description Action<float> Methods BackInEase(float, float, float, float) Back in ease function. Declaration public float BackInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. BackInOutEase(float, float, float, float) Back in and out ease function. Declaration public float BackInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. BackOutEase(float, float, float, float) Back out ease function. Declaration public float BackOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. BounceInEase(float, float, float, float) Bounce in ease function. Declaration public float BounceInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. BounceInOutEase(float, float, float, float) Bounce in and out ease function. Declaration public float BounceInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. BounceOutEase(float, float, float, float) Bounce out ease function. Declaration public float BounceOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. CircleInEase(float, float, float, float) Circle in ease function. Declaration public float CircleInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. CircleInOutEase(float, float, float, float) Circle in and out ease function. Declaration public float CircleInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. CircleOutEase(float, float, float, float) Circle out ease function. Declaration public float CircleOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. CubicInEase(float, float, float, float) Cubic in ease function. Declaration public float CubicInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. CubicInOutEase(float, float, float, float) Cubic in and out ease function. Declaration public float CubicInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. CubicOutEase(float, float, float, float) Cubic out ease function. Declaration public float CubicOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. DeltaFunction(EaseFunction, float, float, float, float) Delta Function method. Declaration public float DeltaFunction(EaseFunction function, float from, float to, float time, float totalTime) Parameters Type Name Description EaseFunction function function. float from Start value. float to End value. float time Current time. float totalTime Animation duration. Returns Type Description float Delta value. ElasticInEase(float, float, float, float) Elastic in ease function. Declaration public float ElasticInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. ElasticInOutEase(float, float, float, float) Elastic in and out ease function. Declaration public float ElasticInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. ElasticOutEase(float, float, float, float) Elastic out ease function. Declaration public float ElasticOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. ExponentialInEase(float, float, float, float) Exponential in ease function. Declaration public float ExponentialInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. ExponentialInOutEase(float, float, float, float) Exponential in and out ease function. Declaration public float ExponentialInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. ExponentialOutEase(float, float, float, float) Exponential out ease function. Declaration public float ExponentialOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. LinearStep(float, float, float) Smooth Step method. Declaration public float LinearStep(float from, float to, float lerp) Parameters Type Name Description float from Initial value. float to End value. float lerp The lerp value. Returns Type Description float The desired value. PerformCancel() Cancels the work action. Declaration protected override void PerformCancel() Overrides WorkAction.PerformCancel() PerformRun() Ons the run. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() PerformSkip() Notifies the skip. Declaration protected override bool PerformSkip() Returns Type Description bool If the action is skipped successfully. Overrides WorkAction.PerformSkip() QuadraticInEase(float, float, float, float) Quadratic in ease function. Declaration public float QuadraticInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuadraticInOutEase(float, float, float, float) Quadratic in and out ease function. Declaration public float QuadraticInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuadraticOutEase(float, float, float, float) Quadratic out ease function. Declaration public float QuadraticOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuarticInEase(float, float, float, float) Quartic in ease function. Declaration public float QuarticInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuarticInOutEase(float, float, float, float) Quartic in and out ease function. Declaration public float QuarticInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuarticOutEase(float, float, float, float) Quartic out ease function. Declaration public float QuarticOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuinticInEase(float, float, float, float) Quintic in ease function. Declaration public float QuinticInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuinticInOutEase(float, float, float, float) Quintic in and out ease function. Declaration public float QuinticInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. QuinticOutEase(float, float, float, float) Quintic out ease function. Declaration public float QuinticOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. SineInEase(float, float, float, float) Sine in ease function. Declaration public float SineInEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. SineInOutEase(float, float, float, float) Sine in and out ease function. Declaration public float SineInOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. SineOutEase(float, float, float, float) Sine out ease function. Declaration public float SineOutEase(float t, float b, float c, float d) Parameters Type Name Description float t Current time. float b Start value. float c End value. float d Animation duration. Returns Type Description float delta value. Update(TimeSpan) Updates the single work action. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed gameTime. Overrides UpdatableWorkAction.Update(TimeSpan) Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.html": {
    "href": "api/Evergine.Components.WorkActions.html",
    "title": "Namespace Evergine.Components.WorkActions | Evergine Doc",
    "keywords": "Namespace Evergine.Components.WorkActions Classes ActionWorkAction A work action that execute an Action. ActiveWaitConditionWorkAction A work action to wait an event for a time. BasicWorkAction A work action to play a sound. FloatAnimationWorkAction Work action of a single float value. MoveTo2DWorkAction Work action which animates an 2D entity. MoveTo3DWorkAction Work action which animates an 3D entity. QuaternionAnimationWorkAction Work action of a single float value. RotateTo2DWorkAction Work action that performs a rotating animation to a 2D entity. RotateTo3DWorkAction Work action that rotates an entity 3D. ScaleTo2DWorkAction Work action that scales a 2D entity. ScaleTo3DWorkAction Work action that scales an entity 3D. UpdatableWorkAction Work action that is updated. Vector2AnimationWorkAction Work action of a single float value. Vector3AnimationWorkAction Work action of a single float value. WaitCountWorkAction A work action to continue with other action. WaitWorkAction A work action to wait for a time. WorkAction Represent a Work Action to perform something. WorkActionFactory Extension methods for WorkAction class. WorkActionNode A work action to continue with other action. WorkActionSet Represent a Set of Work Actions. WorkActionUpdaterBehavior Behavior that updates the work action. Interfaces IWorkActionSet Represent a Set of Work Actions. Enums EaseFunction The Ease functions."
  },
  "api/Evergine.Components.WorkActions.IWorkActionSet.html": {
    "href": "api/Evergine.Components.WorkActions.IWorkActionSet.html",
    "title": "Interface IWorkActionSet | Evergine Doc",
    "keywords": "Interface IWorkActionSet Represent a Set of Work Actions. Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public interface IWorkActionSet Methods WaitAll() Return an action that will be completed when all actions has been completed. Declaration IWorkAction WaitAll() Returns Type Description IWorkAction The task. WaitAny() Return an action that will be completed when any actions has been completed. Declaration IWorkAction WaitAny() Returns Type Description IWorkAction The task. WaitCount(int) Return an action that will be completed when all actions has been completed. Declaration IWorkAction WaitCount(int count) Parameters Type Name Description int count The Count value. Returns Type Description IWorkAction The task. WaitPredicate(Func<bool, IWorkAction[]>) Waits the predicate. Declaration IWorkAction WaitPredicate(Func<bool, IWorkAction[]> waitingTaskPredicate) Parameters Type Name Description Func<bool, IWorkAction[]> waitingTaskPredicate The waiting task predicate. Returns Type Description IWorkAction The task. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.MoveTo2DWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.MoveTo2DWorkAction.html",
    "title": "Class MoveTo2DWorkAction | Evergine Doc",
    "keywords": "Class MoveTo2DWorkAction Work action which animates an 2D entity. Inheritance object WorkAction UpdatableWorkAction Vector2AnimationWorkAction MoveTo2DWorkAction Implements IWorkAction Inherited Members Vector2AnimationWorkAction.updateAction Vector2AnimationWorkAction.from Vector2AnimationWorkAction.to Vector2AnimationWorkAction.Update(TimeSpan) Vector2AnimationWorkAction.PerformCancel() Vector2AnimationWorkAction.PerformSkip() Vector2AnimationWorkAction.DeltaFunction(EaseFunction, Vector2, Vector2, float, float) Vector2AnimationWorkAction.LinearStep(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BackInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BackOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BackInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BounceInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BounceOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BounceInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CircleInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CircleOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CircleInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CubicInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CubicOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CubicInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ElasticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ElasticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ElasticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ExponentialInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ExponentialOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ExponentialInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuadraticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuadraticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuadraticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuarticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuarticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuarticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuinticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuinticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuinticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.SineInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.SineOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.SineInOutEase(float, Vector2, Vector2, float) WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class MoveTo2DWorkAction : Vector2AnimationWorkAction, IWorkAction Constructors MoveTo2DWorkAction(Entity, Vector2, TimeSpan, EaseFunction, bool) Initializes a new instance of the MoveTo2DWorkAction class. Declaration public MoveTo2DWorkAction(Entity entity, Vector2 to, TimeSpan time, EaseFunction ease = EaseFunction.None, bool local = false) Parameters Type Name Description Entity entity The target entity. Vector2 to The target position. TimeSpan time Animation duration. EaseFunction ease The ease function. bool local If the position is in local coordinates. Methods PerformRun() Performs the run operation. Declaration protected override void PerformRun() Overrides Vector2AnimationWorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.MoveTo3DWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.MoveTo3DWorkAction.html",
    "title": "Class MoveTo3DWorkAction | Evergine Doc",
    "keywords": "Class MoveTo3DWorkAction Work action which animates an 3D entity. Inheritance object WorkAction UpdatableWorkAction Vector3AnimationWorkAction MoveTo3DWorkAction Implements IWorkAction Inherited Members Vector3AnimationWorkAction.updateAction Vector3AnimationWorkAction.from Vector3AnimationWorkAction.to Vector3AnimationWorkAction.Update(TimeSpan) Vector3AnimationWorkAction.PerformCancel() Vector3AnimationWorkAction.PerformSkip() Vector3AnimationWorkAction.DeltaFunction(EaseFunction, Vector3, Vector3, float, float) Vector3AnimationWorkAction.LinearStep(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubicInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubitOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubicInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineInOutEase(float, Vector3, Vector3, float) WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class MoveTo3DWorkAction : Vector3AnimationWorkAction, IWorkAction Constructors MoveTo3DWorkAction(Entity, Vector3, TimeSpan, EaseFunction, bool) Initializes a new instance of the MoveTo3DWorkAction class. Declaration public MoveTo3DWorkAction(Entity entity, Vector3 to, TimeSpan time, EaseFunction ease = EaseFunction.None, bool local = false) Parameters Type Name Description Entity entity The target entity. Vector3 to The target position. TimeSpan time Animation duration. EaseFunction ease The ease function. bool local If the position is in local coordinates. Methods PerformRun() Performs the run operation. Declaration protected override void PerformRun() Overrides Vector3AnimationWorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.QuaternionAnimationWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.QuaternionAnimationWorkAction.html",
    "title": "Class QuaternionAnimationWorkAction | Evergine Doc",
    "keywords": "Class QuaternionAnimationWorkAction Work action of a single float value. Inheritance object WorkAction UpdatableWorkAction QuaternionAnimationWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class QuaternionAnimationWorkAction : UpdatableWorkAction, IWorkAction Constructors QuaternionAnimationWorkAction(Entity, Quaternion, Quaternion, TimeSpan, EaseFunction) Initializes a new instance of the QuaternionAnimationWorkAction class. Declaration protected QuaternionAnimationWorkAction(Entity entity, Quaternion from, Quaternion to, TimeSpan time, EaseFunction ease) Parameters Type Name Description Entity entity The entity. Quaternion from Initial value. Quaternion to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. QuaternionAnimationWorkAction(Entity, Quaternion, Quaternion, TimeSpan, EaseFunction, Action<Quaternion>) Initializes a new instance of the QuaternionAnimationWorkAction class. Declaration public QuaternionAnimationWorkAction(Entity entity, Quaternion from, Quaternion to, TimeSpan time, EaseFunction ease, Action<Quaternion> updateAction) Parameters Type Name Description Entity entity The entity. Quaternion from Initial value. Quaternion to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. Action<Quaternion> updateAction The action when needs to be updated. Fields from Initial value. Declaration protected Quaternion from Field Value Type Description Quaternion to End value. Declaration protected Quaternion to Field Value Type Description Quaternion updateAction The update action of the. Declaration protected Action<Quaternion> updateAction Field Value Type Description Action<Quaternion> Methods BackInEase(float, Quaternion, Quaternion, float) Back in ease function. Declaration public Quaternion BackInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. BackInOutEase(float, Quaternion, Quaternion, float) Back in and out ease function. Declaration public Quaternion BackInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. BackOutEase(float, Quaternion, Quaternion, float) Back out ease function. Declaration public Quaternion BackOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. BounceInEase(float, Quaternion, Quaternion, float) Bounce in ease function. Declaration public Quaternion BounceInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. BounceInOutEase(float, Quaternion, Quaternion, float) Bounce in out ease function. Declaration public Quaternion BounceInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. BounceOutEase(float, Quaternion, Quaternion, float) Bounce out ease function. Declaration public Quaternion BounceOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. CircleInEase(float, Quaternion, Quaternion, float) Circle in ease function. Declaration public Quaternion CircleInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. CircleInOutEase(float, Quaternion, Quaternion, float) Circle in and out ease function. Declaration public Quaternion CircleInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. CircleOutEase(float, Quaternion, Quaternion, float) Circle out ease function. Declaration public Quaternion CircleOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. CubicInEase(float, Quaternion, Quaternion, float) Cubic in ease function. Declaration public Quaternion CubicInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. CubicInOutEase(float, Quaternion, Quaternion, float) Cubic in and out ease function. Declaration public Quaternion CubicInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. CubitOutEase(float, Quaternion, Quaternion, float) Cubit out ease function. Declaration public Quaternion CubitOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. DeltaFunction(EaseFunction, Quaternion, Quaternion, float, float) Delta Function method. Declaration public Quaternion DeltaFunction(EaseFunction function, Quaternion from, Quaternion to, float time, float totalTime) Parameters Type Name Description EaseFunction function function. Quaternion from Start value. Quaternion to End value. float time Current time. float totalTime Animation duration. Returns Type Description Quaternion Delta value. ElasticInEase(float, Quaternion, Quaternion, float) Elastic in ease function. Declaration public Quaternion ElasticInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. ElasticInOutEase(float, Quaternion, Quaternion, float) Elastic in and out ease function. Declaration public Quaternion ElasticInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. ElasticOutEase(float, Quaternion, Quaternion, float) Elastic out ease function. Declaration public Quaternion ElasticOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. ExponentialInEase(float, Quaternion, Quaternion, float) Exponential in ease function. Declaration public Quaternion ExponentialInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. ExponentialInOutEase(float, Quaternion, Quaternion, float) Exponential in and out ease function. Declaration public Quaternion ExponentialInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. ExponentialOutEase(float, Quaternion, Quaternion, float) Exponential out ease function. Declaration public Quaternion ExponentialOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. LinearStep(float, Quaternion, Quaternion, float) Smooth Step method. Declaration public Quaternion LinearStep(float time, Quaternion value1, Quaternion value2, float duration) Parameters Type Name Description float time time. Quaternion value1 value1. Quaternion value2 value2. float duration duration. Returns Type Description Quaternion Quaternion. PerformCancel() Cancels the work action. Declaration protected override void PerformCancel() Overrides WorkAction.PerformCancel() PerformRun() Ons the run. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() PerformSkip() Notifies the skip. Declaration protected override bool PerformSkip() Returns Type Description bool If the action is skipped successfully. Overrides WorkAction.PerformSkip() QuadraticInEase(float, Quaternion, Quaternion, float) Quadratic in ease function. Declaration public Quaternion QuadraticInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuadraticInOutEase(float, Quaternion, Quaternion, float) Quadratic in and out ease function. Declaration public Quaternion QuadraticInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuadraticOutEase(float, Quaternion, Quaternion, float) Quadratic out ease function. Declaration public Quaternion QuadraticOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuarticInEase(float, Quaternion, Quaternion, float) Quartic in ease function. Declaration public Quaternion QuarticInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuarticInOutEase(float, Quaternion, Quaternion, float) Quartic in and out ease function. Declaration public Quaternion QuarticInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuarticOutEase(float, Quaternion, Quaternion, float) Quartic out ease function. Declaration public Quaternion QuarticOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuinticInEase(float, Quaternion, Quaternion, float) Quintic in ease function. Declaration public Quaternion QuinticInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuinticInOutEase(float, Quaternion, Quaternion, float) Quintic in out ease function. Declaration public Quaternion QuinticInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. QuinticOutEase(float, Quaternion, Quaternion, float) Quintic out ease function. Declaration public Quaternion QuinticOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. SineInEase(float, Quaternion, Quaternion, float) Sine in ease function. Declaration public Quaternion SineInEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. SineInOutEase(float, Quaternion, Quaternion, float) Sine in and out ease function. Declaration public Quaternion SineInOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. SineOutEase(float, Quaternion, Quaternion, float) Sine out ease function. Declaration public Quaternion SineOutEase(float t, Quaternion b, Quaternion c, float d) Parameters Type Name Description float t Current time. Quaternion b Start value. Quaternion c End value. float d Animation duration. Returns Type Description Quaternion delta value. Update(TimeSpan) Updates the single work action. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed gameTime. Overrides UpdatableWorkAction.Update(TimeSpan) Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.RotateTo2DWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.RotateTo2DWorkAction.html",
    "title": "Class RotateTo2DWorkAction | Evergine Doc",
    "keywords": "Class RotateTo2DWorkAction Work action that performs a rotating animation to a 2D entity. Inheritance object WorkAction UpdatableWorkAction FloatAnimationWorkAction RotateTo2DWorkAction Implements IWorkAction Inherited Members FloatAnimationWorkAction.updateAction FloatAnimationWorkAction.from FloatAnimationWorkAction.to FloatAnimationWorkAction.Update(TimeSpan) FloatAnimationWorkAction.PerformCancel() FloatAnimationWorkAction.PerformSkip() FloatAnimationWorkAction.DeltaFunction(EaseFunction, float, float, float, float) FloatAnimationWorkAction.LinearStep(float, float, float) FloatAnimationWorkAction.BackInEase(float, float, float, float) FloatAnimationWorkAction.BackOutEase(float, float, float, float) FloatAnimationWorkAction.BackInOutEase(float, float, float, float) FloatAnimationWorkAction.BounceInEase(float, float, float, float) FloatAnimationWorkAction.BounceOutEase(float, float, float, float) FloatAnimationWorkAction.BounceInOutEase(float, float, float, float) FloatAnimationWorkAction.CircleInEase(float, float, float, float) FloatAnimationWorkAction.CircleOutEase(float, float, float, float) FloatAnimationWorkAction.CircleInOutEase(float, float, float, float) FloatAnimationWorkAction.CubicInEase(float, float, float, float) FloatAnimationWorkAction.CubicOutEase(float, float, float, float) FloatAnimationWorkAction.CubicInOutEase(float, float, float, float) FloatAnimationWorkAction.ElasticInEase(float, float, float, float) FloatAnimationWorkAction.ElasticOutEase(float, float, float, float) FloatAnimationWorkAction.ElasticInOutEase(float, float, float, float) FloatAnimationWorkAction.ExponentialInEase(float, float, float, float) FloatAnimationWorkAction.ExponentialOutEase(float, float, float, float) FloatAnimationWorkAction.ExponentialInOutEase(float, float, float, float) FloatAnimationWorkAction.QuadraticInEase(float, float, float, float) FloatAnimationWorkAction.QuadraticOutEase(float, float, float, float) FloatAnimationWorkAction.QuadraticInOutEase(float, float, float, float) FloatAnimationWorkAction.QuarticInEase(float, float, float, float) FloatAnimationWorkAction.QuarticOutEase(float, float, float, float) FloatAnimationWorkAction.QuarticInOutEase(float, float, float, float) FloatAnimationWorkAction.QuinticInEase(float, float, float, float) FloatAnimationWorkAction.QuinticOutEase(float, float, float, float) FloatAnimationWorkAction.QuinticInOutEase(float, float, float, float) FloatAnimationWorkAction.SineInEase(float, float, float, float) FloatAnimationWorkAction.SineOutEase(float, float, float, float) FloatAnimationWorkAction.SineInOutEase(float, float, float, float) WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class RotateTo2DWorkAction : FloatAnimationWorkAction, IWorkAction Constructors RotateTo2DWorkAction(Entity, float, TimeSpan, EaseFunction, bool) Initializes a new instance of the RotateTo2DWorkAction class. Declaration public RotateTo2DWorkAction(Entity entity, float to, TimeSpan time, EaseFunction ease = EaseFunction.None, bool local = false) Parameters Type Name Description Entity entity The target entity. float to The target angle. TimeSpan time Animation duration. EaseFunction ease The ease function. bool local If the rotation is local. Methods PerformRun() Performs the run operation. Declaration protected override void PerformRun() Overrides FloatAnimationWorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.RotateTo3DWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.RotateTo3DWorkAction.html",
    "title": "Class RotateTo3DWorkAction | Evergine Doc",
    "keywords": "Class RotateTo3DWorkAction Work action that rotates an entity 3D. Inheritance object WorkAction UpdatableWorkAction Vector3AnimationWorkAction RotateTo3DWorkAction Implements IWorkAction Inherited Members Vector3AnimationWorkAction.updateAction Vector3AnimationWorkAction.from Vector3AnimationWorkAction.to Vector3AnimationWorkAction.Update(TimeSpan) Vector3AnimationWorkAction.PerformCancel() Vector3AnimationWorkAction.PerformSkip() Vector3AnimationWorkAction.DeltaFunction(EaseFunction, Vector3, Vector3, float, float) Vector3AnimationWorkAction.LinearStep(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubicInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubitOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubicInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineInOutEase(float, Vector3, Vector3, float) WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class RotateTo3DWorkAction : Vector3AnimationWorkAction, IWorkAction Constructors RotateTo3DWorkAction(Entity, Vector3, TimeSpan, EaseFunction, bool, bool) Initializes a new instance of the RotateTo3DWorkAction class. Declaration public RotateTo3DWorkAction(Entity entity, Vector3 to, TimeSpan time, EaseFunction ease = EaseFunction.None, bool local = false, bool shorterPath = false) Parameters Type Name Description Entity entity The target entity. Vector3 to The target rotation. TimeSpan time Animation duration. EaseFunction ease The ease function. bool local If the rotation is in local coordinates. bool shorterPath If the rotation goes on the shorter path. Methods PerformRun() Performs the run operation. Declaration protected override void PerformRun() Overrides Vector3AnimationWorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.ScaleTo2DWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.ScaleTo2DWorkAction.html",
    "title": "Class ScaleTo2DWorkAction | Evergine Doc",
    "keywords": "Class ScaleTo2DWorkAction Work action that scales a 2D entity. Inheritance object WorkAction UpdatableWorkAction Vector2AnimationWorkAction ScaleTo2DWorkAction Implements IWorkAction Inherited Members Vector2AnimationWorkAction.updateAction Vector2AnimationWorkAction.from Vector2AnimationWorkAction.to Vector2AnimationWorkAction.Update(TimeSpan) Vector2AnimationWorkAction.PerformCancel() Vector2AnimationWorkAction.PerformSkip() Vector2AnimationWorkAction.DeltaFunction(EaseFunction, Vector2, Vector2, float, float) Vector2AnimationWorkAction.LinearStep(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BackInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BackOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BackInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BounceInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BounceOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.BounceInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CircleInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CircleOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CircleInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CubicInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CubicOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.CubicInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ElasticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ElasticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ElasticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ExponentialInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ExponentialOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.ExponentialInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuadraticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuadraticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuadraticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuarticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuarticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuarticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuinticInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuinticOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.QuinticInOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.SineInEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.SineOutEase(float, Vector2, Vector2, float) Vector2AnimationWorkAction.SineInOutEase(float, Vector2, Vector2, float) WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class ScaleTo2DWorkAction : Vector2AnimationWorkAction, IWorkAction Constructors ScaleTo2DWorkAction(Entity, Vector2, TimeSpan, EaseFunction, bool) Initializes a new instance of the ScaleTo2DWorkAction class. Declaration public ScaleTo2DWorkAction(Entity entity, Vector2 to, TimeSpan time, EaseFunction ease = EaseFunction.None, bool local = false) Parameters Type Name Description Entity entity The target entity. Vector2 to The target scale. TimeSpan time Animation duration. EaseFunction ease The ease function. bool local If the scale is in local coordinate. Methods PerformRun() Performs the run operation. Declaration protected override void PerformRun() Overrides Vector2AnimationWorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.ScaleTo3DWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.ScaleTo3DWorkAction.html",
    "title": "Class ScaleTo3DWorkAction | Evergine Doc",
    "keywords": "Class ScaleTo3DWorkAction Work action that scales an entity 3D. Inheritance object WorkAction UpdatableWorkAction Vector3AnimationWorkAction ScaleTo3DWorkAction Implements IWorkAction Inherited Members Vector3AnimationWorkAction.updateAction Vector3AnimationWorkAction.from Vector3AnimationWorkAction.to Vector3AnimationWorkAction.Update(TimeSpan) Vector3AnimationWorkAction.PerformCancel() Vector3AnimationWorkAction.PerformSkip() Vector3AnimationWorkAction.DeltaFunction(EaseFunction, Vector3, Vector3, float, float) Vector3AnimationWorkAction.LinearStep(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BackInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.BounceInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CircleInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubicInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubitOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.CubicInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ElasticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.ExponentialInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuadraticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuarticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.QuinticInOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineInEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineOutEase(float, Vector3, Vector3, float) Vector3AnimationWorkAction.SineInOutEase(float, Vector3, Vector3, float) WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class ScaleTo3DWorkAction : Vector3AnimationWorkAction, IWorkAction Constructors ScaleTo3DWorkAction(Entity, Vector3, TimeSpan, EaseFunction, bool) Initializes a new instance of the ScaleTo3DWorkAction class. Declaration public ScaleTo3DWorkAction(Entity entity, Vector3 to, TimeSpan time, EaseFunction ease = EaseFunction.None, bool local = false) Parameters Type Name Description Entity entity The target entity. Vector3 to The target scale. TimeSpan time Animation duration. EaseFunction ease The ease function. bool local If the scale is in local coordinate. Methods PerformRun() Performs the run operation. Declaration protected override void PerformRun() Overrides Vector3AnimationWorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.UpdatableWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.UpdatableWorkAction.html",
    "title": "Class UpdatableWorkAction | Evergine Doc",
    "keywords": "Class UpdatableWorkAction Work action that is updated. Inheritance object WorkAction UpdatableWorkAction FloatAnimationWorkAction QuaternionAnimationWorkAction Vector2AnimationWorkAction Vector3AnimationWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.PerformRun() WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() WorkAction.PerformCancel() WorkAction.PerformSkip() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public abstract class UpdatableWorkAction : WorkAction, IWorkAction Constructors UpdatableWorkAction(Scene) Initializes a new instance of the UpdatableWorkAction class. Declaration public UpdatableWorkAction(Scene scene = null) Parameters Type Name Description Scene scene The scene. Methods Update(TimeSpan) Updates the work action. Declaration public abstract void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed time. Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.Vector2AnimationWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.Vector2AnimationWorkAction.html",
    "title": "Class Vector2AnimationWorkAction | Evergine Doc",
    "keywords": "Class Vector2AnimationWorkAction Work action of a single float value. Inheritance object WorkAction UpdatableWorkAction Vector2AnimationWorkAction MoveTo2DWorkAction ScaleTo2DWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class Vector2AnimationWorkAction : UpdatableWorkAction, IWorkAction Constructors Vector2AnimationWorkAction(Entity, Vector2, Vector2, TimeSpan, EaseFunction) Initializes a new instance of the Vector2AnimationWorkAction class. Declaration protected Vector2AnimationWorkAction(Entity entity, Vector2 from, Vector2 to, TimeSpan time, EaseFunction ease) Parameters Type Name Description Entity entity The entity. Vector2 from Initial value. Vector2 to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. Vector2AnimationWorkAction(Entity, Vector2, Vector2, TimeSpan, EaseFunction, Action<Vector2>) Initializes a new instance of the Vector2AnimationWorkAction class. Declaration public Vector2AnimationWorkAction(Entity entity, Vector2 from, Vector2 to, TimeSpan time, EaseFunction ease, Action<Vector2> updateAction) Parameters Type Name Description Entity entity The entity. Vector2 from Initial value. Vector2 to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. Action<Vector2> updateAction The action when needs to be updated. Fields from Initial value. Declaration protected Vector2 from Field Value Type Description Vector2 to End value. Declaration protected Vector2 to Field Value Type Description Vector2 updateAction The update action of the. Declaration protected Action<Vector2> updateAction Field Value Type Description Action<Vector2> Methods BackInEase(float, Vector2, Vector2, float) Back in ease function. Declaration public Vector2 BackInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. BackInOutEase(float, Vector2, Vector2, float) Back in and out ease function. Declaration public Vector2 BackInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. BackOutEase(float, Vector2, Vector2, float) Back out ease function. Declaration public Vector2 BackOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. BounceInEase(float, Vector2, Vector2, float) Bounce in ease function. Declaration public Vector2 BounceInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. BounceInOutEase(float, Vector2, Vector2, float) Bounce in out ease function. Declaration public Vector2 BounceInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. BounceOutEase(float, Vector2, Vector2, float) Bounce out ease function. Declaration public Vector2 BounceOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. CircleInEase(float, Vector2, Vector2, float) Circle in ease function. Declaration public Vector2 CircleInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. CircleInOutEase(float, Vector2, Vector2, float) Circle in and out ease function. Declaration public Vector2 CircleInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. CircleOutEase(float, Vector2, Vector2, float) Circle out ease function. Declaration public Vector2 CircleOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. CubicInEase(float, Vector2, Vector2, float) Cubic in ease function. Declaration public Vector2 CubicInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. CubicInOutEase(float, Vector2, Vector2, float) Cubic in and out ease function. Declaration public Vector2 CubicInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. CubicOutEase(float, Vector2, Vector2, float) Cubic out Ease function. Declaration public Vector2 CubicOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. DeltaFunction(EaseFunction, Vector2, Vector2, float, float) Delta Function method. Declaration public Vector2 DeltaFunction(EaseFunction function, Vector2 from, Vector2 to, float time, float totalTime) Parameters Type Name Description EaseFunction function ease function. Vector2 from Start value. Vector2 to End value. float time Current time. float totalTime Animation duration. Returns Type Description Vector2 Delta value. ElasticInEase(float, Vector2, Vector2, float) Elastic in ease function. Declaration public Vector2 ElasticInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. ElasticInOutEase(float, Vector2, Vector2, float) Elastic in and out ease function. Declaration public Vector2 ElasticInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. ElasticOutEase(float, Vector2, Vector2, float) Elastic out ease function. Declaration public Vector2 ElasticOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. ExponentialInEase(float, Vector2, Vector2, float) Exponential in ease function. Declaration public Vector2 ExponentialInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. ExponentialInOutEase(float, Vector2, Vector2, float) Exponential in and out ease function. Declaration public Vector2 ExponentialInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. ExponentialOutEase(float, Vector2, Vector2, float) Exponential out ease function. Declaration public Vector2 ExponentialOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. LinearStep(float, Vector2, Vector2, float) Smooth Step method. Declaration public Vector2 LinearStep(float time, Vector2 value1, Vector2 value2, float duration) Parameters Type Name Description float time Current time. Vector2 value1 Start value. Vector2 value2 End value. float duration Animation duration. Returns Type Description Vector2 delta value. PerformCancel() Cancels the work action. Declaration protected override void PerformCancel() Overrides WorkAction.PerformCancel() PerformRun() Ons the run. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() PerformSkip() Notifies the skip. Declaration protected override bool PerformSkip() Returns Type Description bool If the action is skipped successfully. Overrides WorkAction.PerformSkip() QuadraticInEase(float, Vector2, Vector2, float) Quadratic in ease function. Declaration public Vector2 QuadraticInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuadraticInOutEase(float, Vector2, Vector2, float) Quadratic in and out ease function. Declaration public Vector2 QuadraticInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuadraticOutEase(float, Vector2, Vector2, float) Quadratic out ease function. Declaration public Vector2 QuadraticOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuarticInEase(float, Vector2, Vector2, float) Quartic in ease function. Declaration public Vector2 QuarticInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuarticInOutEase(float, Vector2, Vector2, float) Quartic in and out ease function. Declaration public Vector2 QuarticInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuarticOutEase(float, Vector2, Vector2, float) Quartic out ease function. Declaration public Vector2 QuarticOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuinticInEase(float, Vector2, Vector2, float) Quintic in ease function. Declaration public Vector2 QuinticInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuinticInOutEase(float, Vector2, Vector2, float) Quintic in and out ease function. Declaration public Vector2 QuinticInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. QuinticOutEase(float, Vector2, Vector2, float) Quintic out ease function. Declaration public Vector2 QuinticOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. SineInEase(float, Vector2, Vector2, float) Sine in ease function. Declaration public Vector2 SineInEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. SineInOutEase(float, Vector2, Vector2, float) Sine in and out ease function. Declaration public Vector2 SineInOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. SineOutEase(float, Vector2, Vector2, float) Sine out ease function. Declaration public Vector2 SineOutEase(float t, Vector2 b, Vector2 c, float d) Parameters Type Name Description float t Current time. Vector2 b Start value. Vector2 c End value. float d Animation duration. Returns Type Description Vector2 delta value. Update(TimeSpan) Updates the single work action. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed gameTime. Overrides UpdatableWorkAction.Update(TimeSpan) Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.Vector3AnimationWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.Vector3AnimationWorkAction.html",
    "title": "Class Vector3AnimationWorkAction | Evergine Doc",
    "keywords": "Class Vector3AnimationWorkAction Work action of a single float value. Inheritance object WorkAction UpdatableWorkAction Vector3AnimationWorkAction MoveTo3DWorkAction RotateTo3DWorkAction ScaleTo3DWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class Vector3AnimationWorkAction : UpdatableWorkAction, IWorkAction Constructors Vector3AnimationWorkAction(Entity, Vector3, Vector3, TimeSpan, EaseFunction) Initializes a new instance of the Vector3AnimationWorkAction class. Declaration protected Vector3AnimationWorkAction(Entity entity, Vector3 from, Vector3 to, TimeSpan time, EaseFunction ease) Parameters Type Name Description Entity entity The entity. Vector3 from Initial value. Vector3 to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. Vector3AnimationWorkAction(Entity, Vector3, Vector3, TimeSpan, EaseFunction, Action<Vector3>) Initializes a new instance of the Vector3AnimationWorkAction class. Declaration public Vector3AnimationWorkAction(Entity entity, Vector3 from, Vector3 to, TimeSpan time, EaseFunction ease, Action<Vector3> updateAction) Parameters Type Name Description Entity entity The entity. Vector3 from Initial value. Vector3 to End value. TimeSpan time The time of the animation. EaseFunction ease Easing function. Action<Vector3> updateAction The action when needs to be updated. Fields from Initial value. Declaration protected Vector3 from Field Value Type Description Vector3 to End value. Declaration protected Vector3 to Field Value Type Description Vector3 updateAction The update action of the. Declaration protected Action<Vector3> updateAction Field Value Type Description Action<Vector3> Methods BackInEase(float, Vector3, Vector3, float) Back in ease function. Declaration public Vector3 BackInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. BackInOutEase(float, Vector3, Vector3, float) Back in and out ease function. Declaration public Vector3 BackInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. BackOutEase(float, Vector3, Vector3, float) Back out ease function. Declaration public Vector3 BackOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. BounceInEase(float, Vector3, Vector3, float) Bounce in ease function. Declaration public Vector3 BounceInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. BounceInOutEase(float, Vector3, Vector3, float) Bounce in out ease function. Declaration public Vector3 BounceInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. BounceOutEase(float, Vector3, Vector3, float) Bounce out ease function. Declaration public Vector3 BounceOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. CircleInEase(float, Vector3, Vector3, float) Circle in ease function. Declaration public Vector3 CircleInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. CircleInOutEase(float, Vector3, Vector3, float) Circle in and out ease function. Declaration public Vector3 CircleInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. CircleOutEase(float, Vector3, Vector3, float) Circle out ease function. Declaration public Vector3 CircleOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. CubicInEase(float, Vector3, Vector3, float) Cubic in ease function. Declaration public Vector3 CubicInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. CubicInOutEase(float, Vector3, Vector3, float) Cubic in and out ease function. Declaration public Vector3 CubicInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. CubitOutEase(float, Vector3, Vector3, float) Cubit out ease function. Declaration public Vector3 CubitOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. DeltaFunction(EaseFunction, Vector3, Vector3, float, float) Delta Function method. Declaration public Vector3 DeltaFunction(EaseFunction function, Vector3 from, Vector3 to, float time, float totalTime) Parameters Type Name Description EaseFunction function function. Vector3 from Start value. Vector3 to End value. float time Current time. float totalTime Animation duration. Returns Type Description Vector3 Delta value. ElasticInEase(float, Vector3, Vector3, float) Elastic in ease function. Declaration public Vector3 ElasticInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. ElasticInOutEase(float, Vector3, Vector3, float) Elastic in and out ease function. Declaration public Vector3 ElasticInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. ElasticOutEase(float, Vector3, Vector3, float) Elastic out ease function. Declaration public Vector3 ElasticOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. ExponentialInEase(float, Vector3, Vector3, float) Exponential in ease function. Declaration public Vector3 ExponentialInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. ExponentialInOutEase(float, Vector3, Vector3, float) Exponential in and out ease function. Declaration public Vector3 ExponentialInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. ExponentialOutEase(float, Vector3, Vector3, float) Exponential out ease function. Declaration public Vector3 ExponentialOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. LinearStep(float, Vector3, Vector3, float) Smooth Step method. Declaration public Vector3 LinearStep(float time, Vector3 value1, Vector3 value2, float duration) Parameters Type Name Description float time time. Vector3 value1 value1. Vector3 value2 value2. float duration duration. Returns Type Description Vector3 Vector3. PerformCancel() Cancels the work action. Declaration protected override void PerformCancel() Overrides WorkAction.PerformCancel() PerformRun() Ons the run. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() PerformSkip() Notifies the skip. Declaration protected override bool PerformSkip() Returns Type Description bool If the action is skipped successfully. Overrides WorkAction.PerformSkip() QuadraticInEase(float, Vector3, Vector3, float) Quadratic in ease function. Declaration public Vector3 QuadraticInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuadraticInOutEase(float, Vector3, Vector3, float) Quadratic in and out ease function. Declaration public Vector3 QuadraticInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuadraticOutEase(float, Vector3, Vector3, float) Quadratic out ease function. Declaration public Vector3 QuadraticOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuarticInEase(float, Vector3, Vector3, float) Quartic in ease function. Declaration public Vector3 QuarticInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuarticInOutEase(float, Vector3, Vector3, float) Quartic in and out ease function. Declaration public Vector3 QuarticInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuarticOutEase(float, Vector3, Vector3, float) Quartic out ease function. Declaration public Vector3 QuarticOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuinticInEase(float, Vector3, Vector3, float) Quintic in ease function. Declaration public Vector3 QuinticInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuinticInOutEase(float, Vector3, Vector3, float) Quintic in out ease function. Declaration public Vector3 QuinticInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. QuinticOutEase(float, Vector3, Vector3, float) Quintic out ease function. Declaration public Vector3 QuinticOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. SineInEase(float, Vector3, Vector3, float) Sine in ease function. Declaration public Vector3 SineInEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. SineInOutEase(float, Vector3, Vector3, float) Sine in and out ease function. Declaration public Vector3 SineInOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. SineOutEase(float, Vector3, Vector3, float) Sine out ease function. Declaration public Vector3 SineOutEase(float t, Vector3 b, Vector3 c, float d) Parameters Type Name Description float t Current time. Vector3 b Start value. Vector3 c End value. float d Animation duration. Returns Type Description Vector3 delta value. Update(TimeSpan) Updates the single work action. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed gameTime. Overrides UpdatableWorkAction.Update(TimeSpan) Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.WaitCountWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.WaitCountWorkAction.html",
    "title": "Class WaitCountWorkAction | Evergine Doc",
    "keywords": "Class WaitCountWorkAction A work action to continue with other action. Inheritance object WorkAction WaitCountWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() WorkAction.PerformSkip() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class WaitCountWorkAction : WorkAction, IWorkAction Constructors WaitCountWorkAction(Scene, int, params IWorkAction[]) Initializes a new instance of the WaitCountWorkAction class. Declaration public WaitCountWorkAction(Scene scene, int countLimit, params IWorkAction[] childActions) Parameters Type Name Description Scene scene The scene. int countLimit The count limit. IWorkAction[] childActions The child action list. WaitCountWorkAction(Scene, int, params Func<IWorkAction>[]) Initializes a new instance of the WaitCountWorkAction class. Declaration public WaitCountWorkAction(Scene scene, int countLimit, params Func<IWorkAction>[] childActionGenerators) Parameters Type Name Description Scene scene The scene. int countLimit The count limit. Func<IWorkAction>[] childActionGenerators The child generator action list. WaitCountWorkAction(IWorkAction, int, params IWorkAction[]) Initializes a new instance of the WaitCountWorkAction class. Declaration public WaitCountWorkAction(IWorkAction parent, int countLimit, params IWorkAction[] childActions) Parameters Type Name Description IWorkAction parent The parent action. int countLimit The count limit. IWorkAction[] childActions The child action list. WaitCountWorkAction(IWorkAction, int, params Func<IWorkAction>[]) Initializes a new instance of the WaitCountWorkAction class. Declaration public WaitCountWorkAction(IWorkAction parent, int countLimit, params Func<IWorkAction>[] childActionGenerators) Parameters Type Name Description IWorkAction parent The parent action. int countLimit The count limit. Func<IWorkAction>[] childActionGenerators The child generator action list. Properties CanceledCount Gets the cancel count. Declaration protected int CanceledCount { get; } Property Value Type Description int The canceled. ChildActions Gets the child actions. Declaration public override IEnumerable<IWorkAction> ChildActions { get; } Property Value Type Description IEnumerable<IWorkAction> Overrides WorkAction.ChildActions CompletedCount Gets the number of completed actions. Declaration protected int CompletedCount { get; } Property Value Type Description int The completed. CountLimit Gets the count limit. Declaration protected int CountLimit { get; } Property Value Type Description int The count limit. Methods ActionCanceled(IWorkAction) Method invoked when an action is Canceled. Declaration protected void ActionCanceled(IWorkAction action) Parameters Type Name Description IWorkAction action The work action. ActionCompleted(IWorkAction) Method invoked when an action is Canceled. Declaration protected void ActionCompleted(IWorkAction action) Parameters Type Name Description IWorkAction action The work action. CheckEnd() Checks the end. Declaration protected void CheckEnd() PerformCancel() Perform cancel action. Declaration protected override void PerformCancel() Overrides WorkAction.PerformCancel() PerformRun() Perform Run actions. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.WaitWorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.WaitWorkAction.html",
    "title": "Class WaitWorkAction | Evergine Doc",
    "keywords": "Class WaitWorkAction A work action to wait for a time. Inheritance object WorkAction WaitWorkAction Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.ChildActions WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class WaitWorkAction : WorkAction, IWorkAction Constructors WaitWorkAction(IWorkAction, TimeSpan) Initializes a new instance of the WaitWorkAction class. Declaration public WaitWorkAction(IWorkAction parent, TimeSpan duration) Parameters Type Name Description IWorkAction parent The parent action. TimeSpan duration The duration of the action. WaitWorkAction(TimeSpan, Scene) Initializes a new instance of the WaitWorkAction class. Declaration public WaitWorkAction(TimeSpan duration, Scene scene = null) Parameters Type Name Description TimeSpan duration The duration of the action. Scene scene The scene. Properties Duration Gets or sets the duration of the work action. Declaration public TimeSpan Duration { get; set; } Property Value Type Description TimeSpan Methods PerformCancel() Perform cancel. Declaration protected override void PerformCancel() Overrides WorkAction.PerformCancel() PerformRun() Perform Run actions. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() PerformSkip() Skip the action. Declaration protected override bool PerformSkip() Returns Type Description bool A value indicating it the work action is successfully skipped. Overrides WorkAction.PerformSkip() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.WorkAction.html": {
    "href": "api/Evergine.Components.WorkActions.WorkAction.html",
    "title": "Class WorkAction | Evergine Doc",
    "keywords": "Class WorkAction Represent a Work Action to perform something. Inheritance object WorkAction ActionWorkAction ActiveWaitConditionWorkAction BasicWorkAction UpdatableWorkAction WaitCountWorkAction WaitWorkAction WorkActionNode Implements IWorkAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public abstract class WorkAction : IWorkAction Constructors WorkAction(Scene) Initializes a new instance of the WorkAction class. Declaration protected WorkAction(Scene scene = null) Parameters Type Name Description Scene scene The scene. WorkAction(IWorkAction) Initializes a new instance of the WorkAction class. Declaration protected WorkAction(IWorkAction parent) Parameters Type Name Description IWorkAction parent The parent. Exceptions Type Condition ArgumentException parent task cannot be null. if is a root task, use the other constructor. Fields IsSkippable The skippable. Declaration public bool IsSkippable Field Value Type Description bool Properties ChildActions Gets the child tasks. Declaration public virtual IEnumerable<IWorkAction> ChildActions { get; } Property Value Type Description IEnumerable<IWorkAction> The child tasks. Scene Gets the scene. Declaration public Scene Scene { get; } Property Value Type Description Scene The scene. State Gets the action state. Declaration public WorkActionState State { get; } Property Value Type Description WorkActionState Methods Cancel() Cancels this instance. Declaration public void Cancel() PerformCancel() Notifies the canceled. Declaration protected virtual void PerformCancel() PerformCompleted() Notifies the completed. Declaration protected void PerformCompleted() PerformRun() Ons the run. Declaration protected abstract void PerformRun() PerformSkip() Notifies the skip. Declaration protected virtual bool PerformSkip() Returns Type Description bool If the action is skipped successfully. Run() Runs this instance. Declaration public virtual void Run() Exceptions Type Condition NotSupportedException When the action state is not correct. TrySkip() Skips this instance. Declaration public bool TrySkip() Returns Type Description bool If the action is skipped successfully. Exceptions Type Condition NotImplementedException When the action state is not correct. Events Canceled Event fired when an action has been canceled. Declaration public event Action<IWorkAction> Canceled Event Type Type Description Action<IWorkAction> Completed Event fired when an action is completed. Declaration public event Action<IWorkAction> Completed Event Type Type Description Action<IWorkAction> Skipped Occurs when the action has been skipped. Declaration public event Action<IWorkAction> Skipped Event Type Type Description Action<IWorkAction> Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.WorkActionFactory.html": {
    "href": "api/Evergine.Components.WorkActions.WorkActionFactory.html",
    "title": "Class WorkActionFactory | Evergine Doc",
    "keywords": "Class WorkActionFactory Extension methods for WorkAction class. Inheritance object WorkActionFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public static class WorkActionFactory Methods AndWaitCondition(IWorkAction, Func<bool>, int) Ands the wait condition. Declaration public static IWorkAction AndWaitCondition(this IWorkAction parent, Func<bool> breakPredicate, int eventCount = 1) Parameters Type Name Description IWorkAction parent The parent. Func<bool> breakPredicate The predicate. int eventCount The event count. Returns Type Description IWorkAction The action. AsSkippableWorkAction(IWorkAction) Return the same action as skippable. Declaration public static IWorkAction AsSkippableWorkAction(this IWorkAction actionToSkip) Parameters Type Name Description IWorkAction actionToSkip The action to skip. Returns Type Description IWorkAction The action. ContinueWith(IWorkAction, IWorkAction) Continue with another action. Declaration public static IWorkAction ContinueWith(this IWorkAction parent, IWorkAction nextAction) Parameters Type Name Description IWorkAction parent The parent action. IWorkAction nextAction The next action. Returns Type Description IWorkAction An action that continue with the next action when the parent is completed. Exceptions Type Condition NotSupportedException It is not possible to continue with, aborted or finished task. Defer the run command to a posterior stage. ContinueWith(IWorkAction, params IWorkAction[]) Continue with another action. Declaration public static IWorkActionSet ContinueWith(this IWorkAction parent, params IWorkAction[] childTasks) Parameters Type Name Description IWorkAction parent The parent action. IWorkAction[] childTasks The child tasks. Returns Type Description IWorkActionSet An action that continue with the next action when the parent is completed. Exceptions Type Condition NotSupportedException It is not possible to continue with, aborted or finished task. Defer the run command to a posterior stage. ContinueWith(IWorkAction, IEnumerable<IWorkAction>) Continue with another action. Declaration public static IWorkActionSet ContinueWith(this IWorkAction parent, IEnumerable<IWorkAction> childTasks) Parameters Type Name Description IWorkAction parent The parent action. IEnumerable<IWorkAction> childTasks The child tasks. Returns Type Description IWorkActionSet An action that continue with the next action when the parent is completed. Exceptions Type Condition NotSupportedException It is not possible to continue with, aborted or finished task. Defer the run command to a posterior stage. ContinueWith(IWorkAction, Func<IWorkAction>) Continue with another action. Declaration public static IWorkAction ContinueWith(this IWorkAction parent, Func<IWorkAction> nextActionGenerator) Parameters Type Name Description IWorkAction parent The parent action. Func<IWorkAction> nextActionGenerator The next action generator. Returns Type Description IWorkAction An action that continue with the next action when the parent is completed. Exceptions Type Condition NotSupportedException It is not possible to continue with, aborted or finished task. Defer the run command to a posterior stage. ContinueWith(IWorkAction, params Func<IWorkAction>[]) Continue with another action. Declaration public static IWorkActionSet ContinueWith(this IWorkAction parent, params Func<IWorkAction>[] childTaskGenerators) Parameters Type Name Description IWorkAction parent The parent action. Func<IWorkAction>[] childTaskGenerators The child task generators. Returns Type Description IWorkActionSet An action that continue with the next action when the parent is completed. Exceptions Type Condition NotSupportedException It is not possible to continue with, aborted or finished task. Defer the run command to a posterior stage. ContinueWithAction(IWorkAction, Action) Continue with another an action function. Declaration public static IWorkAction ContinueWithAction(this IWorkAction parent, Action action) Parameters Type Name Description IWorkAction parent The parent action. Action action The next action. Returns Type Description IWorkAction An action that continue with the next action when the parent is completed. Exceptions Type Condition NotSupportedException It is not possible to continue with, aborted or finished task. Defer the run command to a posterior stage. CreateDelayWorkAction(Scene, TimeSpan) Creates a delay action. Declaration public static IWorkAction CreateDelayWorkAction(this Scene scene, TimeSpan time) Parameters Type Name Description Scene scene The scene. TimeSpan time The time. Returns Type Description IWorkAction The action. CreateEmptyWorkAction(Scene) Creates an empty work action. Declaration public static IWorkAction CreateEmptyWorkAction(this Scene scene) Parameters Type Name Description Scene scene The scene. Returns Type Description IWorkAction The action. CreateLoopWorkActionUntil(Scene, Func<IWorkAction>, Func<bool>) Creates the repeat task until. Declaration public static IWorkAction CreateLoopWorkActionUntil(this Scene scene, Func<IWorkAction> actionGenerator, Func<bool> stopCondition) Parameters Type Name Description Scene scene The scene. Func<IWorkAction> actionGenerator The action generator. Func<bool> stopCondition The until predicate. Returns Type Description IWorkAction The action. CreateParallelWorkActions(Scene, params IWorkAction[]) Create parallel actions. Declaration public static IWorkActionSet CreateParallelWorkActions(this Scene scene, params IWorkAction[] actions) Parameters Type Name Description Scene scene The scene. IWorkAction[] actions The actions. Returns Type Description IWorkActionSet The action. CreateParallelWorkActions(Scene, IEnumerable<IWorkAction>) Create parallel actions. Declaration public static IWorkActionSet CreateParallelWorkActions(this Scene scene, IEnumerable<IWorkAction> actions) Parameters Type Name Description Scene scene The scene. IEnumerable<IWorkAction> actions The actions. Returns Type Description IWorkActionSet The action. CreateParallelWorkActions(Scene, IEnumerable<Func<IWorkAction>>) Create parallel actions. Declaration public static IWorkActionSet CreateParallelWorkActions(this Scene scene, IEnumerable<Func<IWorkAction>> actionGenerators) Parameters Type Name Description Scene scene The scene. IEnumerable<Func<IWorkAction>> actionGenerators The action generators. Returns Type Description IWorkActionSet The action. CreateParallelWorkActions(Scene, params Func<IWorkAction>[]) Create parallel actions. Declaration public static IWorkActionSet CreateParallelWorkActions(this Scene scene, params Func<IWorkAction>[] actionGenerators) Parameters Type Name Description Scene scene The scene. Func<IWorkAction>[] actionGenerators The action generators. Returns Type Description IWorkActionSet The action. CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) Continue with another action. Declaration public static IWorkActionSet CreateParallelWorkActions(this IWorkAction parent, IEnumerable<IWorkAction> childTasks) Parameters Type Name Description IWorkAction parent The parent action. IEnumerable<IWorkAction> childTasks The child tasks. Returns Type Description IWorkActionSet An action that continue with the next action when the parent is completed. Exceptions Type Condition NotSupportedException It is not possible to continue with, aborted or finished task. Defer the run command to a posterior stage. CreateWaitConditionWorkAction(Scene, Func<bool>, int) Create a wait condition action. Declaration public static IWorkAction CreateWaitConditionWorkAction(this Scene scene, Func<bool> breakPredicate, int eventCount = 1) Parameters Type Name Description Scene scene The scene. Func<bool> breakPredicate The predicate. int eventCount The event count. Returns Type Description IWorkAction The action. CreateWaitWorkAction(Scene, TimeSpan) Creates the wait action. Declaration public static IWorkAction CreateWaitWorkAction(this Scene scene, TimeSpan timeSpan) Parameters Type Name Description Scene scene The scene. TimeSpan timeSpan The time span. Returns Type Description IWorkAction The action. CreateWorkAction(Scene, IWorkAction) Creates a work action. Declaration public static IWorkAction CreateWorkAction(this Scene scene, IWorkAction action) Parameters Type Name Description Scene scene The scene. IWorkAction action The action. Returns Type Description IWorkAction The work action. CreateWorkAction(Scene, Func<IWorkAction>) Creates a work action. Declaration public static IWorkAction CreateWorkAction(this Scene scene, Func<IWorkAction> actionGenerator) Parameters Type Name Description Scene scene The scene. Func<IWorkAction> actionGenerator The action generator method. Returns Type Description IWorkAction The action. CreateWorkActionFromAction(Scene, Action) Creates an empty work action. Declaration public static IWorkAction CreateWorkActionFromAction(this Scene scene, Action action) Parameters Type Name Description Scene scene The scene. Action action simple code to be executed. Returns Type Description IWorkAction The action. Delay(IWorkAction, TimeSpan) Add a delay action. Declaration public static IWorkAction Delay(this IWorkAction parent, TimeSpan time) Parameters Type Name Description IWorkAction parent The parent. TimeSpan time The time. Returns Type Description IWorkAction The action."
  },
  "api/Evergine.Components.WorkActions.WorkActionNode.html": {
    "href": "api/Evergine.Components.WorkActions.WorkActionNode.html",
    "title": "Class WorkActionNode | Evergine Doc",
    "keywords": "Class WorkActionNode A work action to continue with other action. Inheritance object WorkAction WorkActionNode Implements IWorkAction Inherited Members WorkAction.Completed WorkAction.Canceled WorkAction.IsSkippable WorkAction.Skipped WorkAction.State WorkAction.Scene WorkAction.Run() WorkAction.TrySkip() WorkAction.Cancel() WorkAction.PerformCompleted() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class WorkActionNode : WorkAction, IWorkAction Constructors WorkActionNode(IWorkAction, Scene) Initializes a new instance of the WorkActionNode class. Declaration public WorkActionNode(IWorkAction wrappedAction, Scene scene = null) Parameters Type Name Description IWorkAction wrappedAction The wrapped work action. Scene scene The scene. WorkActionNode(IWorkAction, IWorkAction) Initializes a new instance of the WorkActionNode class. Declaration public WorkActionNode(IWorkAction parent, IWorkAction wrappedAction) Parameters Type Name Description IWorkAction parent The parent action. IWorkAction wrappedAction The wrapped work action. WorkActionNode(IWorkAction, Func<IWorkAction>) Initializes a new instance of the WorkActionNode class. Declaration public WorkActionNode(IWorkAction parent, Func<IWorkAction> actionFunction) Parameters Type Name Description IWorkAction parent The parent action. Func<IWorkAction> actionFunction The wrapped work action. WorkActionNode(Func<IWorkAction>, Scene) Initializes a new instance of the WorkActionNode class. Declaration public WorkActionNode(Func<IWorkAction> actionFunction, Scene scene = null) Parameters Type Name Description Func<IWorkAction> actionFunction The wrapped work action. Scene scene The scene. Fields wrappedAction The wrapped Action. Declaration protected IWorkAction wrappedAction Field Value Type Description IWorkAction Properties ChildActions Gets the child tasks. Declaration public override IEnumerable<IWorkAction> ChildActions { get; } Property Value Type Description IEnumerable<IWorkAction> The child tasks. Overrides WorkAction.ChildActions Methods PerformCancel() Perform the work action cancellation. Declaration protected override void PerformCancel() Overrides WorkAction.PerformCancel() PerformRun() Perform Run actions. Declaration protected override void PerformRun() Overrides WorkAction.PerformRun() PerformSkip() Skip the action. Declaration protected override bool PerformSkip() Returns Type Description bool A value indicating it the work action is successfully skipped. Overrides WorkAction.PerformSkip() ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements Evergine.Framework.Services.IWorkAction Extension Methods WorkActionFactory.AndWaitCondition(IWorkAction, Func<bool>, int) WorkActionFactory.AsSkippableWorkAction(IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, IWorkAction) WorkActionFactory.ContinueWith(IWorkAction, params IWorkAction[]) WorkActionFactory.ContinueWith(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, Func<IWorkAction>) WorkActionFactory.ContinueWith(IWorkAction, params Func<IWorkAction>[]) WorkActionFactory.ContinueWithAction(IWorkAction, Action) WorkActionFactory.CreateParallelWorkActions(IWorkAction, IEnumerable<IWorkAction>) WorkActionFactory.Delay(IWorkAction, TimeSpan) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.WorkActionSet.html": {
    "href": "api/Evergine.Components.WorkActions.WorkActionSet.html",
    "title": "Class WorkActionSet | Evergine Doc",
    "keywords": "Class WorkActionSet Represent a Set of Work Actions. Inheritance object WorkActionSet Implements IWorkActionSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class WorkActionSet : IWorkActionSet Constructors WorkActionSet(IWorkAction, IEnumerable<IWorkAction>) Initializes a new instance of the WorkActionSet class. Declaration public WorkActionSet(IWorkAction parent, IEnumerable<IWorkAction> actions) Parameters Type Name Description IWorkAction parent The parent action. IEnumerable<IWorkAction> actions The action list. WorkActionSet(IWorkAction, IEnumerable<Func<IWorkAction>>) Initializes a new instance of the WorkActionSet class. Declaration public WorkActionSet(IWorkAction parent, IEnumerable<Func<IWorkAction>> actionGenerators) Parameters Type Name Description IWorkAction parent The parent action. IEnumerable<Func<IWorkAction>> actionGenerators The action list. WorkActionSet(IEnumerable<IWorkAction>, Scene) Initializes a new instance of the WorkActionSet class. Declaration public WorkActionSet(IEnumerable<IWorkAction> actions, Scene scene = null) Parameters Type Name Description IEnumerable<IWorkAction> actions The action list. Scene scene The associated scene. WorkActionSet(IEnumerable<Func<IWorkAction>>, Scene) Initializes a new instance of the WorkActionSet class. Declaration public WorkActionSet(IEnumerable<Func<IWorkAction>> actionGenerators, Scene scene = null) Parameters Type Name Description IEnumerable<Func<IWorkAction>> actionGenerators The action list. Scene scene The associated scene. Methods WaitAll() Return an action that will be completed when all actions has been completed. Declaration public IWorkAction WaitAll() Returns Type Description IWorkAction The task. WaitAny() Return an action that will be completed when any actions has been completed. Declaration public IWorkAction WaitAny() Returns Type Description IWorkAction The task. WaitCount(int) Return an action that will be completed when all actions has been completed. Declaration public IWorkAction WaitCount(int count) Parameters Type Name Description int count The count limit. Returns Type Description IWorkAction The task. WaitPredicate(Func<bool, IWorkAction[]>) Waits the predicate. Declaration public IWorkAction WaitPredicate(Func<bool, IWorkAction[]> waitingTaskPredicate) Parameters Type Name Description Func<bool, IWorkAction[]> waitingTaskPredicate The waiting task predicate. Returns Type Description IWorkAction The task. Implements IWorkActionSet Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.WorkActions.WorkActionUpdaterBehavior.html": {
    "href": "api/Evergine.Components.WorkActions.WorkActionUpdaterBehavior.html",
    "title": "Class WorkActionUpdaterBehavior | Evergine Doc",
    "keywords": "Class WorkActionUpdaterBehavior Behavior that updates the work action. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior WorkActionUpdaterBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.WorkActions Assembly: Evergine.Components.dll Syntax public class WorkActionUpdaterBehavior : Behavior, IDependencyObject Constructors WorkActionUpdaterBehavior() Initializes a new instance of the WorkActionUpdaterBehavior class. Declaration public WorkActionUpdaterBehavior() Methods Update(TimeSpan) Updates the instance of the behavior. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime Elapsed time. Overrides Behavior.Update(TimeSpan) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.AdvancedTrackXRDevice.html": {
    "href": "api/Evergine.Components.XR.AdvancedTrackXRDevice.html",
    "title": "Class AdvancedTrackXRDevice | Evergine Doc",
    "keywords": "Class AdvancedTrackXRDevice Track a spatial anchor. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TrackXRDevice AdvancedTrackXRDevice Implements IDependencyObject Inherited Members TrackXRDevice.xrPlatform TrackXRDevice.transform TrackXRDevice.pointer TrackXRDevice.Transform TrackXRDevice.InternalSelectionStrategy TrackXRDevice.InternalDeviceType TrackXRDevice.InternalHandedness TrackXRDevice.InternalIndex TrackXRDevice.TrackedDevice TrackXRDevice.TrackingState TrackXRDevice.IsConnected TrackXRDevice.PoseIsValid TrackXRDevice.Velocity TrackXRDevice.AngularVelocity TrackXRDevice.Pointer TrackXRDevice.LocalPointer TrackXRDevice.Pose TrackXRDevice.LocalPose TrackXRDevice.TrackingLostMode TrackXRDevice.OnTrackedDeviceChanged TrackXRDevice.OnAttached() TrackXRDevice.Update(TimeSpan) TrackXRDevice.OnDetach() TrackXRDevice.RefreshTrackedDevice() Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class AdvancedTrackXRDevice : TrackXRDevice, IDependencyObject Constructors AdvancedTrackXRDevice() Initializes a new instance of the AdvancedTrackXRDevice class. Declaration public AdvancedTrackXRDevice() Properties ControllerState Gets the Controller State. Declaration public XRControllerGenericState ControllerState { get; } Property Value Type Description XRControllerGenericState DeviceIndex Gets or sets the Device Type. Declaration public uint DeviceIndex { get; set; } Property Value Type Description uint DeviceType Gets or sets the Device Type. Declaration public XRTrackedDeviceType DeviceType { get; set; } Property Value Type Description XRTrackedDeviceType Handedness Gets or sets the controller role. Declaration public XRHandedness Handedness { get; set; } Property Value Type Description XRHandedness SelectionStrategy Gets or sets the controller role. Declaration public TrackXRDevice.SelectionDeviceStrategy SelectionStrategy { get; set; } Property Value Type Description TrackXRDevice.SelectionDeviceStrategy SupportedHandJointKind Gets the device supported hand joint array. Declaration public XRHandJointKind[] SupportedHandJointKind { get; } Property Value Type Description XRHandJointKind[] Methods InternalUpdate() Update method by tracked device. Declaration protected override void InternalUpdate() Overrides TrackXRDevice.InternalUpdate() TryGetArticulatedHandJoint(XRHandJointKind, out XRHandJoint) Try get hand joint by the specified joint kind. Declaration public bool TryGetArticulatedHandJoint(XRHandJointKind jointKind, out XRHandJoint joint) Parameters Type Name Description XRHandJointKind jointKind The joint kind. XRHandJoint joint The pose of the hand joint. Returns Type Description bool True if the specified joint kind is available. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.BaseSpatialMapping.html": {
    "href": "api/Evergine.Components.XR.BaseSpatialMapping.html",
    "title": "Class BaseSpatialMapping | Evergine Doc",
    "keywords": "Class BaseSpatialMapping The SpatialMappingObserver class encapsulates the SurfaceObserver into an easy to use object that handles managing the observed surfaces and the rendering of surface geometry. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior BaseSpatialMapping SpatialMapping Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax [DataContract(Namespace = \"Evergine.MixedReality.SpatialMapping\")] public abstract class BaseSpatialMapping : Behavior, IDependencyObject Constructors BaseSpatialMapping() Initializes a new instance of the BaseSpatialMapping class. Declaration public BaseSpatialMapping() Fields MaxSurfaceUpdatesPerFrame Maximum surface updates per frame. Declaration public uint MaxSurfaceUpdatesPerFrame Field Value Type Description uint spatialMappingObserver Spatial Mapping Observer. Declaration protected SpatialMappingObserver spatialMappingObserver Field Value Type Description SpatialMappingObserver timerFactory Timer Factory. Declaration [BindService(true)] protected TimerFactory timerFactory Field Value Type Description TimerFactory xrPlatform The spatial mapping service. Declaration [BindService(true)] protected XRPlatform xrPlatform Field Value Type Description XRPlatform Properties Extents Gets or sets the extents of the observation volume. Declaration public Vector3 Extents { get; set; } Property Value Type Description Vector3 ObtainNormals Gets or sets a value indicating whether the normal information must be captured. Declaration public bool ObtainNormals { get; set; } Property Value Type Description bool TrianglesPerCubicMeter Gets or sets the number of triangles to calculate per cubic meter. Declaration public float TrianglesPerCubicMeter { get; set; } Property Value Type Description float UpdateInterval Gets or sets the spatial mapping update interval. Declaration public TimeSpan UpdateInterval { get; set; } Property Value Type Description TimeSpan Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() OnSurfaceChanged(Guid, SpatialMappingSurface, SurfaceChange) Handles the SurfaceObserver's OnSurfaceChanged event. Declaration protected abstract void OnSurfaceChanged(Guid id, SpatialMappingSurface surface, SurfaceChange changeType) Parameters Type Name Description Guid id The identifier assigned to the surface which has changed. SpatialMappingSurface surface The surface. SurfaceChange changeType The type of change that occurred on the surface. Start() Invoked to start the object. Declaration protected override void Start() Overrides Evergine.Framework.Component.Start() Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. UpdateSurfaces() Update surfaces. Declaration public void UpdateSurfaces() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.EyeGazeBehavior.html": {
    "href": "api/Evergine.Components.XR.EyeGazeBehavior.html",
    "title": "Class EyeGazeBehavior | Evergine Doc",
    "keywords": "Class EyeGazeBehavior Track a spatial anchor. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior EyeGazeBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class EyeGazeBehavior : Behavior, IDependencyObject Constructors EyeGazeBehavior() Initializes a new instance of the EyeGazeBehavior class. Declaration public EyeGazeBehavior() Fields xrPlatform XReality Platform. Declaration [BindService(true)] protected XRPlatform xrPlatform Field Value Type Description XRPlatform Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.html": {
    "href": "api/Evergine.Components.XR.html",
    "title": "Namespace Evergine.Components.XR | Evergine Doc",
    "keywords": "Namespace Evergine.Components.XR Classes AdvancedTrackXRDevice Track a spatial anchor. BaseSpatialMapping The SpatialMappingObserver class encapsulates the SurfaceObserver into an easy to use object that handles managing the observed surfaces and the rendering of surface geometry. EyeGazeBehavior Track a spatial anchor. SpatialMapping The SpatialMappingObserver class encapsulates the SurfaceObserver into an easy to use object that handles managing the observed surfaces and the rendering of surface geometry. SpatialSurface The SpatialMappingObserver class encapsulates the SurfaceObserver into an easy to use object that handles managing the observed surfaces and the rendering of surface geometry. TestHandTracking Track a spatial anchor. TrackModelNode Track the position of a node in a model. TrackQRCode Component used to track a Evergine.Framework.XR.QR.QRCode pose with an entity Evergine.Framework.Graphics.Transform3D. TrackSpatialAnchor Track a spatial anchor. TrackXRArticulatedHand Track a spatial anchor. TrackXRController Track a spatial anchor. TrackXRDevice Track a spatial anchor. XRDeviceMeshComponent A 3D mesh provided by XR platform. XRDeviceRenderableModel Render a 3d model associated to a XR device. XRFaceTrackingMesh Enables face tracking and renders a face mesh. XRFeaturePointsRenderer Renders feature points. XRImageTracking Tracks an image by its name. XRLightEstimationBehavior Class that changes the light intensity based on the AR mobile light estimation. XRPassthroughLayerComponent This component is responsible to create a XR Passthrough Layer. XRPassthroughSurfaceMeshComponent This component is responsible to create a XR Passthrough surface object. XRPlaneRenderer Component that visualizes the AR mobile planes. Enums TrackModelNode.SelectionNodeStrategy Device selection strategy enumeration. TrackXRDevice.SelectionDeviceStrategy Device selection strategy enumeration. TrackXRDevice.XRTrackingLostMode Describe how a controller will behave if the tracking is lost. XRPassthroughSurfaceSearchType The way that the layer will be searched."
  },
  "api/Evergine.Components.XR.SpatialMapping.html": {
    "href": "api/Evergine.Components.XR.SpatialMapping.html",
    "title": "Class SpatialMapping | Evergine Doc",
    "keywords": "Class SpatialMapping The SpatialMappingObserver class encapsulates the SurfaceObserver into an easy to use object that handles managing the observed surfaces and the rendering of surface geometry. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior BaseSpatialMapping SpatialMapping Implements IDependencyObject Inherited Members BaseSpatialMapping.MaxSurfaceUpdatesPerFrame BaseSpatialMapping.xrPlatform BaseSpatialMapping.timerFactory BaseSpatialMapping.spatialMappingObserver BaseSpatialMapping.Extents BaseSpatialMapping.TrianglesPerCubicMeter BaseSpatialMapping.ObtainNormals BaseSpatialMapping.UpdateInterval BaseSpatialMapping.OnAttached() BaseSpatialMapping.OnActivated() BaseSpatialMapping.Start() BaseSpatialMapping.Update(TimeSpan) BaseSpatialMapping.OnDeactivated() BaseSpatialMapping.OnDetach() BaseSpatialMapping.UpdateSurfaces() Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class SpatialMapping : BaseSpatialMapping, IDependencyObject Constructors SpatialMapping() Initializes a new instance of the SpatialMapping class. Declaration public SpatialMapping() Properties CollisionCategories Gets or sets the collision category bits. Declaration [DataMember] public CollisionCategory3D CollisionCategories { get; set; } Property Value Type Description CollisionCategory3D GenerateColliders Gets or sets a value indicating whether public. Declaration public bool GenerateColliders { get; set; } Property Value Type Description bool IsVisible Gets or sets a value indicating whether indicate whether the mesh will shown or not. Declaration [RenderProperty(Tooltip = \"Indicate whether the mesh will shown or not.\")] [DataMember] public bool IsVisible { get; set; } Property Value Type Description bool MaskBits Gets or sets the collision mask bits. Declaration [DataMember] public CollisionCategory3D MaskBits { get; set; } Property Value Type Description CollisionCategory3D Material Gets or sets the material path. Declaration [DataMember] public Material Material { get; set; } Property Value Type Description Material Methods OnSurfaceChanged(Guid, SpatialMappingSurface, SurfaceChange) Handles the SurfaceObserver's OnSurfaceChanged event. Declaration protected override void OnSurfaceChanged(Guid id, SpatialMappingSurface surface, SurfaceChange changeType) Parameters Type Name Description Guid id The identifier assigned to the surface which has changed. SpatialMappingSurface surface The surface. SurfaceChange changeType The type of change that occurred on the surface. Overrides BaseSpatialMapping.OnSurfaceChanged(Guid, SpatialMappingSurface, SurfaceChange) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.SpatialSurface.html": {
    "href": "api/Evergine.Components.XR.SpatialSurface.html",
    "title": "Class SpatialSurface | Evergine Doc",
    "keywords": "Class SpatialSurface The SpatialMappingObserver class encapsulates the SurfaceObserver into an easy to use object that handles managing the observed surfaces and the rendering of surface geometry. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component SpatialSurface Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class SpatialSurface : Component, IDependencyObject Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TestHandTracking.html": {
    "href": "api/Evergine.Components.XR.TestHandTracking.html",
    "title": "Class TestHandTracking | Evergine Doc",
    "keywords": "Class TestHandTracking Track a spatial anchor. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TestHandTracking Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class TestHandTracking : Behavior, IDependencyObject Constructors TestHandTracking() Initializes a new instance of the TestHandTracking class. Declaration public TestHandTracking() Fields HandColor The hand color. Declaration public Color HandColor Field Value Type Description Color Methods Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackModelNode.html": {
    "href": "api/Evergine.Components.XR.TrackModelNode.html",
    "title": "Class TrackModelNode | Evergine Doc",
    "keywords": "Class TrackModelNode Track the position of a node in a model. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TrackModelNode Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class TrackModelNode : Behavior, IDependencyObject Fields MeshComponent The mesh component to obtain the model. Declaration [BindComponent(false, false, BindComponentSource.Owner, null, true)] public MeshComponent MeshComponent Field Value Type Description MeshComponent NodeIndex Getsa the node index. Declaration public int NodeIndex Field Value Type Description int Remarks Only works when SelectionStrategy is ByNodeIndex. SelectionStrategy Gets or sets the selection strategy. Declaration public TrackModelNode.SelectionNodeStrategy SelectionStrategy Field Value Type Description TrackModelNode.SelectionNodeStrategy transform Owner Entity Transform3D Component. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform Field Value Type Description Transform3D Properties Model Gets or sets the model. Declaration public Model Model { get; set; } Property Value Type Description Model Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackModelNode.SelectionNodeStrategy.html": {
    "href": "api/Evergine.Components.XR.TrackModelNode.SelectionNodeStrategy.html",
    "title": "Enum TrackModelNode.SelectionNodeStrategy | Evergine Doc",
    "keywords": "Enum TrackModelNode.SelectionNodeStrategy Device selection strategy enumeration. Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public enum TrackModelNode.SelectionNodeStrategy Fields Name Description ByIndex Selection by node index. RootNode Select the root node. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackQRCode.html": {
    "href": "api/Evergine.Components.XR.TrackQRCode.html",
    "title": "Class TrackQRCode | Evergine Doc",
    "keywords": "Class TrackQRCode Component used to track a Evergine.Framework.XR.QR.QRCode pose with an entity Evergine.Framework.Graphics.Transform3D. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TrackQRCode Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class TrackQRCode : Behavior, IDependencyObject Fields qRCodeWatcherService The Evergine.Framework.XR.QR.IQRCodeWatcherService dependency. Declaration [BindService(true)] protected IQRCodeWatcherService qRCodeWatcherService Field Value Type Description IQRCodeWatcherService trackedQRCode The currently tracked Evergine.Framework.XR.QR.QRCode. Declaration protected QRCode trackedQRCode Field Value Type Description QRCode transform3D The Evergine.Framework.Graphics.Transform3D dependency. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform3D Field Value Type Description Transform3D Properties AutoMatching Gets or sets a value indicating whether this component will match a Evergine.Framework.XR.QR.QRCode to be tracked automatically. Declaration public bool AutoMatching { get; set; } Property Value Type Description bool DataFilter Gets or sets the filter used against the Evergine.Framework.XR.QR.QRCode.Data to match. Declaration public string DataFilter { get; set; } Property Value Type Description string Remarks When IsRegexDataFilter, this filter will be considered as a regular expression matching pattern. Otherwise, the filter will be considered as literal. When set to null, first detected QR will be matched. IsRegexDataFilter Gets or sets a value indicating whether the DataFilter will be considered as a regular expression matching pattern. Declaration public bool IsRegexDataFilter { get; set; } Property Value Type Description bool ScaleBasedOnPhysicalLength Gets or sets a value indicating whether the Evergine.Framework.Graphics.Transform3D.Scale will be updated based on the Evergine.Framework.XR.QR.QRCode.PhysicalSideLength property of the TrackedQRCode. Declaration public bool ScaleBasedOnPhysicalLength { get; set; } Property Value Type Description bool TrackedQRCode Gets or sets the tracked Evergine.Framework.XR.QR.QRCode. Declaration public QRCode TrackedQRCode { get; set; } Property Value Type Description QRCode Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() TryMatchWithDetectedCodes() Tries to match with already detected codes from the Evergine.Framework.XR.QR.IQRCodeWatcherService. Declaration public bool TryMatchWithDetectedCodes() Returns Type Description bool true if a matching code is found; otherwise, false. Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Events Updated Occurs when the TrackedQRCode is updated. Declaration public event EventHandler Updated Event Type Type Description EventHandler Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackSpatialAnchor.html": {
    "href": "api/Evergine.Components.XR.TrackSpatialAnchor.html",
    "title": "Class TrackSpatialAnchor | Evergine Doc",
    "keywords": "Class TrackSpatialAnchor Track a spatial anchor. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TrackSpatialAnchor Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class TrackSpatialAnchor : Behavior, IDependencyObject Fields SpatialAnchor The Spatial Anchor. Declaration public SpatialAnchor SpatialAnchor Field Value Type Description SpatialAnchor Properties AnchorId Gets or sets the Anchor Id. Declaration public string AnchorId { get; set; } Property Value Type Description string Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() StoreAnchor() Store the current entity position as an spatial anchor with the current Anchor Id. Declaration public void StoreAnchor() Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackXRArticulatedHand.html": {
    "href": "api/Evergine.Components.XR.TrackXRArticulatedHand.html",
    "title": "Class TrackXRArticulatedHand | Evergine Doc",
    "keywords": "Class TrackXRArticulatedHand Track a spatial anchor. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TrackXRDevice TrackXRController TrackXRArticulatedHand Implements IDependencyObject Inherited Members TrackXRController.ControllerState TrackXRController.Handedness TrackXRController.InternalUpdate() TrackXRDevice.xrPlatform TrackXRDevice.transform TrackXRDevice.pointer TrackXRDevice.Transform TrackXRDevice.InternalSelectionStrategy TrackXRDevice.InternalDeviceType TrackXRDevice.InternalHandedness TrackXRDevice.InternalIndex TrackXRDevice.TrackedDevice TrackXRDevice.TrackingState TrackXRDevice.IsConnected TrackXRDevice.PoseIsValid TrackXRDevice.Velocity TrackXRDevice.AngularVelocity TrackXRDevice.Pointer TrackXRDevice.LocalPointer TrackXRDevice.Pose TrackXRDevice.LocalPose TrackXRDevice.TrackingLostMode TrackXRDevice.OnTrackedDeviceChanged TrackXRDevice.OnAttached() TrackXRDevice.Update(TimeSpan) TrackXRDevice.OnDetach() TrackXRDevice.RefreshTrackedDevice() Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class TrackXRArticulatedHand : TrackXRController, IDependencyObject Constructors TrackXRArticulatedHand() Initializes a new instance of the TrackXRArticulatedHand class. Declaration public TrackXRArticulatedHand() Properties SupportedHandJointKind Gets the device supported hand joint array. Declaration public XRHandJointKind[] SupportedHandJointKind { get; } Property Value Type Description XRHandJointKind[] Methods TryGetArticulatedHandJoint(XRHandJointKind, out XRHandJoint) Try get hand joint by the specified joint kind in world space. Declaration public bool TryGetArticulatedHandJoint(XRHandJointKind jointKind, out XRHandJoint joint) Parameters Type Name Description XRHandJointKind jointKind The joint kind. XRHandJoint joint The pose of the hand joint. Returns Type Description bool True if the specified joint kind is available. TryGetArticulatedHandJointLocal(XRHandJointKind, out XRHandJoint) Try get hand joint by the specified joint kind in local space. Declaration public bool TryGetArticulatedHandJointLocal(XRHandJointKind jointKind, out XRHandJoint joint) Parameters Type Name Description XRHandJointKind jointKind The joint kind. XRHandJoint joint The pose of the hand joint. Returns Type Description bool True if the specified joint kind is available. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackXRController.html": {
    "href": "api/Evergine.Components.XR.TrackXRController.html",
    "title": "Class TrackXRController | Evergine Doc",
    "keywords": "Class TrackXRController Track a spatial anchor. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TrackXRDevice TrackXRController TrackXRArticulatedHand Implements IDependencyObject Inherited Members TrackXRDevice.xrPlatform TrackXRDevice.transform TrackXRDevice.pointer TrackXRDevice.Transform TrackXRDevice.InternalSelectionStrategy TrackXRDevice.InternalDeviceType TrackXRDevice.InternalHandedness TrackXRDevice.InternalIndex TrackXRDevice.TrackedDevice TrackXRDevice.TrackingState TrackXRDevice.IsConnected TrackXRDevice.PoseIsValid TrackXRDevice.Velocity TrackXRDevice.AngularVelocity TrackXRDevice.Pointer TrackXRDevice.LocalPointer TrackXRDevice.Pose TrackXRDevice.LocalPose TrackXRDevice.TrackingLostMode TrackXRDevice.OnTrackedDeviceChanged TrackXRDevice.OnAttached() TrackXRDevice.Update(TimeSpan) TrackXRDevice.OnDetach() TrackXRDevice.RefreshTrackedDevice() Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class TrackXRController : TrackXRDevice, IDependencyObject Constructors TrackXRController() Initializes a new instance of the TrackXRController class. Declaration public TrackXRController() Properties ControllerState Gets the Controller State. Declaration public XRControllerGenericState ControllerState { get; } Property Value Type Description XRControllerGenericState Handedness Gets or sets the controller role. Declaration public XRHandedness Handedness { get; set; } Property Value Type Description XRHandedness Methods InternalUpdate() Update method by tracked device. Declaration protected override void InternalUpdate() Overrides TrackXRDevice.InternalUpdate() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackXRDevice.html": {
    "href": "api/Evergine.Components.XR.TrackXRDevice.html",
    "title": "Class TrackXRDevice | Evergine Doc",
    "keywords": "Class TrackXRDevice Track a spatial anchor. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior TrackXRDevice AdvancedTrackXRDevice TrackXRController Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class TrackXRDevice : Behavior, IDependencyObject Fields pointer The pointer ray in world space... Declaration protected Ray pointer Field Value Type Description Ray transform Owner Entity Transform3D Component. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform Field Value Type Description Transform3D xrPlatform XReality Platform. Declaration [BindService(true)] protected XRPlatform xrPlatform Field Value Type Description XRPlatform Properties AngularVelocity Gets the device angular velocity. Declaration public Vector3 AngularVelocity { get; } Property Value Type Description Vector3 InternalDeviceType Gets or sets the Device Type. Declaration protected XRTrackedDeviceType InternalDeviceType { get; set; } Property Value Type Description XRTrackedDeviceType InternalHandedness Gets or sets the controller role. Declaration protected XRHandedness InternalHandedness { get; set; } Property Value Type Description XRHandedness InternalIndex Gets or sets the Index. Declaration protected uint InternalIndex { get; set; } Property Value Type Description uint InternalSelectionStrategy Gets or sets the Device Selection Strategy. Declaration protected TrackXRDevice.SelectionDeviceStrategy InternalSelectionStrategy { get; set; } Property Value Type Description TrackXRDevice.SelectionDeviceStrategy IsConnected Gets a value indicating whether this device has been connected with a real device. Declaration public bool IsConnected { get; } Property Value Type Description bool LocalPointer Gets the device pointer ray in local space. Declaration public Ray LocalPointer { get; } Property Value Type Description Ray LocalPose Gets the current device pose in local space. Declaration public ViewPose LocalPose { get; } Property Value Type Description ViewPose Pointer Gets the device pointer ray. Declaration public Ray Pointer { get; } Property Value Type Description Ray Pose Gets the current device pose. Declaration public ViewPose Pose { get; } Property Value Type Description ViewPose PoseIsValid Gets a value indicating whether the pose of this device is valid. Declaration public bool PoseIsValid { get; } Property Value Type Description bool TrackedDevice Gets the tracked device. Declaration public XRTrackedDevice TrackedDevice { get; } Property Value Type Description XRTrackedDevice TrackingLostMode Gets or sets how this controller behave after tracking lost. Declaration [DataMember] public TrackXRDevice.XRTrackingLostMode TrackingLostMode { get; set; } Property Value Type Description TrackXRDevice.XRTrackingLostMode TrackingState Gets the current tracking state of this device. Declaration public XRTrackingState TrackingState { get; } Property Value Type Description XRTrackingState Transform Gets the transform of the tracked device. Declaration public Transform3D Transform { get; } Property Value Type Description Transform3D Velocity Gets the device angular velocity. Declaration public Vector3 Velocity { get; } Property Value Type Description Vector3 Methods InternalUpdate() Update method by tracked device. Declaration protected virtual void InternalUpdate() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() RefreshTrackedDevice() Refresh the tracked device. Declaration protected virtual void RefreshTrackedDevice() Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Events OnTrackedDeviceChanged On tracked device changed event. Declaration public event EventHandler<XRTrackedDevice> OnTrackedDeviceChanged Event Type Type Description EventHandler<XRTrackedDevice> Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackXRDevice.SelectionDeviceStrategy.html": {
    "href": "api/Evergine.Components.XR.TrackXRDevice.SelectionDeviceStrategy.html",
    "title": "Enum TrackXRDevice.SelectionDeviceStrategy | Evergine Doc",
    "keywords": "Enum TrackXRDevice.SelectionDeviceStrategy Device selection strategy enumeration. Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public enum TrackXRDevice.SelectionDeviceStrategy Fields Name Description ByDeviceIndex Selection by device index ByDeviceType Selection by Device Type. ByDeviceTypeAndHandedness Selection by device type and handedness. ByHandedness Selection by handedness type. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.TrackXRDevice.XRTrackingLostMode.html": {
    "href": "api/Evergine.Components.XR.TrackXRDevice.XRTrackingLostMode.html",
    "title": "Enum TrackXRDevice.XRTrackingLostMode | Evergine Doc",
    "keywords": "Enum TrackXRDevice.XRTrackingLostMode Describe how a controller will behave if the tracking is lost. Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public enum TrackXRDevice.XRTrackingLostMode Fields Name Description DisableEntityOnDisconnection Disable the entity when the controller is not connected. DisableEntityOnPoseInvalid Disable the entity when the pose is invalid. KeepLastPose Keep the last pose detected Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRDeviceMeshComponent.html": {
    "href": "api/Evergine.Components.XR.XRDeviceMeshComponent.html",
    "title": "Class XRDeviceMeshComponent | Evergine Doc",
    "keywords": "Class XRDeviceMeshComponent A 3D mesh provided by XR platform. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent XRDeviceMeshComponent Implements IDependencyObject Inherited Members MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.Model MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.ModelMeshName MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRDeviceMeshComponent : MeshComponent, IDependencyObject Properties XRModelName Gets or sets the XR model name. Declaration public string XRModelName { get; set; } Property Value Type Description string Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Components.Graphics3D.MeshComponent.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRDeviceRenderableModel.html": {
    "href": "api/Evergine.Components.XR.XRDeviceRenderableModel.html",
    "title": "Class XRDeviceRenderableModel | Evergine Doc",
    "keywords": "Class XRDeviceRenderableModel Render a 3d model associated to a XR device. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component XRDeviceRenderableModel Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRDeviceRenderableModel : Component, IDependencyObject Properties RenderableEntity Gets the renderable entity. Declaration public Entity RenderableEntity { get; } Property Value Type Description Entity Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() Start() Invoked to start the object. Declaration protected override void Start() Overrides Evergine.Framework.Component.Start() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRFaceTrackingMesh.html": {
    "href": "api/Evergine.Components.XR.XRFaceTrackingMesh.html",
    "title": "Class XRFaceTrackingMesh | Evergine Doc",
    "keywords": "Class XRFaceTrackingMesh Enables face tracking and renders a face mesh. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component BaseModel MeshComponent XRFaceTrackingMesh Implements IDependencyObject Inherited Members MeshComponent.modelLink MeshComponent.meshContainer MeshComponent.ChangedMesh MeshComponent.modelMeshName MeshComponent.MeshCount MeshComponent.MeshContainer MeshComponent.MeshNames MeshComponent.Meshes MeshComponent.BoundingBox MeshComponent.OnDestroy() MeshComponent.UnloadModel() MeshComponent.ThrowRefreshEvent() MeshComponent.RefreshMesh() BaseModel.customBoundingBoxSet BaseModel.Refreshed BaseModel.BoundingBoxRefreshed BaseModel.GetBoneByMeshIndex(int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRFaceTrackingMesh : MeshComponent, IDependencyObject Fields graphicsContext Graphics context. Declaration [BindService(true)] protected GraphicsContext graphicsContext Field Value Type Description GraphicsContext transform Owner's transform. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform Field Value Type Description Transform3D Properties Model Gets the model data. Declaration public Model Model { get; } Property Value Type Description Model ModelMeshName Gets the specify the mesh name to render. Declaration public string ModelMeshName { get; } Property Value Type Description string Methods OnAnchorAdded() Invoked when face anchor has been detected. Declaration protected virtual void OnAnchorAdded() OnAnchorRemoved() Invoked when face anchor has been removed. Declaration protected virtual void OnAnchorRemoved() OnAnchorUpdated() Invoked when face anchor has been updated. Declaration protected virtual void OnAnchorUpdated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Components.Graphics3D.MeshComponent.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRFeaturePointsRenderer.html": {
    "href": "api/Evergine.Components.XR.XRFeaturePointsRenderer.html",
    "title": "Class XRFeaturePointsRenderer | Evergine Doc",
    "keywords": "Class XRFeaturePointsRenderer Renders feature points. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior XRFeaturePointsRenderer Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRFeaturePointsRenderer : Behavior, IDependencyObject Methods Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRImageTracking.html": {
    "href": "api/Evergine.Components.XR.XRImageTracking.html",
    "title": "Class XRImageTracking | Evergine Doc",
    "keywords": "Class XRImageTracking Tracks an image by its name. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component XRImageTracking Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRImageTracking : Component, IDependencyObject Fields transform Owner's transform. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D transform Field Value Type Description Transform3D Properties ImageName Gets or sets image name. Declaration public string ImageName { get; set; } Property Value Type Description string IsFixed Gets or sets a value indicating whether image is fixed (not being moved) in real world. Declaration public bool IsFixed { get; set; } Property Value Type Description bool Size Gets the size of the image target. Declaration public Vector3 Size { get; } Property Value Type Description Vector3 TrackingMethod Gets the current tracking method. Declaration public XRImageTrackingMethod TrackingMethod { get; } Property Value Type Description XRImageTrackingMethod Methods OnAnchorAdded() Invoked when face anchor has been detected. Declaration protected virtual void OnAnchorAdded() OnAnchorRemoved() Invoked when face anchor has been removed. Declaration protected virtual void OnAnchorRemoved() OnAnchorUpdated() Invoked when face anchor has been updated. Declaration protected virtual void OnAnchorUpdated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() UpdateEntityPosition(XRImageTrackable) Updates entity position. Declaration protected virtual void UpdateEntityPosition(XRImageTrackable anchor) Parameters Type Name Description XRImageTrackable anchor Image anchor. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRLightEstimationBehavior.html": {
    "href": "api/Evergine.Components.XR.XRLightEstimationBehavior.html",
    "title": "Class XRLightEstimationBehavior | Evergine Doc",
    "keywords": "Class XRLightEstimationBehavior Class that changes the light intensity based on the AR mobile light estimation. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior XRLightEstimationBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Behavior.OnAttached() Behavior.OnDetach() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRLightEstimationBehavior : Behavior, IDependencyObject Fields light The light. Declaration [BindComponent(true, false, BindComponentSource.Owner, null, true)] protected PhotometricDirectionalLight light Field Value Type Description PhotometricDirectionalLight Methods Update(TimeSpan) Allows this instance to execute custom logic during its Update. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This method will not be executed if the Evergine.Framework.Component, or the Evergine.Framework.Entity owning it are not Active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRPassthroughLayerComponent.html": {
    "href": "api/Evergine.Components.XR.XRPassthroughLayerComponent.html",
    "title": "Class XRPassthroughLayerComponent | Evergine Doc",
    "keywords": "Class XRPassthroughLayerComponent This component is responsible to create a XR Passthrough Layer. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component XRPassthroughLayerComponent Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRPassthroughLayerComponent : Component, IDependencyObject Fields passthroughLayer The XR instance of the passthrough layer. Declaration public XRPassthroughLayer passthroughLayer Field Value Type Description XRPassthroughLayer Properties Brightness Gets or sets the brightness adjustment value in the range [-100, 100]. The neutral element is 0. Declaration [RenderPropertyAsFInput(AttachToTag = 2, AttachToValue = XRPassthroughColorControlType.ColorAdjustment, MinLimit = -100, MaxLimit = 100)] public float Brightness { get; set; } Property Value Type Description float ColorControl Gets or sets the flags indicating how to control the color of the layer. Declaration [RenderProperty(Tag = 2)] public XRPassthroughColorControlType ColorControl { get; set; } Property Value Type Description XRPassthroughColorControlType ColorMapMonoToMono Gets or sets the color curve to which the passthrough imagery luminance values are mapped. Declaration [RenderProperty(AttachToTag = 2, AttachToValue = XRPassthroughColorControlType.GrayscaleMap)] public FloatCurve ColorMapMonoToMono { get; set; } Property Value Type Description FloatCurve ColorMapMonoToRGBA Gets or sets the color curve to which the passthrough imagery luminance values are mapped. Declaration [RenderProperty(AttachToTag = 2, AttachToValue = XRPassthroughColorControlType.ColorMap)] public ColorCurve ColorMapMonoToRGBA { get; set; } Property Value Type Description ColorCurve CompositionOrder Gets or sets the composition order. It defines the order of the layers in composition. The layer with larger CompositionOrder would be composited in the front of the layer with smaller CompositionOrder. Declaration public int CompositionOrder { get; set; } Property Value Type Description int Contrast Gets or sets the contrast adjustment value in the range [0, Infinity]. The neutral element is 1. Declaration [RenderPropertyAsFInput(AttachToTag = 2, AttachToValue = XRPassthroughColorControlType.ColorAdjustment, MinLimit = 0)] public float Contrast { get; set; } Property Value Type Description float EdgeColor Gets or sets the passthorugh edge color. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = true)] public Color EdgeColor { get; set; } Property Value Type Description Color EdgeRendering Gets or sets a value indicating whether enabling or not the Passthroigh edge enhancement. Declaration [RenderProperty(Tag = 1)] public bool EdgeRendering { get; set; } Property Value Type Description bool IsRunning Gets a value indicating whether the passthrough is running. Declaration public bool IsRunning { get; } Property Value Type Description bool Opacity Gets or sets passthrough texture opacity. Declaration [RenderPropertyAsFInput(AsSlider = true, MinLimit = 0, MaxLimit = 1)] public float Opacity { get; set; } Property Value Type Description float PassthroughLayer Gets the XR instance of the passthrough layer. Declaration public XRPassthroughLayer PassthroughLayer { get; } Property Value Type Description XRPassthroughLayer Placement Gets or sets whether this overlay should layer behind the scene or in front of it. Declaration public XROverlayType Placement { get; set; } Property Value Type Description XROverlayType ProjectionSurface Gets or sets the type of projection surface for this Passthrough layer. Declaration public XRProjectionSurfaceType ProjectionSurface { get; set; } Property Value Type Description XRProjectionSurfaceType Saturation Gets or sets the saturation adjustment value in the range [0, Infinity]. The neutral element is 1. Declaration [RenderPropertyAsFInput(AttachToTag = 2, AttachToValue = XRPassthroughColorControlType.ColorAdjustment, MinLimit = 0)] public float Saturation { get; set; } Property Value Type Description float StartPassthroughAutomatically Gets or sets a value indicating whether the passthrough layer is played automatically when the component starts. Declaration public bool StartPassthroughAutomatically { get; set; } Property Value Type Description bool true if [play automatically]; otherwise, false. Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRPassthroughSurfaceMeshComponent.html": {
    "href": "api/Evergine.Components.XR.XRPassthroughSurfaceMeshComponent.html",
    "title": "Class XRPassthroughSurfaceMeshComponent | Evergine Doc",
    "keywords": "Class XRPassthroughSurfaceMeshComponent This component is responsible to create a XR Passthrough surface object. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component XRPassthroughSurfaceMeshComponent Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRPassthroughSurfaceMeshComponent : Component, IDependencyObject Properties PassthroughLayerEntityPath Gets or sets the entity path of an entity that contains the passthrough layer. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = XRPassthroughSurfaceSearchType.Scene)] public string PassthroughLayerEntityPath { get; set; } Property Value Type Description string SearchPassthroughLayer Gets or sets how to search the passthrough layer. Declaration [RenderProperty(Tag = 1)] public XRPassthroughSurfaceSearchType SearchPassthroughLayer { get; set; } Property Value Type Description XRPassthroughSurfaceSearchType SurfaceMeshes Gets the collection of surface meshes. Declaration public IEnumerable<XRPassthroughSurfaceMesh> SurfaceMeshes { get; } Property Value Type Description IEnumerable<XRPassthroughSurfaceMesh> Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() Start() Invoked to start the object. Declaration protected override void Start() Overrides Evergine.Framework.Component.Start() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRPassthroughSurfaceSearchType.html": {
    "href": "api/Evergine.Components.XR.XRPassthroughSurfaceSearchType.html",
    "title": "Enum XRPassthroughSurfaceSearchType | Evergine Doc",
    "keywords": "Enum XRPassthroughSurfaceSearchType The way that the layer will be searched. Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public enum XRPassthroughSurfaceSearchType Fields Name Description OwnerEntity Search in the owner entity. Scene Search in the scene. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Components.XR.XRPlaneRenderer.html": {
    "href": "api/Evergine.Components.XR.XRPlaneRenderer.html",
    "title": "Class XRPlaneRenderer | Evergine Doc",
    "keywords": "Class XRPlaneRenderer Component that visualizes the AR mobile planes. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component XRPlaneRenderer Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Components.XR Assembly: Evergine.Components.dll Syntax public class XRPlaneRenderer : Component, IDependencyObject Constructors XRPlaneRenderer() Initializes a new instance of the XRPlaneRenderer class. Declaration public XRPlaneRenderer() Properties Material Gets or sets plane material. Declaration public Material Material { get; set; } Property Value Type Description Material Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11Buffer.html": {
    "href": "api/Evergine.DirectX11.DX11Buffer.html",
    "title": "Class DX11Buffer | Evergine Doc",
    "keywords": "Class DX11Buffer Represents a DirectX buffer object. Inheritance object GraphicsResource Buffer DX11Buffer Implements IDisposable Inherited Members Buffer.Description Buffer.UpdateCounter GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11Buffer : Buffer, IDisposable Constructors DX11Buffer(DX11GraphicsContext, IntPtr, ref BufferDescription) Initializes a new instance of the DX11Buffer class. Declaration public DX11Buffer(DX11GraphicsContext context, IntPtr data, ref BufferDescription description) Parameters Type Name Description DX11GraphicsContext context The graphics context. IntPtr data Data pointer. BufferDescription description The buffer description. Fields NativeBuffer The DirectX buffer instance. Declaration public ID3D11Buffer NativeBuffer Field Value Type Description ID3D11Buffer Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Buffer.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer ShaderResourceView Gets the shader resource view. Declaration public ID3D11ShaderResourceView ShaderResourceView { get; } Property Value Type Description ID3D11ShaderResourceView UnorderedAccessView Gets the unordered access view. Declaration public ID3D11UnorderedAccessView UnorderedAccessView { get; } Property Value Type Description ID3D11UnorderedAccessView Methods CopyTo(ID3D11DeviceContext, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration public void CopyTo(ID3D11DeviceContext deviceContext, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description ID3D11DeviceContext deviceContext Device context. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() SetData(ID3D11DeviceContext, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(ID3D11DeviceContext deviceContext, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description ID3D11DeviceContext deviceContext Device context. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. ToStaging() Return a new Buffer with ResourceUsage set to staging. Declaration public DX11Buffer ToStaging() Returns Type Description DX11Buffer New staging Buffer. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11Capabilities.html": {
    "href": "api/Evergine.DirectX11.DX11Capabilities.html",
    "title": "Class DX11Capabilities | Evergine Doc",
    "keywords": "Class DX11Capabilities The DX11 capabilities. Inheritance object GraphicsContextCapabilities DX11Capabilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11Capabilities : GraphicsContextCapabilities Constructors DX11Capabilities(DX11GraphicsContext) Initializes a new instance of the DX11Capabilities class. Declaration public DX11Capabilities(DX11GraphicsContext dx11Context) Parameters Type Name Description DX11GraphicsContext dx11Context The dx11 graphic context. Properties ClipDepth Gets the depth range in clip space. Declaration public override ClipDepth ClipDepth { get; } Property Value Type Description ClipDepth Overrides GraphicsContextCapabilities.ClipDepth FlipProjectionRequired Gets a value indicating whether we need to flip projection matrix on Render Target. Declaration public override bool FlipProjectionRequired { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.FlipProjectionRequired IsComputeShaderSupported Gets a value indicating whether this graphics context support compute shaders. Declaration public override bool IsComputeShaderSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsComputeShaderSupported IsMRTSupported Gets a value indicating whether this graphics context supports Multi Render Target (MRT). Declaration public override bool IsMRTSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsMRTSupported IsRaytracingSupported Gets a value indicating whether this graphics context supports Raytracing. Declaration public override bool IsRaytracingSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsRaytracingSupported IsShadowMapSupported Gets a value indicating whether this graphics context supports Shadow Maps. Declaration public override bool IsShadowMapSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsShadowMapSupported MatrixMajorness Gets a value indicating whether this graphics context uses row major matrices by default. Declaration public override MatrixMajorness MatrixMajorness { get; } Property Value Type Description MatrixMajorness Overrides GraphicsContextCapabilities.MatrixMajorness MultiviewStrategy Gets the multiview strategy supported by this graphic context. Declaration public override MultiviewStrategy MultiviewStrategy { get; } Property Value Type Description MultiviewStrategy Overrides GraphicsContextCapabilities.MultiviewStrategy Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11CommandBuffer.html": {
    "href": "api/Evergine.DirectX11.DX11CommandBuffer.html",
    "title": "Class DX11CommandBuffer | Evergine Doc",
    "keywords": "Class DX11CommandBuffer This class represent a set of commands. Inheritance object CommandBuffer DX11CommandBuffer Implements IDisposable IGetNativePointers Inherited Members CommandBuffer.State CommandBuffer.InRenderPass CommandBuffer.End() CommandBuffer.SetVertexBuffers(Buffer[]) CommandBuffer.SetVertexBuffer(uint, Buffer, uint) CommandBuffer.SetVertexBuffers(Buffer[], int[]) CommandBuffer.SetIndexBuffer(Buffer, IndexFormat, uint) CommandBuffer.SetGraphicsPipelineState(GraphicsPipelineState) CommandBuffer.SetComputePipelineState(ComputePipelineState) CommandBuffer.SetRaytracingPipelineState(RaytracingPipelineState) CommandBuffer.SetResourceSet(ResourceSet, uint, uint[]) CommandBuffer.BeginRenderPass(ref RenderPassDescription) CommandBuffer.EndRenderPass() CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint) CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint, uint) CommandBuffer.UpdateBufferData<T>(Buffer, ref T, uint) CommandBuffer.UpdateBufferData(Buffer, IntPtr, uint, uint) CommandBuffer.CopyBufferDataTo(Buffer, Buffer, uint, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, Texture) CommandBuffer.CopyTextureDataTo(Texture, Texture, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) CommandBuffer.Blit(Texture, Texture) CommandBuffer.Dispatch1D(uint, uint) CommandBuffer.Dispatch2D(uint, uint, uint, uint) CommandBuffer.Dispatch3D(uint, uint, uint, uint, uint, uint) CommandBuffer.ClearCache() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11CommandBuffer : CommandBuffer, IDisposable, IGetNativePointers Constructors DX11CommandBuffer(DX11GraphicsContext, DX11CommandQueue) Initializes a new instance of the DX11CommandBuffer class. Declaration public DX11CommandBuffer(DX11GraphicsContext graphicsContext, DX11CommandQueue queue) Parameters Type Name Description DX11GraphicsContext graphicsContext Graphics Context. DX11CommandQueue queue The commandqueue for this commandbuffer. Fields NativeCommandList The DirectX11 command list. Declaration public ID3D11CommandList NativeCommandList Field Value Type Description ID3D11CommandList Properties AvailablePointerKeys Gets a list of all available keys to obtain native pointers. Declaration public override IEnumerable<string> AvailablePointerKeys { get; } Property Value Type Description IEnumerable<string> Overrides CommandBuffer.AvailablePointerKeys GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides CommandBuffer.GraphicsContext Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandBuffer.Name NativeContextPointer Gets the native pointer of the DeviceContext. Declaration public IntPtr NativeContextPointer { get; } Property Value Type Description IntPtr Methods Begin() Set the initialize state for this commandbuffer. This function must be called before other graphics commands ca be issued. Declaration public override void Begin() Overrides CommandBuffer.Begin() BeginDebugMarker(string) Marks the beginning of a section of event code. This allows subsequent commands to be categorized and filtered when viewed in external debugging tools. Declaration public override void BeginDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.BeginDebugMarker(string) Remarks You call the EndDebugMarker method to mark the end of the section of event code. BeginDebugMarker has no effect if the calling application is not running under an enabled profiling tool. BeginQuery(QueryHeap, uint) Begins a GPU query. Declaration public override void BeginQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.BeginQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. BeginRenderPassInternal(ref RenderPassDescription) Begin a render pass. Declaration protected override void BeginRenderPassInternal(ref RenderPassDescription description) Parameters Type Name Description RenderPassDescription description The renderPass description RenderPassDescription. Overrides CommandBuffer.BeginRenderPassInternal(ref RenderPassDescription) Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain. Declaration protected override void Blit(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint layerCount The number of array layers to copy. Overrides CommandBuffer.Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) BuildRaytracingAccelerationStructure(BottomLevelASDescription) Perform an bottom level acceleration structure build on the GPU. Declaration public override BottomLevelAS BuildRaytracingAccelerationStructure(BottomLevelASDescription description) Parameters Type Name Description BottomLevelASDescription description Returns Type Description BottomLevelAS Bottom Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(BottomLevelASDescription) BuildRaytracingAccelerationStructure(TopLevelASDescription) Perform an top level acceleration structure build on the GPU. Declaration public override TopLevelAS BuildRaytracingAccelerationStructure(TopLevelASDescription description) Parameters Type Name Description TopLevelASDescription description Returns Type Description TopLevelAS Top Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(TopLevelASDescription) Commit() Commits this command buffer to the command queue waiting to be execute on GPU after Submit(). Declaration public override void Commit() Overrides CommandBuffer.Commit() CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration protected override void CopyBufferDataToInternal(Buffer buffer, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer buffer Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Overrides CommandBuffer.CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copies a region from this texture in other texture. Declaration protected override void CopyTextureDataToInternal(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint width The width in texels of the copy region. uint height The height in texels of the copy region. uint depth The depth in texels of the copy region. uint layerCount The number of array layers to copy. Overrides CommandBuffer.CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Dispatch(uint, uint, uint) Execute commands in a compute shader from a thread group. Declaration public override void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) Parameters Type Name Description uint threadGroupCountX uint threadGroupCountY uint threadGroupCountZ Overrides CommandBuffer.Dispatch(uint, uint, uint) Remarks You call the Dispatch method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z). DispatchIndirect(Buffer, uint) Execute a command list over one or more thread groups. Declaration public override void DispatchIndirect(Buffer argBuffer, uint offset) Parameters Type Name Description Buffer argBuffer A buffer which must be loaded with data that matches the argument list for Dispatch(uint, uint, uint). uint offset A byte-aligned offset between the start of the buffer and the arguments. Overrides CommandBuffer.DispatchIndirect(Buffer, uint) DispatchRays(DispatchRaysDescription) Launch threads of a ray generation shader. See Initiating raytracing for an overview. Can be called from graphics or compute command lists and bundles. Declaration public override void DispatchRays(DispatchRaysDescription description) Parameters Type Name Description DispatchRaysDescription description Dispatch rays description. Overrides CommandBuffer.DispatchRays(DispatchRaysDescription) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandBuffer.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Draw(uint, uint) Draw non-indexed, non-instanced primitives. Declaration public override void Draw(uint vertexCount, uint startVertexLocation = 0) Parameters Type Name Description uint vertexCount Number of vertices to draw. uint startVertexLocation Index of the first vertex, which is usually an offset in a vertex buffer. Overrides CommandBuffer.Draw(uint, uint) DrawIndexed(uint, uint, uint) Draw indexed, non-instanced primitives. Declaration public override void DrawIndexed(uint indexCount, uint startIndexLocation = 0, uint baseVertexLocation = 0) Parameters Type Name Description uint indexCount Number of indices to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. Overrides CommandBuffer.DrawIndexed(uint, uint, uint) DrawIndexedInstanced(uint, uint, uint, uint, uint) Draw indexed, instanced primitives. Declaration public override void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation = 0, uint baseVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint indexCountPerInstance Number of indices read from the index buffer for each instance. uint instanceCount Number of instances to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawIndexedInstanced(uint, uint, uint, uint, uint) DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) Draw indexed, instanced, GPU-generated primitives. Declaration public override void DrawIndexedInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) DrawInstanced(uint, uint, uint, uint) Draw non-indexed, instanced primitives. Declaration public override void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint vertexCountPerInstance Number of vertices to draw. uint instanceCount Number of instances to draw. uint startVertexLocation Index of the first vertex. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawInstanced(uint, uint, uint, uint) DrawInstancedIndirect(Buffer, uint, uint, uint) Draw instanced, GPU-generated primitives. Declaration public override void DrawInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawInstancedIndirect(Buffer, uint, uint, uint) EndDebugMarker() Marks the end of a section of event code. Declaration public override void EndDebugMarker() Overrides CommandBuffer.EndDebugMarker() Remarks EndDebugMarker has no effect if the calling application is not running under an enabled profiling tool. EndInternal() Completes the command buffer. Declaration protected override void EndInternal() Overrides CommandBuffer.EndInternal() EndQuery(QueryHeap, uint) Ends a GPU query. Declaration public override void EndQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.EndQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. EndRenderPassInternal() End a render pass. Declaration protected override void EndRenderPassInternal() Overrides CommandBuffer.EndRenderPassInternal() GenerateMipmaps(Texture) Generates mipmaps for the given Texture. The largest mipmap is used to generate all of the lower mipmap levels contained in the Texture. Declaration public override void GenerateMipmaps(Texture texture) Parameters Type Name Description Texture texture The Texture to generate mipmaps for. This Texture must have been created with TextureFlags.GenerateMipmaps. Overrides CommandBuffer.GenerateMipmaps(Texture) GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration public override bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. Overrides CommandBuffer.GetNativePointer(string, out IntPtr) InsertDebugMarker(string) Marks a single point of execution in code. This is used by graphics debuggers to identify points of interest in a command stream. Declaration public override void InsertDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.InsertDebugMarker(string) Remarks InsertDebugMarker has no effect if the calling application is not running under an enabled profiling tool. Reset() Reset the command buffer to the initial state. Declaration public override void Reset() Overrides CommandBuffer.Reset() ResourceBarrierUnorderedAccessView(Buffer) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Buffer buffer) Parameters Type Name Description Buffer buffer The buffer. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Buffer) ResourceBarrierUnorderedAccessView(Texture) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Texture texture) Parameters Type Name Description Texture texture The texture. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Texture) SetComputePipelineStateInternal(ComputePipelineState) Sets the compute pipeline state object for this commandbuffer. Declaration protected override void SetComputePipelineStateInternal(ComputePipelineState pipeline) Parameters Type Name Description ComputePipelineState pipeline The compute pipeline state description. Overrides CommandBuffer.SetComputePipelineStateInternal(ComputePipelineState) SetGraphicsPipelineStateInternal(GraphicsPipelineState) Sets the graphics pipeline state object for this commandbuffer. Declaration protected override void SetGraphicsPipelineStateInternal(GraphicsPipelineState pipeline) Parameters Type Name Description GraphicsPipelineState pipeline The graphics pipeline state description. Overrides CommandBuffer.SetGraphicsPipelineStateInternal(GraphicsPipelineState) SetIndexBufferInternal(Buffer, IndexFormat, uint) Set an array of index buffers to the input-assembler stage. Declaration protected override void SetIndexBufferInternal(Buffer buffer, IndexFormat format = IndexFormat.UInt16, uint offset = 0) Parameters Type Name Description Buffer buffer The buffer being bound. IndexFormat format Indices Data Type (Default UInt16). uint offset Offset (in bytes) from the start of the index buffer to the first index to use. Overrides CommandBuffer.SetIndexBufferInternal(Buffer, IndexFormat, uint) SetRaytracingPipelineStateInternal(RaytracingPipelineState) Sets the raytracing pipeline state object for this commandbuffer. Declaration protected override void SetRaytracingPipelineStateInternal(RaytracingPipelineState pipeline) Parameters Type Name Description RaytracingPipelineState pipeline The raytracing pipeline state description. Overrides CommandBuffer.SetRaytracingPipelineStateInternal(RaytracingPipelineState) SetResourceSetInternal(ResourceSet, uint, uint[]) Set the active ResourceSet for the given index. Declaration protected override void SetResourceSetInternal(ResourceSet resourceSet, uint index, uint[] offsets) Parameters Type Name Description ResourceSet resourceSet The new ResourceSet. uint index The resourceSet index. uint[] offsets Overrides CommandBuffer.SetResourceSetInternal(ResourceSet, uint, uint[]) SetScissorRectangles(Rectangle[]) Set an scissor rectangle in a specific slot. Declaration public override void SetScissorRectangles(Rectangle[] rectangles) Parameters Type Name Description Rectangle[] rectangles The array of the scissor rectangles. Overrides CommandBuffer.SetScissorRectangles(Rectangle[]) SetVertexBufferInternal(uint, Buffer, uint) Set an buffers to the input-assembler stage. Declaration protected override void SetVertexBufferInternal(uint slot, Buffer buffer, uint offset) Parameters Type Name Description uint slot The buffer slot. Buffer buffer The buffer being bound. uint offset Offset (in bytes) from the start of buffer to the first vertex to use. Overrides CommandBuffer.SetVertexBufferInternal(uint, Buffer, uint) SetVertexBuffersInternal(Buffer[], int[]) Set an array of buffers to the input-assembler stage. Declaration protected override void SetVertexBuffersInternal(Buffer[] vertexBuffers, int[] offsets) Parameters Type Name Description Buffer[] vertexBuffers int[] offsets Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use. Overrides CommandBuffer.SetVertexBuffersInternal(Buffer[], int[]) SetViewports(Viewport[]) Set a viewport in a specific slot. Declaration public override void SetViewports(Viewport[] viewports) Parameters Type Name Description Viewport[] viewports The array of the viewports. Overrides CommandBuffer.SetViewports(Viewport[]) UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void UpdateBufferDataInternal(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides CommandBuffer.UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) Refit an top level accelerations structure build on the GPU. Declaration public override void UpdateRaytracingAccelerationStructure(ref TopLevelAS tlas, TopLevelASDescription newDescription) Parameters Type Name Description TopLevelAS tlas Top level acceleration structure. TopLevelASDescription newDescription New top level description. Overrides CommandBuffer.UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) WriteTimestamp(QueryHeap, uint) Write a device timestamp into a query heap. Declaration public override void WriteTimestamp(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap. uint index The query index. Overrides CommandBuffer.WriteTimestamp(QueryHeap, uint) Remarks This method works only with timestamp queryheap type. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11CommandQueue.html": {
    "href": "api/Evergine.DirectX11.DX11CommandQueue.html",
    "title": "Class DX11CommandQueue | Evergine Doc",
    "keywords": "Class DX11CommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. Inheritance object CommandQueue DX11CommandQueue Implements IDisposable Inherited Members CommandQueue.CommandBufferArraySize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11CommandQueue : CommandQueue, IDisposable Constructors DX11CommandQueue(DX11GraphicsContext) Initializes a new instance of the DX11CommandQueue class. Declaration public DX11CommandQueue(DX11GraphicsContext graphicsContext) Parameters Type Name Description DX11GraphicsContext graphicsContext The graphics context instance. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandQueue.Name Methods CommandBuffer() Gets the next CommandBuffer(). Declaration public override CommandBuffer CommandBuffer() Returns Type Description CommandBuffer The CommandBuffer. Overrides CommandQueue.CommandBuffer() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandQueue.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Submit() Submits a CommandBuffer list to be executed by the GPU. Declaration public override void Submit() Overrides CommandQueue.Submit() WaitIdle() Wait for all command buffers are executed. Declaration public override void WaitIdle() Overrides CommandQueue.WaitIdle() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11ComputePipelineState.html": {
    "href": "api/Evergine.DirectX11.DX11ComputePipelineState.html",
    "title": "Class DX11ComputePipelineState | Evergine Doc",
    "keywords": "Class DX11ComputePipelineState The DirectX version of PipelineState. Inheritance object PipelineState ComputePipelineState DX11ComputePipelineState Implements IDisposable Inherited Members ComputePipelineState.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11ComputePipelineState : ComputePipelineState, IDisposable Constructors DX11ComputePipelineState(DX11GraphicsContext, ref ComputePipelineDescription) Initializes a new instance of the DX11ComputePipelineState class. Declaration public DX11ComputePipelineState(DX11GraphicsContext context, ref ComputePipelineDescription description) Parameters Type Name Description DX11GraphicsContext context The graphics context. ComputePipelineDescription description The compute pipeline state description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ComputePipelineState.Name Methods Apply(ID3D11DeviceContext, DX11ComputePipelineState) Apply only changes compare with the previous pipelineState. Declaration public void Apply(ID3D11DeviceContext deviceContext, DX11ComputePipelineState previousPipeline) Parameters Type Name Description ID3D11DeviceContext deviceContext The device context. DX11ComputePipelineState previousPipeline The previous pipelineState. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11ExtensionsMethods.html": {
    "href": "api/Evergine.DirectX11.DX11ExtensionsMethods.html",
    "title": "Class DX11ExtensionsMethods | Evergine Doc",
    "keywords": "Class DX11ExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. Inheritance object DX11ExtensionsMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public static class DX11ExtensionsMethods Methods FromDirectX(Format) Convert to Evergine PixelFormat to DirectX Pixel Format. Declaration public static PixelFormat FromDirectX(this Format pixelFormat) Parameters Type Name Description Format pixelFormat DirectX pixel format. Returns Type Description PixelFormat Evergine pixel format. FromDirectX(SampleDescription) To convert from DirectX SampleDescription to TextureSampleCount. Declaration public static TextureSampleCount FromDirectX(this SampleDescription sampleDescription) Parameters Type Name Description SampleDescription sampleDescription The SampleDescription to convert. Returns Type Description TextureSampleCount The TextureSampleCount value. FromDirectX(BindFlags) To convert from DirectX BindFlags to TextureFlags. Declaration public static TextureFlags FromDirectX(this BindFlags flags) Parameters Type Name Description BindFlags flags the bind flags value to convert. Returns Type Description TextureFlags the ResourceUsage value. FromDirectX(CpuAccessFlags) To convert to ResourceCpuAccess. Declaration public static ResourceCpuAccess FromDirectX(this CpuAccessFlags cpuAccess) Parameters Type Name Description CpuAccessFlags cpuAccess the CpuAccessFlags to convert. Returns Type Description ResourceCpuAccess the CpuAccessFlags value. FromDirectX(ResourceUsage) To convert form DirectX ResourceUsage to TextureUsage. Declaration public static ResourceUsage FromDirectX(this ResourceUsage usage) Parameters Type Name Description ResourceUsage usage The DirectX resourceUsage value to convert. Returns Type Description ResourceUsage The ResourceUsage value. ToDirectX(BufferFlags) To convert from bufferflags to DirectX BindFalgs. Declaration public static BindFlags ToDirectX(this BufferFlags flags) Parameters Type Name Description BufferFlags flags The bufferFlags to convert. Returns Type Description BindFlags The DirectX BingFlags. ToDirectX(ComparisonFunction) Converts to DirectX compareFunction. Declaration public static ComparisonFunction ToDirectX(this ComparisonFunction function) Parameters Type Name Description ComparisonFunction function The value to convert. Returns Type Description ComparisonFunction The native value. ToDirectX(ElementFormat) To convert from VertexElementFormat to DXGI format. Declaration public static Format ToDirectX(this ElementFormat format) Parameters Type Name Description ElementFormat format The format to convert. Returns Type Description Format The result DXGI format. ToDirectX(GraphicsProfile) To convert from graphicsProfile to directX graphics profile. Declaration public static string ToDirectX(this GraphicsProfile profile) Parameters Type Name Description GraphicsProfile profile The profile to convert. Returns Type Description string The profile string. ToDirectX(IndexFormat) To convert from indexformat to DXGI format. Declaration public static Format ToDirectX(this IndexFormat format) Parameters Type Name Description IndexFormat format The indexformat to convert. Returns Type Description Format The result DXGI format. ToDirectX(MapMode, bool) Convert to DirectX MapMode. Declaration public static MapMode ToDirectX(this MapMode mode, bool isDynamic) Parameters Type Name Description MapMode mode The mode to convert. bool isDynamic Whether the resource is dynamic. Returns Type Description MapMode The directX map mode. ToDirectX(PixelFormat) Convert to DirectX Pixel Format. Declaration public static Format ToDirectX(this PixelFormat pixelFormat) Parameters Type Name Description PixelFormat pixelFormat pixelFormat. Returns Type Description Format DirectX pixel format. ToDirectX(ResourceCpuAccess) To convert to DirectX CpuAccessFlags. Declaration public static CpuAccessFlags ToDirectX(this ResourceCpuAccess cpuAccess) Parameters Type Name Description ResourceCpuAccess cpuAccess the TextureCpuAccess to convert. Returns Type Description CpuAccessFlags the CpuAccessFlags value. ToDirectX(ResourceUsage) To convert from TextureUsage to DirectX ResourceUsage. Declaration public static ResourceUsage ToDirectX(this ResourceUsage usage) Parameters Type Name Description ResourceUsage usage the texture usage value to convert. Returns Type Description ResourceUsage the ResourceUsage value. ToDirectX(SamplerBorderColor) Converts to native sampler bordercolor. Declaration public static Color4 ToDirectX(this SamplerBorderColor borderColor) Parameters Type Name Description SamplerBorderColor borderColor The value to convert. Returns Type Description Color4 The native rawColor4. ToDirectX(TextureAddressMode) Converts to DirectX sampler address mode. Declaration public static TextureAddressMode ToDirectX(this TextureAddressMode addressMode) Parameters Type Name Description TextureAddressMode addressMode The address mode to convert. Returns Type Description TextureAddressMode The native addressMode. ToDirectX(TextureFilter, bool) Converts to native Texturefilter. Declaration public static Filter ToDirectX(this TextureFilter filter, bool isComparison) Parameters Type Name Description TextureFilter filter The value to convert. bool isComparison If comparison function is active. Returns Type Description Filter The native value. ToDirectX(TextureFlags) To convert from TextureFlags to DirectX BindFlags. Declaration public static BindFlags ToDirectX(this TextureFlags flags) Parameters Type Name Description TextureFlags flags the texture usage value to convert. Returns Type Description BindFlags the ResourceUsage value. ToDirectX(TextureOptionFlags) To convert from TextureOptionFlags to DirectX ResourceOptionFlags. Declaration public static ResourceOptionFlags ToDirectX(this TextureOptionFlags optionFlags) Parameters Type Name Description TextureOptionFlags optionFlags the textureOptionFlags value to convert. Returns Type Description ResourceOptionFlags The converted ResourceOptionFlags. ToDirectX(TextureSampleCount) To convert from TextureSampleCount to DirectX SampleDescription. Declaration public static SampleDescription ToDirectX(this TextureSampleCount sampleCount) Parameters Type Name Description TextureSampleCount sampleCount The TextureSampleCount to convert. Returns Type Description SampleDescription The SampleDescription value. ToDirectX(VertexStepFunction) Converts to DirectX InputClassification enum. Declaration public static InputClassification ToDirectX(this VertexStepFunction stepFunction) Parameters Type Name Description VertexStepFunction stepFunction The value to convert. Returns Type Description InputClassification The native value. ToDirectXString(ShaderStages) To convert from ShaderStage to DirectX string. Declaration public static string ToDirectXString(this ShaderStages stage) Parameters Type Name Description ShaderStages stage The shaderstage to convert. Returns Type Description string The result string. ToGraphicProfile(FeatureLevel) To convert from directx feaure level to graphicsProfile. Declaration public static GraphicsProfile ToGraphicProfile(this FeatureLevel featureLevel) Parameters Type Name Description FeatureLevel featureLevel The feature level to convert. Returns Type Description GraphicsProfile The graphicsProfile. ToHLSLSemantic(ElementSemanticType) To convert from VertexSemanticType to HLSL semantic string. Declaration public static string ToHLSLSemantic(this ElementSemanticType semantic) Parameters Type Name Description ElementSemanticType semantic The semantic to convert. Returns Type Description string The semantic string. ToResourceOptionDirectX(BufferFlags) To convert from ResourceOptionFlags to DirectX ResourceOptionFlags. Declaration public static ResourceOptionFlags ToResourceOptionDirectX(this BufferFlags flags) Parameters Type Name Description BufferFlags flags Buffer flags. Returns Type Description ResourceOptionFlags Resource option flags enum."
  },
  "api/Evergine.DirectX11.DX11FrameBuffer.html": {
    "href": "api/Evergine.DirectX11.DX11FrameBuffer.html",
    "title": "Class DX11FrameBuffer | Evergine Doc",
    "keywords": "Class DX11FrameBuffer FrameBuffer implementation on DirectX. Inheritance object FrameBuffer DX11FrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11FrameBuffer : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors DX11FrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the DX11FrameBuffer class. Declaration public DX11FrameBuffer(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments = true) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth texture which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color textures, all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Fields ColorTargetViews The renderTargetView array of this DX11FrameBuffer. Declaration public ID3D11RenderTargetView[] ColorTargetViews Field Value Type Description ID3D11RenderTargetView[] DepthTargetview The depthTargetView of this DX11FrameBuffer. Declaration public ID3D11DepthStencilView DepthTargetview Field Value Type Description ID3D11DepthStencilView Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name Methods Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11GraphicsContext.html": {
    "href": "api/Evergine.DirectX11.DX11GraphicsContext.html",
    "title": "Class DX11GraphicsContext | Evergine Doc",
    "keywords": "Class DX11GraphicsContext Manages all graphical functionality. Inheritance object GraphicsContext DX11GraphicsContext Implements IDisposable IGetNativePointers Inherited Members GraphicsContext.TimestampFrequency GraphicsContext.DefaultSampler GraphicsContext.ValidationLayer GraphicsContext.IsValidationLayerEnabled GraphicsContext.Factory GraphicsContext.DefaultTextureUploaderSize GraphicsContext.DefaultBufferUploaderSize GraphicsContext.CreateDevice(ValidationLayer) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint, uint) GraphicsContext.UpdateBufferData<T>(Buffer, ref T, uint) GraphicsContext.UpdateBufferData(Buffer, IntPtr, uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, ref T, uint) GraphicsContext.ShaderCompile(string, string, ShaderStages) GraphicsContext.SyncUpcopyQueue() GraphicsContext.Dispose() GraphicsContext.CreateDefaultSampler() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11GraphicsContext : GraphicsContext, IDisposable, IGetNativePointers Constructors DX11GraphicsContext() Initializes a new instance of the DX11GraphicsContext class. Declaration public DX11GraphicsContext() Fields DXDevice The DirectX device. Declaration public ID3D11Device DXDevice Field Value Type Description ID3D11Device DXDeviceContext The DirectX device context. Declaration public ID3D11DeviceContext1 DXDeviceContext Field Value Type Description ID3D11DeviceContext1 DXFactory The DXGI factory. Declaration public IDXGIFactory2 DXFactory Field Value Type Description IDXGIFactory2 PipelineStateCache The pipeline cache. Declaration public DX11PipelineStateCache PipelineStateCache Field Value Type Description DX11PipelineStateCache Properties AvailablePointerKeys Gets a list of all available keys to obtain native pointers. Declaration public override IEnumerable<string> AvailablePointerKeys { get; } Property Value Type Description IEnumerable<string> Overrides GraphicsContext.AvailablePointerKeys BackendType Gets the backend type (DirectX, OpenGL ...) Declaration public override GraphicsBackend BackendType { get; } Property Value Type Description GraphicsBackend Overrides GraphicsContext.BackendType Capabilities Gets the capabilities of this graphics context. Declaration public override GraphicsContextCapabilities Capabilities { get; } Property Value Type Description GraphicsContextCapabilities Overrides GraphicsContext.Capabilities DXDevice1 Gets the DirectX Device1. Declaration public ID3D11Device1 DXDevice1 { get; } Property Value Type Description ID3D11Device1 DXDevice2 Gets the DirectX Device2. Declaration public ID3D11Device2 DXDevice2 { get; } Property Value Type Description ID3D11Device2 DXDevice3 Gets the DirectX Device3. Declaration public ID3D11Device3 DXDevice3 { get; } Property Value Type Description ID3D11Device3 NativeContextPointer Gets the native pointer of the DeviceContext. Declaration public IntPtr NativeContextPointer { get; } Property Value Type Description IntPtr NativeDevicePointer Gets the native device pointer. Declaration public override IntPtr NativeDevicePointer { get; } Property Value Type Description IntPtr Overrides GraphicsContext.NativeDevicePointer SupportedGraphicProfile Gets the supported graphic profile. Declaration public GraphicsProfile SupportedGraphicProfile { get; } Property Value Type Description GraphicsProfile Methods CreateDeviceInternal() Initialize the graphics context to be used in a compute shader. Declaration public override void CreateDeviceInternal() Overrides GraphicsContext.CreateDeviceInternal() CreateSwapChain(SwapChainDescription) Initialize the swapchain. Declaration public override SwapChain CreateSwapChain(SwapChainDescription description) Parameters Type Name Description SwapChainDescription description The swapchain descriptor. Returns Type Description SwapChain Created Swapchain. Overrides GraphicsContext.CreateSwapChain(SwapChainDescription) Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides GraphicsContext.Dispose(bool) GenerateTextureMipmapping(Texture) Generate mipmapping texture levels. Declaration public override bool GenerateTextureMipmapping(Texture texture) Parameters Type Name Description Texture texture The texture to generate mipmapping. Returns Type Description bool True if the mipmapping has been generated. Overrides GraphicsContext.GenerateTextureMipmapping(Texture) GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration public override bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. Overrides GraphicsContext.GetNativePointer(string, out IntPtr) InternalUpdateBufferData(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void InternalUpdateBufferData(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides GraphicsContext.InternalUpdateBufferData(Buffer, IntPtr, uint, uint) MapMemory(GraphicsResource, MapMode, uint) Maps a Buffer or Texture into a CPU-accessible data region. Declaration public override MappedResource MapMemory(GraphicsResource resource, MapMode mode, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. MapMode mode The MapMode used to map the resource. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Returns Type Description MappedResource A MappedResource structure describing the mapped data region. Overrides GraphicsContext.MapMemory(GraphicsResource, MapMode, uint) ShaderCompile(string, string, ShaderStages, CompilerParameters) Converts the shader source into bytecode. Declaration public override CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader bytecodes. Overrides GraphicsContext.ShaderCompile(string, string, ShaderStages, CompilerParameters) UnmapMemory(GraphicsResource, uint) Invalidates a previously-mapped data region for the given Buffer or Texture. Declaration public override void UnmapMemory(GraphicsResource resource, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Overrides GraphicsContext.UnmapMemory(GraphicsResource, uint) UpdateTextureData(Texture, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public override void UpdateTextureData(Texture texture, IntPtr source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description Texture texture Texture instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subResource index. Overrides GraphicsContext.UpdateTextureData(Texture, IntPtr, uint, uint) Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11GraphicsPipelineState.html": {
    "href": "api/Evergine.DirectX11.DX11GraphicsPipelineState.html",
    "title": "Class DX11GraphicsPipelineState | Evergine Doc",
    "keywords": "Class DX11GraphicsPipelineState The DirectX version of PipelineState. Inheritance object PipelineState GraphicsPipelineState DX11GraphicsPipelineState Implements IDisposable Inherited Members GraphicsPipelineState.Description GraphicsPipelineState.InvalidatedViewport object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11GraphicsPipelineState : GraphicsPipelineState, IDisposable Constructors DX11GraphicsPipelineState(DX11GraphicsContext, ref GraphicsPipelineDescription) Initializes a new instance of the DX11GraphicsPipelineState class. Declaration public DX11GraphicsPipelineState(DX11GraphicsContext context, ref GraphicsPipelineDescription description) Parameters Type Name Description DX11GraphicsContext context The graphics context. GraphicsPipelineDescription description The graphics pipeline state description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides GraphicsPipelineState.Name Methods Apply(ID3D11DeviceContext, DX11GraphicsPipelineState) Apply only changes compare with the previous pipelineState. Declaration public void Apply(ID3D11DeviceContext deviceContext, DX11GraphicsPipelineState previousPipeline) Parameters Type Name Description ID3D11DeviceContext deviceContext The device context. DX11GraphicsPipelineState previousPipeline The previous pipelineState. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11PipelineStateCache.html": {
    "href": "api/Evergine.DirectX11.DX11PipelineStateCache.html",
    "title": "Class DX11PipelineStateCache | Evergine Doc",
    "keywords": "Class DX11PipelineStateCache The DX11 pipelinecache used to minimize graphics state changes. Inheritance object DX11PipelineStateCache Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11PipelineStateCache : IDisposable Constructors DX11PipelineStateCache(DX11GraphicsContext) Initializes a new instance of the DX11PipelineStateCache class. Declaration public DX11PipelineStateCache(DX11GraphicsContext graphicsContext) Parameters Type Name Description DX11GraphicsContext graphicsContext Graphics Context. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. GetNativeBlendState(ref BlendStateDescription) Gets a native blendState from cache. Declaration public ID3D11BlendState GetNativeBlendState(ref BlendStateDescription description) Parameters Type Name Description BlendStateDescription description The blendState description. Returns Type Description ID3D11BlendState The native blendState. GetNativeDepthStencilState(ref DepthStencilStateDescription) Gets a native depthStencilState from cache. Declaration public ID3D11DepthStencilState GetNativeDepthStencilState(ref DepthStencilStateDescription description) Parameters Type Name Description DepthStencilStateDescription description The depthStencil description. Returns Type Description ID3D11DepthStencilState the native depthStencilState. GetNativeInputLayout(ref InputLayouts, byte[]) Gets a native inputLayout from cache. Declaration public ID3D11InputLayout GetNativeInputLayout(ref InputLayouts inputs, byte[] vertexShaderByteCode) Parameters Type Name Description InputLayouts inputs The inputLayout description. byte[] vertexShaderByteCode The vertexShader byteCode. Returns Type Description ID3D11InputLayout Input layout. GetNativeRasterizerState(ref RasterizerStateDescription, bool) Gets a native rasterizerState from cache. Declaration public ID3D11RasterizerState GetNativeRasterizerState(ref RasterizerStateDescription description, bool isMultisampleEnabled) Parameters Type Name Description RasterizerStateDescription description The rasterizerState description. bool isMultisampleEnabled Whether multisample is enabled or not. Returns Type Description ID3D11RasterizerState The native rasterizerState. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11QueryHeap.html": {
    "href": "api/Evergine.DirectX11.DX11QueryHeap.html",
    "title": "Class DX11QueryHeap | Evergine Doc",
    "keywords": "Class DX11QueryHeap Represents a DirectX queryheap object. Inheritance object GraphicsResource QueryHeap DX11QueryHeap Implements IDisposable Inherited Members QueryHeap.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11QueryHeap : QueryHeap, IDisposable Constructors DX11QueryHeap(DX11GraphicsContext, ref QueryHeapDescription) Initializes a new instance of the DX11QueryHeap class. Declaration public DX11QueryHeap(DX11GraphicsContext context, ref QueryHeapDescription description) Parameters Type Name Description DX11GraphicsContext context The graphics context. QueryHeapDescription description The queryheap description. Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ReadData(uint, uint, ulong[]) Extract data from one or more queries. Declaration public override bool ReadData(uint startIndex, uint count, ulong[] results) Parameters Type Name Description uint startIndex Specifies the index of the fist query to read. uint count Specifies the number of queries to read. ulong[] results ulong buffer with the extracted queries data. Returns Type Description bool Return true if all queries to read are available and false if not. Overrides QueryHeap.ReadData(uint, uint, ulong[]) Remarks If the result is false, the results will conttains the latest available results. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11ResourceFactory.html": {
    "href": "api/Evergine.DirectX11.DX11ResourceFactory.html",
    "title": "Class DX11ResourceFactory | Evergine Doc",
    "keywords": "Class DX11ResourceFactory The DirectX version of the resource factory. Inheritance object ResourceFactory DX11ResourceFactory Inherited Members ResourceFactory.CreateCommandQueue(CommandQueueType) ResourceFactory.CreateGraphicsPipeline(ref GraphicsPipelineDescription) ResourceFactory.CreateComputePipeline(ref ComputePipelineDescription) ResourceFactory.CreateRaytracingPipeline(ref RaytracingPipelineDescription) ResourceFactory.CreateTexture(ref TextureDescription, string) ResourceFactory.GetTextureFromNativePointer(IntPtr, ref TextureDescription) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, string) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, ref SamplerStateDescription, string) ResourceFactory.CreateBuffer(ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(T[], ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(ref T, ref BufferDescription, string) ResourceFactory.CreateBuffer(IntPtr, ref BufferDescription, string) ResourceFactory.CreateShader(ref ShaderDescription) ResourceFactory.CreateSamplerState(ref SamplerStateDescription) ResourceFactory.CreateFrameBuffer(uint, uint, PixelFormat, PixelFormat, string) ResourceFactory.CreateFrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) ResourceFactory.CreateResourceLayout(ref ResourceLayoutDescription) ResourceFactory.CreateResourceSet(ref ResourceSetDescription) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11ResourceFactory : ResourceFactory Constructors DX11ResourceFactory(DX11GraphicsContext) Initializes a new instance of the DX11ResourceFactory class. Declaration public DX11ResourceFactory(DX11GraphicsContext graphicsContext) Parameters Type Name Description DX11GraphicsContext graphicsContext DirectX Graphics Context. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides ResourceFactory.GraphicsContext Methods CreateBufferInternal(IntPtr, ref BufferDescription) Creates a Buffer instance. Declaration protected override Buffer CreateBufferInternal(IntPtr data, ref BufferDescription description) Parameters Type Name Description IntPtr data Data pointer. BufferDescription description The index buffer description. Returns Type Description Buffer The new buffer. Overrides ResourceFactory.CreateBufferInternal(IntPtr, ref BufferDescription) CreateCommandQueueInternal(CommandQueueType) Creates a CommandQueue instance. Declaration protected override CommandQueue CreateCommandQueueInternal(CommandQueueType queueType) Parameters Type Name Description CommandQueueType queueType The commandQueue type, CommandQueueType. Returns Type Description CommandQueue The new commandQueue. Overrides ResourceFactory.CreateCommandQueueInternal(CommandQueueType) CreateComputePipelineInternal(ref ComputePipelineDescription) Creates a ComputePipelineState instance. Declaration protected override ComputePipelineState CreateComputePipelineInternal(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipelinestate description. Returns Type Description ComputePipelineState The new pipelinestate. Overrides ResourceFactory.CreateComputePipelineInternal(ref ComputePipelineDescription) CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) Create a FrameBuffer instance. Declaration protected override FrameBuffer CreateFrameBufferInternal(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth FrameBufferAttachment which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color FrameBufferAttachment , all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Returns Type Description FrameBuffer The new framebuffer. Overrides ResourceFactory.CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) Creates a GraphicsPipelineState instance. Declaration protected override GraphicsPipelineState CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphics pipelinestate description. Returns Type Description GraphicsPipelineState The new pipelinestate. Overrides ResourceFactory.CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) CreateQueryHeap(ref QueryHeapDescription) Create a QueryHeap instance. Declaration public override QueryHeap CreateQueryHeap(ref QueryHeapDescription description) Parameters Type Name Description QueryHeapDescription description The queryheap description. Returns Type Description QueryHeap The new queryheap. Overrides ResourceFactory.CreateQueryHeap(ref QueryHeapDescription) CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) Creates a RaytracingPipelineState instance. Declaration protected override RaytracingPipelineState CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipelinestate description. Returns Type Description RaytracingPipelineState The new pipelinestate. Overrides ResourceFactory.CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) CreateResourceLayoutInternal(ref ResourceLayoutDescription) Create a new ResourceLayout. Declaration protected override ResourceLayout CreateResourceLayoutInternal(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The descriptions for all elements in this new resourceLayout. Returns Type Description ResourceLayout A new resourceLayout object. Overrides ResourceFactory.CreateResourceLayoutInternal(ref ResourceLayoutDescription) CreateResourceSetInternal(ref ResourceSetDescription) Create a new ResourceSet. Declaration protected override ResourceSet CreateResourceSetInternal(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The descriptions for all elements in this new resourceSet. Returns Type Description ResourceSet A new resourceSet object. Overrides ResourceFactory.CreateResourceSetInternal(ref ResourceSetDescription) CreateSamplerStateInternal(ref SamplerStateDescription) Creates a SamplerState instance. Declaration protected override SamplerState CreateSamplerStateInternal(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. Returns Type Description SamplerState The new samplerstate. Overrides ResourceFactory.CreateSamplerStateInternal(ref SamplerStateDescription) CreateShaderInternal(ref ShaderDescription) Create a Shader instance. Declaration protected override Shader CreateShaderInternal(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. Returns Type Description Shader The new shader. Overrides ResourceFactory.CreateShaderInternal(ref ShaderDescription) CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) Creates a Texture instance. Declaration protected override Texture CreateTextureInternal(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The sampler state description SamplerStateDescription struct. Returns Type Description Texture The new texture. Overrides ResourceFactory.CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Gets a Texture instance from an existing texture using the specified native pointer. Declaration protected override Texture GetTextureFromNativePointerInternal(IntPtr texturePointer, ref TextureDescription textureDescription) Parameters Type Name Description IntPtr texturePointer The pointer of the texture. TextureDescription textureDescription The texture description of the already created texture. Returns Type Description Texture The texture instance. Overrides ResourceFactory.GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11ResourceLayout.html": {
    "href": "api/Evergine.DirectX11.DX11ResourceLayout.html",
    "title": "Class DX11ResourceLayout | Evergine Doc",
    "keywords": "Class DX11ResourceLayout The DX11 implementation of ResourceLayout object. Inheritance object ResourceLayout DX11ResourceLayout Implements IDisposable Inherited Members ResourceLayout.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11ResourceLayout : ResourceLayout, IDisposable Constructors DX11ResourceLayout(ref ResourceLayoutDescription) Initializes a new instance of the DX11ResourceLayout class. Declaration public DX11ResourceLayout(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The layout description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceLayout.Name Methods Dispose() Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceLayout.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11ResourceSet.html": {
    "href": "api/Evergine.DirectX11.DX11ResourceSet.html",
    "title": "Class DX11ResourceSet | Evergine Doc",
    "keywords": "Class DX11ResourceSet The DX11 implementation of the ResourceSet object. Inheritance object ResourceSet DX11ResourceSet Implements IDisposable Inherited Members ResourceSet.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11ResourceSet : ResourceSet, IDisposable Constructors DX11ResourceSet(DX11GraphicsContext, ref ResourceSetDescription) Initializes a new instance of the DX11ResourceSet class. Declaration public DX11ResourceSet(DX11GraphicsContext context, ref ResourceSetDescription description) Parameters Type Name Description DX11GraphicsContext context The DX11 graphics context instance. ResourceSetDescription description The resourceSet description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceSet.Name Methods Dispose() /// Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceSet.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11SamplerState.html": {
    "href": "api/Evergine.DirectX11.DX11SamplerState.html",
    "title": "Class DX11SamplerState | Evergine Doc",
    "keywords": "Class DX11SamplerState The DirectX sampler state. Inheritance object GraphicsResource SamplerState DX11SamplerState Implements ILoadable IDisposable IDependencyObject Inherited Members SamplerState.Id SamplerState.ReaderVersion SamplerState.Invalidated SamplerState.Dependencies SamplerState.Description SamplerState.Invalidate(ILoadable) SamplerState.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11SamplerState : SamplerState, ILoadable, IDisposable, IDependencyObject Constructors DX11SamplerState(GraphicsContext, ref SamplerStateDescription) Initializes a new instance of the DX11SamplerState class. Declaration public DX11SamplerState(GraphicsContext context, ref SamplerStateDescription description) Parameters Type Name Description GraphicsContext context The graphics context. GraphicsContext. SamplerStateDescription description The sampler state description. SamplerStateDescription. Fields NativeSampler The native sampler state. Declaration public readonly ID3D11SamplerState NativeSampler Field Value Type Description ID3D11SamplerState Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SamplerState.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides SamplerState.Dispose() Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11Shader.html": {
    "href": "api/Evergine.DirectX11.DX11Shader.html",
    "title": "Class DX11Shader | Evergine Doc",
    "keywords": "Class DX11Shader This class represent a native instance of a DirectX shader. Inheritance object GraphicsResource Shader DX11Shader Implements IDisposable Inherited Members Shader.Description Shader.GetHashCode() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11Shader : Shader, IDisposable Constructors DX11Shader(GraphicsContext, ref ShaderDescription) Initializes a new instance of the DX11Shader class. Declaration public DX11Shader(GraphicsContext context, ref ShaderDescription description) Parameters Type Name Description GraphicsContext context The graphics context. ShaderDescription description The shader description. Fields NativeShader The DirectX shader instance. Declaration public readonly ID3D11DeviceChild NativeShader Field Value Type Description ID3D11DeviceChild Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Shader.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ShaderCompile(GraphicsContext, string, string, ShaderStages, CompilerParameters) Converts the shader source into byte code. Declaration public static CompilationResult ShaderCompile(GraphicsContext context, string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description GraphicsContext context The graphics context. string shaderSource The shader source text. string entryPoint The entry point function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader byte code. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11SwapChain.html": {
    "href": "api/Evergine.DirectX11.DX11SwapChain.html",
    "title": "Class DX11SwapChain | Evergine Doc",
    "keywords": "Class DX11SwapChain This class represent a native instance of a DirectX SwapChain. Inheritance object SwapChain DX11SwapChain Implements IDisposable Inherited Members SwapChain.disposed SwapChain.GraphicsContext SwapChain.SwapChainDescription SwapChain.FrameBuffer SwapChain.VerticalSync SwapChain.InitFrame() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11SwapChain : SwapChain, IDisposable Constructors DX11SwapChain(GraphicsContext, SwapChainDescription) Initializes a new instance of the DX11SwapChain class. Declaration public DX11SwapChain(GraphicsContext context, SwapChainDescription description) Parameters Type Name Description GraphicsContext context Graphics Context. SwapChainDescription description SwapChain description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SwapChain.Name NativeSwapChainPointer Gets the native SwapChain pointer. Default value is returned if the platform does not support it. Declaration public override IntPtr NativeSwapChainPointer { get; } Property Value Type Description IntPtr Overrides SwapChain.NativeSwapChainPointer Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides SwapChain.Dispose() GetCurrentFramebufferTexture() Gets the current Framebuffer Texture. Declaration public override Texture GetCurrentFramebufferTexture() Returns Type Description Texture Framebuffer texture. Overrides SwapChain.GetCurrentFramebufferTexture() Present() Presents a rendered image to the user. Declaration public override void Present() Overrides SwapChain.Present() RefreshSurfaceInfo(SurfaceInfo) The swapchain surface info has changed. Declaration public override void RefreshSurfaceInfo(SurfaceInfo surfaceInfo) Parameters Type Name Description SurfaceInfo surfaceInfo The surface info. Overrides SwapChain.RefreshSurfaceInfo(SurfaceInfo) ResizeSwapChain(uint, uint) Resize SwapChain. Declaration public override void ResizeSwapChain(uint width, uint height) Parameters Type Name Description uint width New width. uint height New height. Overrides SwapChain.ResizeSwapChain(uint, uint) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.DX11Texture.html": {
    "href": "api/Evergine.DirectX11.DX11Texture.html",
    "title": "Class DX11Texture | Evergine Doc",
    "keywords": "Class DX11Texture Represent a DirectX Texture. Inheritance object GraphicsResource Texture DX11Texture Implements ILoadable IDisposable IDependencyObject Inherited Members Texture.Id Texture.Description Texture.ReaderVersion Texture.Invalidated Texture.Dependencies Texture.Sampler Texture.CouldBeAttachedToFramebuffer Texture.Invalidate(ILoadable) Texture.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class DX11Texture : Texture, ILoadable, IDisposable, IDependencyObject Constructors DX11Texture(DX11GraphicsContext, DataBox[], ref TextureDescription, ref SamplerStateDescription) Initializes a new instance of the DX11Texture class. Declaration public DX11Texture(DX11GraphicsContext context, DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DX11GraphicsContext context The graphics context. DataBox[] data The data pointer. TextureDescription description The texture description. SamplerStateDescription samplerState the sampler state description for this texture. Fields NativeTexture The DirectX texture instance. Declaration public ID3D11Resource NativeTexture Field Value Type Description ID3D11Resource Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Texture.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer ShaderResourceView Gets the shader resource view. Declaration public ID3D11ShaderResourceView ShaderResourceView { get; } Property Value Type Description ID3D11ShaderResourceView UnorderedAccessView Gets the unordered view. Declaration public ID3D11UnorderedAccessView UnorderedAccessView { get; } Property Value Type Description ID3D11UnorderedAccessView Methods CopyTo(ID3D11DeviceContext, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copy a pixel region from source to destination texture. Declaration public void CopyTo(ID3D11DeviceContext deviceContext, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBaseArray, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArray, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description ID3D11DeviceContext deviceContext Graphics Context. uint sourceX U coord source texture. uint sourceY V coord source texture. uint sourceZ W coord source texture. uint sourceMipLevel Source mip level. uint sourceBaseArray Source array index. Texture destination Destination texture. uint destinationX U coord destination texture. uint destinationY V coord destination texture. uint destinationZ W coord destination texture. uint destinationMipLevel Destination mip level. uint destinationBasedArray Destination array index. uint width Destination width. uint height Destination height. uint depth Destination depth. uint layerCount Destination layer count. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides Texture.Dispose() FromDirectXTexture(DX11GraphicsContext, IntPtr, TextureDescription?) Generate a DXTexture from DirectX Texture2D pointer. Declaration public static DX11Texture FromDirectXTexture(DX11GraphicsContext context, IntPtr texturePointer, TextureDescription? textureDescription = null) Parameters Type Name Description DX11GraphicsContext context DX context. IntPtr texturePointer DirectX Texture pointer. TextureDescription? textureDescription Overrided pixel format. This only affect to the generated TextureDescription. IT does not change the source texture format. Returns Type Description DX11Texture DXTexture with SharpDXTexture as resource. FromDirectXTexture(DX11GraphicsContext, ID3D11Texture2D, TextureDescription?) Generate a DXTexture from Vortice Texture2D. Declaration public static DX11Texture FromDirectXTexture(DX11GraphicsContext context, ID3D11Texture2D vorticeTexture, TextureDescription? textureDescription = null) Parameters Type Name Description DX11GraphicsContext context DX context. ID3D11Texture2D vorticeTexture SharpDXTexture instance. TextureDescription? textureDescription The texture description. Returns Type Description DX11Texture DXTexture with SharpDXTexture as resource. GetDepthStencilView(uint, uint, uint) Create a new DepthStencil view for this texture. Declaration public ID3D11DepthStencilView GetDepthStencilView(uint firstSlice, uint sliceCount, uint mipSlice) Parameters Type Name Description uint firstSlice The start slice of the view range. uint sliceCount The number of slices in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description ID3D11DepthStencilView A new DepthStencil view. GetRenderTargetView(uint, uint, uint) Create a new rendertargetview for this texture. Declaration public ID3D11RenderTargetView GetRenderTargetView(uint firstSlice, uint sliceCount, uint mipSlice) Parameters Type Name Description uint firstSlice The start slice of the view range. uint sliceCount The number of slices in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description ID3D11RenderTargetView A new RenderTargetView instance. GetShaderResourceView(uint, uint, uint) Create a new ShaderResource view for this texture. Declaration public ID3D11ShaderResourceView GetShaderResourceView(uint firstSlice, uint sliceCount, uint mipSlice) Parameters Type Name Description uint firstSlice The start slice of the view range. uint sliceCount The number of slices in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description ID3D11ShaderResourceView A new ShaderResource view. GetUnorderedAccessView(uint, uint) Create a new UnorderedAccessView for this texture. Declaration public ID3D11UnorderedAccessView GetUnorderedAccessView(uint arraySlice, uint mipSlice) Parameters Type Name Description uint arraySlice The slice in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description ID3D11UnorderedAccessView A new UnorderedAccessView. SetData(ID3D11DeviceContext, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(ID3D11DeviceContext deviceContext, IntPtr source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description ID3D11DeviceContext deviceContext Device Context. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subresource index. ToStaging() Return a new Buffer with ResourceUsage set to staging. Declaration public DX11Texture ToStaging() Returns Type Description DX11Texture New staging Buffer. Implements ILoadable IDisposable IDependencyObject Extension Methods TextureExtension.SafeToStream(Texture, GraphicsContext) TextureExtension.SaveToFile(Texture, GraphicsContext, string) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX11.html": {
    "href": "api/Evergine.DirectX11.html",
    "title": "Namespace Evergine.DirectX11 | Evergine Doc",
    "keywords": "Namespace Evergine.DirectX11 Classes DX11Buffer Represents a DirectX buffer object. DX11Capabilities The DX11 capabilities. DX11CommandBuffer This class represent a set of commands. DX11CommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. DX11ComputePipelineState The DirectX version of PipelineState. DX11ExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. DX11FrameBuffer FrameBuffer implementation on DirectX. DX11GraphicsContext Manages all graphical functionality. DX11GraphicsPipelineState The DirectX version of PipelineState. DX11PipelineStateCache The DX11 pipelinecache used to minimize graphics state changes. DX11QueryHeap Represents a DirectX queryheap object. DX11ResourceFactory The DirectX version of the resource factory. DX11ResourceLayout The DX11 implementation of ResourceLayout object. DX11ResourceSet The DX11 implementation of the ResourceSet object. DX11SamplerState The DirectX sampler state. DX11Shader This class represent a native instance of a DirectX shader. DX11SwapChain This class represent a native instance of a DirectX SwapChain. DX11Texture Represent a DirectX Texture. VideoInfo Video info instance."
  },
  "api/Evergine.DirectX11.VideoInfo.html": {
    "href": "api/Evergine.DirectX11.VideoInfo.html",
    "title": "Class VideoInfo | Evergine Doc",
    "keywords": "Class VideoInfo Video info instance. Inheritance object VideoInfo Implements IVideoInfo IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX11 Assembly: Evergine.DirectX11.dll Syntax public class VideoInfo : IVideoInfo, IDisposable Constructors VideoInfo() Initializes a new instance of the VideoInfo class. Declaration public VideoInfo() Properties Duration Gets the duration of the video. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan Height Gets the height of this video, in pixels. Declaration public int Height { get; } Property Value Type Description int Path Gets the path of this video. Declaration public string Path { get; } Property Value Type Description string Width Gets the width of this video, in pixels. Declaration public int Width { get; } Property Value Type Description int Methods Dispose() Dispose video info instance. Declaration public void Dispose() Implements IVideoInfo IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12BottomLevelAS.html": {
    "href": "api/Evergine.DirectX12.DX12BottomLevelAS.html",
    "title": "Class DX12BottomLevelAS | Evergine Doc",
    "keywords": "Class DX12BottomLevelAS DX12 Bottom Level Acceleration Structure implementation. Inheritance object GraphicsResource BottomLevelAS DX12BottomLevelAS Implements IDisposable Inherited Members BottomLevelAS.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12BottomLevelAS : BottomLevelAS, IDisposable Constructors DX12BottomLevelAS(DX12GraphicsContext, ref BottomLevelASDescription) Initializes a new instance of the DX12BottomLevelAS class. Declaration public DX12BottomLevelAS(DX12GraphicsContext context, ref BottomLevelASDescription description) Parameters Type Name Description DX12GraphicsContext context Graphics Context. BottomLevelASDescription description Bottom Level Description. Fields ResultBuffer DX12 Acceleration Structure Result buffer. Declaration public ID3D12Resource ResultBuffer Field Value Type Description ID3D12Resource Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12Buffer.html": {
    "href": "api/Evergine.DirectX12.DX12Buffer.html",
    "title": "Class DX12Buffer | Evergine Doc",
    "keywords": "Class DX12Buffer Represents a DirectX buffer object. Inheritance object GraphicsResource Buffer DX12Buffer Implements IDisposable Inherited Members Buffer.Description Buffer.UpdateCounter GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12Buffer : Buffer, IDisposable Constructors DX12Buffer(DX12GraphicsContext, IntPtr, ref BufferDescription) Initializes a new instance of the DX12Buffer class. Declaration public DX12Buffer(DX12GraphicsContext context, IntPtr data, ref BufferDescription description) Parameters Type Name Description DX12GraphicsContext context The graphics context. IntPtr data The data pointer. BufferDescription description A buffer description. Fields NativeBuffer The DirectX texture instance. Declaration public ID3D12Resource NativeBuffer Field Value Type Description ID3D12Resource nativeResourceState The DirectX resource state. Declaration public ResourceStates nativeResourceState Field Value Type Description ResourceStates Properties ConstantBufferView Gets the constant buffer view. Declaration public CpuDescriptorHandle ConstantBufferView { get; } Property Value Type Description CpuDescriptorHandle Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Buffer.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer ShaderResourceView Gets the shader resource view. Declaration public CpuDescriptorHandle ShaderResourceView { get; } Property Value Type Description CpuDescriptorHandle UnorderedAccessView Gets the unordered view. Declaration public CpuDescriptorHandle UnorderedAccessView { get; } Property Value Type Description CpuDescriptorHandle Methods CopyTo(ID3D12GraphicsCommandList, Buffer, uint, uint, uint) Copy this buffer in the destionation buffer. Declaration public void CopyTo(ID3D12GraphicsCommandList commandList, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description ID3D12GraphicsCommandList commandList The commandlist where execute commands. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destionation buffer offset in bytes. Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ResourceTransition(ID3D12GraphicsCommandList, ResourceStates, int) Transition this buffer to a new state. Declaration public void ResourceTransition(ID3D12GraphicsCommandList commandList, ResourceStates newResourceState, int subResource = 0) Parameters Type Name Description ID3D12GraphicsCommandList commandList The commandlist used to execute the barrier transition. ResourceStates newResourceState The new state to set. int subResource The subResource of this buffer. SetData(ID3D12GraphicsCommandList, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(ID3D12GraphicsCommandList commandList, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description ID3D12GraphicsCommandList commandList The commandlist where execute commands. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. ToStaging() Return a new Buffer with ResourceUsage set to staging. Declaration public DX12Buffer ToStaging() Returns Type Description DX12Buffer New staging Buffer. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12Capabilities.html": {
    "href": "api/Evergine.DirectX12.DX12Capabilities.html",
    "title": "Class DX12Capabilities | Evergine Doc",
    "keywords": "Class DX12Capabilities The DX12 capabilities. Inheritance object GraphicsContextCapabilities DX12Capabilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12Capabilities : GraphicsContextCapabilities Constructors DX12Capabilities(DX12GraphicsContext) Initializes a new instance of the DX12Capabilities class. Declaration public DX12Capabilities(DX12GraphicsContext context) Parameters Type Name Description DX12GraphicsContext context The current graphics context. Properties ClipDepth Gets the depth range in clip space. Declaration public override ClipDepth ClipDepth { get; } Property Value Type Description ClipDepth Overrides GraphicsContextCapabilities.ClipDepth FlipProjectionRequired Gets a value indicating whether we need to flip projection matrix on Render Target. Declaration public override bool FlipProjectionRequired { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.FlipProjectionRequired IsComputeShaderSupported Gets a value indicating whether this graphics context support compute shaders. Declaration public override bool IsComputeShaderSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsComputeShaderSupported IsMRTSupported Gets a value indicating whether this graphics context supports Multi Render Target (MRT). Declaration public override bool IsMRTSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsMRTSupported IsRaytracingSupported Gets a value indicating whether this graphics context supports Raytracing. Declaration public override bool IsRaytracingSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsRaytracingSupported IsShadowMapSupported Gets a value indicating whether this graphics context supports Shadow Maps. Declaration public override bool IsShadowMapSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsShadowMapSupported MatrixMajorness Gets a value indicating whether this graphics context uses row major matrices by default. Declaration public override MatrixMajorness MatrixMajorness { get; } Property Value Type Description MatrixMajorness Overrides GraphicsContextCapabilities.MatrixMajorness MultiviewStrategy Gets the multiview strategy supported by this graphic context. Declaration public override MultiviewStrategy MultiviewStrategy { get; } Property Value Type Description MultiviewStrategy Overrides GraphicsContextCapabilities.MultiviewStrategy Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12CommandBuffer.html": {
    "href": "api/Evergine.DirectX12.DX12CommandBuffer.html",
    "title": "Class DX12CommandBuffer | Evergine Doc",
    "keywords": "Class DX12CommandBuffer This class represent a set of commands. Inheritance object CommandBuffer DX12CommandBuffer Implements IDisposable IGetNativePointers Inherited Members CommandBuffer.State CommandBuffer.AvailablePointerKeys CommandBuffer.InRenderPass CommandBuffer.End() CommandBuffer.SetVertexBuffers(Buffer[]) CommandBuffer.SetVertexBuffer(uint, Buffer, uint) CommandBuffer.SetVertexBuffers(Buffer[], int[]) CommandBuffer.SetIndexBuffer(Buffer, IndexFormat, uint) CommandBuffer.SetGraphicsPipelineState(GraphicsPipelineState) CommandBuffer.SetComputePipelineState(ComputePipelineState) CommandBuffer.SetRaytracingPipelineState(RaytracingPipelineState) CommandBuffer.SetResourceSet(ResourceSet, uint, uint[]) CommandBuffer.BeginRenderPass(ref RenderPassDescription) CommandBuffer.EndRenderPass() CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint) CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint, uint) CommandBuffer.UpdateBufferData<T>(Buffer, ref T, uint) CommandBuffer.UpdateBufferData(Buffer, IntPtr, uint, uint) CommandBuffer.CopyBufferDataTo(Buffer, Buffer, uint, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, Texture) CommandBuffer.CopyTextureDataTo(Texture, Texture, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) CommandBuffer.Blit(Texture, Texture) CommandBuffer.Dispatch1D(uint, uint) CommandBuffer.Dispatch2D(uint, uint, uint, uint) CommandBuffer.Dispatch3D(uint, uint, uint, uint, uint, uint) CommandBuffer.GetNativePointer(string, out IntPtr) CommandBuffer.ClearCache() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12CommandBuffer : CommandBuffer, IDisposable, IGetNativePointers Constructors DX12CommandBuffer(DX12GraphicsContext, DX12CommandQueue) Initializes a new instance of the DX12CommandBuffer class. Declaration public DX12CommandBuffer(DX12GraphicsContext context, DX12CommandQueue queue) Parameters Type Name Description DX12GraphicsContext context Graphics Context. DX12CommandQueue queue The commandqueue for this commandbuffer. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides CommandBuffer.GraphicsContext Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandBuffer.Name Methods Begin() Set the initialize state for this commandbuffer. This function must be called before other graphics commands ca be issued. Declaration public override void Begin() Overrides CommandBuffer.Begin() BeginDebugMarker(string) Marks the beginning of a section of event code. This allows subsequent commands to be categorized and filtered when viewed in external debugging tools. Declaration public override void BeginDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.BeginDebugMarker(string) Remarks You call the EndDebugMarker method to mark the end of the section of event code. BeginDebugMarker has no effect if the calling application is not running under an enabled profiling tool. BeginQuery(QueryHeap, uint) Begins a GPU query. Declaration public override void BeginQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.BeginQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. BeginRenderPassInternal(ref RenderPassDescription) Begin a render pass. Declaration protected override void BeginRenderPassInternal(ref RenderPassDescription description) Parameters Type Name Description RenderPassDescription description The renderPass description RenderPassDescription. Overrides CommandBuffer.BeginRenderPassInternal(ref RenderPassDescription) Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain. Declaration protected override void Blit(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint layerCount The number of array layers to copy. Overrides CommandBuffer.Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) BuildRaytracingAccelerationStructure(BottomLevelASDescription) Perform an bottom level acceleration structure build on the GPU. Declaration public override BottomLevelAS BuildRaytracingAccelerationStructure(BottomLevelASDescription description) Parameters Type Name Description BottomLevelASDescription description Returns Type Description BottomLevelAS Bottom Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(BottomLevelASDescription) BuildRaytracingAccelerationStructure(TopLevelASDescription) Perform an top level acceleration structure build on the GPU. Declaration public override TopLevelAS BuildRaytracingAccelerationStructure(TopLevelASDescription description) Parameters Type Name Description TopLevelASDescription description Returns Type Description TopLevelAS Top Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(TopLevelASDescription) Commit() Commits this command buffer to the command queue waiting to be execute on GPU after Submit(). Declaration public override void Commit() Overrides CommandBuffer.Commit() CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration protected override void CopyBufferDataToInternal(Buffer buffer, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer buffer Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Overrides CommandBuffer.CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copies a region from this texture in other texture. Declaration protected override void CopyTextureDataToInternal(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint width The width in texels of the copy region. uint height The height in texels of the copy region. uint depth The depth in texels of the copy region. uint layerCount The number of array layers to copy. Overrides CommandBuffer.CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Dispatch(uint, uint, uint) Execute commands in a compute shader from a thread group. Declaration public override void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) Parameters Type Name Description uint threadGroupCountX uint threadGroupCountY uint threadGroupCountZ Overrides CommandBuffer.Dispatch(uint, uint, uint) Remarks You call the Dispatch method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z). DispatchIndirect(Buffer, uint) Execute a command list over one or more thread groups. Declaration public override void DispatchIndirect(Buffer argBuffer, uint offset) Parameters Type Name Description Buffer argBuffer A buffer which must be loaded with data that matches the argument list for Dispatch(uint, uint, uint). uint offset A byte-aligned offset between the start of the buffer and the arguments. Overrides CommandBuffer.DispatchIndirect(Buffer, uint) DispatchRays(DispatchRaysDescription) Launch threads of a ray generation shader. See Initiating raytracing for an overview. Can be called from graphics or compute command lists and bundles. Declaration public override void DispatchRays(DispatchRaysDescription description) Parameters Type Name Description DispatchRaysDescription description Dispatch rays description. Overrides CommandBuffer.DispatchRays(DispatchRaysDescription) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandBuffer.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Draw(uint, uint) Draw non-indexed, non-instanced primitives. Declaration public override void Draw(uint vertexCount, uint startVertexLocation = 0) Parameters Type Name Description uint vertexCount Number of vertices to draw. uint startVertexLocation Index of the first vertex, which is usually an offset in a vertex buffer. Overrides CommandBuffer.Draw(uint, uint) DrawIndexed(uint, uint, uint) Draw indexed, non-instanced primitives. Declaration public override void DrawIndexed(uint indexCount, uint startIndexLocation = 0, uint baseVertexLocation = 0) Parameters Type Name Description uint indexCount Number of indices to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. Overrides CommandBuffer.DrawIndexed(uint, uint, uint) DrawIndexedInstanced(uint, uint, uint, uint, uint) Draw indexed, instanced primitives. Declaration public override void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation = 0, uint baseVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint indexCountPerInstance Number of indices read from the index buffer for each instance. uint instanceCount Number of instances to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawIndexedInstanced(uint, uint, uint, uint, uint) DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) Draw indexed, instanced, GPU-generated primitives. Declaration public override void DrawIndexedInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) DrawInstanced(uint, uint, uint, uint) Draw non-indexed, instanced primitives. Declaration public override void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint vertexCountPerInstance Number of vertices to draw. uint instanceCount Number of instances to draw. uint startVertexLocation Index of the first vertex. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawInstanced(uint, uint, uint, uint) DrawInstancedIndirect(Buffer, uint, uint, uint) Draw instanced, GPU-generated primitives. Declaration public override void DrawInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawInstancedIndirect(Buffer, uint, uint, uint) EndDebugMarker() Marks the end of a section of event code. Declaration public override void EndDebugMarker() Overrides CommandBuffer.EndDebugMarker() Remarks EndDebugMarker has no effect if the calling application is not running under an enabled profiling tool. EndInternal() Completes the command buffer. Declaration protected override void EndInternal() Overrides CommandBuffer.EndInternal() EndQuery(QueryHeap, uint) Ends a GPU query. Declaration public override void EndQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.EndQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. EndRenderPassInternal() End a render pass. Declaration protected override void EndRenderPassInternal() Overrides CommandBuffer.EndRenderPassInternal() GenerateMipmaps(Texture) Generates mipmaps for the given Texture. The largest mipmap is used to generate all of the lower mipmap levels contained in the Texture. Declaration public override void GenerateMipmaps(Texture texture) Parameters Type Name Description Texture texture The Texture to generate mipmaps for. This Texture must have been created with TextureFlags.GenerateMipmaps. Overrides CommandBuffer.GenerateMipmaps(Texture) InsertDebugMarker(string) Marks a single point of execution in code. This is used by graphics debuggers to identify points of interest in a command stream. Declaration public override void InsertDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.InsertDebugMarker(string) Remarks InsertDebugMarker has no effect if the calling application is not running under an enabled profiling tool. Reset() Reset the command buffer to the initial state. Declaration public override void Reset() Overrides CommandBuffer.Reset() ResourceBarrierUnorderedAccessView(Buffer) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Buffer buffer) Parameters Type Name Description Buffer buffer The buffer. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Buffer) ResourceBarrierUnorderedAccessView(Texture) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Texture texture) Parameters Type Name Description Texture texture The texture. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Texture) SetComputePipelineStateInternal(ComputePipelineState) Sets the compute pipeline state object for this commandbuffer. Declaration protected override void SetComputePipelineStateInternal(ComputePipelineState pipeline) Parameters Type Name Description ComputePipelineState pipeline The compute pipeline state description. Overrides CommandBuffer.SetComputePipelineStateInternal(ComputePipelineState) SetGraphicsPipelineStateInternal(GraphicsPipelineState) Sets the graphics pipeline state object for this commandbuffer. Declaration protected override void SetGraphicsPipelineStateInternal(GraphicsPipelineState pipeline) Parameters Type Name Description GraphicsPipelineState pipeline The graphics pipeline state description. Overrides CommandBuffer.SetGraphicsPipelineStateInternal(GraphicsPipelineState) SetIndexBufferInternal(Buffer, IndexFormat, uint) Set an array of index buffers to the input-assembler stage. Declaration protected override void SetIndexBufferInternal(Buffer buffer, IndexFormat format = IndexFormat.UInt16, uint offset = 0) Parameters Type Name Description Buffer buffer The buffer being bound. IndexFormat format Indices Data Type (Default UInt16). uint offset Offset (in bytes) from the start of the index buffer to the first index to use. Overrides CommandBuffer.SetIndexBufferInternal(Buffer, IndexFormat, uint) SetRaytracingPipelineStateInternal(RaytracingPipelineState) Sets the raytracing pipeline state object for this commandbuffer. Declaration protected override void SetRaytracingPipelineStateInternal(RaytracingPipelineState pipeline) Parameters Type Name Description RaytracingPipelineState pipeline The raytracing pipeline state description. Overrides CommandBuffer.SetRaytracingPipelineStateInternal(RaytracingPipelineState) SetResourceSetInternal(ResourceSet, uint, uint[]) Set the active ResourceSet for the given index. Declaration protected override void SetResourceSetInternal(ResourceSet resourceSet, uint index, uint[] offsets) Parameters Type Name Description ResourceSet resourceSet The new ResourceSet. uint index The resourceSet index. uint[] offsets Overrides CommandBuffer.SetResourceSetInternal(ResourceSet, uint, uint[]) SetScissorRectangles(Rectangle[]) Set an scissor rectangle in a specific slot. Declaration public override void SetScissorRectangles(Rectangle[] rectangles) Parameters Type Name Description Rectangle[] rectangles The array of the scissor rectangles. Overrides CommandBuffer.SetScissorRectangles(Rectangle[]) SetVertexBufferInternal(uint, Buffer, uint) Set an buffers to the input-assembler stage. Declaration protected override void SetVertexBufferInternal(uint slot, Buffer buffer, uint offset = 0) Parameters Type Name Description uint slot The buffer slot. Buffer buffer The buffer being bound. uint offset Offset (in bytes) from the start of buffer to the first vertex to use. Overrides CommandBuffer.SetVertexBufferInternal(uint, Buffer, uint) SetVertexBuffersInternal(Buffer[], int[]) Set an array of buffers to the input-assembler stage. Declaration protected override void SetVertexBuffersInternal(Buffer[] vertexBuffers, int[] offsets) Parameters Type Name Description Buffer[] vertexBuffers int[] offsets Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use. Overrides CommandBuffer.SetVertexBuffersInternal(Buffer[], int[]) SetViewports(Viewport[]) Set a viewport in a specific slot. Declaration public override void SetViewports(Viewport[] viewports) Parameters Type Name Description Viewport[] viewports The array of the viewports. Overrides CommandBuffer.SetViewports(Viewport[]) UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void UpdateBufferDataInternal(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides CommandBuffer.UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) Refit an top level accelerations structure build on the GPU. Declaration public override void UpdateRaytracingAccelerationStructure(ref TopLevelAS tlas, TopLevelASDescription newDescription) Parameters Type Name Description TopLevelAS tlas Top level acceleration structure. TopLevelASDescription newDescription New top level description. Overrides CommandBuffer.UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) WriteTimestamp(QueryHeap, uint) Write a device timestamp into a query heap. Declaration public override void WriteTimestamp(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap. uint index The query index. Overrides CommandBuffer.WriteTimestamp(QueryHeap, uint) Remarks This method works only with timestamp queryheap type. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12CommandQueue.html": {
    "href": "api/Evergine.DirectX12.DX12CommandQueue.html",
    "title": "Class DX12CommandQueue | Evergine Doc",
    "keywords": "Class DX12CommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. Inheritance object CommandQueue DX12CommandQueue Implements IDisposable Inherited Members CommandQueue.CommandBufferArraySize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12CommandQueue : CommandQueue, IDisposable Constructors DX12CommandQueue(DX12GraphicsContext, CommandQueueType) Initializes a new instance of the DX12CommandQueue class. Declaration public DX12CommandQueue(DX12GraphicsContext graphicsContext, CommandQueueType queueType) Parameters Type Name Description DX12GraphicsContext graphicsContext The graphics context instance. CommandQueueType queueType The commandqueue elements type. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandQueue.Name Methods CommandBuffer() Gets the next CommandBuffer(). Declaration public override CommandBuffer CommandBuffer() Returns Type Description CommandBuffer The CommandBuffer. Overrides CommandQueue.CommandBuffer() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandQueue.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Submit() Submits a CommandBuffer list to be executed by the GPU. Declaration public override void Submit() Overrides CommandQueue.Submit() WaitIdle() Wait for all command buffers are executed. Declaration public override void WaitIdle() Overrides CommandQueue.WaitIdle() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12ComputePipelineState.html": {
    "href": "api/Evergine.DirectX12.DX12ComputePipelineState.html",
    "title": "Class DX12ComputePipelineState | Evergine Doc",
    "keywords": "Class DX12ComputePipelineState The DirectX version of PipelineState. Inheritance object PipelineState ComputePipelineState DX12ComputePipelineState Implements IDisposable Inherited Members ComputePipelineState.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12ComputePipelineState : ComputePipelineState, IDisposable Constructors DX12ComputePipelineState(DX12GraphicsContext, ref ComputePipelineDescription) Initializes a new instance of the DX12ComputePipelineState class. Declaration public DX12ComputePipelineState(DX12GraphicsContext context, ref ComputePipelineDescription description) Parameters Type Name Description DX12GraphicsContext context The graphics context. ComputePipelineDescription description The compute pipeline state description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ComputePipelineState.Name Methods Apply(ID3D12GraphicsCommandList, DX12ComputePipelineState) Apply only changes compare with the previous pipelineState. Declaration public void Apply(ID3D12GraphicsCommandList commandList, DX12ComputePipelineState previousPipeline) Parameters Type Name Description ID3D12GraphicsCommandList commandList The commandList where to set this pipeline. DX12ComputePipelineState previousPipeline The previous pipelineState. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12ExtensionsMethods.html": {
    "href": "api/Evergine.DirectX12.DX12ExtensionsMethods.html",
    "title": "Class DX12ExtensionsMethods | Evergine Doc",
    "keywords": "Class DX12ExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. Inheritance object DX12ExtensionsMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public static class DX12ExtensionsMethods Methods FromDirectX(Format) Convert to Evergine PixelFormat to DirectX Pixel Format. Declaration public static PixelFormat FromDirectX(this Format pixelFormat) Parameters Type Name Description Format pixelFormat DirectX pixel format. Returns Type Description PixelFormat Evergine pixel format. FromDirectX(SampleDescription) To convert from DirectX SampleDescription to TextureSampleCount. Declaration public static TextureSampleCount FromDirectX(this SampleDescription sampleDescription) Parameters Type Name Description SampleDescription sampleDescription The SampleDescription to convert. Returns Type Description TextureSampleCount The TextureSampleCount value. FromDirectX(ResourceFlags) To convert from DirectX BindFlags to TextureFlags. Declaration public static TextureFlags FromDirectX(this ResourceFlags flags) Parameters Type Name Description ResourceFlags flags the bindflags value to convert. Returns Type Description TextureFlags the ResourceUsage value. ToDepthStencilFormat(PixelFormat) Convert to DirectX Depth stencil format. Declaration public static Format ToDepthStencilFormat(this PixelFormat pixelFormat) Parameters Type Name Description PixelFormat pixelFormat The pixel format. Returns Type Description Format DirectX pixel format for depth stencil. ToDirectX(CommandQueueType) Convert to DirectX CommandListType from CommandQueueType. Declaration public static CommandListType ToDirectX(this CommandQueueType queueType) Parameters Type Name Description CommandQueueType queueType The commandQueueType to convert. Returns Type Description CommandListType The DirectX commandListType. ToDirectX(ComparisonFunction) Converts to DirectX compareFunction. Declaration public static ComparisonFunction ToDirectX(this ComparisonFunction function) Parameters Type Name Description ComparisonFunction function The value to convert. Returns Type Description ComparisonFunction The native value. ToDirectX(ElementFormat) To convert from VertexElementFormat to DXGI format. Declaration public static Format ToDirectX(this ElementFormat format) Parameters Type Name Description ElementFormat format The format to convert. Returns Type Description Format The result DXGI format. ToDirectX(GraphicsProfile) To convert from graphicsProfile to directX graphics profile. Declaration public static DxcShaderModel ToDirectX(this GraphicsProfile profile) Parameters Type Name Description GraphicsProfile profile The profile to convert. Returns Type Description DxcShaderModel The profile. ToDirectX(IndexFormat) To convert from indexformat to DXGI format. Declaration public static Format ToDirectX(this IndexFormat format) Parameters Type Name Description IndexFormat format The indexformat to convert. Returns Type Description Format The result DXGI format. ToDirectX(PixelFormat) Convert to DirectX Pixel Format. Declaration public static Format ToDirectX(this PixelFormat pixelFormat) Parameters Type Name Description PixelFormat pixelFormat pixelFormat. Returns Type Description Format DirectX pixel format. ToDirectX(HitGroupType) Convert to DirectX HitGroupType. Declaration public static HitGroupType ToDirectX(this HitGroupDescription.HitGroupType hitGroupType) Parameters Type Name Description HitGroupDescription.HitGroupType hitGroupType HitGroup type. Returns Type Description HitGroupType DirectX HitGroupType. ToDirectX(ResourceType) Convert to DirectX DescriptorRangeType. Declaration public static DescriptorRangeType ToDirectX(this ResourceType resourceType) Parameters Type Name Description ResourceType resourceType The resource type. Returns Type Description DescriptorRangeType DirectX DescriptorRangeType. ToDirectX(SamplerBorderColor) Converts to native sampler bordercolor. Declaration public static Color4 ToDirectX(this SamplerBorderColor borderColor) Parameters Type Name Description SamplerBorderColor borderColor The value to convert. Returns Type Description Color4 The native rawColor4. ToDirectX(TextureAddressMode) Converts to DirectX sampler address mode. Declaration public static TextureAddressMode ToDirectX(this TextureAddressMode addressMode) Parameters Type Name Description TextureAddressMode addressMode The address mode to convert. Returns Type Description TextureAddressMode The native addressMode. ToDirectX(TextureFilter, bool) Converts to native Texturefilter. Declaration public static Filter ToDirectX(this TextureFilter filter, bool isComparison) Parameters Type Name Description TextureFilter filter The value to convert. bool isComparison If comparison function is active. Returns Type Description Filter The native value. ToDirectX(TextureFlags) To convert from TextureFlags to DirectX BindFlags. Declaration public static ResourceFlags ToDirectX(this TextureFlags flags) Parameters Type Name Description TextureFlags flags the textureflags value to convert. Returns Type Description ResourceFlags the ResourceUsage value. ToDirectX(TextureSampleCount) To convert from TextureSampleCount to DirectX SampleDescription. Declaration public static SampleDescription ToDirectX(this TextureSampleCount sampleCount) Parameters Type Name Description TextureSampleCount sampleCount The TextureSampleCount to convert. Returns Type Description SampleDescription The SampleDescription value. ToDirectX(VertexStepFunction) Converts to DirectX InputClassification enum. Declaration public static InputClassification ToDirectX(this VertexStepFunction stepFunction) Parameters Type Name Description VertexStepFunction stepFunction The value to convert. Returns Type Description InputClassification The native value. ToDirectXStage(ShaderStages) To convert from ShaderStage to DirectX stage. Declaration public static DxcShaderStage ToDirectXStage(this ShaderStages stage) Parameters Type Name Description ShaderStages stage The shaderstage to convert. Returns Type Description DxcShaderStage The result string. ToDirectXString(ShaderStages) To convert from ShaderStage to DirectX string. Declaration public static string ToDirectXString(this ShaderStages stage) Parameters Type Name Description ShaderStages stage The shaderstage to convert. Returns Type Description string The result string. ToHLSLSemantic(ElementSemanticType) To convert from VertexSemanticType to HLSL semantic string. Declaration public static string ToHLSLSemantic(this ElementSemanticType semantic) Parameters Type Name Description ElementSemanticType semantic The semantic to convert. Returns Type Description string The semantic string."
  },
  "api/Evergine.DirectX12.DX12FrameBuffer.html": {
    "href": "api/Evergine.DirectX12.DX12FrameBuffer.html",
    "title": "Class DX12FrameBuffer | Evergine Doc",
    "keywords": "Class DX12FrameBuffer FrameBuffer implementation on DirectX. Inheritance object FrameBuffer DX12FrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12FrameBuffer : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors DX12FrameBuffer(DX12GraphicsContext, FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the DX12FrameBuffer class. Declaration public DX12FrameBuffer(DX12GraphicsContext context, FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments = true) Parameters Type Name Description DX12GraphicsContext context The graphics context. FrameBufferAttachment? depthTarget The depth texture which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color textures, all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Fields ColorTargetTextures The colors texture array of this DX12FrameBuffer. Declaration public DX12Texture[] ColorTargetTextures Field Value Type Description DX12Texture[] ColorTargetViews The renderTargetView array of this DX12FrameBuffer. Declaration public CpuDescriptorHandle[] ColorTargetViews Field Value Type Description CpuDescriptorHandle[] DepthTargetTexture The depth texture of this DX12FrameBuffer. Declaration public DX12Texture DepthTargetTexture Field Value Type Description DX12Texture DepthTargetview The depthTargetView of this DX12FrameBuffer. Declaration public CpuDescriptorHandle DepthTargetview Field Value Type Description CpuDescriptorHandle Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name RequireFlipProjection Gets or sets a value indicating whether this FrameBuffer requires the projection matrix to be flipped. By default they will indicate the default flip behavior, but the user can change it. Declaration public override bool RequireFlipProjection { get; } Property Value Type Description bool Overrides FrameBuffer.RequireFlipProjection Methods Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12GraphicsContext.html": {
    "href": "api/Evergine.DirectX12.DX12GraphicsContext.html",
    "title": "Class DX12GraphicsContext | Evergine Doc",
    "keywords": "Class DX12GraphicsContext Manages all graphical functionality. Inheritance object GraphicsContext DX12GraphicsContext Implements IDisposable IGetNativePointers Inherited Members GraphicsContext.TimestampFrequency GraphicsContext.DefaultSampler GraphicsContext.ValidationLayer GraphicsContext.IsValidationLayerEnabled GraphicsContext.Factory GraphicsContext.AvailablePointerKeys GraphicsContext.DefaultTextureUploaderSize GraphicsContext.DefaultBufferUploaderSize GraphicsContext.CreateDevice(ValidationLayer) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint, uint) GraphicsContext.UpdateBufferData<T>(Buffer, ref T, uint) GraphicsContext.UpdateBufferData(Buffer, IntPtr, uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, ref T, uint) GraphicsContext.ShaderCompile(string, string, ShaderStages) GraphicsContext.GetNativePointer(string, out IntPtr) GraphicsContext.Dispose() GraphicsContext.CreateDefaultSampler() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12GraphicsContext : GraphicsContext, IDisposable, IGetNativePointers Constructors DX12GraphicsContext() Initializes a new instance of the DX12GraphicsContext class. Declaration public DX12GraphicsContext() Fields DXDevice The DirectX device. Declaration public ID3D12Device DXDevice Field Value Type Description ID3D12Device DXFactory The DXGI factory. Declaration public IDXGIFactory4 DXFactory Field Value Type Description IDXGIFactory4 DefaultShader4ComponentMapping Native DX const used to set 4 components. Declaration public static readonly int DefaultShader4ComponentMapping Field Value Type Description int GPU_RESOURCE_HEAP_CBV_COUNT The default heap size for constant buffer views. Declaration public static readonly int GPU_RESOURCE_HEAP_CBV_COUNT Field Value Type Description int GPU_RESOURCE_HEAP_SRV_COUNT The default heap size for shader resource views. Declaration public static readonly int GPU_RESOURCE_HEAP_SRV_COUNT Field Value Type Description int GPU_RESOURCE_HEAP_UAV_COUNT The default heap size for unordered access views. Declaration public static readonly int GPU_RESOURCE_HEAP_UAV_COUNT Field Value Type Description int GPU_SAMPLER_HEAP_COUNT The default heap size for samplers. Declaration public static readonly int GPU_SAMPLER_HEAP_COUNT Field Value Type Description int Properties BackendType Gets the backend type (DirectX, OpenGL ...) Declaration public override GraphicsBackend BackendType { get; } Property Value Type Description GraphicsBackend Overrides GraphicsContext.BackendType Capabilities Gets the capabilities of this graphics context. Declaration public override GraphicsContextCapabilities Capabilities { get; } Property Value Type Description GraphicsContextCapabilities Overrides GraphicsContext.Capabilities NativeDevicePointer Gets the native device pointer. Declaration public override IntPtr NativeDevicePointer { get; } Property Value Type Description IntPtr Overrides GraphicsContext.NativeDevicePointer Methods CreateDeviceInternal() Initialize the graphics context to be used in a compute shader. Declaration public override void CreateDeviceInternal() Overrides GraphicsContext.CreateDeviceInternal() CreateSwapChain(SwapChainDescription) Initialize the swapchain. Declaration public override SwapChain CreateSwapChain(SwapChainDescription description) Parameters Type Name Description SwapChainDescription description The swapchain descriptor. Returns Type Description SwapChain Created Swapchain. Overrides GraphicsContext.CreateSwapChain(SwapChainDescription) Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides GraphicsContext.Dispose(bool) GenerateTextureMipmapping(Texture) Generate mipmapping texture levels. Declaration public override bool GenerateTextureMipmapping(Texture texture) Parameters Type Name Description Texture texture The texture to generate mipmapping. Returns Type Description bool True if the mipmapping has been generated. Overrides GraphicsContext.GenerateTextureMipmapping(Texture) InternalUpdateBufferData(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void InternalUpdateBufferData(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides GraphicsContext.InternalUpdateBufferData(Buffer, IntPtr, uint, uint) MapMemory(GraphicsResource, MapMode, uint) Maps a Buffer or Texture into a CPU-accessible data region. Declaration public override MappedResource MapMemory(GraphicsResource resource, MapMode mode, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. MapMode mode The MapMode used to map the resource. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Returns Type Description MappedResource A MappedResource structure describing the mapped data region. Overrides GraphicsContext.MapMemory(GraphicsResource, MapMode, uint) ShaderCompile(string, string, ShaderStages, CompilerParameters) Converts the shader source into bytecode. Declaration public override CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader bytecodes. Overrides GraphicsContext.ShaderCompile(string, string, ShaderStages, CompilerParameters) SyncUpcopyQueue() Sync the current buffer data in the copyQueue. Internal function used in the uploadbuffer strategy. Declaration public override void SyncUpcopyQueue() Overrides GraphicsContext.SyncUpcopyQueue() UnmapMemory(GraphicsResource, uint) Invalidates a previously-mapped data region for the given Buffer or Texture. Declaration public override void UnmapMemory(GraphicsResource resource, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Overrides GraphicsContext.UnmapMemory(GraphicsResource, uint) UpdateTextureData(Texture, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public override void UpdateTextureData(Texture texture, IntPtr source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description Texture texture Texture instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subResource index. Overrides GraphicsContext.UpdateTextureData(Texture, IntPtr, uint, uint) Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12GraphicsPipelineState.html": {
    "href": "api/Evergine.DirectX12.DX12GraphicsPipelineState.html",
    "title": "Class DX12GraphicsPipelineState | Evergine Doc",
    "keywords": "Class DX12GraphicsPipelineState The DirectX version of PipelineState. Inheritance object PipelineState GraphicsPipelineState DX12GraphicsPipelineState Implements IDisposable Inherited Members GraphicsPipelineState.Description GraphicsPipelineState.InvalidatedViewport object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12GraphicsPipelineState : GraphicsPipelineState, IDisposable Constructors DX12GraphicsPipelineState(DX12GraphicsContext, ref GraphicsPipelineDescription) Initializes a new instance of the DX12GraphicsPipelineState class. Declaration public DX12GraphicsPipelineState(DX12GraphicsContext context, ref GraphicsPipelineDescription description) Parameters Type Name Description DX12GraphicsContext context The graphics context. GraphicsPipelineDescription description The graphics pipeline state description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides GraphicsPipelineState.Name Methods Apply(ID3D12GraphicsCommandList, DX12GraphicsPipelineState) Apply only changes compare with the previous pipelineState. Declaration public void Apply(ID3D12GraphicsCommandList commandList, DX12GraphicsPipelineState previousPipeline) Parameters Type Name Description ID3D12GraphicsCommandList commandList The commandList where to set this pipeline. DX12GraphicsPipelineState previousPipeline The previous pipelineState. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12Helpers.html": {
    "href": "api/Evergine.DirectX12.DX12Helpers.html",
    "title": "Class DX12Helpers | Evergine Doc",
    "keywords": "Class DX12Helpers A set of helper functions for DX12. Inheritance object DX12Helpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public static class DX12Helpers Methods EnsureArraySize<T>(ref T[], int) Ensure the array size. Declaration public static void EnsureArraySize<T>(ref T[] array, int size) Parameters Type Name Description T[] array The array object. int size The array size to check. Type Parameters Name Description T The array type. ToMatrix3x4(Matrix4x4) Convert from Matrix4x4 to Matrix3x4. Declaration public static Matrix3x4 ToMatrix3x4(this Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Evergine Matrix4x4. Returns Type Description Matrix3x4 DX12 matrix3x4."
  },
  "api/Evergine.DirectX12.DX12QueryHeap.html": {
    "href": "api/Evergine.DirectX12.DX12QueryHeap.html",
    "title": "Class DX12QueryHeap | Evergine Doc",
    "keywords": "Class DX12QueryHeap Represents a DirectX queryheap object. Inheritance object GraphicsResource QueryHeap DX12QueryHeap Implements IDisposable Inherited Members QueryHeap.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12QueryHeap : QueryHeap, IDisposable Constructors DX12QueryHeap(DX12GraphicsContext, ref QueryHeapDescription) Initializes a new instance of the DX12QueryHeap class. Declaration public DX12QueryHeap(DX12GraphicsContext context, ref QueryHeapDescription description) Parameters Type Name Description DX12GraphicsContext context The graphics context. QueryHeapDescription description The queryheap description. Fields nativeQueryHeap The DirectX12 native object. Declaration public ID3D12QueryHeap nativeQueryHeap Field Value Type Description ID3D12QueryHeap Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ReadData(uint, uint, ulong[]) Extract data from one or more queries. Declaration public override bool ReadData(uint startIndex, uint count, ulong[] results) Parameters Type Name Description uint startIndex Specifies the index of the fist query to read. uint count Specifies the number of queries to read. ulong[] results ulong buffer with the extracted queries data. Returns Type Description bool Return true if all queries to read are available and false if not. Overrides QueryHeap.ReadData(uint, uint, ulong[]) Remarks If the result is false, the results will conttains the latest available results. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12RaytracingHelpers.html": {
    "href": "api/Evergine.DirectX12.DX12RaytracingHelpers.html",
    "title": "Class DX12RaytracingHelpers | Evergine Doc",
    "keywords": "Class DX12RaytracingHelpers Raytracing helpers. Inheritance object DX12RaytracingHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public static class DX12RaytracingHelpers Fields kDefaultHeapProps Heap property default. Declaration public static HeapProperties kDefaultHeapProps Field Value Type Description HeapProperties kUploadHeapProps Heap property upload. Declaration public static HeapProperties kUploadHeapProps Field Value Type Description HeapProperties Methods CreateBuffer(ID3D12Device5, uint, ResourceFlags, ResourceStates, HeapProperties) Create Acceleration Structure buffer. Declaration public static ID3D12Resource CreateBuffer(ID3D12Device5 pDevice, uint size, ResourceFlags flags, ResourceStates initState, HeapProperties heapProps) Parameters Type Name Description ID3D12Device5 pDevice Device. uint size Buffer width. ResourceFlags flags Resource flags. ResourceStates initState Initial buffer state. HeapProperties heapProps Heap properties. Returns Type Description ID3D12Resource The buffer."
  },
  "api/Evergine.DirectX12.DX12RaytracingPipelineState.html": {
    "href": "api/Evergine.DirectX12.DX12RaytracingPipelineState.html",
    "title": "Class DX12RaytracingPipelineState | Evergine Doc",
    "keywords": "Class DX12RaytracingPipelineState DX12 Raytracing pipeline state. Inheritance object PipelineState RaytracingPipelineState DX12RaytracingPipelineState Implements IDisposable Inherited Members RaytracingPipelineState.disposed RaytracingPipelineState.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12RaytracingPipelineState : RaytracingPipelineState, IDisposable Constructors DX12RaytracingPipelineState(DX12GraphicsContext, ref RaytracingPipelineDescription) Initializes a new instance of the DX12RaytracingPipelineState class. Declaration public DX12RaytracingPipelineState(DX12GraphicsContext context, ref RaytracingPipelineDescription description) Parameters Type Name Description DX12GraphicsContext context The graphics context. RaytracingPipelineDescription description The raytracing pipeline state description. Fields nativePipeline DX12 native pipeline as ID3D12StateObject. Declaration public ID3D12StateObject nativePipeline Field Value Type Description ID3D12StateObject shaderBindingTable Generated shader binding table. Declaration public DX12ShaderTable shaderBindingTable Field Value Type Description DX12ShaderTable Methods Apply(ID3D12GraphicsCommandList, DX12RaytracingPipelineState) Apply only changes compare with the previous pipelineState. Declaration public void Apply(ID3D12GraphicsCommandList commandList, DX12RaytracingPipelineState previousPipeline) Parameters Type Name Description ID3D12GraphicsCommandList commandList The commandList where to set this pipeline. DX12RaytracingPipelineState previousPipeline The previous pipelineState. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12ResourceFactory.html": {
    "href": "api/Evergine.DirectX12.DX12ResourceFactory.html",
    "title": "Class DX12ResourceFactory | Evergine Doc",
    "keywords": "Class DX12ResourceFactory The DirectX version of the resource factory. Inheritance object ResourceFactory DX12ResourceFactory Inherited Members ResourceFactory.CreateCommandQueue(CommandQueueType) ResourceFactory.CreateGraphicsPipeline(ref GraphicsPipelineDescription) ResourceFactory.CreateComputePipeline(ref ComputePipelineDescription) ResourceFactory.CreateRaytracingPipeline(ref RaytracingPipelineDescription) ResourceFactory.CreateTexture(ref TextureDescription, string) ResourceFactory.GetTextureFromNativePointer(IntPtr, ref TextureDescription) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, string) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, ref SamplerStateDescription, string) ResourceFactory.CreateBuffer(ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(T[], ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(ref T, ref BufferDescription, string) ResourceFactory.CreateBuffer(IntPtr, ref BufferDescription, string) ResourceFactory.CreateShader(ref ShaderDescription) ResourceFactory.CreateSamplerState(ref SamplerStateDescription) ResourceFactory.CreateFrameBuffer(uint, uint, PixelFormat, PixelFormat, string) ResourceFactory.CreateFrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) ResourceFactory.CreateResourceLayout(ref ResourceLayoutDescription) ResourceFactory.CreateResourceSet(ref ResourceSetDescription) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12ResourceFactory : ResourceFactory Constructors DX12ResourceFactory(DX12GraphicsContext) Initializes a new instance of the DX12ResourceFactory class. Declaration public DX12ResourceFactory(DX12GraphicsContext graphicsContext) Parameters Type Name Description DX12GraphicsContext graphicsContext DirectX Graphics Context. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides ResourceFactory.GraphicsContext Methods CreateBufferInternal(IntPtr, ref BufferDescription) Creates a Buffer instance. Declaration protected override Buffer CreateBufferInternal(IntPtr data, ref BufferDescription description) Parameters Type Name Description IntPtr data Data pointer. BufferDescription description The index buffer description. Returns Type Description Buffer The new buffer. Overrides ResourceFactory.CreateBufferInternal(IntPtr, ref BufferDescription) CreateCommandQueueInternal(CommandQueueType) Creates a CommandQueue instance. Declaration protected override CommandQueue CreateCommandQueueInternal(CommandQueueType queueType) Parameters Type Name Description CommandQueueType queueType The commandQueue type, CommandQueueType. Returns Type Description CommandQueue The new commandQueue. Overrides ResourceFactory.CreateCommandQueueInternal(CommandQueueType) CreateComputePipelineInternal(ref ComputePipelineDescription) Creates a ComputePipelineState instance. Declaration protected override ComputePipelineState CreateComputePipelineInternal(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipelinestate description. Returns Type Description ComputePipelineState The new pipelinestate. Overrides ResourceFactory.CreateComputePipelineInternal(ref ComputePipelineDescription) CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) Create a FrameBuffer instance. Declaration protected override FrameBuffer CreateFrameBufferInternal(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth FrameBufferAttachment which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color FrameBufferAttachment , all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Returns Type Description FrameBuffer The new framebuffer. Overrides ResourceFactory.CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) Creates a GraphicsPipelineState instance. Declaration protected override GraphicsPipelineState CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphics pipelinestate description. Returns Type Description GraphicsPipelineState The new pipelinestate. Overrides ResourceFactory.CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) CreateQueryHeap(ref QueryHeapDescription) Create a QueryHeap instance. Declaration public override QueryHeap CreateQueryHeap(ref QueryHeapDescription description) Parameters Type Name Description QueryHeapDescription description The queryheap description. Returns Type Description QueryHeap The new queryheap. Overrides ResourceFactory.CreateQueryHeap(ref QueryHeapDescription) CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) Creates a RaytracingPipelineState instance. Declaration protected override RaytracingPipelineState CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipelinestate description. Returns Type Description RaytracingPipelineState The new pipelinestate. Overrides ResourceFactory.CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) CreateResourceLayoutInternal(ref ResourceLayoutDescription) Create a new ResourceLayout. Declaration protected override ResourceLayout CreateResourceLayoutInternal(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The descriptions for all elements in this new resourceLayout. Returns Type Description ResourceLayout A new resourceLayout object. Overrides ResourceFactory.CreateResourceLayoutInternal(ref ResourceLayoutDescription) CreateResourceSetInternal(ref ResourceSetDescription) Create a new ResourceSet. Declaration protected override ResourceSet CreateResourceSetInternal(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The descriptions for all elements in this new resourceSet. Returns Type Description ResourceSet A new resourceSet object. Overrides ResourceFactory.CreateResourceSetInternal(ref ResourceSetDescription) CreateSamplerStateInternal(ref SamplerStateDescription) Creates a SamplerState instance. Declaration protected override SamplerState CreateSamplerStateInternal(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. Returns Type Description SamplerState The new samplerstate. Overrides ResourceFactory.CreateSamplerStateInternal(ref SamplerStateDescription) CreateShaderInternal(ref ShaderDescription) Create a Shader instance. Declaration protected override Shader CreateShaderInternal(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. Returns Type Description Shader The new shader. Overrides ResourceFactory.CreateShaderInternal(ref ShaderDescription) CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) Creates a Texture instance. Declaration protected override Texture CreateTextureInternal(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The sampler state description SamplerStateDescription struct. Returns Type Description Texture The new texture. Overrides ResourceFactory.CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Gets a Texture instance from an existing texture using the specified native pointer. Declaration protected override Texture GetTextureFromNativePointerInternal(IntPtr texturePointer, ref TextureDescription textureDescription) Parameters Type Name Description IntPtr texturePointer The pointer of the texture. TextureDescription textureDescription The texture description of the already created texture. Returns Type Description Texture The texture instance. Overrides ResourceFactory.GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12ResourceLayout.html": {
    "href": "api/Evergine.DirectX12.DX12ResourceLayout.html",
    "title": "Class DX12ResourceLayout | Evergine Doc",
    "keywords": "Class DX12ResourceLayout The DX12 implementation of the ResourceLayout object. Inheritance object ResourceLayout DX12ResourceLayout Implements IDisposable Inherited Members ResourceLayout.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12ResourceLayout : ResourceLayout, IDisposable Constructors DX12ResourceLayout(ref ResourceLayoutDescription) Initializes a new instance of the DX12ResourceLayout class. Declaration public DX12ResourceLayout(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The layout description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceLayout.Name Methods Dispose() Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceLayout.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12ResourceSet.html": {
    "href": "api/Evergine.DirectX12.DX12ResourceSet.html",
    "title": "Class DX12ResourceSet | Evergine Doc",
    "keywords": "Class DX12ResourceSet The DX12 implementation of the ResourceSet object. Inheritance object ResourceSet DX12ResourceSet Implements IDisposable Inherited Members ResourceSet.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12ResourceSet : ResourceSet, IDisposable Constructors DX12ResourceSet(ref ResourceSetDescription) Initializes a new instance of the DX12ResourceSet class. Declaration public DX12ResourceSet(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The resourceSet description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceSet.Name Methods Dispose() /// Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceSet.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12SamplerState.html": {
    "href": "api/Evergine.DirectX12.DX12SamplerState.html",
    "title": "Class DX12SamplerState | Evergine Doc",
    "keywords": "Class DX12SamplerState The DirectX sampler state. Inheritance object GraphicsResource SamplerState DX12SamplerState Implements ILoadable IDisposable IDependencyObject Inherited Members SamplerState.Id SamplerState.ReaderVersion SamplerState.Invalidated SamplerState.Dependencies SamplerState.Description SamplerState.Invalidate(ILoadable) SamplerState.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12SamplerState : SamplerState, ILoadable, IDisposable, IDependencyObject Constructors DX12SamplerState(GraphicsContext, ref SamplerStateDescription) Initializes a new instance of the DX12SamplerState class. Declaration public DX12SamplerState(GraphicsContext context, ref SamplerStateDescription description) Parameters Type Name Description GraphicsContext context The graphics context. GraphicsContext. SamplerStateDescription description The sampler state description. SamplerStateDescription. Fields NativeSampler The native sampler state. Declaration public readonly CpuDescriptorHandle NativeSampler Field Value Type Description CpuDescriptorHandle Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SamplerState.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides SamplerState.Dispose() Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12Shader.html": {
    "href": "api/Evergine.DirectX12.DX12Shader.html",
    "title": "Class DX12Shader | Evergine Doc",
    "keywords": "Class DX12Shader This class represent a native instance of a DirectX shader. Inheritance object GraphicsResource Shader DX12Shader Implements IDisposable Inherited Members Shader.Description Shader.GetHashCode() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12Shader : Shader, IDisposable Constructors DX12Shader(GraphicsContext, ref ShaderDescription) Initializes a new instance of the DX12Shader class. Declaration public DX12Shader(GraphicsContext context, ref ShaderDescription description) Parameters Type Name Description GraphicsContext context The graphics context. ShaderDescription description The shader description. Fields NativeShader The DirectX 12 shader. Declaration public readonly ShaderBytecode NativeShader Field Value Type Description ShaderBytecode Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Shader.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ShaderCompile(GraphicsContext, string, string, ShaderStages, CompilerParameters) Converts the shader source into byte code. Declaration public static CompilationResult ShaderCompile(GraphicsContext context, string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description GraphicsContext context The graphics context. string shaderSource The shader source text. string entryPoint The entry point function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader byte codes. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12ShaderTable.html": {
    "href": "api/Evergine.DirectX12.DX12ShaderTable.html",
    "title": "Class DX12ShaderTable | Evergine Doc",
    "keywords": "Class DX12ShaderTable DX12 Shader binding table (buffer). Inheritance object DX12ShaderTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12ShaderTable Constructors DX12ShaderTable(DX12GraphicsContext) Initializes a new instance of the DX12ShaderTable class. Declaration public DX12ShaderTable(DX12GraphicsContext graphicsContext) Parameters Type Name Description DX12GraphicsContext graphicsContext DX12 Graphics Context. Fields Buffer Shader binding table buffer. Declaration public ID3D12Resource Buffer Field Value Type Description ID3D12Resource Methods AddHitGroupProgram(string, GpuDescriptorHandle[]) Add HitGroup Program. Declaration public void AddHitGroupProgram(string shaderIdentifier, GpuDescriptorHandle[] handlers) Parameters Type Name Description string shaderIdentifier Shader identifier. GpuDescriptorHandle[] handlers GPU Descriptor Handles. AddMissProgram(string, GpuDescriptorHandle[]) Add Miss Program. Declaration public void AddMissProgram(string shaderIdentifier, GpuDescriptorHandle[] handlers) Parameters Type Name Description string shaderIdentifier Shader identifier. GpuDescriptorHandle[] handlers GPU Descriptor Handles. AddRayGenProgram(string, GpuDescriptorHandle[]) Add Raygen Program. Declaration public void AddRayGenProgram(string shaderIdentifier, GpuDescriptorHandle[] handlers) Parameters Type Name Description string shaderIdentifier Shader identifier. GpuDescriptorHandle[] handlers GPU Descriptor Handles. Generate(ID3D12StateObject) Generate ShaderTable (filling buffer). Declaration public void Generate(ID3D12StateObject pipeline) Parameters Type Name Description ID3D12StateObject pipeline Raytracing pipeline. GetHitGroupSize() Gets Ray generation entry size. Declaration public ulong GetHitGroupSize() Returns Type Description ulong Entry size. GetHitGroupStartAddress() Get HitGroup start address. Declaration public ulong GetHitGroupStartAddress() Returns Type Description ulong buffer adress. GetHitGroupStride() Gets Miss stride. Declaration public ulong GetHitGroupStride() Returns Type Description ulong Entry stride. GetMissSize() Gets Ray generation entry size. Declaration public ulong GetMissSize() Returns Type Description ulong Entry size. GetMissStartAddress() Get Miss start address. Declaration public ulong GetMissStartAddress() Returns Type Description ulong buffer adress. GetMissStride() Gets Miss stride. Declaration public ulong GetMissStride() Returns Type Description ulong Entry stride. GetRayGenSize() Gets Ray generation entry size. Declaration public ulong GetRayGenSize() Returns Type Description ulong Entry size. GetRayGenStartAddress() Get Ray generation start address. Declaration public ulong GetRayGenStartAddress() Returns Type Description ulong buffer adress. GetRayGenStride() Gets Ray generation stride. Declaration public ulong GetRayGenStride() Returns Type Description ulong Entry stride. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12ShaderTable.ShaderTableRecord.html": {
    "href": "api/Evergine.DirectX12.DX12ShaderTable.ShaderTableRecord.html",
    "title": "Struct DX12ShaderTable.ShaderTableRecord | Evergine Doc",
    "keywords": "Struct DX12ShaderTable.ShaderTableRecord Shader Table Entry. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public struct DX12ShaderTable.ShaderTableRecord Constructors ShaderTableRecord(string, GpuDescriptorHandle[]) Initializes a new instance of the DX12ShaderTable.ShaderTableRecord struct. Declaration public ShaderTableRecord(string name, GpuDescriptorHandle[] handlers) Parameters Type Name Description string name Pipeline shader identifier. GpuDescriptorHandle[] handlers Descriptor heap handlers. Fields Handlers Descriptor heap handlers. Declaration public GpuDescriptorHandle[] Handlers Field Value Type Description GpuDescriptorHandle[] Name Pipeline shader identifier. Declaration public string Name Field Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12SwapChain.html": {
    "href": "api/Evergine.DirectX12.DX12SwapChain.html",
    "title": "Class DX12SwapChain | Evergine Doc",
    "keywords": "Class DX12SwapChain This class represents a native swapchain object on DirectX12. Inheritance object SwapChain DX12SwapChain Implements IDisposable Inherited Members SwapChain.disposed SwapChain.GraphicsContext SwapChain.SwapChainDescription SwapChain.FrameBuffer SwapChain.VerticalSync SwapChain.InitFrame() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12SwapChain : SwapChain, IDisposable Constructors DX12SwapChain(GraphicsContext, SwapChainDescription) Initializes a new instance of the DX12SwapChain class. Declaration public DX12SwapChain(GraphicsContext context, SwapChainDescription description) Parameters Type Name Description GraphicsContext context Graphics Context. SwapChainDescription description SwapChain description. Fields SwapChainBufferCount A default number of buffer in the swapchain. Declaration public const int SwapChainBufferCount = 3 Field Value Type Description int Properties CurrentBackBufferIndex Gets or sets the active backbuffer index. Declaration public int CurrentBackBufferIndex { get; set; } Property Value Type Description int Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SwapChain.Name NativeSwapChainPointer Gets the native SwapChain pointer. Default value is returned if the platform does not support it. Declaration public override IntPtr NativeSwapChainPointer { get; } Property Value Type Description IntPtr Overrides SwapChain.NativeSwapChainPointer Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides SwapChain.Dispose() GetCurrentFramebufferTexture() Gets the current Framebuffer Texture. Declaration public override Texture GetCurrentFramebufferTexture() Returns Type Description Texture Framebuffer texture. Overrides SwapChain.GetCurrentFramebufferTexture() Present() Presents a rendered image to the user. Declaration public override void Present() Overrides SwapChain.Present() RefreshSurfaceInfo(SurfaceInfo) The swapchain surface info has changed. Declaration public override void RefreshSurfaceInfo(SurfaceInfo surfaceInfo) Parameters Type Name Description SurfaceInfo surfaceInfo The surface info. Overrides SwapChain.RefreshSurfaceInfo(SurfaceInfo) ResizeSwapChain(uint, uint) Resize SwapChain. Declaration public override void ResizeSwapChain(uint width, uint height) Parameters Type Name Description uint width New width. uint height New height. Overrides SwapChain.ResizeSwapChain(uint, uint) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12SwapChainFrameBuffer.html": {
    "href": "api/Evergine.DirectX12.DX12SwapChainFrameBuffer.html",
    "title": "Class DX12SwapChainFrameBuffer | Evergine Doc",
    "keywords": "Class DX12SwapChainFrameBuffer This class represent the swapchain FrameBuffer on DirectX12. Inheritance object FrameBuffer DX12SwapChainFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12SwapChainFrameBuffer : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors DX12SwapChainFrameBuffer(DX12GraphicsContext, DX12SwapChain) Initializes a new instance of the DX12SwapChainFrameBuffer class. Declaration public DX12SwapChainFrameBuffer(DX12GraphicsContext context, DX12SwapChain swapchain) Parameters Type Name Description DX12GraphicsContext context The graphics context. DX12SwapChain swapchain The swapchain to create from. Fields BackBufferTextures The colors texture array of this DX12SwapChainFrameBuffer. Declaration public DX12Texture[] BackBufferTextures Field Value Type Description DX12Texture[] BackBuffers The renderTargetView array of this DX12SwapChainFrameBuffer. Declaration public CpuDescriptorHandle[] BackBuffers Field Value Type Description CpuDescriptorHandle[] CurrentBackBufferIndex The active backBuffer index. Declaration public int CurrentBackBufferIndex Field Value Type Description int DepthTargetTexture The depth texture of this DX12SwapChainFrameBuffer. Declaration public DX12Texture DepthTargetTexture Field Value Type Description DX12Texture DepthTargetview The depthTargetView of this DX12SwapChainFrameBuffer. Declaration public CpuDescriptorHandle DepthTargetview Field Value Type Description CpuDescriptorHandle Properties ColorTargetViews Gets the renderTargetView array of this DX12SwapChainFrameBuffer. Declaration public CpuDescriptorHandle ColorTargetViews { get; } Property Value Type Description CpuDescriptorHandle Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name Methods Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12Texture.html": {
    "href": "api/Evergine.DirectX12.DX12Texture.html",
    "title": "Class DX12Texture | Evergine Doc",
    "keywords": "Class DX12Texture Represent a DirectX Texture. Inheritance object GraphicsResource Texture DX12Texture Implements ILoadable IDisposable IDependencyObject Inherited Members Texture.Id Texture.Description Texture.ReaderVersion Texture.Invalidated Texture.Dependencies Texture.Sampler Texture.CouldBeAttachedToFramebuffer Texture.Invalidate(ILoadable) Texture.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12Texture : Texture, ILoadable, IDisposable, IDependencyObject Constructors DX12Texture(DX12GraphicsContext, DataBox[], ref TextureDescription, ref SamplerStateDescription) Initializes a new instance of the DX12Texture class. Declaration public DX12Texture(DX12GraphicsContext context, DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DX12GraphicsContext context The graphics context. DataBox[] data The data pointer. TextureDescription description The texture description. SamplerStateDescription samplerState the sampler state description for this texture. Fields NativeBuffer The native buffer pointer for staging textures. Declaration public ID3D12Resource NativeBuffer Field Value Type Description ID3D12Resource NativeResourceState The native resource state. Declaration public ResourceStates NativeResourceState Field Value Type Description ResourceStates NativeTexture The native texture pointer. Declaration public ID3D12Resource NativeTexture Field Value Type Description ID3D12Resource Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Texture.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer ShaderResourceView Gets the shader resource view. Declaration public CpuDescriptorHandle ShaderResourceView { get; } Property Value Type Description CpuDescriptorHandle UnorderedAccessView Gets the unordered view. Declaration public CpuDescriptorHandle UnorderedAccessView { get; } Property Value Type Description CpuDescriptorHandle Methods CopyTo(ID3D12GraphicsCommandList, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copy a pixel region from source to destination texture. Declaration public void CopyTo(ID3D12GraphicsCommandList commandList, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBaseArray, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArray, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description ID3D12GraphicsCommandList commandList The CommandList where execute commands. uint sourceX U coord source texture. uint sourceY V coord source texture. uint sourceZ W coord source texture. uint sourceMipLevel Source mip level. uint sourceBaseArray Source array index. Texture destination Destination texture. uint destinationX U coord destination texture. uint destinationY V coord destination texture. uint destinationZ W coord destination texture. uint destinationMipLevel Destination mip level. uint destinationBasedArray Destination array index. uint width Destination width. uint height Destination height. uint depth Destination depth. uint layerCount Destination layer count. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides Texture.Dispose() FromDirectXTexture(DX12GraphicsContext, IntPtr, TextureDescription?) Generate a DXTexture from Vortice Texture2D. Declaration public static DX12Texture FromDirectXTexture(DX12GraphicsContext context, IntPtr texturePointer, TextureDescription? textureDescription = null) Parameters Type Name Description DX12GraphicsContext context DX context. IntPtr texturePointer DirectX Texture pointer. TextureDescription? textureDescription Overrided pixel format. Returns Type Description DX12Texture DXTexture with VorticeTexture as resource. FromDirectXTexture(DX12GraphicsContext, ID3D12Resource, TextureDescription?) Generate a DXTexture from Vortice Texture2D. Declaration public static DX12Texture FromDirectXTexture(DX12GraphicsContext context, ID3D12Resource nativeTexture, TextureDescription? textureDescription = null) Parameters Type Name Description DX12GraphicsContext context DX context. ID3D12Resource nativeTexture VorticeTexture instance. TextureDescription? textureDescription Overrided pixel format. This only affect to the generated TextureDescription. IT does not change the source texture format. Returns Type Description DX12Texture DXTexture with VorticeTexture as resource. GetDepthStencilView(uint, uint, uint) Create a new DepthStencil view for this texture. Declaration public CpuDescriptorHandle GetDepthStencilView(uint firstSlice, uint sliceCount, uint mipSlice) Parameters Type Name Description uint firstSlice The start slice of the view range. uint sliceCount The number of slices in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description CpuDescriptorHandle A new DepthStencil view. GetRenderTargetView(uint, uint, uint) Create a new rendertargetview for this texture. Declaration public CpuDescriptorHandle GetRenderTargetView(uint firstSlice, uint sliceCount, uint mipSlice) Parameters Type Name Description uint firstSlice The start slice of the view range. uint sliceCount The number of slices in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description CpuDescriptorHandle A new RenderTargetView instance. GetShaderResourceView(uint, uint, uint) Create a new ShaderResource view for this texture. Declaration public CpuDescriptorHandle GetShaderResourceView(uint firstSlice, uint sliceCount, uint mipSlice) Parameters Type Name Description uint firstSlice The start slice of the view range. uint sliceCount The number of slices in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description CpuDescriptorHandle A new ShaderResource view. GetUnorderedAccessView(uint, uint) Create a new UnorderedAccessView for this texture. Declaration public CpuDescriptorHandle GetUnorderedAccessView(uint arraySlice, uint mipSlice) Parameters Type Name Description uint arraySlice The slice in the view range. uint mipSlice The mipmap level in the view range. Returns Type Description CpuDescriptorHandle A new UnorderedAccessView. ResourceTransition(ID3D12GraphicsCommandList, ResourceStates, int) Transition this texture to another native state. Declaration public void ResourceTransition(ID3D12GraphicsCommandList commandList, ResourceStates newResourceState, int subResource = 0) Parameters Type Name Description ID3D12GraphicsCommandList commandList The commandlist used to execute the barrier transition. ResourceStates newResourceState The new native state for this texture. int subResource The subresource index. SetData(ID3D12GraphicsCommandList, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(ID3D12GraphicsCommandList commandList, IntPtr source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description ID3D12GraphicsCommandList commandList The CommandList where execute commands. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subresource index. ToStaging() Return a new Buffer with ResourceUsage set to staging. Declaration public DX12Texture ToStaging() Returns Type Description DX12Texture New staging Buffer. Implements ILoadable IDisposable IDependencyObject Extension Methods TextureExtension.SafeToStream(Texture, GraphicsContext) TextureExtension.SaveToFile(Texture, GraphicsContext, string) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.DX12TopLevelAS.html": {
    "href": "api/Evergine.DirectX12.DX12TopLevelAS.html",
    "title": "Class DX12TopLevelAS | Evergine Doc",
    "keywords": "Class DX12TopLevelAS DX12 Top Level Acceleration Structure implementation. Inheritance object GraphicsResource TopLevelAS DX12TopLevelAS Implements IDisposable Inherited Members TopLevelAS.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.DirectX12 Assembly: Evergine.DirectX12.dll Syntax public class DX12TopLevelAS : TopLevelAS, IDisposable Constructors DX12TopLevelAS(DX12GraphicsContext, ref TopLevelASDescription) Initializes a new instance of the DX12TopLevelAS class. Declaration public DX12TopLevelAS(DX12GraphicsContext context, ref TopLevelASDescription description) Parameters Type Name Description DX12GraphicsContext context DirectX12 Context. TopLevelASDescription description Top Level Description. Fields ResultBuffer DX12 Acceleration Structure Result buffer. Declaration public ID3D12Resource ResultBuffer Field Value Type Description ID3D12Resource Properties AccelerationStructureView Gets the shader resource view. Declaration public CpuDescriptorHandle AccelerationStructureView { get; } Property Value Type Description CpuDescriptorHandle NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() UpdateAccelerationStructure(ref TopLevelASDescription) Initializes a new instance of the DX12TopLevelAS class. Declaration public void UpdateAccelerationStructure(ref TopLevelASDescription description) Parameters Type Name Description TopLevelASDescription description New top level description. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.DirectX12.html": {
    "href": "api/Evergine.DirectX12.html",
    "title": "Namespace Evergine.DirectX12 | Evergine Doc",
    "keywords": "Namespace Evergine.DirectX12 Classes DX12BottomLevelAS DX12 Bottom Level Acceleration Structure implementation. DX12Buffer Represents a DirectX buffer object. DX12Capabilities The DX12 capabilities. DX12CommandBuffer This class represent a set of commands. DX12CommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. DX12ComputePipelineState The DirectX version of PipelineState. DX12ExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. DX12FrameBuffer FrameBuffer implementation on DirectX. DX12GraphicsContext Manages all graphical functionality. DX12GraphicsPipelineState The DirectX version of PipelineState. DX12Helpers A set of helper functions for DX12. DX12QueryHeap Represents a DirectX queryheap object. DX12RaytracingHelpers Raytracing helpers. DX12RaytracingPipelineState DX12 Raytracing pipeline state. DX12ResourceFactory The DirectX version of the resource factory. DX12ResourceLayout The DX12 implementation of the ResourceLayout object. DX12ResourceSet The DX12 implementation of the ResourceSet object. DX12SamplerState The DirectX sampler state. DX12Shader This class represent a native instance of a DirectX shader. DX12ShaderTable DX12 Shader binding table (buffer). DX12SwapChain This class represents a native swapchain object on DirectX12. DX12SwapChainFrameBuffer This class represent the swapchain FrameBuffer on DirectX12. DX12Texture Represent a DirectX Texture. DX12TopLevelAS DX12 Top Level Acceleration Structure implementation. Structs DX12ShaderTable.ShaderTableRecord Shader Table Entry."
  },
  "api/Evergine.Forms.EvergineControl.html": {
    "href": "api/Evergine.Forms.EvergineControl.html",
    "title": "Class EvergineControl | Evergine Doc",
    "keywords": "Class EvergineControl Evergine control for Windows Forms. Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl EvergineControl Implements ISynchronizeInvoke IComponent IDisposable Inherited Members Component.Dispose() Component.Dispose(bool) Component.GetService(Type) Component.ToString() Component.CanRaiseEvents Component.Events Component.Site Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class EvergineControl : UserControl, ISynchronizeInvoke, IComponent, IDisposable Constructors EvergineControl() Initializes a new instance of the EvergineControl class. Declaration public EvergineControl() Properties KeyboardDispatcher Gets dispatch keyboard events associated to a window. Declaration public FormsKeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description FormsKeyboardDispatcher MouseDispatcher Gets dispatch mouse events associated to a window. Declaration public FormsMouseDispatcher MouseDispatcher { get; } Property Value Type Description FormsMouseDispatcher TouchDispatcher Gets dispatch pointer events associated to a window. Declaration public FormsTouchDispatcher TouchDispatcher { get; } Property Value Type Description FormsTouchDispatcher Methods OnClientSizeChanged(EventArgs) Declaration protected override void OnClientSizeChanged(EventArgs e) Parameters Type Name Description EventArgs e Overrides Control.OnClientSizeChanged(EventArgs) OnHandleCreated(EventArgs) Declaration protected override void OnHandleCreated(EventArgs e) Parameters Type Name Description EventArgs e Overrides Control.OnHandleCreated(EventArgs) WndProc(ref Message) Declaration protected override void WndProc(ref Message m) Parameters Type Name Description Message m Overrides UserControl.WndProc(ref Message) Implements ISynchronizeInvoke IComponent IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.EvergineForm.html": {
    "href": "api/Evergine.Forms.EvergineForm.html",
    "title": "Class EvergineForm | Evergine Doc",
    "keywords": "Class EvergineForm Default Rendering Form. Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form EvergineForm Implements ISynchronizeInvoke IComponent IDisposable Inherited Members Component.Dispose() Component.Dispose(bool) Component.GetService(Type) Component.ToString() Component.CanRaiseEvents Component.Events Component.Site Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class EvergineForm : Form, ISynchronizeInvoke, IComponent, IDisposable Constructors EvergineForm() Initializes a new instance of the EvergineForm class. Declaration public EvergineForm() EvergineForm(string, int, int) Initializes a new instance of the EvergineForm class. Declaration public EvergineForm(string text, int width, int height) Parameters Type Name Description string text The text. int width Windows width. int height Windows height. Properties AllowUserResizing Gets or sets a value indicating whether this form can be resized by the user. See remarks. Declaration public bool AllowUserResizing { get; set; } Property Value Type Description bool true if this form can be resized by the user (by default); otherwise, false. Remarks This property alters FormBorderStyle, for true value it is Sizable, for false - FixedSingle. IsFullscreen Gets or sets a value indicating whether gets or sets a value indicationg whether the current render form is in fullscreen mode. See remarks. Declaration public bool IsFullscreen { get; set; } Property Value Type Description bool Remarks If Toolkit is used, this property is set automatically, otherwise user should maintain it himself as it affects the behavior of AllowUserResizing property. KeyboardDispatcher Gets dispatch keyboard events associated to a window. Declaration public FormsKeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description FormsKeyboardDispatcher MouseDispatcher Gets dispatch mouse events associated to a window. Declaration public FormsMouseDispatcher MouseDispatcher { get; } Property Value Type Description FormsMouseDispatcher TouchDispatcher Gets dispatch pointer events associated to a window. Declaration public FormsTouchDispatcher TouchDispatcher { get; } Property Value Type Description FormsTouchDispatcher Methods OnClientSizeChanged(EventArgs) Declaration protected override void OnClientSizeChanged(EventArgs e) Parameters Type Name Description EventArgs e Overrides Control.OnClientSizeChanged(EventArgs) OnHandleCreated(EventArgs) Declaration protected override void OnHandleCreated(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnHandleCreated(EventArgs) OnLoad(EventArgs) Raises the Load event. Declaration protected override void OnLoad(EventArgs e) Parameters Type Name Description EventArgs e An EventArgs that contains the event data. Overrides Form.OnLoad(EventArgs) OnPaintBackground(PaintEventArgs) Paints the background of the control. Declaration protected override void OnPaintBackground(PaintEventArgs e) Parameters Type Name Description PaintEventArgs e A PaintEventArgs that contains the event data. Overrides ScrollableControl.OnPaintBackground(PaintEventArgs) OnResizeBegin(EventArgs) Raises the ResizeBegin event. Declaration protected override void OnResizeBegin(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. Overrides Form.OnResizeBegin(EventArgs) OnResizeEnd(EventArgs) Raises the ResizeEnd event. Declaration protected override void OnResizeEnd(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. Overrides Form.OnResizeEnd(EventArgs) ProcessDialogKey(Keys) Declaration protected override bool ProcessDialogKey(Keys keyData) Parameters Type Name Description Keys keyData Returns Type Description bool Overrides Form.ProcessDialogKey(Keys) WndProc(ref Message) Override windows message loop handling. Declaration protected override void WndProc(ref Message m) Parameters Type Name Description Message m The Windows Message to process. Overrides Form.WndProc(ref Message) Events AppActivated Occurs when [app activated]. Declaration public event EventHandler<EventArgs> AppActivated Event Type Type Description EventHandler<EventArgs> AppDeactivated Occurs when [app deactivated]. Declaration public event EventHandler<EventArgs> AppDeactivated Event Type Type Description EventHandler<EventArgs> MonitorChanged Occurs when [monitor changed]. Declaration public event EventHandler<EventArgs> MonitorChanged Event Type Type Description EventHandler<EventArgs> PauseRendering Occurs when [pause rendering]. Declaration public event EventHandler<EventArgs> PauseRendering Event Type Type Description EventHandler<EventArgs> ResumeRendering Occurs when [resume rendering]. Declaration public event EventHandler<EventArgs> ResumeRendering Event Type Type Description EventHandler<EventArgs> Screensaver Occurs when [screensaver]. Declaration public event EventHandler<CancelEventArgs> Screensaver Event Type Type Description EventHandler<CancelEventArgs> SystemResume Occurs when [system resume]. Declaration public event EventHandler<EventArgs> SystemResume Event Type Type Description EventHandler<EventArgs> SystemSuspend Occurs when [system suspend]. Declaration public event EventHandler<EventArgs> SystemSuspend Event Type Type Description EventHandler<EventArgs> UserResized Occurs when [user resized]. Declaration public event EventHandler<EventArgs> UserResized Event Type Type Description EventHandler<EventArgs> Implements ISynchronizeInvoke IComponent IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.FormsKeyboardDispatcher.html": {
    "href": "api/Evergine.Forms.FormsKeyboardDispatcher.html",
    "title": "Class FormsKeyboardDispatcher | Evergine Doc",
    "keywords": "Class FormsKeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. Inheritance object KeyboardDispatcher FormsKeyboardDispatcher Implements IDisposable Inherited Members KeyboardDispatcher.KeyDown KeyboardDispatcher.KeyUp KeyboardDispatcher.KeyChar KeyboardDispatcher.ReadKeyState(Keys) KeyboardDispatcher.IsKeyDown(Keys) KeyboardDispatcher.DispatchEvents() KeyboardDispatcher.HandleKeyDown(Keys) KeyboardDispatcher.HandleKeyUp(Keys) KeyboardDispatcher.HandleKeyChar(char) KeyboardDispatcher.HandleKeyChar(string) KeyboardDispatcher.ResetKeyboardStatus() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class FormsKeyboardDispatcher : KeyboardDispatcher, IDisposable Constructors FormsKeyboardDispatcher(Control) Initializes a new instance of the FormsKeyboardDispatcher class. Declaration public FormsKeyboardDispatcher(Control control) Parameters Type Name Description Control control The Control associated with this dispatcher. Methods Dispose() Declaration public void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.FormsMouseDispatcher.html": {
    "href": "api/Evergine.Forms.FormsMouseDispatcher.html",
    "title": "Class FormsMouseDispatcher | Evergine Doc",
    "keywords": "Class FormsMouseDispatcher Dispatch mouse events associated to a Surface or a Window. Inheritance object PointerDispatcher MouseDispatcher FormsMouseDispatcher Inherited Members MouseDispatcher.IsMouseOver MouseDispatcher.Position MouseDispatcher.PositionDelta MouseDispatcher.ScrollDelta MouseDispatcher.State MouseDispatcher.MouseEnter MouseDispatcher.MouseLeave MouseDispatcher.MouseButtonDown MouseDispatcher.MouseButtonUp MouseDispatcher.MouseMove MouseDispatcher.MouseScroll MouseDispatcher.ReadButtonState(MouseButtons) MouseDispatcher.IsButtonDown(MouseButtons) MouseDispatcher.TrySetCursorPosition(Point) MouseDispatcher.DispatchEvents() MouseDispatcher.HandleMouseEnter(Point) MouseDispatcher.HandleMouseLeave(Point) MouseDispatcher.HandleMouseMove(Point) MouseDispatcher.HandleMouseButtonDown(MouseButtons) MouseDispatcher.HandleMouseButtonUp(MouseButtons) MouseDispatcher.HandleMouseScroll(MouseScrollDirections) PointerDispatcher.Points PointerDispatcher.PointerDown PointerDispatcher.PointerUp PointerDispatcher.PointerMove PointerDispatcher.HandlePointerDown(long, Point) PointerDispatcher.HandlePointerUp(long, Point) PointerDispatcher.HandlePointerMove(long, Point) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class FormsMouseDispatcher : MouseDispatcher Constructors FormsMouseDispatcher(Control) Initializes a new instance of the FormsMouseDispatcher class. Declaration public FormsMouseDispatcher(Control control) Parameters Type Name Description Control control The Control associated with this dispatcher. Properties CursorType Gets the active cursor type. It can be changed calling the method TrySetCursorType(CursorTypes). Declaration public override CursorTypes CursorType { get; } Property Value Type Description CursorTypes Overrides MouseDispatcher.CursorType Methods NativeSetCursorPosition(Point) Sets natively the cursor position. Declaration protected override bool NativeSetCursorPosition(Point position) Parameters Type Name Description Point position The new position. Returns Type Description bool True if the operation was successful. False otherwise. Overrides MouseDispatcher.NativeSetCursorPosition(Point) TrySetCursorType(CursorTypes) Tries to change the mouse cursor type. Declaration public override bool TrySetCursorType(CursorTypes cursorType) Parameters Type Name Description CursorTypes cursorType The new cursor type. Returns Type Description bool true if successful; otherwise, false. Overrides MouseDispatcher.TrySetCursorType(CursorTypes) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.FormsSurface.html": {
    "href": "api/Evergine.Forms.FormsSurface.html",
    "title": "Class FormsSurface | Evergine Doc",
    "keywords": "Class FormsSurface Represent a control/widget on a WindowSystem. Inheritance object Surface FormsSurface Implements IDisposable Inherited Members Surface.SurfaceInfo Surface.Width Surface.Height Surface.DPIDensity Surface.OnScreenSizeChanged Surface.OnSurfaceInfoChanged Surface.Closing Surface.GotFocus Surface.LostFocus Surface.Dispose() Surface.OnClosing() Surface.OnGotFocus() Surface.OnLostFocus() Surface.OnSizeChanged() Surface.OnInfoChanged() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class FormsSurface : Surface, IDisposable Constructors FormsSurface(uint, uint) Initializes a new instance of the FormsSurface class. Declaration public FormsSurface(uint width, uint height) Parameters Type Name Description uint width Surface width. uint height Surface height. Properties KeyboardDispatcher Gets the keyboard events dispatcher associated to this surface. Declaration public override KeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description KeyboardDispatcher Overrides Surface.KeyboardDispatcher MouseDispatcher Gets the mouse events dispatcher associated to this surface. Declaration public override MouseDispatcher MouseDispatcher { get; } Property Value Type Description MouseDispatcher Overrides Surface.MouseDispatcher NativeControl Gets surface native control. Declaration public EvergineControl NativeControl { get; } Property Value Type Description EvergineControl TouchDispatcher Gets the touch events dispatcher associated to this surface. Declaration public override PointerDispatcher TouchDispatcher { get; } Property Value Type Description PointerDispatcher Overrides Surface.TouchDispatcher Methods Destroy() Remove managed resources. Declaration protected override void Destroy() Overrides Surface.Destroy() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.FormsTouchDispatcher.html": {
    "href": "api/Evergine.Forms.FormsTouchDispatcher.html",
    "title": "Class FormsTouchDispatcher | Evergine Doc",
    "keywords": "Class FormsTouchDispatcher Dispatch pointer events associated to a Surface or a Window. Inheritance object PointerDispatcher FormsTouchDispatcher Inherited Members PointerDispatcher.Points PointerDispatcher.PointerDown PointerDispatcher.PointerUp PointerDispatcher.PointerMove PointerDispatcher.DispatchEvents() PointerDispatcher.HandlePointerDown(long, Point) PointerDispatcher.HandlePointerUp(long, Point) PointerDispatcher.HandlePointerMove(long, Point) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class FormsTouchDispatcher : PointerDispatcher Constructors FormsTouchDispatcher(Control) Initializes a new instance of the FormsTouchDispatcher class. Declaration public FormsTouchDispatcher(Control control) Parameters Type Name Description Control control The Control associated with this dispatcher. Properties IsRegistered Gets a value indicating whether the windows is registered as touch-capable. Declaration public bool IsRegistered { get; } Property Value Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.FormsWindow.html": {
    "href": "api/Evergine.Forms.FormsWindow.html",
    "title": "Class FormsWindow | Evergine Doc",
    "keywords": "Class FormsWindow Represent a Window Forms implementation on WindowSystem. Inheritance object Surface Window FormsWindow Implements IDisposable Inherited Members Surface.SurfaceInfo Surface.Width Surface.Height Surface.DPIDensity Surface.OnScreenSizeChanged Surface.OnSurfaceInfoChanged Surface.Closing Surface.GotFocus Surface.LostFocus Surface.Dispose() Surface.OnClosing() Surface.OnGotFocus() Surface.OnLostFocus() Surface.OnSizeChanged() Surface.OnInfoChanged() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class FormsWindow : Window, IDisposable Constructors FormsWindow(string, uint, uint, bool) Initializes a new instance of the FormsWindow class. Create Forms Window. Declaration public FormsWindow(string title, uint width, uint height, bool visible) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. bool visible Window visibility. Properties KeyboardDispatcher Gets the keyboard events dispatcher associated to this surface. Declaration public override KeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description KeyboardDispatcher Overrides Surface.KeyboardDispatcher MouseDispatcher Gets the mouse events dispatcher associated to this surface. Declaration public override MouseDispatcher MouseDispatcher { get; } Property Value Type Description MouseDispatcher Overrides Surface.MouseDispatcher NativeWindow Gets or sets forms Window instance. Declaration public EvergineForm NativeWindow { get; protected set; } Property Value Type Description EvergineForm Title Gets or sets window title. Declaration public override string Title { get; set; } Property Value Type Description string Overrides Window.Title TouchDispatcher Gets the touch events dispatcher associated to this surface. Declaration public override PointerDispatcher TouchDispatcher { get; } Property Value Type Description PointerDispatcher Overrides Surface.TouchDispatcher Visible Gets or sets a value indicating whether the window is visible. Declaration public override bool Visible { get; set; } Property Value Type Description bool Overrides Window.Visible Methods Destroy() Remove managed resources. Declaration protected override void Destroy() Overrides Surface.Destroy() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.FormsWindowsSystem.html": {
    "href": "api/Evergine.Forms.FormsWindowsSystem.html",
    "title": "Class FormsWindowsSystem | Evergine Doc",
    "keywords": "Class FormsWindowsSystem Windows Forms system. Inheritance object WindowsSystem FormsWindowsSystem Implements IDisposable IGetNativePointers Inherited Members WindowsSystem.AvailablePointerKeys WindowsSystem.Run(Action, Action) WindowsSystem.Dispose() WindowsSystem.Destroy() WindowsSystem.GetNativePointer(string, out IntPtr) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.Forms Assembly: Evergine.Forms.dll Syntax public class FormsWindowsSystem : WindowsSystem, IDisposable, IGetNativePointers Properties AutoRegisterWindow Gets or sets a value indicating whether invoking CreateWindow(string, uint, uint, bool) will automatically register the window using RegisterLoopThreadControl(Control). Declaration public bool AutoRegisterWindow { get; set; } Property Value Type Description bool Methods CreateLoopThread(Action, Action) Creates a loop thread. Declaration protected override void CreateLoopThread(Action loadAction, Action renderCallback) Parameters Type Name Description Action loadAction The load action. Action renderCallback The render callback action. Overrides WindowsSystem.CreateLoopThread(Action, Action) CreateSurface(object) Create a surface. Declaration public override Surface CreateSurface(object nativeSurface) Parameters Type Name Description object nativeSurface The native surface control. Returns Type Description Surface Surface instance. Overrides WindowsSystem.CreateSurface(object) CreateSurface(uint, uint) Create a surface. Declaration public override Surface CreateSurface(uint width, uint height) Parameters Type Name Description uint width Surface width. uint height Surface height. Returns Type Description Surface Surface instance. Overrides WindowsSystem.CreateSurface(uint, uint) CreateWindow(string, uint, uint, bool) Create a Window. Declaration public override Window CreateWindow(string title, uint width, uint height, bool visible = true) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. bool visible Window visibility. Returns Type Description Window Window instance. Overrides WindowsSystem.CreateWindow(string, uint, uint, bool) RegisterLoopThreadControl(Control) Registers native Windows Forms control that will be used to created rendering loop. Declaration public void RegisterLoopThreadControl(Control control) Parameters Type Name Description Control control Windows Forms control. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Forms.html": {
    "href": "api/Evergine.Forms.html",
    "title": "Namespace Evergine.Forms | Evergine Doc",
    "keywords": "Namespace Evergine.Forms Classes EvergineControl Evergine control for Windows Forms. EvergineForm Default Rendering Form. FormsKeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. FormsMouseDispatcher Dispatch mouse events associated to a Surface or a Window. FormsSurface Represent a control/widget on a WindowSystem. FormsTouchDispatcher Dispatch pointer events associated to a Surface or a Window. FormsWindow Represent a Window Forms implementation on WindowSystem. FormsWindowsSystem Windows Forms system."
  },
  "api/Evergine.HLSLEverywhere.HLSLTranslator.html": {
    "href": "api/Evergine.HLSLEverywhere.HLSLTranslator.html",
    "title": "Class HLSLTranslator | Evergine Doc",
    "keywords": "Class HLSLTranslator Main Translator class HLSL to SPIRV, GLSL, ESSL, MSL. Inheritance object HLSLTranslator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.HLSLEverywhere Assembly: Evergine.HLSLEverywhere.dll Syntax public static class HLSLTranslator Methods DisassemblySPIRV(byte[]) Disassemble SPIRV. Declaration public static string DisassemblySPIRV(byte[] bytecode) Parameters Type Name Description byte[] bytecode SPIRV ByteCode. Returns Type Description string Translation Result object. HLSLTo(string, ShaderStages, GraphicsProfile, string, ShadingLanguage, int) Translate HLSL to other languages (GLSL, ESSL, SPIRV, Metal). Declaration public static string HLSLTo(string hlslSource, ShaderStages stage, GraphicsProfile profile, string entryPoint, ShadingLanguage language, int version = 450) Parameters Type Name Description string hlslSource HLSL source. ShaderStages stage Shader stage. GraphicsProfile profile Compile profile. string entryPoint Shader entryPoint. ShadingLanguage language Target language. int version OpenGL/ES version. Default value 460. Returns Type Description string Translate string. HLSLToBinarySPIRV(string, ShaderStages, GraphicsProfile, string) Translate HLSL to SPIRV bytecode. Declaration public static byte[] HLSLToBinarySPIRV(string hlslSource, ShaderStages stage, GraphicsProfile profile, string entryPoint) Parameters Type Name Description string hlslSource HLSL source. ShaderStages stage Shader stage. GraphicsProfile profile Graphics Profile. string entryPoint Shader Entrypoint. Returns Type Description byte[] SPIRV bytecode. HLSLToWGSL(string, ShaderStages, GraphicsProfile, string) Translate HLSL to WGSL. Declaration public static string HLSLToWGSL(string hlslSource, ShaderStages stage, GraphicsProfile profile, string entryPoint) Parameters Type Name Description string hlslSource HLSL source. ShaderStages stage Shader stage. GraphicsProfile profile Graphics Profile. string entryPoint Shader Entrypoint. Returns Type Description string WGSL translated code."
  },
  "api/Evergine.HLSLEverywhere.html": {
    "href": "api/Evergine.HLSLEverywhere.html",
    "title": "Namespace Evergine.HLSLEverywhere | Evergine Doc",
    "keywords": "Namespace Evergine.HLSLEverywhere Classes HLSLTranslator Main Translator class HLSL to SPIRV, GLSL, ESSL, MSL. Enums ShaderStage Shading Stages. ShadingLanguage Shading languages."
  },
  "api/Evergine.HLSLEverywhere.ShaderStage.html": {
    "href": "api/Evergine.HLSLEverywhere.ShaderStage.html",
    "title": "Enum ShaderStage | Evergine Doc",
    "keywords": "Enum ShaderStage Shading Stages. Namespace: Evergine.HLSLEverywhere Assembly: Evergine.HLSLEverywhere.dll Syntax public enum ShaderStage Fields Name Description ComputeShader Computer Shader Stage. DomainShader Domain Shader Stage. GeometryShader Geometry Shader Stage. HullShader Hull Shader Stage. NumShaderStages Return stages count. PixelShader Pixel Shader or Fragment Shader Stage. VertexShader Vertex Shader Stage. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.HLSLEverywhere.ShadingLanguage.html": {
    "href": "api/Evergine.HLSLEverywhere.ShadingLanguage.html",
    "title": "Enum ShadingLanguage | Evergine Doc",
    "keywords": "Enum ShadingLanguage Shading languages. Namespace: Evergine.HLSLEverywhere Assembly: Evergine.HLSLEverywhere.dll Syntax public enum ShadingLanguage Fields Name Description Dxil DirectX12 assembly language. Essl OpenGLES language. Glsl OpenGL language. Hlsl DirectX language. Msl_iOS Metal language for IOS. Msl_macOS Metal language for MacOS. NumShadingLanguages Return languages count. SpirV Vulkan assembly language. Wgsl WebGPU language. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.BoundingBox.html": {
    "href": "api/Evergine.Mathematics.BoundingBox.html",
    "title": "Struct BoundingBox | Evergine Doc",
    "keywords": "Struct BoundingBox Represents a bounding box. Implements IEquatable<BoundingBox> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct BoundingBox : IEquatable<BoundingBox> Constructors BoundingBox(Vector3, Vector3) Initializes a new instance of the BoundingBox struct. Declaration public BoundingBox(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min The min. Vector3 max The max. Fields CornerCount Number of corners. Declaration public const int CornerCount = 8 Field Value Type Description int Max Bounding box maximum. Declaration public Vector3 Max Field Value Type Description Vector3 Min Bounding box minimum. Declaration public Vector3 Min Field Value Type Description Vector3 Properties Center Gets the center of the bouding box. Declaration public Vector3 Center { get; } Property Value Type Description Vector3 HalfExtent Gets the Bounding box half extents. Declaration public Vector3 HalfExtent { get; } Property Value Type Description Vector3 Methods Contains(BoundingBox) Determines whether [contains] [the specified box]. Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description ContainmentType The result. Contains(ref BoundingBox, out ContainmentType) Determines whether [contains] [the specified box]. Declaration public void Contains(ref BoundingBox box, out ContainmentType result) Parameters Type Name Description BoundingBox box The box. ContainmentType result The result. Contains(BoundingFrustum) Determines whether [contains] [the specified frustum]. Declaration public ContainmentType Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description ContainmentType The result. Contains(BoundingSphere) Determines whether [contains] [the specified sphere]. Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description ContainmentType The result. Contains(ref BoundingSphere, out ContainmentType) Determines whether [contains] [the specified sphere]. Declaration public void Contains(ref BoundingSphere sphere, out ContainmentType result) Parameters Type Name Description BoundingSphere sphere The sphere. ContainmentType result The result. Contains(Vector3) Determines whether [contains] [the specified point]. Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description ContainmentType The result. Contains(ref Vector3, out ContainmentType) Determines whether [contains] [the specified point]. Declaration public void Contains(ref Vector3 point, out ContainmentType result) Parameters Type Name Description Vector3 point The point. ContainmentType result The result. CreateFromPoints(IEnumerable<Vector3>) Creates from points. Declaration public static BoundingBox CreateFromPoints(IEnumerable<Vector3> points) Parameters Type Name Description IEnumerable<Vector3> points The points. Returns Type Description BoundingBox The result. CreateFromSphere(BoundingSphere) Creates from sphere. Declaration public static BoundingBox CreateFromSphere(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description BoundingBox The result. CreateFromSphere(ref BoundingSphere, out BoundingBox) Creates from sphere. Declaration public static void CreateFromSphere(ref BoundingSphere sphere, out BoundingBox result) Parameters Type Name Description BoundingSphere sphere The sphere. BoundingBox result The result. CreateMerged(BoundingBox, BoundingBox) Creates the merged. Declaration public static BoundingBox CreateMerged(BoundingBox original, BoundingBox additional) Parameters Type Name Description BoundingBox original The original. BoundingBox additional The additional. Returns Type Description BoundingBox The result. CreateMerged(ref BoundingBox, ref BoundingBox, out BoundingBox) Creates the merged. Declaration public static void CreateMerged(ref BoundingBox original, ref BoundingBox additional, out BoundingBox result) Parameters Type Name Description BoundingBox original The original. BoundingBox additional The additional. BoundingBox result The result. Equals(BoundingBox) Equalses the specified other. Declaration public bool Equals(BoundingBox other) Parameters Type Name Description BoundingBox other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetCorners() Gets the corners. Declaration public Vector3[] GetCorners() Returns Type Description Vector3[] The result. GetCorners(Vector3[]) Gets the corners. Declaration public void GetCorners(Vector3[] corners) Parameters Type Name Description Vector3[] corners The corners. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Intersects(BoundingBox) Intersectses the specified box. Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description bool The result. Intersects(ref BoundingBox) Intersectses the specified box. Declaration public bool Intersects(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description bool True if both boxes overlap. Intersects(BoundingFrustum) Intersectses the specified frustum. Declaration public bool Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description bool The result. Intersects(BoundingSphere) Intersectses the specified sphere. Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description bool The result. Intersects(ref BoundingSphere, out bool) Intersectses the specified sphere. Declaration public void Intersects(ref BoundingSphere sphere, out bool result) Parameters Type Name Description BoundingSphere sphere The sphere. bool result if set to true [result]. Intersects(Plane) Intersectses the specified plane. Declaration public PlaneIntersectionType Intersects(Plane plane) Parameters Type Name Description Plane plane The plane. Returns Type Description PlaneIntersectionType The result. Intersects(ref Plane, out PlaneIntersectionType) Intersectses the specified plane. Declaration public void Intersects(ref Plane plane, out PlaneIntersectionType result) Parameters Type Name Description Plane plane The plane. PlaneIntersectionType result The result. Intersects(Ray) Intersectses the specified ray. Declaration public float? Intersects(Ray ray) Parameters Type Name Description Ray ray The ray. Returns Type Description float? The result. Intersects(ref Ray, out float?) Intersectses the specified ray. Declaration public void Intersects(ref Ray ray, out float? result) Parameters Type Name Description Ray ray The ray. float? result The result. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Transform(BoundingBox, Matrix4x4) Transform a bounding box. Declaration public static BoundingBox Transform(BoundingBox boundingBox, Matrix4x4 m) Parameters Type Name Description BoundingBox boundingBox The bounding box. Matrix4x4 m The transform. Returns Type Description BoundingBox The transformed bounding box. Transform(Matrix4x4) Transform a bounding box. Declaration public void Transform(Matrix4x4 m) Parameters Type Name Description Matrix4x4 m The transform. Transform(ref Matrix4x4) Transform a bounding box. Declaration public void Transform(ref Matrix4x4 m) Parameters Type Name Description Matrix4x4 m The transform. Operators operator ==(BoundingBox, BoundingBox) Implements the operator ==. Declaration public static bool operator ==(BoundingBox a, BoundingBox b) Parameters Type Name Description BoundingBox a First bounding box. BoundingBox b Second bounding box. Returns Type Description bool The result of the operator. operator !=(BoundingBox, BoundingBox) Implements the operator !=. Declaration public static bool operator !=(BoundingBox a, BoundingBox b) Parameters Type Name Description BoundingBox a First bounding box. BoundingBox b Second bounding box. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.BoundingFrustum.html": {
    "href": "api/Evergine.Mathematics.BoundingFrustum.html",
    "title": "Class BoundingFrustum | Evergine Doc",
    "keywords": "Class BoundingFrustum Represents a bounding frustum. Inheritance object BoundingFrustum Implements IEquatable<BoundingFrustum> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public class BoundingFrustum : IEquatable<BoundingFrustum> Constructors BoundingFrustum(Matrix4x4) Initializes a new instance of the BoundingFrustum class. Declaration public BoundingFrustum(Matrix4x4 value) Parameters Type Name Description Matrix4x4 value The value. Fields CornerCount Number of corners. Declaration public const int CornerCount = 8 Field Value Type Description int Properties Bottom Gets the bottom. Declaration public Plane Bottom { get; } Property Value Type Description Plane Far Gets the far. Declaration public Plane Far { get; } Property Value Type Description Plane Left Gets the left. Declaration public Plane Left { get; } Property Value Type Description Plane Matrix Gets or sets the matrix. Declaration public Matrix4x4 Matrix { get; set; } Property Value Type Description Matrix4x4 The matrix. Near Gets the near. Declaration public Plane Near { get; } Property Value Type Description Plane Right Gets the right. Declaration public Plane Right { get; } Property Value Type Description Plane Top Gets the top. Declaration public Plane Top { get; } Property Value Type Description Plane Methods Contains(BoundingBox) Determines whether [contains] [the specified box]. Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description ContainmentType The result. Contains(ref BoundingBox, out ContainmentType) Determines whether [contains] [the specified box]. Declaration public void Contains(ref BoundingBox box, out ContainmentType result) Parameters Type Name Description BoundingBox box The box. ContainmentType result The result. Contains(BoundingFrustum) Determines whether [contains] [the specified frustum]. Declaration public ContainmentType Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description ContainmentType The result. Contains(BoundingSphere) Determines whether [contains] [the specified sphere]. Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description ContainmentType The result. Contains(ref BoundingSphere, out ContainmentType) Determines whether [contains] [the specified sphere]. Declaration public void Contains(ref BoundingSphere sphere, out ContainmentType result) Parameters Type Name Description BoundingSphere sphere The sphere. ContainmentType result The result. Contains(Vector3) Determines whether [contains] [the specified point]. Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description ContainmentType The result. Contains(ref Vector3, out ContainmentType) Determines whether [contains] [the specified point]. Declaration public void Contains(ref Vector3 point, out ContainmentType result) Parameters Type Name Description Vector3 point The point. ContainmentType result The result. Equals(BoundingFrustum) Equalses the specified other. Declaration public bool Equals(BoundingFrustum other) Parameters Type Name Description BoundingFrustum other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) GetCorners() Gets the corners. Declaration public Vector3[] GetCorners() Returns Type Description Vector3[] The result. GetCorners(Vector3*) Gets the corners. Declaration public void GetCorners(Vector3* result) Parameters Type Name Description Vector3* result The result. GetCorners(Vector3[]) Gets the corners. Declaration public void GetCorners(Vector3[] result) Parameters Type Name Description Vector3[] result The result. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Intersects(BoundingBox, bool) Intersects the specified box. Declaration public bool Intersects(BoundingBox box, bool disableNearPlane = false) Parameters Type Name Description BoundingBox box The box. bool disableNearPlane Bool indicates the near plane doesn't check the collision. Returns Type Description bool The result. Intersects(ref BoundingBox, out bool, bool) Intersects the specified box. Declaration public void Intersects(ref BoundingBox box, out bool result, bool disableNearPlane = false) Parameters Type Name Description BoundingBox box The box. bool result if set to true [result]. bool disableNearPlane Bool indicates the near plane doesn't check the collision. Intersects(BoundingFrustum) Intersects the specified frustum. Declaration public bool Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description bool The result. Intersects(BoundingSphere) Intersects the specified sphere. Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description bool The result. Intersects(ref BoundingSphere, out bool) Intersects the specified sphere. Declaration public void Intersects(ref BoundingSphere sphere, out bool result) Parameters Type Name Description BoundingSphere sphere The sphere. bool result if set to true [result]. Intersects(Plane) Intersects the specified plane. Declaration public PlaneIntersectionType Intersects(Plane plane) Parameters Type Name Description Plane plane The plane. Returns Type Description PlaneIntersectionType The result. Intersects(ref Plane, out PlaneIntersectionType) Intersects the specified plane. Declaration public void Intersects(ref Plane plane, out PlaneIntersectionType result) Parameters Type Name Description Plane plane The plane. PlaneIntersectionType result The result. Intersects(Ray) Intersects the specified ray. Declaration public float? Intersects(Ray ray) Parameters Type Name Description Ray ray The ray. Returns Type Description float? The result. Intersects(ref Ray, out float?) Intersects the specified ray. Declaration public void Intersects(ref Ray ray, out float? result) Parameters Type Name Description Ray ray The ray. float? result The result. SetMatrix(ref Matrix4x4) Sets the matrix. Declaration public void SetMatrix(ref Matrix4x4 value) Parameters Type Name Description Matrix4x4 value The value. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.BoundingOrientedBox.html": {
    "href": "api/Evergine.Mathematics.BoundingOrientedBox.html",
    "title": "Struct BoundingOrientedBox | Evergine Doc",
    "keywords": "Struct BoundingOrientedBox Bounding volume using an oriented bounding box. Implements IEquatable<BoundingOrientedBox> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct BoundingOrientedBox : IEquatable<BoundingOrientedBox> Constructors BoundingOrientedBox(Vector3, Vector3, Quaternion) Initializes a new instance of the BoundingOrientedBox struct. Declaration public BoundingOrientedBox(Vector3 center, Vector3 halfExtents, Quaternion orientation) Parameters Type Name Description Vector3 center The center. Vector3 halfExtents The half extents. Quaternion orientation The orientation. Fields Center Bounding box center. Declaration public Vector3 Center Field Value Type Description Vector3 CornerCount Corner count. Declaration public const int CornerCount = 8 Field Value Type Description int HalfExtent Bounding box half extents. Declaration public Vector3 HalfExtent Field Value Type Description Vector3 Orientation Bounding box orientation. Declaration public Quaternion Orientation Field Value Type Description Quaternion Properties Maximum Gets the maximum. Declaration public Vector3 Maximum { get; } Property Value Type Description Vector3 The maximum. Minimum Gets the minimum. Declaration public Vector3 Minimum { get; } Property Value Type Description Vector3 The minimum. Methods Contains(ref BoundingBox) Determine if this box contains, intersects, or is disjoint from the given BoundingBox. Declaration public ContainmentType Contains(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description ContainmentType The result. Contains(ref BoundingBox, ref BoundingOrientedBox) Determine if box A contains, intersects, or is disjoint from box B. Declaration public static ContainmentType Contains(ref BoundingBox boxA, ref BoundingOrientedBox oboxB) Parameters Type Name Description BoundingBox boxA The box A. BoundingOrientedBox oboxB The obox B. Returns Type Description ContainmentType The result. Contains(BoundingFrustum) Determine whether this box contains, intersects, or is disjoint from the given frustum. Declaration public ContainmentType Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description ContainmentType The result. Contains(BoundingFrustum, ref BoundingOrientedBox) Determine whether the given frustum contains, intersects, or is disjoint from the given oriented box. Declaration public static ContainmentType Contains(BoundingFrustum frustum, ref BoundingOrientedBox obox) Parameters Type Name Description BoundingFrustum frustum The frustum. BoundingOrientedBox obox The obox. Returns Type Description ContainmentType The result. Contains(ref BoundingOrientedBox) Determine whether this box contains, intersects, or is disjoint from the given other box. Declaration public ContainmentType Contains(ref BoundingOrientedBox other) Parameters Type Name Description BoundingOrientedBox other The other. Returns Type Description ContainmentType The result. Contains(ref BoundingSphere) Test whether this box contains, intersects, or is disjoint from the given sphere. Declaration public ContainmentType Contains(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description ContainmentType The result. Contains(ref BoundingSphere, ref BoundingOrientedBox) Test whether a BoundingSphere contains, intersects, or is disjoint from a BoundingOrientedBox. Declaration public static ContainmentType Contains(ref BoundingSphere sphere, ref BoundingOrientedBox box) Parameters Type Name Description BoundingSphere sphere The sphere. BoundingOrientedBox box The box. Returns Type Description ContainmentType The result. Contains(ref Vector3) Returns true if this box contains the given point. Declaration public bool Contains(ref Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description bool The result. ContainsRelativeBox(ref Vector3, ref Vector3, ref Matrix4x4) Determine whether the box described by half-extents hA, axis-aligned and centered at the origin, contains the box described by half-extents hB, whose position and orientation are given by the transform matrix mB. The matrix is assumed to contain only rigid motion; if it contains scaling or perpsective the result of this method will be incorrect. Declaration public static ContainmentType ContainsRelativeBox(ref Vector3 hA, ref Vector3 hB, ref Matrix4x4 mB) Parameters Type Name Description Vector3 hA Half-extents of first box. Vector3 hB Half-extents of second box. Matrix4x4 mB Position and orientation of second box relative to first box. Returns Type Description ContainmentType ContainmentType enum indicating whether the boxes are disjoin, intersecting, or whether box A contains box B. ConvertToFrustum() Convert this BoundingOrientedBox to a BoundingFrustum describing the same volume. A BoundingFrustum is defined by the matrix that carries its volume to the box from (-1,-1,0) to (1,1,1), so we just need a matrix that carries our box there. Declaration public BoundingFrustum ConvertToFrustum() Returns Type Description BoundingFrustum The result. CreateFromBoundingBox(BoundingBox) Create an oriented box from an axis-aligned box. Declaration public static BoundingOrientedBox CreateFromBoundingBox(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description BoundingOrientedBox The result. Equals(BoundingOrientedBox) Equalses the specified other. Declaration public bool Equals(BoundingOrientedBox other) Parameters Type Name Description BoundingOrientedBox other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetCorners() Return the 8 corner positions of this bounding box. ZMax ZMin 0----1 4----5 | | | | | | | | 3----2 7----6. The ordering of indices is a little strange to match what BoundingBox.GetCorners() does. Declaration public Vector3[] GetCorners() Returns Type Description Vector3[] The result. GetCorners(Vector3[], int) Return the 8 corner positions of this bounding box. ZMax ZMin 0----1 4----5 | | | | | | | | 3----2 7----6. The ordering of indices is a little strange to match what BoundingBox.GetCorners() does. Declaration public void GetCorners(Vector3[] corners, int startIndex) Parameters Type Name Description Vector3[] corners Array to fill with the eight corner positions. int startIndex Index within corners array to start writing positions. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Intersects(ref BoundingBox) Determine if box A intersects box B. Declaration public bool Intersects(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description bool The result. Intersects(BoundingFrustum) Returns true if this box intersects the given frustum. Declaration public bool Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description bool The result. Intersects(ref BoundingFrustum, out bool) Returns true if this box intersects the given frustum. Declaration public void Intersects(ref BoundingFrustum frustum, out bool result) Parameters Type Name Description BoundingFrustum frustum The frustum. bool result if set to true [result]. Intersects(ref BoundingOrientedBox) Returns true if this box intersects the given other box. Declaration public bool Intersects(ref BoundingOrientedBox other) Parameters Type Name Description BoundingOrientedBox other The other. Returns Type Description bool The result. Intersects(ref BoundingSphere) Test whether this box intersects the given sphere. Declaration public bool Intersects(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description bool The result. Intersects(ref Plane) Classify this bounding box as entirely in front of, in back of, or intersecting the given plane. Declaration public PlaneIntersectionType Intersects(ref Plane plane) Parameters Type Name Description Plane plane The plane. Returns Type Description PlaneIntersectionType The result. Intersects(ref Ray) Determine whether the given ray intersects this box. If so, returns the parametric value of the point of first intersection; otherwise returns null. Declaration public float? Intersects(ref Ray ray) Parameters Type Name Description Ray ray The ray. Returns Type Description float? The result. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Transform(Matrix4x4) Transform this Bounding box. Declaration public void Transform(Matrix4x4 world) Parameters Type Name Description Matrix4x4 world The world matrix. Transform(Quaternion, Vector3) Transform the given bounding box by a rotation around the origin followed by a translation. Declaration public BoundingOrientedBox Transform(Quaternion rotation, Vector3 translation) Parameters Type Name Description Quaternion rotation Rotation quaternion. Vector3 translation Tranlation vector. Returns Type Description BoundingOrientedBox A new bounding box, transformed relative to this one. Transform(Vector3, Quaternion, Vector3) Transform the given bounding box by a uniform scale and rotation around the origin followed by a translation. Declaration public BoundingOrientedBox Transform(Vector3 scale, Quaternion rotation, Vector3 translation) Parameters Type Name Description Vector3 scale The scale. Quaternion rotation The rotation. Vector3 translation The translation. Returns Type Description BoundingOrientedBox A new bounding box, transformed relative to this one. Transform(float, Quaternion, Vector3) Transform the given bounding box by a uniform scale and rotation around the origin followed by a translation. Declaration public BoundingOrientedBox Transform(float scale, Quaternion rotation, Vector3 translation) Parameters Type Name Description float scale The scale. Quaternion rotation The rotation. Vector3 translation The translation. Returns Type Description BoundingOrientedBox A new bounding box, transformed relative to this one. Operators operator ==(BoundingOrientedBox, BoundingOrientedBox) Implements the operator ==. Declaration public static bool operator ==(BoundingOrientedBox a, BoundingOrientedBox b) Parameters Type Name Description BoundingOrientedBox a The a. BoundingOrientedBox b The b. Returns Type Description bool The result of the operator. operator !=(BoundingOrientedBox, BoundingOrientedBox) Implements the operator !=. Declaration public static bool operator !=(BoundingOrientedBox a, BoundingOrientedBox b) Parameters Type Name Description BoundingOrientedBox a First bounding box. BoundingOrientedBox b Second bounding box.. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.BoundingSphere.html": {
    "href": "api/Evergine.Mathematics.BoundingSphere.html",
    "title": "Struct BoundingSphere | Evergine Doc",
    "keywords": "Struct BoundingSphere Represents a bounding sphere. Implements IEquatable<BoundingSphere> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct BoundingSphere : IEquatable<BoundingSphere> Constructors BoundingSphere(Vector3, float) Initializes a new instance of the BoundingSphere struct. Declaration public BoundingSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center The center. float radius The radius. Fields Center Sphere center. Declaration public Vector3 Center Field Value Type Description Vector3 Radius Sphere radius. Declaration public float Radius Field Value Type Description float Methods Contains(BoundingBox) Determines whether [contains] [the specified box]. Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description ContainmentType The result. Contains(ref BoundingBox, out ContainmentType) Determines whether [contains] [the specified box]. Declaration public void Contains(ref BoundingBox box, out ContainmentType result) Parameters Type Name Description BoundingBox box The box. ContainmentType result The result. Contains(BoundingFrustum) Determines whether [contains] [the specified frustum]. Declaration public ContainmentType Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description ContainmentType The result. Contains(BoundingSphere) Determines whether [contains] [the specified sphere]. Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description ContainmentType The result. Contains(ref BoundingSphere, out ContainmentType) Determines whether [contains] [the specified sphere]. Declaration public void Contains(ref BoundingSphere sphere, out ContainmentType result) Parameters Type Name Description BoundingSphere sphere The sphere. ContainmentType result The result. Contains(Vector3) Determines whether [contains] [the specified point]. Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description ContainmentType The result. Contains(ref Vector3, out ContainmentType) Determines whether [contains] [the specified point]. Declaration public void Contains(ref Vector3 point, out ContainmentType result) Parameters Type Name Description Vector3 point The point. ContainmentType result The result. CreateFromBoundingBox(BoundingBox) Creates from bounding box. Declaration public static BoundingSphere CreateFromBoundingBox(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description BoundingSphere The result. CreateFromBoundingBox(ref BoundingBox, out BoundingSphere) Creates from bounding box. Declaration public static void CreateFromBoundingBox(ref BoundingBox box, out BoundingSphere result) Parameters Type Name Description BoundingBox box The box. BoundingSphere result The result. CreateFromFrustum(BoundingFrustum) Creates from frustum. Declaration public static BoundingSphere CreateFromFrustum(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description BoundingSphere The result. CreateFromPoints(IEnumerable<Vector3>) Creates from points. Declaration public static BoundingSphere CreateFromPoints(IEnumerable<Vector3> points) Parameters Type Name Description IEnumerable<Vector3> points The points. Returns Type Description BoundingSphere The result. CreateMerged(BoundingSphere, BoundingSphere) Creates the merged. Declaration public static BoundingSphere CreateMerged(BoundingSphere original, BoundingSphere additional) Parameters Type Name Description BoundingSphere original The original. BoundingSphere additional The additional. Returns Type Description BoundingSphere The result. CreateMerged(ref BoundingSphere, ref BoundingSphere, out BoundingSphere) Creates the merged. Declaration public static void CreateMerged(ref BoundingSphere original, ref BoundingSphere additional, out BoundingSphere result) Parameters Type Name Description BoundingSphere original The original. BoundingSphere additional The additional. BoundingSphere result The result. Equals(BoundingSphere) Equalses the specified other. Declaration public bool Equals(BoundingSphere other) Parameters Type Name Description BoundingSphere other The other. Returns Type Description bool The result. Equals(ref BoundingSphere) Equalses the specified other. Declaration public bool Equals(ref BoundingSphere other) Parameters Type Name Description BoundingSphere other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Intersects(BoundingBox) Intersectses the specified box. Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description bool The result. Intersects(ref BoundingBox, out bool) Intersectses the specified box. Declaration public void Intersects(ref BoundingBox box, out bool result) Parameters Type Name Description BoundingBox box The box. bool result if set to true [result]. Intersects(BoundingFrustum) Intersectses the specified frustum. Declaration public bool Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description bool The result. Intersects(BoundingSphere) Intersectses the specified sphere. Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description bool The result. Intersects(ref BoundingSphere, out bool) Intersectses the specified sphere. Declaration public void Intersects(ref BoundingSphere sphere, out bool result) Parameters Type Name Description BoundingSphere sphere The sphere. bool result if set to true [result]. Intersects(Plane) Intersectses the specified plane. Declaration public PlaneIntersectionType Intersects(Plane plane) Parameters Type Name Description Plane plane The plane. Returns Type Description PlaneIntersectionType The result. Intersects(ref Plane, out PlaneIntersectionType) Intersectses the specified plane. Declaration public void Intersects(ref Plane plane, out PlaneIntersectionType result) Parameters Type Name Description Plane plane The plane. PlaneIntersectionType result The result. Intersects(Ray) Intersectses the specified ray. Declaration public float? Intersects(Ray ray) Parameters Type Name Description Ray ray The ray. Returns Type Description float? The result. Intersects(ref Ray, out float?) Intersectses the specified ray. Declaration public void Intersects(ref Ray ray, out float? result) Parameters Type Name Description Ray ray The ray. float? result The result. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Transform(Matrix4x4) Transforms the specified matrix. Declaration public BoundingSphere Transform(Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The matrix. Returns Type Description BoundingSphere The result. Transform(ref Matrix4x4, out BoundingSphere) Transforms the specified matrix. Declaration public void Transform(ref Matrix4x4 matrix, out BoundingSphere result) Parameters Type Name Description Matrix4x4 matrix The matrix. BoundingSphere result The result. Operators operator ==(BoundingSphere, BoundingSphere) Implements the operator ==. Declaration public static bool operator ==(BoundingSphere a, BoundingSphere b) Parameters Type Name Description BoundingSphere a First bounding sphere. BoundingSphere b Second bounding sphere. Returns Type Description bool The result of the operator. operator !=(BoundingSphere, BoundingSphere) Implements the operator !=. Declaration public static bool operator !=(BoundingSphere a, BoundingSphere b) Parameters Type Name Description BoundingSphere a First bounding sphere. BoundingSphere b Second bounding sphere. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Byte4.html": {
    "href": "api/Evergine.Mathematics.Byte4.html",
    "title": "Struct Byte4 | Evergine Doc",
    "keywords": "Struct Byte4 Stores a vector of 4 bytes. Implements IEquatable<Byte4> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Byte4 : IEquatable<Byte4> Constructors Byte4(byte, byte, byte, byte) Initializes a new instance of the Byte4 struct. Declaration public Byte4(byte x, byte y, byte z, byte w) Parameters Type Name Description byte x The x. byte y The y. byte z The z. byte w The w. Fields W W value. Declaration public byte W Field Value Type Description byte X X value. Declaration public byte X Field Value Type Description byte Y Y value. Declaration public byte Y Field Value Type Description byte Z Z value. Declaration public byte Z Field Value Type Description byte Methods Equals(Byte4) Equalses the specified other. Declaration public bool Equals(Byte4 other) Parameters Type Name Description Byte4 other The other. Returns Type Description bool The result. Equals(ref Byte4) Equalses the specified other. Declaration public bool Equals(ref Byte4 other) Parameters Type Name Description Byte4 other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.ContainmentType.html": {
    "href": "api/Evergine.Mathematics.ContainmentType.html",
    "title": "Enum ContainmentType | Evergine Doc",
    "keywords": "Enum ContainmentType Type of containment. Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public enum ContainmentType Fields Name Description Contains Contained containment. Disjoint Disjoint containment. Intersects Intersection containment. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.DoubleExtensions.html": {
    "href": "api/Evergine.Mathematics.DoubleExtensions.html",
    "title": "Class DoubleExtensions | Evergine Doc",
    "keywords": "Class DoubleExtensions Extension functions for double type. Inheritance object DoubleExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public static class DoubleExtensions Methods Distinct(double, double, float) Distincts the specified a. Declaration public static bool Distinct(this double a, double b, float maxRelativeError = 1E-07) Parameters Type Name Description double a First double. double b Second double. float maxRelativeError The max relative error. Returns Type Description bool The result. Equal(double, double, float) Equals the specified a. Declaration public static bool Equal(this double a, double b, float maxRelativeError = 1E-07) Parameters Type Name Description double a First double. double b Second double. float maxRelativeError The max relative error. Returns Type Description bool The result."
  },
  "api/Evergine.Mathematics.FloatExtensions.html": {
    "href": "api/Evergine.Mathematics.FloatExtensions.html",
    "title": "Class FloatExtensions | Evergine Doc",
    "keywords": "Class FloatExtensions Extension methods for flaot type. Inheritance object FloatExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public static class FloatExtensions Methods Distinct(float, float, float) Distincts the specified a. Declaration public static bool Distinct(this float a, float b, float maxRelativeError = 5.9604645E-06) Parameters Type Name Description float a First float. float b Second float. float maxRelativeError The max relative error. Returns Type Description bool true if they are distinct. Equal(float, float, float) Equals the specified a. Declaration public static bool Equal(this float a, float b, float maxRelativeError = 5.9604645E-06) Parameters Type Name Description float a First float. float b Second float. float maxRelativeError The max relative error. Returns Type Description bool true if they equal."
  },
  "api/Evergine.Mathematics.html": {
    "href": "api/Evergine.Mathematics.html",
    "title": "Namespace Evergine.Mathematics | Evergine Doc",
    "keywords": "Namespace Evergine.Mathematics Classes BoundingFrustum Represents a bounding frustum. DoubleExtensions Extension functions for double type. FloatExtensions Extension methods for flaot type. IgnoreAttribute Attribute to specify properties or fields that must not be serialized. MathHelper Math helper functions. Structs BoundingBox Represents a bounding box. BoundingOrientedBox Bounding volume using an oriented bounding box. BoundingSphere Represents a bounding sphere. Byte4 Stores a vector of 4 bytes. Matrix3x3 Represents a 3x3 matrix. Matrix4x4 Represents a 4x4 matrix. Plane Represents a plane. Point Represents a point in a 2D coordinate system. Quaternion Represents a quaternion. Ray Represents a ray. RayHit3D Contains ray hit data. RayStep Represent a Ray segment. Rectangle Stores a set of four integers that represent the location and size of a rectangle. RectangleF Stores a set of four floating-point numbers that represent the location and size of a rectangle. Spline Representes a spline. UInt2 Stores a vector of 2 uints. UInt3 Stores a vector of 3 UInts. Vector2 Represents a vector in a 2D coordinate system. Vector3 Represents a vector in a 3D coordinate system. Vector4 Represents a vector in a 4D coordinate system. Enums ContainmentType Type of containment. MathSimdType This class represent the type of SIMD instriction supported. PlaneIntersectionType Type of plane intersection."
  },
  "api/Evergine.Mathematics.IgnoreAttribute.html": {
    "href": "api/Evergine.Mathematics.IgnoreAttribute.html",
    "title": "Class IgnoreAttribute | Evergine Doc",
    "keywords": "Class IgnoreAttribute Attribute to specify properties or fields that must not be serialized. Inheritance object Attribute IgnoreAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, Inherited = false, AllowMultiple = true)] public sealed class IgnoreAttribute : Attribute Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.MathHelper.html": {
    "href": "api/Evergine.Mathematics.MathHelper.html",
    "title": "Class MathHelper | Evergine Doc",
    "keywords": "Class MathHelper Math helper functions. Inheritance object MathHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public static class MathHelper Fields E Represents the mathematical constant e. Declaration public const float E = 2.7182817 Field Value Type Description float Epsilon The epsilon. Declaration public const float Epsilon = 1.1920929E-07 Field Value Type Description float Log10E Represents the log base ten of e. Declaration public const float Log10E = 0.4342945 Field Value Type Description float Log2E Represents the log base two of e. Declaration public const float Log2E = 1.442695 Field Value Type Description float Pi Represents the value of pi. Declaration public const float Pi = 3.1415927 Field Value Type Description float PiOver2 Represents the value of pi divided by two. Declaration public const float PiOver2 = 1.5707964 Field Value Type Description float PiOver4 Represents the value of pi divided by four. Declaration public const float PiOver4 = 0.7853982 Field Value Type Description float TwoPi Represents the value of pi times two. Declaration public const float TwoPi = 6.2831855 Field Value Type Description float Properties SimdType Gets the type of SIMD instructions used. Declaration public static MathSimdType SimdType { get; } Property Value Type Description MathSimdType Methods Area(ref Vector2, ref Vector2, ref Vector2) Linearly interpolates between value1 and value2 by amount. The parameter amount is not clamped and values outside the range [0, 1] will result in a return value outside the range [value1, value2]. Returns a positive number if c is to the left of the line going from a to b. Declaration public static float Area(ref Vector2 a, ref Vector2 b, ref Vector2 c) Parameters Type Name Description Vector2 a The first vector. Vector2 b The second vector. Vector2 c The third vector. Returns Type Description float Positive number if point is left, negative if point is right, and 0 if points are collinear. Barycentric(float, float, float, float, float) Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates. Declaration public static float Barycentric(float value1, float value2, float value3, float amount1, float amount2) Parameters Type Name Description float value1 The coordinate on one axis of vertex 1 of the defining triangle. float value2 The coordinate on the same axis of vertex 2 of the defining triangle. float value3 The coordinate on the same axis of vertex 3 of the defining triangle. float amount1 The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2. float amount2 The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3. Returns Type Description float Cartesian coordinate of the specified point with respect to the axis being used. CatmullRom(float, float, float, float, float) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static float CatmullRom(float value1, float value2, float value3, float value4, float amount) Parameters Type Name Description float value1 The first position in the interpolation. float value2 The second position in the interpolation. float value3 The third position in the interpolation. float value4 The fourth position in the interpolation. float amount Weighting factor. Returns Type Description float A position that is the result of the Catmull-Rom interpolation. Clamp(float, float, float) Clamps a value between a minimum float and maximum float value. Declaration public static float Clamp(float value, float min, float max) Parameters Type Name Description float value The value. float min The minimum value. If value is less than min, min will be returned. float max The maximum value. If value is greater than max, max will be returned. Returns Type Description float The clamped value. Distance(float, float) Calculates the absolute value of the difference of two values. Declaration public static float Distance(float value1, float value2) Parameters Type Name Description float value1 Source value1. float value2 Source value2. Returns Type Description float Distance between the two values. DivideByMultiple(uint, uint) Divide value by alignment to get the minimum multiple higher than the value. Declaration public static uint DivideByMultiple(uint value, uint alignment) Parameters Type Name Description uint value The value to divide. uint alignment The alignment. Returns Type Description uint The multiply value. FloatEquals(float, float) Checks if a floating point Value is equal to another, within a certain tolerance. Declaration public static bool FloatEquals(float value1, float value2) Parameters Type Name Description float value1 The first floating point Value. float value2 The second floating point Value. Returns Type Description bool True if the values are \"equal\", false otherwise. FloatEquals(float, float, float) Checks if a floating point Value is equal to another, within a certain tolerance. Declaration public static bool FloatEquals(float value1, float value2, float delta) Parameters Type Name Description float value1 The first floating point Value. float value2 The second floating point Value. float delta The floating point tolerance. Returns Type Description bool True if the values are \"equal\", false otherwise. FloatInRange(float, float, float) Checks if a floating point Value is within a specified range of values (inclusive). Declaration public static bool FloatInRange(float value, float min, float max) Parameters Type Name Description float value The Value to check. float min The minimum Value. float max The maximum Value. Returns Type Description bool True if the Value is within the range specified, false otherwise. Hermite(float, float, float, float, float) Performs a Hermite spline interpolation. Declaration public static float Hermite(float value1, float tangent1, float value2, float tangent2, float amount) Parameters Type Name Description float value1 Source value1. float tangent1 Source tangent1. float value2 Source value2. float tangent2 Source tangent2. float amount Weighting factor. Returns Type Description float The result of the Hermite spline interpolation. InverseLerp(float, float, float) Calculates the linear parameter amount that produces the interpolant value within the range [value1, value2]. Declaration public static float InverseLerp(float value1, float value2, float value) Parameters Type Name Description float value1 Source value1. float value2 Source value2. float value Interpolant value. Returns Type Description float The linear parameter amount. Lerp(float, float, float) Lerps the specified value1. Declaration public static float Lerp(float value1, float value2, float amount) Parameters Type Name Description float value1 The value1. float value2 The value2. float amount The amount. Returns Type Description float Interpolated value. Examples When amount = 0 returns value1. When amount = 1 return value2. When amount = 0.5 returns the midpoint of value1 and value2. LerpClamped(float, float, float) Linearly interpolates between value1 and value2 by amount. The parameter amount is clamped to the range [0, 1]. Declaration public static float LerpClamped(float value1, float value2, float amount) Parameters Type Name Description float value1 Source value1. float value2 Source value2. float amount Value between 0 and 1 indicating the weight of value2. Returns Type Description float Interpolated value. Examples When amount = 0 returns value1. When amount = 1 return value2. When amount = 0.5 returns the midpoint of value1 and value2. Max(ref Vector2) Returns the greater of two Vector2 components. Declaration public static float Max(ref Vector2 value) Parameters Type Name Description Vector2 value Source value. Returns Type Description float The greater value. Max(ref Vector3) Returns the greater of three Vector3 components. Declaration public static float Max(ref Vector3 value) Parameters Type Name Description Vector3 value Source vector. Returns Type Description float The greater value. Max(int, int) Returns the greater of two int values. Declaration public static int Max(int value1, int value2) Parameters Type Name Description int value1 Source value1. int value2 Source value2. Returns Type Description int The greater value. Max(float, float) Returns the greater of two float values. Declaration public static float Max(float value1, float value2) Parameters Type Name Description float value1 Source value1. float value2 Source value2. Returns Type Description float The greater value. Min(ref Vector2) Returns the lesser of two Vector2 components. Declaration public static float Min(ref Vector2 value) Parameters Type Name Description Vector2 value Source value. Returns Type Description float The lesser value. Min(ref Vector3) Returns the lesser of three Vector3 components. Declaration public static float Min(ref Vector3 value) Parameters Type Name Description Vector3 value Source vector. Returns Type Description float The lesser value. Min(float, float) Returns the lesser of two or more values. Declaration public static float Min(float value1, float value2) Parameters Type Name Description float value1 Source value1. float value2 Source value2. Returns Type Description float The lesser value. NextPowerOfTwo(int) Return the next power of two value of the specified argument. Declaration public static int NextPowerOfTwo(int v) Parameters Type Name Description int v The value. Returns Type Description int The next power of two. NextPowerOfTwo(ulong) Return the next power of two value of the specified argument. Declaration public static ulong NextPowerOfTwo(ulong v) Parameters Type Name Description ulong v The value. Returns Type Description ulong The next power of two. SmoothDamp(float, float, ref float, float, float) Changes a float value towards a desired goal over time. Declaration public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float gameTime) Parameters Type Name Description float current The current value. float target The target value. float currentVelocity The current velocity. float smoothTime The time it will take to reach the target. float gameTime The current game time (time between last frame). Returns Type Description float The smooth value. SmoothStep(float, float, float) Interpolates between two values using a cubic equation. Declaration public static float SmoothStep(float value1, float value2, float amount) Parameters Type Name Description float value1 Source value1. float value2 Source value2. float amount Weighting value. Returns Type Description float Interpolated value. ToDegrees(double) Converts radians to degrees. Declaration public static float ToDegrees(double radians) Parameters Type Name Description double radians The angle in radians. Returns Type Description float The angle in degrees. ToDegrees(float) Converts radians to degrees. Declaration public static float ToDegrees(float radians) Parameters Type Name Description float radians The angle in radians. Returns Type Description float The angle in degrees. ToRadians(double) Converts degrees to radians. Declaration public static float ToRadians(double degrees) Parameters Type Name Description double degrees The angle in degrees.. Returns Type Description float The angle in radians. ToRadians(float) Converts degrees to radians. Declaration public static float ToRadians(float degrees) Parameters Type Name Description float degrees The angle in degrees. Returns Type Description float The angle in radians. WrapAngle(float) Reduces a given angle to a value between π and -π. Declaration public static float WrapAngle(float angle) Parameters Type Name Description float angle The angle to reduce, in radians. Returns Type Description float The new angle, in radians."
  },
  "api/Evergine.Mathematics.MathSimdType.html": {
    "href": "api/Evergine.Mathematics.MathSimdType.html",
    "title": "Enum MathSimdType | Evergine Doc",
    "keywords": "Enum MathSimdType This class represent the type of SIMD instriction supported. Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public enum MathSimdType Fields Name Description AdvSimd ARM AdvSIMD instructions. NoSimd No SIMD instructions used. Sse SSE (Streaming SIMD Extensions) is supported. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Matrix3x3.html": {
    "href": "api/Evergine.Mathematics.Matrix3x3.html",
    "title": "Struct Matrix3x3 | Evergine Doc",
    "keywords": "Struct Matrix3x3 Represents a 3x3 matrix. Implements IEquatable<Matrix3x3> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Matrix3x3 : IEquatable<Matrix3x3> Constructors Matrix3x3(float, float, float, float, float, float, float, float, float) Initializes a new instance of the Matrix3x3 struct. Declaration public Matrix3x3(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33) Parameters Type Name Description float m11 The M11. float m12 The M12. float m13 The M13. float m21 The M21. float m22 The M22. float m23 The M23. float m31 The M31. float m32 The M32. float m33 The M33. Fields M11 First row, first column. Declaration public float M11 Field Value Type Description float M12 First row, second column. Declaration public float M12 Field Value Type Description float M13 First row, third column. Declaration public float M13 Field Value Type Description float M21 Second row, first column. Declaration public float M21 Field Value Type Description float M22 Second row, second column. Declaration public float M22 Field Value Type Description float M23 Second row, third column. Declaration public float M23 Field Value Type Description float M31 Third row, first column. Declaration public float M31 Field Value Type Description float M32 Third row, second column. Declaration public float M32 Field Value Type Description float M33 Third row, third column. Declaration public float M33 Field Value Type Description float Properties Down Gets or sets down. Declaration public Vector2 Down { get; set; } Property Value Type Description Vector2 Down vector. Identity Gets the identity. Declaration public static Matrix3x3 Identity { get; } Property Value Type Description Matrix3x3 IsIdentity Gets a value indicating whether the matrix is the identity matrix. Declaration public bool IsIdentity { get; } Property Value Type Description bool Left Gets or sets the left. Declaration public Vector2 Left { get; set; } Property Value Type Description Vector2 The left. Right Gets or sets the right. Declaration public Vector2 Right { get; set; } Property Value Type Description Vector2 The right. Rotation Gets the roll angle. Declaration public float Rotation { get; } Property Value Type Description float Scale Gets the scale vector from the matrix. Declaration public Vector2 Scale { get; } Property Value Type Description Vector2 Translation Gets or sets the translation. Declaration public Vector2 Translation { get; set; } Property Value Type Description Vector2 The translation. Up Gets or sets up. Declaration public Vector2 Up { get; set; } Property Value Type Description Vector2 Up vector. Methods Add(Matrix3x3, Matrix3x3) Adds the specified matrix1. Declaration public static Matrix3x3 Add(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description Matrix3x3 The result. Add(ref Matrix3x3, ref Matrix3x3, out Matrix3x3) Adds the specified matrix1. Declaration public static void Add(ref Matrix3x3 matrix1, ref Matrix3x3 matrix2, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Matrix3x3 result The result. CreateFromQuaternion(Quaternion) Creates from quaternion. Declaration public static Matrix3x3 CreateFromQuaternion(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion. Returns Type Description Matrix3x3 The result. CreateFromQuaternion(ref Quaternion, out Matrix3x3) Creates from quaternion. Declaration public static void CreateFromQuaternion(ref Quaternion quaternion, out Matrix3x3 matrix) Parameters Type Name Description Quaternion quaternion The quaternion. Matrix3x3 matrix The matrix. CreateRotation(Vector2, float) Creates the rotation. Declaration public static Matrix3x3 CreateRotation(Vector2 translate, float angle) Parameters Type Name Description Vector2 translate The translate. float angle The angle. Returns Type Description Matrix3x3 The result. CreateRotation(float) Creates the rotation. Declaration public static Matrix3x3 CreateRotation(float angle) Parameters Type Name Description float angle The angle. Returns Type Description Matrix3x3 The result. CreateScale(Vector2) Creates the scale. Declaration public static Matrix3x3 CreateScale(Vector2 scales) Parameters Type Name Description Vector2 scales The scales. Returns Type Description Matrix3x3 The result. CreateScale(ref Vector2, out Matrix3x3) Creates the scale. Declaration public static void CreateScale(ref Vector2 scales, out Matrix3x3 result) Parameters Type Name Description Vector2 scales The scales. Matrix3x3 result The result. CreateScale(float) Creates the scale. Declaration public static Matrix3x3 CreateScale(float scale) Parameters Type Name Description float scale The scale. Returns Type Description Matrix3x3 The result. CreateScale(float, out Matrix3x3) Creates the scale. Declaration public static void CreateScale(float scale, out Matrix3x3 result) Parameters Type Name Description float scale The scale. Matrix3x3 result The result. CreateScale(float, float) Creates the scale. Declaration public static Matrix3x3 CreateScale(float xScale, float yScale) Parameters Type Name Description float xScale The x scale. float yScale The y scale. Returns Type Description Matrix3x3 The result. CreateScale(float, float, out Matrix3x3) Creates the scale. Declaration public static void CreateScale(float xScale, float yScale, out Matrix3x3 result) Parameters Type Name Description float xScale The x scale. float yScale The y scale. Matrix3x3 result The result. CreateTransform(Vector2, float, Vector2) Creates a transform matrix. Declaration public static Matrix3x3 CreateTransform(Vector2 translate, float angle, Vector2 scale) Parameters Type Name Description Vector2 translate 2D translation. float angle Rotation angle. Vector2 scale Axis scale. Returns Type Description Matrix3x3 The result. CreateTransform(Vector2, float, float) Creates a transform matrix. Declaration public static Matrix3x3 CreateTransform(Vector2 translate, float angle, float scale) Parameters Type Name Description Vector2 translate 2D translation. float angle Rotation angle. float scale Axis scale. Returns Type Description Matrix3x3 The result. CreateTranslation(Vector2) Creates the translation. Declaration public static Matrix3x3 CreateTranslation(Vector2 position) Parameters Type Name Description Vector2 position The position. Returns Type Description Matrix3x3 The result. CreateTranslation(ref Vector2, out Matrix3x3) Creates the translation. Declaration public static void CreateTranslation(ref Vector2 position, out Matrix3x3 result) Parameters Type Name Description Vector2 position The position. Matrix3x3 result The result. CreateTranslation(float, float) Creates the translation. Declaration public static Matrix3x3 CreateTranslation(float xPosition, float yPosition) Parameters Type Name Description float xPosition The x position. float yPosition The y position. Returns Type Description Matrix3x3 The result. CreateTranslation(float, float, out Matrix3x3) Creates the translation. Declaration public static void CreateTranslation(float xPosition, float yPosition, out Matrix3x3 result) Parameters Type Name Description float xPosition The x position. float yPosition The y position. Matrix3x3 result The result. Determinant() Determinants this instance. Declaration public float Determinant() Returns Type Description float The result. Equals(Matrix3x3) Equalses the specified other. Declaration public bool Equals(Matrix3x3 other) Parameters Type Name Description Matrix3x3 other The other. Returns Type Description bool The result. Equals(ref Matrix3x3) Equalses the specified other. Declaration public bool Equals(ref Matrix3x3 other) Parameters Type Name Description Matrix3x3 other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Invert(Matrix3x3) Inverts the specified matrix. Declaration public static Matrix3x3 Invert(Matrix3x3 matrix) Parameters Type Name Description Matrix3x3 matrix The matrix. Returns Type Description Matrix3x3 The result. Invert(ref Matrix3x3, out Matrix3x3) Inverts the specified matrix. Declaration public static bool Invert(ref Matrix3x3 matrix, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix The matrix. Matrix3x3 result The result. Returns Type Description bool True if everything ok. Lerp(Matrix3x3, Matrix3x3, float) Lerps the specified matrix1. Declaration public static Matrix3x3 Lerp(Matrix3x3 matrix1, Matrix3x3 matrix2, float amount) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. float amount The amount. Returns Type Description Matrix3x3 The result. Lerp(ref Matrix3x3, ref Matrix3x3, float, out Matrix3x3) Lerps the specified matrix1. Declaration public static void Lerp(ref Matrix3x3 matrix1, ref Matrix3x3 matrix2, float amount, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. float amount The amount. Matrix3x3 result The result. Multiply(Matrix3x3, Matrix3x3) Multiplies the specified matrix1. Declaration public static Matrix3x3 Multiply(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description Matrix3x3 The result. Multiply(Matrix3x3, float) Multiplies the specified matrix1. Declaration public static Matrix3x3 Multiply(Matrix3x3 matrix1, float scaleFactor) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. float scaleFactor The scale factor. Returns Type Description Matrix3x3 The result. Multiply(ref Matrix3x3, ref Matrix3x3, out Matrix3x3) Multiplies the specified matrix1. Declaration public static void Multiply(ref Matrix3x3 matrix1, ref Matrix3x3 matrix2, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Matrix3x3 result The result. Multiply(ref Matrix3x3, float, out Matrix3x3) Multiplies the specified matrix1. Declaration public static void Multiply(ref Matrix3x3 matrix, float scaleFactor, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix The matrix1. float scaleFactor The scale factor. Matrix3x3 result The result. Negate(Matrix3x3) Negates the specified matrix. Declaration public static Matrix3x3 Negate(Matrix3x3 matrix) Parameters Type Name Description Matrix3x3 matrix The matrix. Returns Type Description Matrix3x3 The result. Negate(ref Matrix3x3, out Matrix3x3) Negates the specified matrix. Declaration public static void Negate(ref Matrix3x3 matrix, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix The matrix. Matrix3x3 result The result. SetSameDiagonal(float) Set the same diagonal values in the matrix. Declaration public void SetSameDiagonal(float d) Parameters Type Name Description float d The diagonal value. Subtract(Matrix3x3, Matrix3x3) Subtracts the specified matrix1. Declaration public static Matrix3x3 Subtract(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description Matrix3x3 The result. Subtract(ref Matrix3x3, ref Matrix3x3, out Matrix3x3) Subtracts the specified matrix1. Declaration public static void Subtract(ref Matrix3x3 matrix1, ref Matrix3x3 matrix2, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Matrix3x3 result The result. ToMatrix4x4(Matrix3x3) Creates a 4x4 matrix from a 3x3 matrix. Declaration public static Matrix4x4 ToMatrix4x4(Matrix3x3 a) Parameters Type Name Description Matrix3x3 a 3x3 matrix. Returns Type Description Matrix4x4 Created 4x4 matrix. ToMatrix4x4(ref Matrix3x3, out Matrix4x4) Creates a 4x4 matrix from a 3x3 matrix. Declaration public static void ToMatrix4x4(ref Matrix3x3 a, out Matrix4x4 b) Parameters Type Name Description Matrix3x3 a 3x3 matrix. Matrix4x4 b Created 4x4 matrix. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Transpose(Matrix3x3) Transposes the specified matrix. Declaration public static Matrix3x3 Transpose(Matrix3x3 matrix) Parameters Type Name Description Matrix3x3 matrix The matrix. Returns Type Description Matrix3x3 The result. Transpose(ref Matrix3x3, out Matrix3x3) Transposes the specified matrix. Declaration public static void Transpose(ref Matrix3x3 matrix, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 matrix The matrix. Matrix3x3 result The result. Operators operator +(Matrix3x3, Matrix3x3) Implements the operator +. Declaration public static Matrix3x3 operator +(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description Matrix3x3 The result of the operator. operator /(Matrix3x3, Matrix3x3) Implements the operator /. Declaration public static Matrix3x3 operator /(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description Matrix3x3 The result of the operator. operator /(Matrix3x3, float) Implements the operator /. Declaration public static Matrix3x3 operator /(Matrix3x3 matrix, float divider) Parameters Type Name Description Matrix3x3 matrix The matrix1. float divider The divider. Returns Type Description Matrix3x3 The result of the operator. operator ==(Matrix3x3, Matrix3x3) Implements the operator ==. Declaration public static bool operator ==(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description bool The result of the operator. operator !=(Matrix3x3, Matrix3x3) Implements the operator !=. Declaration public static bool operator !=(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description bool The result of the operator. operator *(Matrix3x3, Matrix3x3) Implements the operator *. Declaration public static Matrix3x3 operator *(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description Matrix3x3 The result of the operator. operator *(Matrix3x3, float) Implements the operator *. Declaration public static Matrix3x3 operator *(Matrix3x3 matrix, float scaleFactor) Parameters Type Name Description Matrix3x3 matrix The matrix. float scaleFactor The scale factor. Returns Type Description Matrix3x3 The result of the operator. operator *(float, Matrix3x3) Implements the operator *. Declaration public static Matrix3x3 operator *(float scaleFactor, Matrix3x3 matrix) Parameters Type Name Description float scaleFactor The scale factor. Matrix3x3 matrix The matrix. Returns Type Description Matrix3x3 The result of the operator. operator -(Matrix3x3, Matrix3x3) Implements the operator -. Declaration public static Matrix3x3 operator -(Matrix3x3 matrix1, Matrix3x3 matrix2) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Matrix3x3 matrix2 The matrix2. Returns Type Description Matrix3x3 The result of the operator. operator -(Matrix3x3) Implements the operator -. Declaration public static Matrix3x3 operator -(Matrix3x3 matrix1) Parameters Type Name Description Matrix3x3 matrix1 The matrix1. Returns Type Description Matrix3x3 The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Matrix4x4.html": {
    "href": "api/Evergine.Mathematics.Matrix4x4.html",
    "title": "Struct Matrix4x4 | Evergine Doc",
    "keywords": "Struct Matrix4x4 Represents a 4x4 matrix. Implements IEquatable<Matrix4x4> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Matrix4x4 : IEquatable<Matrix4x4> Constructors Matrix4x4(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) Initializes a new instance of the Matrix4x4 struct. Declaration public Matrix4x4(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) Parameters Type Name Description float m11 The M11. float m12 The M12. float m13 The M13. float m14 The M14. float m21 The M21. float m22 The M22. float m23 The M23. float m24 The M24. float m31 The M31. float m32 The M32. float m33 The M33. float m34 The M34. float m41 The M41. float m42 The M42. float m43 The M43. float m44 The M44. Matrix4x4(float[]) Initializes a new instance of the Matrix4x4 struct. Declaration public Matrix4x4(float[] values) Parameters Type Name Description float[] values The array values. Fields Identity Identity matrix. Declaration public static readonly Matrix4x4 Identity Field Value Type Description Matrix4x4 M11 First row, first column. Declaration public float M11 Field Value Type Description float M12 First row, second column. Declaration public float M12 Field Value Type Description float M13 First row, third column. Declaration public float M13 Field Value Type Description float M14 First row, fourth column. Declaration public float M14 Field Value Type Description float M21 Second row, first column. Declaration public float M21 Field Value Type Description float M22 Second row, second column. Declaration public float M22 Field Value Type Description float M23 Second row, third column. Declaration public float M23 Field Value Type Description float M24 Second row, fourth column. Declaration public float M24 Field Value Type Description float M31 Third row, first column. Declaration public float M31 Field Value Type Description float M32 Third row, second column. Declaration public float M32 Field Value Type Description float M33 Third row, third column. Declaration public float M33 Field Value Type Description float M34 Third row, fourth column. Declaration public float M34 Field Value Type Description float M41 Fourth row, first column. Declaration public float M41 Field Value Type Description float M42 Fourth row, second column. Declaration public float M42 Field Value Type Description float M43 Fourth row, third column. Declaration public float M43 Field Value Type Description float M44 Fourth row, fourth column. Declaration public float M44 Field Value Type Description float Properties Backward Gets or sets the backward. Declaration public Vector3 Backward { get; set; } Property Value Type Description Vector3 The backward. Basis Gets or sets the basis matrix for the rotation. Declaration public Matrix4x4 Basis { get; set; } Property Value Type Description Matrix4x4 Column1 Gets or sets the first column in the matrix; that is M11, M21, M31, and M41. Declaration public Vector4 Column1 { get; set; } Property Value Type Description Vector4 Column2 Gets or sets the second column in the matrix; that is M12, M22, M32, and M42. Declaration public Vector4 Column2 { get; set; } Property Value Type Description Vector4 Column3 Gets or sets the third column in the matrix; that is M13, M23, M33, and M43. Declaration public Vector4 Column3 { get; set; } Property Value Type Description Vector4 Column4 Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44. Declaration public Vector4 Column4 { get; set; } Property Value Type Description Vector4 Down Gets or sets down. Declaration public Vector3 Down { get; set; } Property Value Type Description Vector3 Down vector. Forward Gets or sets the forward. Declaration public Vector3 Forward { get; set; } Property Value Type Description Vector3 The forward. IsIdentity Gets a value indicating whether the matrix is the identity matrix. Declaration public bool IsIdentity { get; } Property Value Type Description bool this[int] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the component to access. Property Value Type Description float The value of the matrix component, depending on the index. this[int, int] Gets or sets the component at the specified index. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description int row The row of the matrix to access. int column The column of the matrix to access. Property Value Type Description float The value of the matrix component, depending on the index. Left Gets or sets the left. Declaration public Vector3 Left { get; set; } Property Value Type Description Vector3 The left. Orientation Gets a quaternion from the Matrix. Declaration public Quaternion Orientation { get; } Property Value Type Description Quaternion Right Gets or sets the right. Declaration public Vector3 Right { get; set; } Property Value Type Description Vector3 The right. Rotation Gets the euler angles. Declaration public Vector3 Rotation { get; } Property Value Type Description Vector3 Row1 Gets or sets the first row in the matrix; that is M11, M12, M13, and M14. Declaration public Vector4 Row1 { get; set; } Property Value Type Description Vector4 Row2 Gets or sets the second row in the matrix; that is M21, M22, M23, and M24. Declaration public Vector4 Row2 { get; set; } Property Value Type Description Vector4 Row3 Gets or sets the third row in the matrix; that is M31, M32, M33, and M34. Declaration public Vector4 Row3 { get; set; } Property Value Type Description Vector4 Row4 Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44. Declaration public Vector4 Row4 { get; set; } Property Value Type Description Vector4 Scale Gets the scale vector from the matrix. Declaration public Vector3 Scale { get; } Property Value Type Description Vector3 Translation Gets or sets the translation. Declaration public Vector3 Translation { get; set; } Property Value Type Description Vector3 The translation. Up Gets or sets up. Declaration public Vector3 Up { get; set; } Property Value Type Description Vector3 Up vector. Methods Abs(Matrix4x4) Divides the specified matrix1. Declaration public static Matrix4x4 Abs(Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The matrix. Returns Type Description Matrix4x4 The absolute matrix. Abs(ref Matrix4x4, out Matrix4x4) Divides the specified matrix1. Declaration public static void Abs(ref Matrix4x4 matrix1, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. Matrix4x4 result The result. Add(Matrix4x4, Matrix4x4) Adds two matrices together. Declaration public static Matrix4x4 Add(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. Returns Type Description Matrix4x4 The resulting matrix. Add(ref Matrix4x4, ref Matrix4x4, out Matrix4x4) Adds two matrices together. Declaration public static void Add(ref Matrix4x4 matrix1, ref Matrix4x4 matrix2, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. Matrix4x4 result The resulting matrix. CreateBillboard(Vector3, Vector3, Vector3, Vector3?) Creates the billboard. Declaration public static Matrix4x4 CreateBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3? cameraForwardVector) Parameters Type Name Description Vector3 objectPosition The object position. Vector3 cameraPosition The camera position. Vector3 cameraUpVector The camera up vector. Vector3? cameraForwardVector The camera forward vector. Returns Type Description Matrix4x4 The result. CreateBillboard(ref Vector3, ref Vector3, ref Vector3, Vector3?, out Matrix4x4) Creates the billboard. Declaration public static void CreateBillboard(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, Vector3? cameraForwardVector, out Matrix4x4 result) Parameters Type Name Description Vector3 objectPosition The object position. Vector3 cameraPosition The camera position. Vector3 cameraUpVector The camera up vector. Vector3? cameraForwardVector The camera forward vector. Matrix4x4 result The result. CreateConstrainedBillboard(Vector3, Vector3, Vector3, Vector3?, Vector3?) Creates the constrained billboard. Declaration public static Matrix4x4 CreateConstrainedBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3? cameraForwardVector, Vector3? objectForwardVector) Parameters Type Name Description Vector3 objectPosition The object position. Vector3 cameraPosition The camera position. Vector3 rotateAxis The rotate axis. Vector3? cameraForwardVector The camera forward vector. Vector3? objectForwardVector The object forward vector. Returns Type Description Matrix4x4 The result. CreateConstrainedBillboard(ref Vector3, ref Vector3, ref Vector3, Vector3?, Vector3?, out Matrix4x4) Creates the constrained billboard. Declaration public static void CreateConstrainedBillboard(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 rotateAxis, Vector3? cameraForwardVector, Vector3? objectForwardVector, out Matrix4x4 result) Parameters Type Name Description Vector3 objectPosition The object position. Vector3 cameraPosition The camera position. Vector3 rotateAxis The rotate axis. Vector3? cameraForwardVector The camera forward vector. Vector3? objectForwardVector The object forward vector. Matrix4x4 result The result. CreateFromAxisAngle(Vector3, float) Creates a matrix that rotates around an arbitrary vector. Declaration public static Matrix4x4 CreateFromAxisAngle(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis to rotate around. float angle The angle to rotate around axis, in radians. Returns Type Description Matrix4x4 The rotation matrix. CreateFromAxisAngle(ref Vector3, float, out Matrix4x4) Creates a matrix that rotates around an arbitrary vector. Declaration public static void CreateFromAxisAngle(ref Vector3 axis, float angle, out Matrix4x4 result) Parameters Type Name Description Vector3 axis The axis to rotate around. float angle The angle to rotate around axis, in radians. Matrix4x4 result The rotation matrix. CreateFromQuaternion(Quaternion) Creates from quaternion. Declaration public static Matrix4x4 CreateFromQuaternion(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion. Returns Type Description Matrix4x4 The result. CreateFromQuaternion(ref Quaternion, out Matrix4x4) Creates from quaternion. Declaration public static void CreateFromQuaternion(ref Quaternion quaternion, out Matrix4x4 result) Parameters Type Name Description Quaternion quaternion The quaternion. Matrix4x4 result The result. CreateFromTR(Vector3, Quaternion) Create a translation, and rotation matrix. Declaration public static Matrix4x4 CreateFromTR(Vector3 translate, Quaternion orientation) Parameters Type Name Description Vector3 translate Translate vector. Quaternion orientation Orientation quaternion. Returns Type Description Matrix4x4 The TRS matrix. CreateFromTR(ref Vector3, ref Quaternion, out Matrix4x4) Create a translation, rotation matrix. Declaration public static void CreateFromTR(ref Vector3 translate, ref Quaternion orientation, out Matrix4x4 matrix) Parameters Type Name Description Vector3 translate Translate vector. Quaternion orientation Orientation quaternion. Matrix4x4 matrix The TRS Matrix. CreateFromTRS(Vector3, Quaternion, Vector3) Create a translation, rotation and scaling matrix. Declaration public static Matrix4x4 CreateFromTRS(Vector3 translate, Quaternion orientation, Vector3 scale) Parameters Type Name Description Vector3 translate Translate vector. Quaternion orientation Orientation quaternion. Vector3 scale Scale vector. Returns Type Description Matrix4x4 The TRS matrix. CreateFromTRS(Vector3, Vector3, Vector3) Create a translation, rotation and scaling matrix. Declaration public static Matrix4x4 CreateFromTRS(Vector3 translate, Vector3 rotation, Vector3 scale) Parameters Type Name Description Vector3 translate Translate vector. Vector3 rotation The euler angles (Pitch, Yaw, Roll). Vector3 scale Scale vector. Returns Type Description Matrix4x4 The TRS matrix. CreateFromTRS(ref Vector3, ref Quaternion, ref Vector3, out Matrix4x4) Create a translation, rotation and scaling matrix. Declaration public static void CreateFromTRS(ref Vector3 translate, ref Quaternion orientation, ref Vector3 scale, out Matrix4x4 matrix) Parameters Type Name Description Vector3 translate Translate vector. Quaternion orientation Orientation quaternion. Vector3 scale Scale vector. Matrix4x4 matrix The TRS Matrix. CreateFromTRS(ref Vector3, ref Vector3, ref Vector3, out Matrix4x4) Create a translation, rotation and scaling matrix. Declaration public static void CreateFromTRS(ref Vector3 translate, ref Vector3 rotation, ref Vector3 scale, out Matrix4x4 matrix) Parameters Type Name Description Vector3 translate Translate vector. Vector3 rotation The euler angles (Pitch, Yaw, Roll). Vector3 scale Scale vector. Matrix4x4 matrix The TRS matrix. CreateFromTS(ref Vector3, ref Vector3, out Matrix4x4) Create a translation and scaling matrix. Declaration public static void CreateFromTS(ref Vector3 translate, ref Vector3 scale, out Matrix4x4 matrix) Parameters Type Name Description Vector3 translate Translate vector. Vector3 scale Scale vector. Matrix4x4 matrix The TRS Matrix. CreateFromTS(ref Vector3, float, out Matrix4x4) Create a translation and scaling matrix. Declaration public static void CreateFromTS(ref Vector3 translate, float scale, out Matrix4x4 matrix) Parameters Type Name Description Vector3 translate Translate vector. float scale Scale vector. Matrix4x4 matrix The TRS Matrix. CreateFromYawPitchRoll(float, float, float) Creates from yaw pitch roll. Declaration public static Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description float yaw The yaw. float pitch The pitch. float roll The roll. Returns Type Description Matrix4x4 The result. CreateFromYawPitchRoll(float, float, float, out Matrix4x4) Creates from yaw pitch roll. Declaration public static void CreateFromYawPitchRoll(float yaw, float pitch, float roll, out Matrix4x4 result) Parameters Type Name Description float yaw The yaw. float pitch The pitch. float roll The roll. Matrix4x4 result The result. CreateLookAt(Vector3, Vector3, Vector3) Creates a view matrix. Declaration public static Matrix4x4 CreateLookAt(Vector3 position, Vector3 target, Vector3 upVector) Parameters Type Name Description Vector3 position The init position. Vector3 target The target. Vector3 upVector The up vector. Returns Type Description Matrix4x4 The result. CreateLookAt(ref Vector3, ref Vector3, ref Vector3, out Matrix4x4) Creates a view matrix. Declaration public static void CreateLookAt(ref Vector3 position, ref Vector3 target, ref Vector3 upVector, out Matrix4x4 result) Parameters Type Name Description Vector3 position The init position. Vector3 target The look target. Vector3 upVector The up vector. Matrix4x4 result The result. CreateOrthographic(float, float, float, float, bool) Creates the orthographic. Declaration public static Matrix4x4 CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane, bool zeroToOneDepthClip = true) Parameters Type Name Description float width The width. float height The height. float zNearPlane The z near plane. float zFarPlane The z far plane. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Returns Type Description Matrix4x4 The result. CreateOrthographic(float, float, float, float, bool, out Matrix4x4) Creates the orthographic. Declaration public static void CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane, bool zeroToOneDepthClip, out Matrix4x4 result) Parameters Type Name Description float width The width. float height The height. float zNearPlane The z near plane. float zFarPlane The z far plane. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Matrix4x4 result The result. CreateOrthographicOffCenter(float, float, float, float, float, float, bool) Creates the orthographic off center. Declaration public static Matrix4x4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane, bool zeroToOneDepthClip = true) Parameters Type Name Description float left The left. float right The right. float bottom The bottom. float top The top. float zNearPlane The z near plane. float zFarPlane The z far plane. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Returns Type Description Matrix4x4 The result. CreateOrthographicOffCenter(float, float, float, float, float, float, bool, out Matrix4x4) Creates the orthographic off center. Declaration public static void CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane, bool zeroToOneDepthClip, out Matrix4x4 result) Parameters Type Name Description float left The left. float right The right. float bottom The bottom. float top The top. float zNearPlane The z near plane. float zFarPlane The z far plane. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Matrix4x4 result The result. CreatePerspective(float, float, float, float, bool) Creates the perspective. Declaration public static Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance, bool zeroToOneDepthClip = true) Parameters Type Name Description float width The width. float height The height. float nearPlaneDistance The near plane distance. float farPlaneDistance The far plane distance. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Returns Type Description Matrix4x4 The result. CreatePerspective(float, float, float, float, bool, out Matrix4x4) Creates the perspective. Declaration public static void CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance, bool zeroToOneDepthClip, out Matrix4x4 result) Parameters Type Name Description float width The width. float height The height. float nearPlaneDistance The near plane distance. float farPlaneDistance The far plane distance. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Matrix4x4 result The result. CreatePerspectiveFieldOfView(float, float, float, float, bool, bool) Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances. Declaration public static Matrix4x4 CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance, bool verticalFieldOfView = true, bool zeroToOneDepthClip = true) Parameters Type Name Description float fieldOfView The field of view. float aspectRatio The aspect ratio. float nearPlaneDistance The near plane distance. float farPlaneDistance The far plane distance. bool verticalFieldOfView Indicates if the field of view is parameter is vertical. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Returns Type Description Matrix4x4 The result. CreatePerspectiveFieldOfView(float, float, float, float, bool, bool, out Matrix4x4) Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances. Declaration public static void CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance, bool verticalFieldOfView, bool zeroToOneDepthClip, out Matrix4x4 result) Parameters Type Name Description float fieldOfView The field of view. float aspectRatio The aspect ratio. float nearPlaneDistance The near plane distance. float farPlaneDistance The far plane distance. bool verticalFieldOfView Indicates if the field of view is parameter is vertical. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Matrix4x4 result The result. CreatePerspectiveOffCenter(float, float, float, float, float, float, bool) Creates the perspective off center. Declaration public static Matrix4x4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance, bool zeroToOneDepthClip = true) Parameters Type Name Description float left The left. float right The right. float bottom The bottom. float top The top. float nearPlaneDistance The near plane distance. float farPlaneDistance The far plane distance. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Returns Type Description Matrix4x4 The result. CreatePerspectiveOffCenter(float, float, float, float, float, float, bool, out Matrix4x4) Creates the perspective off center. Declaration public static void CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance, bool zeroToOneDepthClip, out Matrix4x4 result) Parameters Type Name Description float left The left. float right The right. float bottom The bottom. float top The top. float nearPlaneDistance The near plane distance. float farPlaneDistance The far plane distance. bool zeroToOneDepthClip Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One. Matrix4x4 result The result. CreateReflection(Plane) Creates the reflection. Declaration public static Matrix4x4 CreateReflection(Plane value) Parameters Type Name Description Plane value The value. Returns Type Description Matrix4x4 The result. CreateReflection(ref Plane, out Matrix4x4) Creates the reflection. Declaration public static void CreateReflection(ref Plane value, out Matrix4x4 result) Parameters Type Name Description Plane value The value. Matrix4x4 result The result. CreateRotationX(float) Creates the rotation X. Declaration public static Matrix4x4 CreateRotationX(float radians) Parameters Type Name Description float radians The radians. Returns Type Description Matrix4x4 The result. CreateRotationX(float, out Matrix4x4) Creates the rotation X. Declaration public static void CreateRotationX(float radians, out Matrix4x4 result) Parameters Type Name Description float radians The radians. Matrix4x4 result The result. CreateRotationX(float, ref Vector3) Creates a matrix for rotating points around the X-axis, from a center point. Declaration public static Matrix4x4 CreateRotationX(float radians, ref Vector3 centerPoint) Parameters Type Name Description float radians The amount, in radians, by which to rotate around the X-axis. Vector3 centerPoint The center point. Returns Type Description Matrix4x4 The rotation matrix. CreateRotationX(float, ref Vector3, out Matrix4x4) Creates a matrix for rotating points around the X-axis, from a center point. Declaration public static void CreateRotationX(float radians, ref Vector3 centerPoint, out Matrix4x4 result) Parameters Type Name Description float radians The amount, in radians, by which to rotate around the X-axis. Vector3 centerPoint The center point. Matrix4x4 result The rotation matrix. CreateRotationY(float) Creates the rotation Y. Declaration public static Matrix4x4 CreateRotationY(float radians) Parameters Type Name Description float radians The radians. Returns Type Description Matrix4x4 The result. CreateRotationY(float, out Matrix4x4) Creates the rotation Y. Declaration public static void CreateRotationY(float radians, out Matrix4x4 result) Parameters Type Name Description float radians The radians. Matrix4x4 result The result. CreateRotationY(float, ref Vector3) Creates a matrix for rotating points around the Y-axis, from a center point. Declaration public static Matrix4x4 CreateRotationY(float radians, ref Vector3 centerPoint) Parameters Type Name Description float radians The amount, in radians, by which to rotate around the Y-axis. Vector3 centerPoint The center point. Returns Type Description Matrix4x4 The rotation matrix. CreateRotationY(float, ref Vector3, out Matrix4x4) Creates a matrix for rotating points around the Y-axis, from a center point. Declaration public static void CreateRotationY(float radians, ref Vector3 centerPoint, out Matrix4x4 result) Parameters Type Name Description float radians The amount, in radians, by which to rotate around the Y-axis. Vector3 centerPoint The center point. Matrix4x4 result The rotation matrix. CreateRotationZ(float) Creates the rotation Z. Declaration public static Matrix4x4 CreateRotationZ(float radians) Parameters Type Name Description float radians The radians. Returns Type Description Matrix4x4 The result. CreateRotationZ(float, out Matrix4x4) Creates the rotation Z. Declaration public static void CreateRotationZ(float radians, out Matrix4x4 result) Parameters Type Name Description float radians The radians. Matrix4x4 result The result. CreateRotationZ(float, ref Vector3) Creates a matrix for rotating points around the Z-axis, from a center point. Declaration public static Matrix4x4 CreateRotationZ(float radians, ref Vector3 centerPoint) Parameters Type Name Description float radians The amount, in radians, by which to rotate around the Z-axis. Vector3 centerPoint The center point. Returns Type Description Matrix4x4 The rotation matrix. CreateRotationZ(float, ref Vector3, out Matrix4x4) Creates a matrix for rotating points around the Z-axis, from a center point. Declaration public static void CreateRotationZ(float radians, ref Vector3 centerPoint, out Matrix4x4 result) Parameters Type Name Description float radians The amount, in radians, by which to rotate around the Z-axis. Vector3 centerPoint The center point. Matrix4x4 result The rotation matrix. CreateScale(Vector3) Creates the scale. Declaration public static Matrix4x4 CreateScale(Vector3 scales) Parameters Type Name Description Vector3 scales The scales. Returns Type Description Matrix4x4 The result. CreateScale(Vector3, Vector3) Creates a scaling matrix with a center point. Declaration public static Matrix4x4 CreateScale(Vector3 scales, Vector3 centerPoint) Parameters Type Name Description Vector3 scales The vector containing the amount to scale by on each axis. Vector3 centerPoint The center point. Returns Type Description Matrix4x4 The scaling matrix. CreateScale(ref Vector3, out Matrix4x4) Creates the scale. Declaration public static void CreateScale(ref Vector3 scales, out Matrix4x4 result) Parameters Type Name Description Vector3 scales The scales. Matrix4x4 result The result. CreateScale(ref Vector3, ref Vector3, out Matrix4x4) Creates a scaling matrix with a center point. Declaration public static void CreateScale(ref Vector3 scales, ref Vector3 centerPoint, out Matrix4x4 result) Parameters Type Name Description Vector3 scales The vector containing the amount to scale by on each axis. Vector3 centerPoint The center point. Matrix4x4 result The scaling matrix. CreateScale(float) Creates the scale. Declaration public static Matrix4x4 CreateScale(float scale) Parameters Type Name Description float scale The scale. Returns Type Description Matrix4x4 The result. CreateScale(float, out Matrix4x4) Creates the scale. Declaration public static void CreateScale(float scale, out Matrix4x4 result) Parameters Type Name Description float scale The scale. Matrix4x4 result The result. CreateScale(float, ref Vector3) Creates a uniform scaling matrix that scales equally on each axis with a center point. Declaration public static Matrix4x4 CreateScale(float scale, ref Vector3 centerPoint) Parameters Type Name Description float scale The uniform scaling factor. Vector3 centerPoint The center point. Returns Type Description Matrix4x4 The scaling matrix. CreateScale(float, ref Vector3, out Matrix4x4) Creates a uniform scaling matrix that scales equally on each axis with a center point. Declaration public static void CreateScale(float scale, ref Vector3 centerPoint, out Matrix4x4 result) Parameters Type Name Description float scale The uniform scaling factor. Vector3 centerPoint The center point. Matrix4x4 result The scaling matrix. CreateScale(float, float, float) Creates the scale. Declaration public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale) Parameters Type Name Description float xScale The x scale. float yScale The y scale. float zScale The z scale. Returns Type Description Matrix4x4 The result. CreateScale(float, float, float, out Matrix4x4) Creates the scale. Declaration public static void CreateScale(float xScale, float yScale, float zScale, out Matrix4x4 result) Parameters Type Name Description float xScale The x scale. float yScale The y scale. float zScale The z scale. Matrix4x4 result The result. CreateScale(float, float, float, ref Vector3) Creates a scaling matrix with a center point. Declaration public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale, ref Vector3 centerPoint) Parameters Type Name Description float xScale Value to scale by on the X-axis. float yScale Value to scale by on the Y-axis. float zScale Value to scale by on the Z-axis. Vector3 centerPoint The center point. Returns Type Description Matrix4x4 The scaling matrix. CreateScale(float, float, float, ref Vector3, out Matrix4x4) Creates a scaling matrix with a center point. Declaration public static void CreateScale(float xScale, float yScale, float zScale, ref Vector3 centerPoint, out Matrix4x4 result) Parameters Type Name Description float xScale Value to scale by on the X-axis. float yScale Value to scale by on the Y-axis. float zScale Value to scale by on the Z-axis. Vector3 centerPoint The center point. Matrix4x4 result The scaling matrix. CreateShadow(Vector3, Plane) Creates the shadow. Declaration public static Matrix4x4 CreateShadow(Vector3 lightDirection, Plane plane) Parameters Type Name Description Vector3 lightDirection The light direction. Plane plane The plane. Returns Type Description Matrix4x4 The result. CreateShadow(ref Vector3, ref Plane, out Matrix4x4) Creates the shadow. Declaration public static void CreateShadow(ref Vector3 lightDirection, ref Plane plane, out Matrix4x4 result) Parameters Type Name Description Vector3 lightDirection The light direction. Plane plane The plane. Matrix4x4 result The result. CreateTranslation(Vector3) Creates the translation. Declaration public static Matrix4x4 CreateTranslation(Vector3 position) Parameters Type Name Description Vector3 position The position. Returns Type Description Matrix4x4 The result. CreateTranslation(ref Vector3, out Matrix4x4) Creates the translation. Declaration public static void CreateTranslation(ref Vector3 position, out Matrix4x4 result) Parameters Type Name Description Vector3 position The position. Matrix4x4 result The result. CreateTranslation(float, float, float) Creates the translation. Declaration public static Matrix4x4 CreateTranslation(float xPosition, float yPosition, float zPosition) Parameters Type Name Description float xPosition The x position. float yPosition The y position. float zPosition The z position. Returns Type Description Matrix4x4 The result. CreateTranslation(float, float, float, out Matrix4x4) Creates the translation. Declaration public static void CreateTranslation(float xPosition, float yPosition, float zPosition, out Matrix4x4 result) Parameters Type Name Description float xPosition The x position. float yPosition The y position. float zPosition The z position. Matrix4x4 result The result. CreateWorld(Vector3, Vector3, Vector3) Creates the world. Declaration public static Matrix4x4 CreateWorld(Vector3 position, Vector3 forward, Vector3 up) Parameters Type Name Description Vector3 position The position. Vector3 forward The forward. Vector3 up Up vector. Returns Type Description Matrix4x4 The result. CreateWorld(ref Vector3, ref Vector3, ref Vector3, out Matrix4x4) Creates the world. Declaration public static void CreateWorld(ref Vector3 position, ref Vector3 forward, ref Vector3 up, out Matrix4x4 result) Parameters Type Name Description Vector3 position The position. Vector3 forward The forward. Vector3 up Up vector. Matrix4x4 result The result. Decompose(Matrix4x4, out Vector3, out Quaternion, out Vector3) Attempts to extract the scale, translation, and rotation components from the given scale/rotation/translation matrix. If successful, the out parameters will contained the extracted values. Declaration public static bool Decompose(Matrix4x4 matrix, out Vector3 scale, out Quaternion rotation, out Vector3 translation) Parameters Type Name Description Matrix4x4 matrix The source matrix. Vector3 scale The scaling component of the transformation matrix. Quaternion rotation The rotation component of the transformation matrix. Vector3 translation The translation component of the transformation matrix. Returns Type Description bool True if the source matrix was successfully decomposed; False otherwise. Determinant() Calculates the determinant of the matrix. Declaration public float Determinant() Returns Type Description float The determinant of the matrix. Equals(Matrix4x4) Equalses the specified other. Declaration public bool Equals(Matrix4x4 other) Parameters Type Name Description Matrix4x4 other The other. Returns Type Description bool The result. Equals(ref Matrix4x4) Equalses the specified other. Declaration public bool Equals(ref Matrix4x4 other) Parameters Type Name Description Matrix4x4 other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Invert() Inverts the specified matrix. Declaration public void Invert() Invert(Matrix4x4) Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix. Declaration public static Matrix4x4 Invert(Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The source matrix to invert. Returns Type Description Matrix4x4 If successful, contains the inverted matrix. Invert(ref Matrix4x4, out Matrix4x4) Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix. Declaration public static bool Invert(ref Matrix4x4 matrix, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix The source matrix to invert. Matrix4x4 result If successful, contains the inverted matrix. Returns Type Description bool True if the source matrix could be inverted; False otherwise. Lerp(Matrix4x4, Matrix4x4, float) Linearly interpolates between the corresponding values of two matrices. Declaration public static Matrix4x4 Lerp(Matrix4x4 matrix1, Matrix4x4 matrix2, float amount) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. float amount The relative weight of the second source matrix. Returns Type Description Matrix4x4 The interpolated matrix. Lerp(ref Matrix4x4, ref Matrix4x4, float, out Matrix4x4) Linearly interpolates between the corresponding values of two matrices. Declaration public static void Lerp(ref Matrix4x4 matrix1, ref Matrix4x4 matrix2, float amount, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. float amount The relative weight of the second source matrix. Matrix4x4 result The interpolated matrix. Multiply(Matrix4x4, Matrix4x4) Multiplies a matrix by another matrix. Declaration public static Matrix4x4 Multiply(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. Returns Type Description Matrix4x4 The result of the multiplication. Multiply(Matrix4x4, float) Multiplies the specified matrix1. Declaration public static Matrix4x4 Multiply(Matrix4x4 matrix1, float scaleFactor) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. float scaleFactor The scale factor. Returns Type Description Matrix4x4 The result. Multiply(ref Matrix4x4, ref Matrix4x4, out Matrix4x4) Multiplies a matrix by another matrix. Declaration public static void Multiply(ref Matrix4x4 matrix1, ref Matrix4x4 matrix2, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. Matrix4x4 result The result of the multiplication. Multiply(ref Matrix4x4, float, out Matrix4x4) Multiplies the specified matrix1. Declaration public static void Multiply(ref Matrix4x4 matrix1, float scaleFactor, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. float scaleFactor The scale factor. Matrix4x4 result The result. Negate(Matrix4x4) Returns a new matrix with the negated elements of the given matrix. Declaration public static Matrix4x4 Negate(Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The source matrix. Returns Type Description Matrix4x4 The negated matrix. Negate(ref Matrix4x4, out Matrix4x4) Returns a new matrix with the negated elements of the given matrix. Declaration public static void Negate(ref Matrix4x4 matrix, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix The source matrix. Matrix4x4 result The negated matrix. Subtract(Matrix4x4, Matrix4x4) Subtracts the second matrix from the first. Declaration public static Matrix4x4 Subtract(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. Returns Type Description Matrix4x4 The result of the subtraction. Subtract(ref Matrix4x4, ref Matrix4x4, out Matrix4x4) Subtracts the second matrix from the first. Declaration public static void Subtract(ref Matrix4x4 matrix1, ref Matrix4x4 matrix2, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix1 The first source matrix. Matrix4x4 matrix2 The second source matrix. Matrix4x4 result The result of the subtraction. ToEngineFlippedYMatrix(ref Matrix4x4, float[]) Convert to a Flipped Y Evergine matrix. Declaration public static void ToEngineFlippedYMatrix(ref Matrix4x4 m, float[] mat) Parameters Type Name Description Matrix4x4 m reference to a Evergine matrix. float[] mat OpenGL matrix. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Transform(Matrix4x4, Quaternion) Transforms the specified value. Declaration public static Matrix4x4 Transform(Matrix4x4 value, Quaternion rotation) Parameters Type Name Description Matrix4x4 value The value. Quaternion rotation The rotation. Returns Type Description Matrix4x4 The result. Transform(ref Matrix4x4, ref Quaternion, out Matrix4x4) Transforms the given matrix by applying the given Quaternion rotation. Declaration public static void Transform(ref Matrix4x4 value, ref Quaternion rotation, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 value The source matrix to transform. Quaternion rotation The rotation to apply. Matrix4x4 result The transformed matrix. Transpose(Matrix4x4) Transposes the rows and columns of a matrix. Declaration public static Matrix4x4 Transpose(Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The source matrix. Returns Type Description Matrix4x4 The transposed matrix. Transpose(ref Matrix4x4, out Matrix4x4) Transposes the rows and columns of a matrix. Declaration public static void Transpose(ref Matrix4x4 matrix, out Matrix4x4 result) Parameters Type Name Description Matrix4x4 matrix The source matrix. Matrix4x4 result The transposed matrix. Operators operator +(Matrix4x4, Matrix4x4) Implements the operator +. Declaration public static Matrix4x4 operator +(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. Matrix4x4 matrix2 The matrix2. Returns Type Description Matrix4x4 The result of the operator. operator ==(Matrix4x4, Matrix4x4) Implements the operator ==. Declaration public static bool operator ==(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. Matrix4x4 matrix2 The matrix2. Returns Type Description bool The result of the operator. operator !=(Matrix4x4, Matrix4x4) Implements the operator !=. Declaration public static bool operator !=(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. Matrix4x4 matrix2 The matrix2. Returns Type Description bool The result of the operator. operator *(Matrix4x4, Matrix4x4) Implements the operator *. Declaration public static Matrix4x4 operator *(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. Matrix4x4 matrix2 The matrix2. Returns Type Description Matrix4x4 The result of the operator. operator *(Matrix4x4, float) Implements the operator *. Declaration public static Matrix4x4 operator *(Matrix4x4 matrix, float scaleFactor) Parameters Type Name Description Matrix4x4 matrix The matrix. float scaleFactor The scale factor. Returns Type Description Matrix4x4 The result of the operator. operator *(float, Matrix4x4) Implements the operator *. Declaration public static Matrix4x4 operator *(float scaleFactor, Matrix4x4 matrix) Parameters Type Name Description float scaleFactor The scale factor. Matrix4x4 matrix The matrix. Returns Type Description Matrix4x4 The result of the operator. operator -(Matrix4x4, Matrix4x4) Implements the operator -. Declaration public static Matrix4x4 operator -(Matrix4x4 matrix1, Matrix4x4 matrix2) Parameters Type Name Description Matrix4x4 matrix1 The matrix1. Matrix4x4 matrix2 The matrix2. Returns Type Description Matrix4x4 The result of the operator. operator -(Matrix4x4) Returns a new matrix with the negated elements of the given matrix. Declaration public static Matrix4x4 operator -(Matrix4x4 value) Parameters Type Name Description Matrix4x4 value The source matrix. Returns Type Description Matrix4x4 The negated matrix. Implements IEquatable<T> Extension Methods DX12Helpers.ToMatrix3x4(Matrix4x4) OpenVRHelper.ToXRPose(Matrix4x4, out ViewPose) VKHelpers.ToTransformMatrix(Matrix4x4) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Plane.html": {
    "href": "api/Evergine.Mathematics.Plane.html",
    "title": "Struct Plane | Evergine Doc",
    "keywords": "Struct Plane Represents a plane. Implements IEquatable<Plane> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Plane : IEquatable<Plane> Constructors Plane(Vector3, Vector3, Vector3) Initializes a new instance of the Plane struct. Declaration public Plane(Vector3 point1, Vector3 point2, Vector3 point3) Parameters Type Name Description Vector3 point1 The point1. Vector3 point2 The point2. Vector3 point3 The point3. Plane(Vector3, float) Initializes a new instance of the Plane struct. Declaration public Plane(Vector3 normal, float d) Parameters Type Name Description Vector3 normal The plane's normal vector. float d The plane's distance from the origin along its normal vector. Plane(Vector4) Initializes a new instance of the Plane struct. Declaration public Plane(Vector4 value) Parameters Type Name Description Vector4 value A vector whose first three elements describe the normal vector. Plane(float, float, float, float) Initializes a new instance of the Plane struct. Declaration public Plane(float a, float b, float c, float d) Parameters Type Name Description float a The X component of the normal.. float b The Y component of the normal.. float c The Z component of the normal.. float d The distance of the plane along its normal from the origin. Fields D The distance of the plane along its normal from the origin. Declaration public float D Field Value Type Description float Normal The normal vector of the plane. Declaration public Vector3 Normal Field Value Type Description Vector3 Methods Dot(Plane, Vector4) Calculates the dot product of a Plane and Vector4. Declaration public static float Dot(Plane plane, Vector4 value) Parameters Type Name Description Plane plane The Plane. Vector4 value The Vector4. Returns Type Description float The dot product. Dot(Vector4) Dots the specified value. Declaration public float Dot(Vector4 value) Parameters Type Name Description Vector4 value The value. Returns Type Description float The result. Dot(ref Vector4, out float) Dots the specified value. Declaration public void Dot(ref Vector4 value, out float result) Parameters Type Name Description Vector4 value The value. float result The result. DotCoordinate(Plane, Vector3) Returns the dot product of a specified Vector3 and the normal vector of this Plane plus the distance (D) value of the Plane. Declaration public static float DotCoordinate(Plane plane, Vector3 value) Parameters Type Name Description Plane plane The plane. Vector3 value The Vector3. Returns Type Description float The resulting value. DotCoordinate(Vector3) Dots the coordinate. Declaration public float DotCoordinate(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description float The result. DotCoordinate(ref Vector3, out float) Dots the coordinate. Declaration public void DotCoordinate(ref Vector3 value, out float result) Parameters Type Name Description Vector3 value The value. float result The result. DotNormal(Plane, Vector3) Returns the dot product of a specified Vector3 and the Normal vector of this Plane. Declaration public static float DotNormal(Plane plane, Vector3 value) Parameters Type Name Description Plane plane The plane. Vector3 value The Vector3. Returns Type Description float The resulting dot product. DotNormal(Vector3) Dots the normal. Declaration public float DotNormal(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description float The result. DotNormal(ref Vector3, out float) Dots the normal. Declaration public void DotNormal(ref Vector3 value, out float result) Parameters Type Name Description Vector3 value The value. float result The result. Equals(Plane) Equalses the specified other. Declaration public bool Equals(Plane other) Parameters Type Name Description Plane other The other. Returns Type Description bool The result. Equals(ref Plane) Equalses the specified other. Declaration public bool Equals(ref Plane other) Parameters Type Name Description Plane other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Intersects(BoundingBox) Intersectses the specified box. Declaration public PlaneIntersectionType Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description PlaneIntersectionType The result. Intersects(ref BoundingBox, out PlaneIntersectionType) Intersectses the specified box. Declaration public void Intersects(ref BoundingBox box, out PlaneIntersectionType result) Parameters Type Name Description BoundingBox box The box. PlaneIntersectionType result The result. Intersects(BoundingFrustum) Intersectses the specified frustum. Declaration public PlaneIntersectionType Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description PlaneIntersectionType The result. Intersects(BoundingSphere) Intersectses the specified sphere. Declaration public PlaneIntersectionType Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description PlaneIntersectionType The result. Intersects(ref BoundingSphere, out PlaneIntersectionType) Intersectses the specified sphere. Declaration public void Intersects(ref BoundingSphere sphere, out PlaneIntersectionType result) Parameters Type Name Description BoundingSphere sphere The sphere. PlaneIntersectionType result The result. Intersects(Plane) Computes the intersection line between two planes. Declaration public Ray Intersects(Plane p2) Parameters Type Name Description Plane p2 The p2. Returns Type Description Ray The result. Intersects(ref Plane, out Ray) Computes the intersection line between two planes. Declaration public void Intersects(ref Plane p2, out Ray ray) Parameters Type Name Description Plane p2 The p2. Ray ray The intersection line. Normalize() Normalizes this instance. Declaration public void Normalize() Normalize(Plane) Normalizes the specified value. Declaration public static Plane Normalize(Plane value) Parameters Type Name Description Plane value The value. Returns Type Description Plane The result. Normalize(ref Plane, out Plane) Normalizes the specified value. Declaration public static void Normalize(ref Plane value, out Plane result) Parameters Type Name Description Plane value The value. Plane result The result. PointDistance(Vector3) Gets the distance between a Plane and a point. Declaration public float PointDistance(Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description float The distance between the plane and the point. PointDistance(ref Vector3) Gets the distance between a Plane and a point. Declaration public float PointDistance(ref Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description float The distance between the plane and the point. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Transform(Plane, Matrix4x4) Transforms the specified plane. Declaration public static Plane Transform(Plane plane, Matrix4x4 matrix) Parameters Type Name Description Plane plane The plane. Matrix4x4 matrix The matrix. Returns Type Description Plane The result. Transform(Plane, Quaternion) Transforms the specified plane. Declaration public static Plane Transform(Plane plane, Quaternion rotation) Parameters Type Name Description Plane plane The plane. Quaternion rotation The rotation. Returns Type Description Plane The result. Transform(ref Plane, ref Matrix4x4, out Plane) Transforms the specified plane. Declaration public static void Transform(ref Plane plane, ref Matrix4x4 matrix, out Plane result) Parameters Type Name Description Plane plane The plane. Matrix4x4 matrix The matrix. Plane result The result. Transform(ref Plane, ref Quaternion, out Plane) Transforms the specified plane. Declaration public static void Transform(ref Plane plane, ref Quaternion rotation, out Plane result) Parameters Type Name Description Plane plane The plane. Quaternion rotation The rotation. Plane result The result. Operators operator ==(Plane, Plane) Implements the operator ==. Declaration public static bool operator ==(Plane lhs, Plane rhs) Parameters Type Name Description Plane lhs The LHS. Plane rhs The RHS. Returns Type Description bool The result of the operator. operator !=(Plane, Plane) Implements the operator !=. Declaration public static bool operator !=(Plane lhs, Plane rhs) Parameters Type Name Description Plane lhs The LHS. Plane rhs The RHS. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.PlaneIntersectionType.html": {
    "href": "api/Evergine.Mathematics.PlaneIntersectionType.html",
    "title": "Enum PlaneIntersectionType | Evergine Doc",
    "keywords": "Enum PlaneIntersectionType Type of plane intersection. Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public enum PlaneIntersectionType Fields Name Description Back Intersects in back. Front Intersects in front. Intersecting Plane intersects. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Point.html": {
    "href": "api/Evergine.Mathematics.Point.html",
    "title": "Struct Point | Evergine Doc",
    "keywords": "Struct Point Represents a point in a 2D coordinate system. Implements IEquatable<Point> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Point : IEquatable<Point> Constructors Point(int) Initializes a new instance of the Point struct. Declaration public Point(int value) Parameters Type Name Description int value The value used for both coordinates of the point. Point(int, int) Initializes a new instance of the Point struct. Declaration public Point(int x, int y) Parameters Type Name Description int x The x coordinate of the point. int y The y coordinate of the point. Fields X The x coordinate of this Point. Declaration public int X Field Value Type Description int Y The y coordinate of this Point. Declaration public int Y Field Value Type Description int Properties One Gets a Point with components 1, 1. Declaration public static Point One { get; } Property Value Type Description Point UnitX Gets a Point with components 1, 0. Declaration public static Point UnitX { get; } Property Value Type Description Point UnitY Gets a Point with components 0, 1. Declaration public static Point UnitY { get; } Property Value Type Description Point Zero Gets a Point with components 0, 0. Declaration public static Point Zero { get; } Property Value Type Description Point Methods Equals(Point) Declaration public bool Equals(Point other) Parameters Type Name Description Point other Returns Type Description bool Equals(ref Point) Indicates whether this instance and a specified Point are equal. Declaration public bool Equals(ref Point other) Parameters Type Name Description Point other The point to compare with the current instance. Returns Type Description bool true if other and this instance are the same type and represent the same value; otherwise, false. Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() ToVector2() Gets a Vector2 representation for this object. Declaration public Vector2 ToVector2() Returns Type Description Vector2 A Vector2 representation for this object. Operators operator +(Point, Point) Adds two points. Declaration public static Point operator +(Point value1, Point value2) Parameters Type Name Description Point value1 Source Point on the left of the add sign. Point value2 Source Point on the right of the add sign. Returns Type Description Point Sum of the points. operator ==(Point, Point) Compares whether two Point instances are equal. Declaration public static bool operator ==(Point a, Point b) Parameters Type Name Description Point a Point instance on the left of the equal sign. Point b Point instance on the right of the equal sign. Returns Type Description bool true if the instances are equal; false otherwise. operator !=(Point, Point) Compares whether two Point instances are not equal. Declaration public static bool operator !=(Point a, Point b) Parameters Type Name Description Point a Point instance on the left of the not equal sign. Point b Point instance on the right of the not equal sign. Returns Type Description bool true if the instances are not equal; false otherwise. operator *(Point, Point) Multiplies the components of two points by each other. Declaration public static Point operator *(Point value1, Point value2) Parameters Type Name Description Point value1 Source Point on the left of the mul sign. Point value2 Source Point on the right of the mul sign. Returns Type Description Point Result of the multiplication. operator *(Point, int) Multiplies the components of point by a number. Declaration public static Point operator *(Point value, int scaleFactor) Parameters Type Name Description Point value Source Point on the left of the mul sign. int scaleFactor Scalar value on the right of the mul sign. Returns Type Description Point Result of the multiplication. operator *(int, Point) Multiplies the components of point by a number. Declaration public static Point operator *(int scaleFactor, Point value) Parameters Type Name Description int scaleFactor Scalar value on the right of the mul sign. Point value Source Point on the left of the mul sign. Returns Type Description Point Result of the multiplication. operator -(Point, Point) Subtracts a Point from a Point. Declaration public static Point operator -(Point value1, Point value2) Parameters Type Name Description Point value1 Source Point on the left of the sub sign. Point value2 Source Point on the right of the sub sign. Returns Type Description Point Result of the subtraction. operator -(Point) Inverts values in the specified Point. Declaration public static Point operator -(Point value) Parameters Type Name Description Point value Source Point on the right of the sub sign. Returns Type Description Point Result of the inversion. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Quaternion.html": {
    "href": "api/Evergine.Mathematics.Quaternion.html",
    "title": "Struct Quaternion | Evergine Doc",
    "keywords": "Struct Quaternion Represents a quaternion. Implements IEquatable<Quaternion> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Quaternion : IEquatable<Quaternion> Constructors Quaternion(Vector3, float) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(Vector3 vectorPart, float scalarPart) Parameters Type Name Description Vector3 vectorPart The vector part. float scalarPart The scalar part. Quaternion(float, float, float, float) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(float x, float y, float z, float w) Parameters Type Name Description float x The x. float y The y. float z The z. float w The w. Fields W W component. Declaration public float W Field Value Type Description float X X component. Declaration public float X Field Value Type Description float Y Y component. Declaration public float Y Field Value Type Description float Z Z component. Declaration public float Z Field Value Type Description float Properties Identity Gets the identity. Declaration public static Quaternion Identity { get; } Property Value Type Description Quaternion IsIdentity Gets a value indicating whether the Quaternion is the identity Quaternion. Declaration public bool IsIdentity { get; } Property Value Type Description bool Methods Add(Quaternion, Quaternion) Adds the specified quaternion1. Declaration public static Quaternion Add(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description Quaternion The result. Add(ref Quaternion, ref Quaternion, out Quaternion) Adds the specified quaternion1. Declaration public static void Add(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Quaternion result The result. Concatenate(Quaternion, Quaternion) Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation. Declaration public static Quaternion Concatenate(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first Quaternion rotation in the series. Quaternion value2 The second Quaternion rotation in the series. Returns Type Description Quaternion A new Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation. Concatenate(ref Quaternion, ref Quaternion, out Quaternion) Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation. Declaration public static void Concatenate(ref Quaternion value1, ref Quaternion value2, out Quaternion result) Parameters Type Name Description Quaternion value1 The first Quaternion rotation in the series. Quaternion value2 The second Quaternion rotation in the series. Quaternion result The Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation. Conjugate() Conjugates this instance. Declaration public void Conjugate() Conjugate(Quaternion) Conjugates the specified value. Declaration public static Quaternion Conjugate(Quaternion value) Parameters Type Name Description Quaternion value The value. Returns Type Description Quaternion The result. Conjugate(ref Quaternion, out Quaternion) Conjugates the specified value. Declaration public static void Conjugate(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The value. Quaternion result The result. CreateFromAxisAngle(Vector3, float) Creates from axis angle. Declaration public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis. float angle The angle. Returns Type Description Quaternion The result. CreateFromAxisAngle(ref Vector3, float, out Quaternion) Creates from axis angle. Declaration public static void CreateFromAxisAngle(ref Vector3 axis, float angle, out Quaternion result) Parameters Type Name Description Vector3 axis The axis. float angle The angle. Quaternion result The result. CreateFromEuler(Vector3) Creates a quaternion from euler angles. Declaration public static Quaternion CreateFromEuler(Vector3 euler) Parameters Type Name Description Vector3 euler The euler angles. Returns Type Description Quaternion The quaternion created. CreateFromEuler(ref Vector3, out Quaternion) Creates a quaternion from euler angles. Declaration public static void CreateFromEuler(ref Vector3 euler, out Quaternion result) Parameters Type Name Description Vector3 euler The euler angles. Quaternion result The quaternion created. CreateFromLookAt(ref Vector3, ref Vector3, out Quaternion) Creates from the lookAt and up vector. Declaration public static void CreateFromLookAt(ref Vector3 lookAt, ref Vector3 up, out Quaternion result) Parameters Type Name Description Vector3 lookAt The look at vector. Vector3 up The Up vector. Quaternion result The result. CreateFromRotationMatrix(Matrix4x4) Creates from rotation matrix. Declaration public static Quaternion CreateFromRotationMatrix(Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The matrix. Returns Type Description Quaternion The result. CreateFromRotationMatrix(ref Matrix4x4, out Quaternion) Creates from rotation matrix. Declaration public static void CreateFromRotationMatrix(ref Matrix4x4 matrix, out Quaternion quaternion) Parameters Type Name Description Matrix4x4 matrix The matrix. Quaternion quaternion The quaternion result. CreateFromTwoVectors(Vector3, Vector3) Creates from the angle between two vectors. Declaration public static Quaternion CreateFromTwoVectors(Vector3 u, Vector3 v) Parameters Type Name Description Vector3 u First vector. Vector3 v Second vector. Returns Type Description Quaternion The result. CreateFromTwoVectors(ref Vector3, out Quaternion) Creates from the angle between two vectors. Declaration public static void CreateFromTwoVectors(ref Vector3 lookAt, out Quaternion result) Parameters Type Name Description Vector3 lookAt The look at vector. Quaternion result The result. CreateFromYawPitchRoll(float, float, float) Creates from yaw pitch roll. Declaration public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description float yaw The yaw. float pitch The pitch. float roll The roll. Returns Type Description Quaternion The result. CreateFromYawPitchRoll(float, float, float, out Quaternion) Creates from yaw pitch roll. Declaration public static void CreateFromYawPitchRoll(float yaw, float pitch, float roll, out Quaternion result) Parameters Type Name Description float yaw The yaw. float pitch The pitch. float roll The roll. Quaternion result The result. Divide(Quaternion, Quaternion) Divides a Quaternion by another Quaternion. Declaration public static Quaternion Divide(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The source Quaternion. Quaternion quaternion2 The divisor. Returns Type Description Quaternion The result of the division. Divide(ref Quaternion, ref Quaternion, out Quaternion) Divides a Quaternion by another Quaternion. Declaration public static void Divide(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 The source Quaternion. Quaternion quaternion2 The divisor. Quaternion result The result of the division. Dot(Quaternion, Quaternion) Dots the specified quaternion1. Declaration public static float Dot(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description float The result. Dot(ref Quaternion, ref Quaternion) Dots the specified quaternion1. Declaration public static float Dot(ref Quaternion quaternion1, ref Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description float The result. Equals(Quaternion) Equalses the specified other. Declaration public bool Equals(Quaternion other) Parameters Type Name Description Quaternion other The other. Returns Type Description bool The result. Equals(ref Quaternion) Equalses the specified other. Declaration public bool Equals(ref Quaternion other) Parameters Type Name Description Quaternion other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Inverse(Quaternion) Inverses the specified quaternion. Declaration public static Quaternion Inverse(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion. Returns Type Description Quaternion The result. Inverse(ref Quaternion, out Quaternion) Inverses the specified quaternion. Declaration public static void Inverse(ref Quaternion quaternion, out Quaternion result) Parameters Type Name Description Quaternion quaternion The quaternion. Quaternion result The result. Length() Lengthes this instance. Declaration public float Length() Returns Type Description float The result. LengthSquared() Lengthes the squared. Declaration public float LengthSquared() Returns Type Description float The result. Lerp(Quaternion, Quaternion, float) Linearly interpolates between two quaternions. Declaration public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount) Parameters Type Name Description Quaternion quaternion1 The first source Quaternion. Quaternion quaternion2 The second source Quaternion. float amount The relative weight of the second source Quaternion in the interpolation. Returns Type Description Quaternion The interpolated Quaternion. Lerp(ref Quaternion, ref Quaternion, float, out Quaternion) Linearly interpolates between two quaternions. Declaration public static void Lerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 The first source Quaternion. Quaternion quaternion2 The second source Quaternion. float amount The relative weight of the second source Quaternion in the interpolation. Quaternion result The interpolated Quaternion. Multiply(Quaternion, Quaternion) Multiplies two Quaternions together. Declaration public static Quaternion Multiply(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The Quaternion on the left side of the multiplication. Quaternion quaternion2 The Quaternion on the right side of the multiplication. Returns Type Description Quaternion The result of the multiplication. Multiply(Quaternion, float) Multiplies the specified quaternion1. Declaration public static Quaternion Multiply(Quaternion quaternion1, float scaleFactor) Parameters Type Name Description Quaternion quaternion1 The quaternion1. float scaleFactor The scale factor. Returns Type Description Quaternion The result. Multiply(ref Quaternion, ref Quaternion, out Quaternion) Multiplies two Quaternions together. Declaration public static void Multiply(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 The Quaternion on the left side of the multiplication. Quaternion quaternion2 The Quaternion on the right side of the multiplication. Quaternion result The result of the multiplication. Multiply(ref Quaternion, float, out Quaternion) Multiplies the specified quaternion1. Declaration public static void Multiply(ref Quaternion quaternion1, float scaleFactor, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 The quaternion1. float scaleFactor The scale factor. Quaternion result The result. Negate(Quaternion) Negates the specified quaternion. Declaration public static Quaternion Negate(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion. Returns Type Description Quaternion The result. Negate(ref Quaternion, out Quaternion) Negates the specified quaternion. Declaration public static void Negate(ref Quaternion quaternion, out Quaternion result) Parameters Type Name Description Quaternion quaternion The quaternion. Quaternion result The result. Normalize() Normalizes this instance. Declaration public void Normalize() Normalize(Quaternion) Normalizes the specified quaternion. Declaration public static Quaternion Normalize(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion. Returns Type Description Quaternion The result. Normalize(ref Quaternion, out Quaternion) Normalizes the specified quaternion. Declaration public static void Normalize(ref Quaternion quaternion, out Quaternion result) Parameters Type Name Description Quaternion quaternion The quaternion. Quaternion result The result. Slerp(Quaternion, Quaternion, float) Slerps the specified quaternion1. Declaration public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. float amount The amount. Returns Type Description Quaternion The result. Slerp(ref Quaternion, ref Quaternion, float, out Quaternion) Slerps the specified quaternion1. Declaration public static void Slerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. float amount The amount. Quaternion result The result. SmoothDamp(Quaternion, Quaternion, ref Quaternion, float, float) Changes a quaternion towards a desired goal over time. Declaration public static Quaternion SmoothDamp(Quaternion current, Quaternion target, ref Quaternion deriv, float smoothTime, float gameTime) Parameters Type Name Description Quaternion current Current quaternion. Quaternion target Target quaternion. Quaternion deriv Derivative quaternion. float smoothTime The smooth time. float gameTime The elapsed time. Returns Type Description Quaternion The smooth quaternion. Subtract(Quaternion, Quaternion) Subtracts the specified quaternion1. Declaration public static Quaternion Subtract(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description Quaternion The result. Subtract(ref Quaternion, ref Quaternion, out Quaternion) Subtracts the specified quaternion1. Declaration public static void Subtract(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Quaternion result The result. ToAngleAxis(ref Quaternion, out Vector3, out float) Obtains the Angle and Axis of a Quaternion. Declaration public static void ToAngleAxis(ref Quaternion orientation, out Vector3 axis, out float angle) Parameters Type Name Description Quaternion orientation The quaternion. Vector3 axis The axis of the quaternion. float angle The angle of the quaternion. ToEuler(Quaternion) Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll). Declaration public static Vector3 ToEuler(Quaternion orientation) Parameters Type Name Description Quaternion orientation The rotation. Returns Type Description Vector3 The rotationaxes. ToEuler(ref Quaternion, out Vector3) Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll). Declaration public static void ToEuler(ref Quaternion orientation, out Vector3 rotationaxes) Parameters Type Name Description Quaternion orientation The rotation. Vector3 rotationaxes The rotationaxes. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Operators operator +(Quaternion, Quaternion) Implements the operator +. Declaration public static Quaternion operator +(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description Quaternion The result of the operator. operator /(Quaternion, Quaternion) Divides a Quaternion by another Quaternion. Declaration public static Quaternion operator /(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The source Quaternion. Quaternion quaternion2 The divisor. Returns Type Description Quaternion The result of the division. operator ==(Quaternion, Quaternion) Implements the operator ==. Declaration public static bool operator ==(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description bool The result of the operator. operator !=(Quaternion, Quaternion) Implements the operator !=. Declaration public static bool operator !=(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description bool The result of the operator. operator *(Quaternion, Quaternion) Multiplies two Quaternions together. Declaration public static Quaternion operator *(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The Quaternion on the left side of the multiplication. Quaternion value2 The Quaternion on the right side of the multiplication. Returns Type Description Quaternion The result of the multiplication. operator *(Quaternion, Vector3) Implements the operator *. Declaration public static Vector3 operator *(Quaternion rotation, Vector3 point) Parameters Type Name Description Quaternion rotation The rotation quaternion. Vector3 point The point as vector3. Returns Type Description Vector3 The multiplied vector. operator *(Quaternion, float) Implements the operator *. Declaration public static Quaternion operator *(Quaternion quaternion1, float scaleFactor) Parameters Type Name Description Quaternion quaternion1 The quaternion1. float scaleFactor The scale factor. Returns Type Description Quaternion The result of the operator. operator -(Quaternion, Quaternion) Implements the operator -. Declaration public static Quaternion operator -(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The quaternion1. Quaternion quaternion2 The quaternion2. Returns Type Description Quaternion The result of the operator. operator -(Quaternion) Implements the operator -. Declaration public static Quaternion operator -(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion. Returns Type Description Quaternion The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Ray.html": {
    "href": "api/Evergine.Mathematics.Ray.html",
    "title": "Struct Ray | Evergine Doc",
    "keywords": "Struct Ray Represents a ray. Implements IEquatable<Ray> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Ray : IEquatable<Ray> Constructors Ray(Vector3, Vector3) Initializes a new instance of the Ray struct. Declaration public Ray(Vector3 position, Vector3 direction) Parameters Type Name Description Vector3 position The position. Vector3 direction The direction. Fields Direction Ray direction. Declaration public Vector3 Direction Field Value Type Description Vector3 Position Ray origin position. Declaration public Vector3 Position Field Value Type Description Vector3 Methods Equals(Ray) Equalses the specified other. Declaration public bool Equals(Ray other) Parameters Type Name Description Ray other The other. Returns Type Description bool The result. Equals(ref Ray) Equalses the specified other. Declaration public bool Equals(ref Ray other) Parameters Type Name Description Ray other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() GetPoint(float) Gets a point at distance units along the ray. Declaration public Vector3 GetPoint(float distance) Parameters Type Name Description float distance he distance. Returns Type Description Vector3 The point. GetPoint(float, out Vector3) Gets a point at distance units along the ray. Declaration public void GetPoint(float distance, out Vector3 result) Parameters Type Name Description float distance he distance. Vector3 result The point. IntersectionXPlane(float) Gets the intersection point with the X plane at the specified X value. Declaration public Vector3 IntersectionXPlane(float xValue) Parameters Type Name Description float xValue The X plane value. Returns Type Description Vector3 The intersection point with the ray. IntersectionXPlane(float, out Vector3) Gets the intersection point with the X plane at the specified X value. Declaration public void IntersectionXPlane(float xValue, out Vector3 point) Parameters Type Name Description float xValue The X plane value. Vector3 point The intersection point with the ray. IntersectionYPlane(float) Gets the intersection point with the Y plane at the specified Y value. Declaration public Vector3 IntersectionYPlane(float yValue) Parameters Type Name Description float yValue The Y plane value. Returns Type Description Vector3 The intersection point with the ray. IntersectionYPlane(float, out Vector3) Gets the intersection point with the Y plane at the specified Y value. Declaration public void IntersectionYPlane(float yValue, out Vector3 point) Parameters Type Name Description float yValue The Y plane value. Vector3 point The intersection point with the ray. IntersectionZPlane(float) Gets the intersection point with the Z plane at the specified Z value. Declaration public Vector3 IntersectionZPlane(float zValue) Parameters Type Name Description float zValue The Z plane value. Returns Type Description Vector3 The intersection point with the ray. IntersectionZPlane(float, out Vector3) Gets the intersection point with the Z plane at the specified Z value. Declaration public void IntersectionZPlane(float zValue, out Vector3 point) Parameters Type Name Description float zValue The Z plane value. Vector3 point The intersection point with the ray. Intersects(BoundingBox) Intersectses the specified box. Declaration public float? Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description float? The result. Intersects(ref BoundingBox, out float?) Intersectses the specified box. Declaration public void Intersects(ref BoundingBox box, out float? result) Parameters Type Name Description BoundingBox box The box. float? result The result. Intersects(BoundingFrustum) Intersectses the specified frustum. Declaration public float? Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description float? The result. Intersects(BoundingSphere) Intersectses the specified sphere. Declaration public float? Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description float? The result. Intersects(ref BoundingSphere, out float?) Intersectses the specified sphere. Declaration public void Intersects(ref BoundingSphere sphere, out float? result) Parameters Type Name Description BoundingSphere sphere The sphere. float? result The result. Intersects(Plane, bool) Intersectses the specified plane. Declaration public float? Intersects(Plane plane, bool ignoreNegative = true) Parameters Type Name Description Plane plane The plane. bool ignoreNegative Ignore negative values. Returns Type Description float? The result. Intersects(ref Plane, out float?, bool) Intersectses the specified plane. Declaration public void Intersects(ref Plane plane, out float? result, bool ignoreNegative = true) Parameters Type Name Description Plane plane The plane. float? result The result. bool ignoreNegative Ignore negative values. Intersects(ref Ray, out float?, out float?) Calculate the closest points between two rays. Declaration public void Intersects(ref Ray ray, out float? distanceA, out float? distanceB) Parameters Type Name Description Ray ray The second ray. float? distanceA The closest point distance in first ray to the second ray. float? distanceB The closest point distance in second ray to the first ray. ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Operators operator ==(Ray, Ray) Implements the operator ==. Declaration public static bool operator ==(Ray a, Ray b) Parameters Type Name Description Ray a The a. Ray b The b. Returns Type Description bool The result of the operator. operator !=(Ray, Ray) Implements the operator !=. Declaration public static bool operator !=(Ray a, Ray b) Parameters Type Name Description Ray a The a. Ray b The b. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.RayHit3D.html": {
    "href": "api/Evergine.Mathematics.RayHit3D.html",
    "title": "Struct RayHit3D | Evergine Doc",
    "keywords": "Struct RayHit3D Contains ray hit data. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct RayHit3D Fields Location Location of the ray hit. Declaration public Vector3 Location Field Value Type Description Vector3 Normal Normal of the ray hit. Declaration public Vector3 Normal Field Value Type Description Vector3 T T parameter of the ray hit. The ray hit location is equal to the ray origin added to the ray direction multiplied by T. Declaration public float T Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.RayStep.html": {
    "href": "api/Evergine.Mathematics.RayStep.html",
    "title": "Struct RayStep | Evergine Doc",
    "keywords": "Struct RayStep Represent a Ray segment. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct RayStep Constructors RayStep(Vector3, Vector3) Initializes a new instance of the RayStep struct. Declaration public RayStep(Vector3 origin, Vector3 terminus) Parameters Type Name Description Vector3 origin The ray origin. Vector3 terminus The ray step final point. Properties Direction Gets the ray direction. Declaration public readonly Vector3 Direction { get; } Property Value Type Description Vector3 Length Gets the ray step length. Declaration public readonly float Length { get; } Property Value Type Description float Origin Gets the Ray origin. Declaration public readonly Vector3 Origin { get; } Property Value Type Description Vector3 Terminus Getsa the ray ending point. Declaration public readonly Vector3 Terminus { get; } Property Value Type Description Vector3 Methods Contains(Vector3) Indicates if the specified point belong to this ray. Declaration public bool Contains(Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description bool True if this point is part of this ray. CopyRay(Ray, float) Copy the specified ray propertyes. Declaration public void CopyRay(Ray ray, float rayLength) Parameters Type Name Description Ray ray The ray. float rayLength The length. GetDirectionByDistance(RayStep[], float) Returns a direction along an array of RaySteps by distance. Declaration public static Vector3 GetDirectionByDistance(RayStep[] steps, float distance) Parameters Type Name Description RayStep[] steps The ray steps array. float distance The distance. Returns Type Description Vector3 The diretion of the selected ray step. GetPoint(float) Gets a point in this ray using the distance. Declaration public Vector3 GetPoint(float distance) Parameters Type Name Description float distance The distance to the origin. Returns Type Description Vector3 The final point. GetPointByDistance(RayStep[], float) Returns a point along an array of RaySteps by distance. Declaration public static Vector3 GetPointByDistance(RayStep[] steps, float distance) Parameters Type Name Description RayStep[] steps The ray steps array. float distance The distance. Returns Type Description Vector3 The final point. GetStepByDistance(RayStep[], float, ref float) Returns a RayStep along an array of RaySteps by distance. Declaration public static RayStep GetStepByDistance(RayStep[] steps, float distance, ref float remainingDistance) Parameters Type Name Description RayStep[] steps The ray steps array. float distance The distance. float remainingDistance The remaining distnace. Returns Type Description RayStep The selected ray step. UpdateRayStep(ref Vector3, ref Vector3) Update current raystep with new origin and terminus points. Pass by ref to avoid unnecessary struct copy into function since values will be copied anyways locally. Declaration public void UpdateRayStep(ref Vector3 origin, ref Vector3 terminus) Parameters Type Name Description Vector3 origin beginning of raystep origin. Vector3 terminus end of raystep. Operators implicit operator Ray(RayStep) Declaration public static implicit operator Ray(RayStep r) Parameters Type Name Description RayStep r Returns Type Description Ray Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Rectangle.html": {
    "href": "api/Evergine.Mathematics.Rectangle.html",
    "title": "Struct Rectangle | Evergine Doc",
    "keywords": "Struct Rectangle Stores a set of four integers that represent the location and size of a rectangle. Implements IEquatable<Rectangle> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Rectangle : IEquatable<Rectangle> Constructors Rectangle(int, int, int, int) Initializes a new instance of the Rectangle struct with the specified location and size. Declaration public Rectangle(int x, int y, int width, int height) Parameters Type Name Description int x The x-coordinate of the upper-left corner of the rectangle. int y The y-coordinate of the upper-left corner of the rectangle. int width The width of the rectangle. int height The height of the rectangle. Fields Height Gets or sets the height of this Rectangle structure. The default is 0. Declaration public int Height Field Value Type Description int Width Gets or sets the width of this Rectangle structure. The default is 0. Declaration public int Width Field Value Type Description int X Gets or sets the x-coordinate of the upper-left corner of this Rectangle structure. The default is 0. Declaration public int X Field Value Type Description int Y Gets or sets the y-coordinate of the upper-left corner of this Rectangle structure. The default is 0. Declaration public int Y Field Value Type Description int Properties Bottom Gets the y-coordinate that is the sum of Y and Height of this Rectangle structure. Declaration public int Bottom { get; } Property Value Type Description int Center Gets the coordinates of the center of this Rectangle structure. Declaration public Point Center { get; } Property Value Type Description Point A Point that represents the center of this Rectangle structure. Empty Gets an instance of the Rectangle class with its members uninitialized. Declaration public static Rectangle Empty { get; } Property Value Type Description Rectangle Remarks The members of the new Rectangle are left uninitialized. IsEmpty Gets a value indicating whether the Width or Height property of this Rectangle has a value of zero. Declaration public bool IsEmpty { get; } Property Value Type Description bool . This property returns true if the Width or Height property of this Rectangle has a value of zero; otherwise, false. Left Gets the x-coordinate of the left edge of this Rectangle structure. Declaration public int Left { get; } Property Value Type Description int Location Gets or sets the coordinates of the upper-left corner of this Rectangle structure. Declaration public Point Location { get; set; } Property Value Type Description Point A Point that represents the upper-left corner of this Rectangle structure. Right Gets the x-coordinate that is the sum of X and Width of this Rectangle structure. Declaration public int Right { get; } Property Value Type Description int Top Gets the y-coordinate of the top edge of this Rectangle structure. Declaration public int Top { get; } Property Value Type Description int Methods Contains(Point) Determines if the specified point is contained within this Rectangle structure. Declaration public bool Contains(Point pt) Parameters Type Name Description Point pt The Point to test. Returns Type Description bool This method returns true if the point represented by the pt parameter is contained within this Rectangle structure; otherwise false. Contains(ref Point, out bool) Determines if the specified point is contained within this Rectangle structure. Declaration public void Contains(ref Point pt, out bool result) Parameters Type Name Description Point pt The Point to test. bool result if set to true the point represented by the pt parameter is contained within this Rectangle structure; otherwise false. Contains(Rectangle) Determines if the rectangular region represented by rect is entirely contained within this Rectangle structure. Declaration public bool Contains(Rectangle rect) Parameters Type Name Description Rectangle rect The Rectangle to test. Returns Type Description bool This method returns true if the rectangular region represented by rect is entirely contained within the rectangular region represented by this Rectangle; otherwise false. Contains(ref Rectangle, out bool) Determines if the rectangular region represented by rect is entirely contained within this Rectangle structure. Declaration public void Contains(ref Rectangle rect, out bool result) Parameters Type Name Description Rectangle rect The Rectangle to test. bool result if set to true the rectangular region represented by rect is entirely contained within this Rectangle structure. Contains(int, int) Determines if the specified point is contained within this Rectangle structure. Declaration public bool Contains(int x, int y) Parameters Type Name Description int x The x-coordinate of the point to test. int y The y-coordinate of the point to test. Returns Type Description bool This method returns true if the point defined by x and y is contained within this Rectangle structure; otherwise false. Equals(Rectangle) Tests whether other has the same location and size of this Rectangle. Declaration public bool Equals(Rectangle other) Parameters Type Name Description Rectangle other The Rectangle to test. Returns Type Description bool This method returns true if other has its X, Y, Width, and Height properties equal to the corresponding properties of this Rectangle; otherwise, false. Equals(ref Rectangle) Equalses the specified other. Declaration public bool Equals(ref Rectangle other) Parameters Type Name Description Rectangle other The other. Returns Type Description bool The result. Equals(object) Tests whether obj is a Rectangle with the same location and size of this Rectangle. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to test. Returns Type Description bool This method returns true if obj is a Rectangle and its X, Y, Width, and Height properties are equal to the corresponding properties of this Rectangle; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Gets the hash code for this Rectangle structure. For information about the use of hash codes, see GetHashCode(). Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Inflate(int, int) Enlarges this Rectangle structure by the specified amount. Declaration public void Inflate(int horizontalAmount, int verticalAmount) Parameters Type Name Description int horizontalAmount The amount to inflate this Rectangle structure horizontally. int verticalAmount The amount to inflate this Rectangle structure vertically. Remarks This method enlarges this rectangle, not a copy of it. The rectangle is enlarged in both directions along an axis. For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle's geometric center. If either x or y is negative, the Rectangle is deflated in the corresponding direction. Intersect(Rectangle, Rectangle) Returns a Rectangle structure that represents the intersection of two rectangles. If there is no intersection, and empty Rectangle is returned. Declaration public static Rectangle Intersect(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a A rectangle to intersect. Rectangle b The second rectangle to intersect. Returns Type Description Rectangle A third Rectangle structure the size of which represents the overlapped area of the two specified rectangles. Intersect(ref Rectangle, ref Rectangle, out Rectangle) Calculates a Rectangle structure that represents the intersection of two rectangles. If there is no intersection, and empty Rectangle is returned. Declaration public static void Intersect(ref Rectangle a, ref Rectangle b, out Rectangle result) Parameters Type Name Description Rectangle a A rectangle to intersect. Rectangle b The second rectangle to intersect. Rectangle result A rectangle that represents the intersection of two rectangles. Intersects(Rectangle) Determines if this rectangle intersects with rect. Declaration public bool Intersects(Rectangle rect) Parameters Type Name Description Rectangle rect The rectangle to test. Returns Type Description bool This method returns true if there is any intersection. Intersects(ref Rectangle, out bool) Determines if this rectangle intersects with rect. Declaration public void Intersects(ref Rectangle rect, out bool result) Parameters Type Name Description Rectangle rect The rectangle to test. bool result if set to true there is any intersection. Offset(Point) Adjusts the location of this rectangle by the specified amount. Declaration public void Offset(Point amount) Parameters Type Name Description Point amount The amount to offset the location. Offset(int, int) Adjusts the location of this rectangle by the specified amount. Declaration public void Offset(int offsetX, int offsetY) Parameters Type Name Description int offsetX The amount to offset the location horizontally. int offsetY The amount to offset the location vertically. Round(RectangleF) Converts the specified RectangleF to a Rectangle by rounding the RectangleF values to the nearest integer values. Declaration public static Rectangle Round(RectangleF value) Parameters Type Name Description RectangleF value The Rectangle value. Returns Type Description Rectangle The rounded interger value of the Rectangle. ToString() Converts the Location and Size of this Rectangle to a human-readable string. Declaration public override string ToString() Returns Type Description string A string that contains the position, width, and height of this Rectangle structure. For example, \"{X:20, Y:20, Width:100, Height:50}\". Overrides ValueType.ToString() ToVector4() Converts the X, Y, Width and Height of this Rectangle to a Vector4 structure. Declaration public Vector4 ToVector4() Returns Type Description Vector4 A Vector4 that contains the X, Y, Width, Height, of this Rectangle to a Vector4 structure. ToVector4(ref Vector4) Converts the X, Y, Width and Height of this Rectangle to a Vector4 structure. Declaration public void ToVector4(ref Vector4 vector) Parameters Type Name Description Vector4 vector Vector4 reference to pass Rectangle values. Truncate(RectangleF) Converts the specified RectangleF to a Rectangle by truncating the RectangleF values. Declaration public static Rectangle Truncate(RectangleF value) Parameters Type Name Description RectangleF value The RectangleF to be converted. Returns Type Description Rectangle The truncated value of the Rectangle. Union(Rectangle, Rectangle) Creates the smallest possible third rectangle that can contain both of two rectangles that form a union. Declaration public static Rectangle Union(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a A rectangle to union. Rectangle b The second rectangle to union. Returns Type Description Rectangle A third Rectangle structure that contains both of the two rectangles that form the union. Union(ref Rectangle, ref Rectangle, out Rectangle) Calculates the smallest possible third rectangle that can contain both of two rectangles that form a union. Declaration public static void Union(ref Rectangle a, ref Rectangle b, out Rectangle result) Parameters Type Name Description Rectangle a A rectangle to union. Rectangle b The second rectangle to union. Rectangle result The smallest possible third rectangle that can contain both of two rectangles that form a union. Operators operator ==(Rectangle, Rectangle) Tests whether two Rectangle structures have equal location and size. Declaration public static bool operator ==(Rectangle left, Rectangle right) Parameters Type Name Description Rectangle left The Rectangle structure that is to the left of the inequality operator. Rectangle right The Rectangle structure that is to the right of the inequality operator. Returns Type Description bool This operator returns true the two specified Rectangle structures have equal X , Y, Width, and Height properties; otherwise false. operator !=(Rectangle, Rectangle) Tests whether two Rectangle structures differ in location or size. Declaration public static bool operator !=(Rectangle left, Rectangle right) Parameters Type Name Description Rectangle left The Rectangle structure that is to the left of the inequality operator. Rectangle right The Rectangle structure that is to the right of the inequality operator. Returns Type Description bool This operator returns true if any of the X , Y, Width, or Height properties of the two Rectangle structures are unequal; otherwise false. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.RectangleF.html": {
    "href": "api/Evergine.Mathematics.RectangleF.html",
    "title": "Struct RectangleF | Evergine Doc",
    "keywords": "Struct RectangleF Stores a set of four floating-point numbers that represent the location and size of a rectangle. Implements IEquatable<RectangleF> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct RectangleF : IEquatable<RectangleF> Constructors RectangleF(float, float, float, float) Initializes a new instance of the RectangleF struct with the specified location and size. Declaration public RectangleF(float x, float y, float width, float height) Parameters Type Name Description float x The x-coordinate of the upper-left corner of the rectangle. float y The y-coordinate of the upper-left corner of the rectangle. float width The width of the rectangle. float height The height of the rectangle. Fields Height Gets or sets the height of this RectangleF structure. The default is 0. Declaration public float Height Field Value Type Description float Width Gets or sets the width of this RectangleF structure. The default is 0. Declaration public float Width Field Value Type Description float X Gets or sets the x-coordinate of the upper-left corner of this RectangleF structure. The default is 0. Declaration public float X Field Value Type Description float Y Gets or sets the y-coordinate of the upper-left corner of this RectangleF structure. The default is 0. Declaration public float Y Field Value Type Description float Properties Bottom Gets the y-coordinate that is the sum of Y and Height of this RectangleF structure. Declaration public float Bottom { get; } Property Value Type Description float Center Gets the coordinates of the center of this RectangleF structure. Declaration public Vector2 Center { get; } Property Value Type Description Vector2 A Vector2 that represents the center of this RectangleF structure. Empty Gets an instance of the RectangleF class with its members uninitialized. Declaration public static RectangleF Empty { get; } Property Value Type Description RectangleF Remarks The members of the new RectangleF are left uninitialized. IsEmpty Gets a value indicating whether the Width or Height property of this RectangleF has a value of zero. Declaration public bool IsEmpty { get; } Property Value Type Description bool . This property returns true if the Width or Height property of this RectangleF has a value of zero; otherwise, false. Left Gets the x-coordinate of the left edge of this RectangleF structure. Declaration public float Left { get; } Property Value Type Description float Location Gets or sets the coordinates of the upper-left corner of this RectangleF structure. Declaration public Vector2 Location { get; set; } Property Value Type Description Vector2 A Vector2 that represents the upper-left corner of this RectangleF structure. Right Gets the x-coordinate that is the sum of X and Width of this RectangleF structure. Declaration public float Right { get; } Property Value Type Description float Top Gets the y-coordinate of the top edge of this RectangleF structure. Declaration public float Top { get; } Property Value Type Description float Methods Contains(RectangleF) Determines if the rectangular region represented by rect is entirely contained within this RectangleF structure. Declaration public bool Contains(RectangleF rect) Parameters Type Name Description RectangleF rect The RectangleF to test. Returns Type Description bool This method returns true if the rectangular region represented by rect is entirely contained within the rectangular region represented by this RectangleF; otherwise false. Contains(ref RectangleF, out bool) Determines if the rectangular region represented by rect is entirely contained within this RectangleF structure. Declaration public void Contains(ref RectangleF rect, out bool result) Parameters Type Name Description RectangleF rect The RectangleF to test. bool result if set to true the rectangular region represented by rect is entirely contained within this RectangleF structure. Contains(Vector2) Determines if the specified point is contained within this RectangleF structure. Declaration public bool Contains(Vector2 pt) Parameters Type Name Description Vector2 pt The Vector2 to test. Returns Type Description bool This method returns true if the point represented by the pt parameter is contained within this RectangleF structure; otherwise false. Contains(ref Vector2, out bool) Determines if the specified point is contained within this RectangleF structure. Declaration public void Contains(ref Vector2 pt, out bool result) Parameters Type Name Description Vector2 pt The Vector2 to test. bool result if set to true the point represented by the pt parameter is contained within this RectangleF structure; otherwise false. Contains(float, float) Determines if the specified point is contained within this RectangleF structure. Declaration public bool Contains(float x, float y) Parameters Type Name Description float x The x-coordinate of the point to test. float y The y-coordinate of the point to test. Returns Type Description bool This method returns true if the point defined by x and y is contained within this RectangleF structure; otherwise false. Equals(RectangleF) Tests whether other has the same location and size of this RectangleF. Declaration public bool Equals(RectangleF other) Parameters Type Name Description RectangleF other The RectangleF to test. Returns Type Description bool This method returns true if other has its X, Y, Width, and Height properties equal to the corresponding properties of this RectangleF; otherwise, false. Equals(ref RectangleF) Tests whether other has the same location and size of this RectangleF. Declaration public bool Equals(ref RectangleF other) Parameters Type Name Description RectangleF other The RectangleF to test. Returns Type Description bool This method returns true if other has its X, Y, Width, and Height properties equal to the corresponding properties of this RectangleF; otherwise, false. Equals(object) Tests whether obj is a RectangleF with the same location and size of this RectangleF. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to test. Returns Type Description bool This method returns true if obj is a RectangleF and its X, Y, Width, and Height properties are equal to the corresponding properties of this RectangleF; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Gets the hash code for this RectangleF structure. For information about the use of hash codes, see GetHashCode(). Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() GetPoints() Gets the corner points of this RectangleF structure. Declaration public Vector2[] GetPoints() Returns Type Description Vector2[] A Vector2[] that represents the corner points of this RectangleF structure. Inflate(float, float) Enlarges this RectangleF structure by the specified amount. Declaration public void Inflate(float horizontalAmount, float verticalAmount) Parameters Type Name Description float horizontalAmount The amount to inflate this RectangleF structure horizontally. float verticalAmount The amount to inflate this RectangleF structure vertically. Remarks This method enlarges this rectangle, not a copy of it. The rectangle is enlarged in both directions along an axis. For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle's geometric center. If either x or y is negative, the RectangleF is deflated in the corresponding direction. Intersect(RectangleF, RectangleF) Returns a RectangleF structure that represents the intersection of two rectangles. If there is no intersection, and empty RectangleF is returned. Declaration public static RectangleF Intersect(RectangleF a, RectangleF b) Parameters Type Name Description RectangleF a A rectangle to intersect. RectangleF b A second rectangle to intersect. Returns Type Description RectangleF A third RectangleF structure the size of which represents the overlapped area of the two specified rectangles. Intersect(ref RectangleF, ref RectangleF, out RectangleF) Calculates a RectangleF structure that represents the intersection of two rectangles. If there is no intersection, and empty RectangleF is returned. Declaration public static void Intersect(ref RectangleF a, ref RectangleF b, out RectangleF result) Parameters Type Name Description RectangleF a A rectangle to intersect. RectangleF b A second rectangle to intersect. RectangleF result A rectangle that represents the intersection of two rectangles. Intersects(RectangleF) Determines if this rectangle intersects with rect. Declaration public bool Intersects(RectangleF rect) Parameters Type Name Description RectangleF rect The rectangle to test. Returns Type Description bool This method returns true if there is any intersection. Intersects(ref RectangleF, out bool) Determines if this rectangle intersects with rect. Declaration public void Intersects(ref RectangleF rect, out bool result) Parameters Type Name Description RectangleF rect The rectangle to test. bool result if set to true there is any intersection. Offset(Vector2) Adjusts the location of this rectangle by the specified amount. Declaration public void Offset(Vector2 amount) Parameters Type Name Description Vector2 amount The amount to offset the location. Offset(float, float) Adjusts the location of this rectangle by the specified amount. Declaration public void Offset(float offsetX, float offsetY) Parameters Type Name Description float offsetX The amount to offset the location horizontally. float offsetY The amount to offset the location vertically. ToString() Converts the Location and Size of this RectangleF to a human-readable string. Declaration public override string ToString() Returns Type Description string A string that contains the position, width, and height of this RectangleF structure. For example, \"{X:20, Y:20, Width:100, Height:50}\". Overrides ValueType.ToString() ToVector4() Converts the X, Y, Width and Height of this RectangleF to a Vector4 structure. Declaration public Vector4 ToVector4() Returns Type Description Vector4 A Vector4 that contains the X, Y, Width, Height, of this RectangleF to a Vector4 structure. ToVector4(ref Vector4) Converts the X, Y, Width and Height of this RectangleF to a Vector4 structure. Declaration public void ToVector4(ref Vector4 vector) Parameters Type Name Description Vector4 vector Vector4 reference to pass RectangleF values. Union(RectangleF, RectangleF) Creates the smallest possible third rectangle that can contain both of two rectangles that form a union. Declaration public static RectangleF Union(RectangleF a, RectangleF b) Parameters Type Name Description RectangleF a A rectangle to union. RectangleF b A second rectangle to union. Returns Type Description RectangleF A third RectangleF structure that contains both of the two rectangles that form the union. Union(ref RectangleF, ref RectangleF, out RectangleF) Calculates the smallest possible third rectangle that can contain both of two rectangles that form a union. Declaration public static void Union(ref RectangleF a, ref RectangleF b, out RectangleF result) Parameters Type Name Description RectangleF a A rectangle to union. RectangleF b A second rectangle to union. RectangleF result The smallest possible third rectangle that can contain both of two rectangles that form a union. Operators operator ==(RectangleF, RectangleF) Tests whether two RectangleF structures have equal location and size. Declaration public static bool operator ==(RectangleF left, RectangleF right) Parameters Type Name Description RectangleF left The RectangleF structure that is to the left of the inequality operator. RectangleF right The RectangleF structure that is to the right of the inequality operator. Returns Type Description bool This operator returns true the two specified RectangleF structures have equal X , Y, Width, and Height properties; otherwise false. implicit operator RectangleF(Rectangle) Converts the specified Rectangle structure to a RectangleF structure. Declaration public static implicit operator RectangleF(Rectangle r) Parameters Type Name Description Rectangle r The rectangle. Returns Type Description RectangleF The RectangleF structure that is converted from the specified Rectangle structure. operator !=(RectangleF, RectangleF) Tests whether two RectangleF structures differ in location or size. Declaration public static bool operator !=(RectangleF left, RectangleF right) Parameters Type Name Description RectangleF left The RectangleF structure that is to the left of the inequality operator. RectangleF right The RectangleF structure that is to the right of the inequality operator. Returns Type Description bool This operator returns true if any of the X , Y, Width, or Height properties of the two RectangleF structures are unequal; otherwise false. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Spline.html": {
    "href": "api/Evergine.Mathematics.Spline.html",
    "title": "Struct Spline | Evergine Doc",
    "keywords": "Struct Spline Representes a spline. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Spline Constructors Spline(Vector3, Vector3, Vector3, Vector3) Initializes a new instance of the Spline struct. Declaration public Spline(Vector3 a, Vector3 b, Vector3 c, Vector3 d) Parameters Type Name Description Vector3 a A point. Vector3 b B point. Vector3 c C point. Vector3 d D point. Methods CalculateCubicSpline(int, Vector3[]) Calculates the natural cubic spline of the control points. The segments are represented as: a + bu + cu^2 + d*u^3 algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/. Declaration public static Spline[] CalculateCubicSpline(int n, Vector3[] v) Parameters Type Name Description int n the number of control points. Vector3[] v the array of vectors. Returns Type Description Spline[] The spline. CalculateCubicSpline(ref int, ref Vector3[], out Spline[]) Calculates the natural cubic spline of the control points. The segments are represented as: a + bu + cu^2 + d*u^3 algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/. Declaration public static void CalculateCubicSpline(ref int n, ref Vector3[] v, out Spline[] c) Parameters Type Name Description int n the number of control points. Vector3[] v the array of vectors. Spline[] c The c. GetPointOnSpline(float) Evaluate the point using a cubic equation. Declaration public Vector3 GetPointOnSpline(float s) Parameters Type Name Description float s A distance. Returns Type Description Vector3 The point. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.UInt2.html": {
    "href": "api/Evergine.Mathematics.UInt2.html",
    "title": "Struct UInt2 | Evergine Doc",
    "keywords": "Struct UInt2 Stores a vector of 2 uints. Implements IEquatable<UInt2> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct UInt2 : IEquatable<UInt2> Constructors UInt2(uint, uint, uint) Initializes a new instance of the UInt2 struct. Declaration public UInt2(uint x, uint y, uint z) Parameters Type Name Description uint x The x. uint y The y. uint z The z. Fields X X value. Declaration public uint X Field Value Type Description uint Y Y value. Declaration public uint Y Field Value Type Description uint Methods Equals(UInt2) Equalses the specified other. Declaration public bool Equals(UInt2 other) Parameters Type Name Description UInt2 other The other. Returns Type Description bool The result. Equals(ref UInt2) Equalses the specified other. Declaration public bool Equals(ref UInt2 other) Parameters Type Name Description UInt2 other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.UInt3.html": {
    "href": "api/Evergine.Mathematics.UInt3.html",
    "title": "Struct UInt3 | Evergine Doc",
    "keywords": "Struct UInt3 Stores a vector of 3 UInts. Implements IEquatable<UInt3> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct UInt3 : IEquatable<UInt3> Constructors UInt3(uint, uint, uint) Initializes a new instance of the UInt3 struct. Declaration public UInt3(uint x, uint y, uint z) Parameters Type Name Description uint x The x. uint y The y. uint z The z. Fields X X value. Declaration public uint X Field Value Type Description uint Y Y value. Declaration public uint Y Field Value Type Description uint Z Z value. Declaration public uint Z Field Value Type Description uint Methods Equals(UInt3) Equalses the specified other. Declaration public bool Equals(UInt3 other) Parameters Type Name Description UInt3 other The other. Returns Type Description bool The result. Equals(ref UInt3) Equalses the specified other. Declaration public bool Equals(ref UInt3 other) Parameters Type Name Description UInt3 other The other. Returns Type Description bool The result. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Vector2.html": {
    "href": "api/Evergine.Mathematics.Vector2.html",
    "title": "Struct Vector2 | Evergine Doc",
    "keywords": "Struct Vector2 Represents a vector in a 2D coordinate system. Implements IEquatable<Vector2> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Vector2 : IEquatable<Vector2> Constructors Vector2(float) Initializes a new instance of the Vector2 struct. Declaration public Vector2(float value) Parameters Type Name Description float value The x and y coordinates in 2D space. Vector2(float, float) Initializes a new instance of the Vector2 struct. Declaration public Vector2(float x, float y) Parameters Type Name Description float x The x coordinate in 2D space. float y The y coordinate in 2D space. Fields X The x coordinate of this Vector2. Declaration public float X Field Value Type Description float Y The y coordinate of this Vector2. Declaration public float Y Field Value Type Description float Properties Center Gets a Vector2 with components 0.5f, 0.5f. Declaration public static Vector2 Center { get; } Property Value Type Description Vector2 Down Gets a Vector2 with components 0, 1. Declaration public static Vector2 Down { get; } Property Value Type Description Vector2 this[int] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description int index The index of the component to access. Use 0 for the X component and 1 for the Y component. Property Value Type Description float The value of the X or Y component, depending on the index. Left Gets a Vector2 with components -1, 0. Declaration public static Vector2 Left { get; } Property Value Type Description Vector2 One Gets a Vector2 with components 1, 1. Declaration public static Vector2 One { get; } Property Value Type Description Vector2 Right Gets a Vector2 with components 1, 0. Declaration public static Vector2 Right { get; } Property Value Type Description Vector2 UnitX Gets a Vector2 with components 1, 0. Declaration public static Vector2 UnitX { get; } Property Value Type Description Vector2 UnitY Gets a Vector2 with components 0, 1. Declaration public static Vector2 UnitY { get; } Property Value Type Description Vector2 Up Gets a Vector2 with components 0, -1. Declaration public static Vector2 Up { get; } Property Value Type Description Vector2 Zero Gets a Vector2 with components 0, 0. Declaration public static Vector2 Zero { get; } Property Value Type Description Vector2 Methods Abs(Vector2) Creates a new Vector2 that contains the absolute values from the a vector. Declaration public static Vector2 Abs(Vector2 value) Parameters Type Name Description Vector2 value The vector. Returns Type Description Vector2 The Vector2 with absolute values from the a vector. Abs(ref Vector2, out Vector2) Creates a new Vector2 that contains the absolute values from the a vector. Declaration public static void Abs(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value The vector. Vector2 result The Vector2 with absolute values from the a vector as an output parameter. Add(Vector2, Vector2) Performs vector addition on value1 and value2. Declaration public static Vector2 Add(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector to add. Vector2 value2 The second vector to add. Returns Type Description Vector2 The result of the vector addition. Add(ref Vector2, ref Vector2, out Vector2) Performs vector addition on value1 and value2, storing the result of the addition in result. Declaration public static void Add(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector to add. Vector2 value2 The second vector to add. Vector2 result The result of the vector addition as an ouput parameter. Angle(Vector2, Vector2) Return the angle in radians between to vectors. Declaration public static float Angle(Vector2 from, Vector2 to) Parameters Type Name Description Vector2 from From vector. Vector2 to To vector. Returns Type Description float The angle in radians between two vectors. Angle(ref Vector2, ref Vector2) Return the angle in radians between to vectors. Declaration public static float Angle(ref Vector2 from, ref Vector2 to) Parameters Type Name Description Vector2 from From vector. Vector2 to To vector. Returns Type Description float The angle in radians between two vectors. Barycentric(Vector2, Vector2, Vector2, float, float) Creates a new Vector2 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2D triangle. Declaration public static Vector2 Barycentric(Vector2 value1, Vector2 value2, Vector2 value3, float amount1, float amount2) Parameters Type Name Description Vector2 value1 The first vector of 2D triangle. Vector2 value2 The second vector of 2D triangle. Vector2 value3 The third vector of 2D triangle. float amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 2D triangle. float amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 2D triangle. Returns Type Description Vector2 The cartesian translation of barycentric coordinates. Barycentric(ref Vector2, ref Vector2, ref Vector2, float, float, out Vector2) Creates a new Vector2 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2D triangle. Declaration public static void Barycentric(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, float amount1, float amount2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector of 2D triangle. Vector2 value2 The second vector of 2D triangle. Vector2 value3 The third vector of 2D triangle. float amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 2D triangle. float amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 2D triangle. Vector2 result The cartesian translation of barycentric coordinates as an output parameter. CatmullRom(Vector2, Vector2, Vector2, Vector2, float) Creates a new Vector2 that contains CatmullRom interpolation of the specified vectors. Declaration public static Vector2 CatmullRom(Vector2 value1, Vector2 value2, Vector2 value3, Vector2 value4, float amount) Parameters Type Name Description Vector2 value1 The first vector in interpolation. Vector2 value2 The second vector in interpolation. Vector2 value3 The third vector in interpolation. Vector2 value4 The fourth vector in interpolation. float amount Weighting factor. Returns Type Description Vector2 The result of CatmullRom interpolation. CatmullRom(ref Vector2, ref Vector2, ref Vector2, ref Vector2, float, out Vector2) Creates a new Vector2 that contains CatmullRom interpolation of the specified vectors. Declaration public static void CatmullRom(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, ref Vector2 value4, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector in interpolation. Vector2 value2 The second vector in interpolation. Vector2 value3 The third vector in interpolation. Vector2 value4 The fourth vector in interpolation. float amount Weighting factor. Vector2 result The result of CatmullRom interpolation as an output parameter. Clamp(Vector2, Vector2, Vector2) Clamps the specified value within a range. Declaration public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 value1 The value to clamp. Vector2 min The min value. Vector2 max The max value. Returns Type Description Vector2 The clamped value. Clamp(ref Vector2, ref Vector2, ref Vector2, out Vector2) Clamps the specified value within a range. Declaration public static void Clamp(ref Vector2 value1, ref Vector2 min, ref Vector2 max, out Vector2 result) Parameters Type Name Description Vector2 value1 The value to clamp. Vector2 min The min value. Vector2 max The max value. Vector2 result The clamped value as an output parameter. ClampMagnitude(Vector2, float) Returns a vector with its magnitude clamped to maxLength. Declaration public static Vector2 ClampMagnitude(Vector2 vector, float maxLength) Parameters Type Name Description Vector2 vector The vector. float maxLength The max length. Returns Type Description Vector2 The clamped vector. Collinear(ref Vector2, ref Vector2, ref Vector2) Determines if three vertices are collinear (ie. on a straight line). Declaration public static bool Collinear(ref Vector2 a, ref Vector2 b, ref Vector2 c) Parameters Type Name Description Vector2 a First vertex. Vector2 b Second vertex. Vector2 c Third vertex. Returns Type Description bool true if the tree vertices are aligned; false otherwise. Collinear(ref Vector2, ref Vector2, ref Vector2, float) Determines if three vertices are collinear (ie. on a straight line). Declaration public static bool Collinear(ref Vector2 a, ref Vector2 b, ref Vector2 c, float tolerance) Parameters Type Name Description Vector2 a First vertex. Vector2 b Second vertex. Vector2 c Third vertex. float tolerance A non-negative tolerace that is used to determine the collinearity of the vertices. Returns Type Description bool true if the tree vertices are aligned; false otherwise. Distance(Vector2, Vector2) Returns the distance between two vectors. Declaration public static float Distance(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description float The distance between two vectors. Distance(ref Vector2, ref Vector2, out float) Returns the distance between two vectors. Declaration public static void Distance(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. float result The distance between two vectors as an output parameter. DistanceSquared(Vector2, Vector2) Returns the squared distance between two vectors. Declaration public static float DistanceSquared(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description float The squared distance between two vectors. DistanceSquared(ref Vector2, ref Vector2, out float) Returns the squared distance between two vectors. Declaration public static void DistanceSquared(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. float result The squared distance between two vectors as an output parameter. Divide(Vector2, Vector2) Divides the components of a Vector2 by the components of another Vector2. Declaration public static Vector2 Divide(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2. Vector2 value2 Divisor Vector2. Returns Type Description Vector2 The result of dividing the vectors. Divide(Vector2, float) Divides the components of a Vector2 by a scalar. Declaration public static Vector2 Divide(Vector2 value1, float divider) Parameters Type Name Description Vector2 value1 Source Vector2. float divider Divisor scalar. Returns Type Description Vector2 The result of dividing a vector by a scalar. Divide(ref Vector2, ref Vector2, out Vector2) Divides the components of a Vector2 by the components of another Vector2. Declaration public static void Divide(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2. Vector2 value2 Divisor Vector2. Vector2 result The result of dividing the vectors as an output parameter. Divide(ref Vector2, float, out Vector2) Divides the components of a Vector2 by a scalar. Declaration public static void Divide(ref Vector2 value1, float divider, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2. float divider Divisor scalar. Vector2 result The result of dividing a vector by a scalar as an output parameter. Dot(Vector2, Vector2) Returns the dot product of two vectors. Declaration public static float Dot(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description float The dot product of two vectors. Dot(ref Vector2, ref Vector2, out float) Returns the dot product of two vectors. Declaration public static void Dot(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. float result The dot product of two vectors as an output parameter. Equals(Vector2) Declaration public bool Equals(Vector2 other) Parameters Type Name Description Vector2 other Returns Type Description bool Equals(ref Vector2) Indicates whether this instance and a specified Vector2 are equal. Declaration public bool Equals(ref Vector2 other) Parameters Type Name Description Vector2 other The vector to compare with the current instance. Returns Type Description bool true if other and this instance are the same type and represent the same value; otherwise, false. Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Hermite(Vector2, Vector2, Vector2, Vector2, float) Creates a new Vector2 that contains hermite spline interpolation. Declaration public static Vector2 Hermite(Vector2 value1, Vector2 tangent1, Vector2 value2, Vector2 tangent2, float amount) Parameters Type Name Description Vector2 value1 The first position vector. Vector2 tangent1 The first tangent vector. Vector2 value2 The second position vector. Vector2 tangent2 The second tangent vector. float amount Weighting factor. Returns Type Description Vector2 The hermite spline interpolation vector. Hermite(ref Vector2, ref Vector2, ref Vector2, ref Vector2, float, out Vector2) Creates a new Vector2 that contains hermite spline interpolation. Declaration public static void Hermite(ref Vector2 value1, ref Vector2 tangent1, ref Vector2 value2, ref Vector2 tangent2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first position vector. Vector2 tangent1 The first tangent vector. Vector2 value2 The second position vector. Vector2 tangent2 The second tangent vector. float amount Weighting factor. Vector2 result The hermite spline interpolation vector as an output parameter. Length() Returns the length of this Vector2. Declaration public float Length() Returns Type Description float The length of this Vector2. LengthSquared() Returns the squared length of this Vector2. Declaration public float LengthSquared() Returns Type Description float The squared length of this Vector2. Lerp(Vector2, Vector2, float) Creates a new Vector2 that contains linear interpolation of the specified vectors. Declaration public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. float amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector2 The result of linear interpolation of the specified vectors. Lerp(ref Vector2, ref Vector2, float, out Vector2) Creates a new Vector2 that contains linear interpolation of the specified vectors. Declaration public static void Lerp(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. float amount Weighting value(between 0.0 and 1.0). Vector2 result The result of linear interpolation of the specified vectors as an output parameter. Max(Vector2, Vector2) Creates a new Vector2 that contains a maximal values from the two vectors. Declaration public static Vector2 Max(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description Vector2 The Vector2 with maximal values from the two vectors. Max(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains a maximal values from the two vectors. Declaration public static void Max(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Vector2 result The Vector2 with maximal values from the two vectors as an output parameter. Min(Vector2, Vector2) Creates a new Vector2 that contains a minimal values from the two vectors. Declaration public static Vector2 Min(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description Vector2 The Vector2 with minimal values from the two vectors. Min(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains a minimal values from the two vectors. Declaration public static void Min(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Vector2 result The Vector2 with minimal values from the two vectors as an output parameter. Multiply(Vector2, Vector2) Creates a new Vector2 that contains a multiplication of two vectors. Declaration public static Vector2 Multiply(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector to multiply. Vector2 value2 The second vector to multiply. Returns Type Description Vector2 The result of the vector multiplication. Multiply(Vector2, float) Creates a new Vector2 that contains a multiplication of Vector2 and a scalar. Declaration public static Vector2 Multiply(Vector2 value1, float scaleFactor) Parameters Type Name Description Vector2 value1 Source Vector2. float scaleFactor Scalar value. Returns Type Description Vector2 The result of the vector multiplication with a scalar. Multiply(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains a multiplication of two vectors. Declaration public static void Multiply(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector to multiply. Vector2 value2 The second vector to multiply. Vector2 result The result of the vector multiplication as an output parameter. Multiply(ref Vector2, float, out Vector2) Creates a new Vector2 that contains a multiplication of Vector2 and a scalar. Declaration public static void Multiply(ref Vector2 value1, float scaleFactor, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2. float scaleFactor Scalar value. Vector2 result The result of the multiplication with a scalar as an output parameter. Negate(Vector2) Creates a new Vector2 that contains the specified vector inversion. Declaration public static Vector2 Negate(Vector2 value) Parameters Type Name Description Vector2 value Source Vector2. Returns Type Description Vector2 The result of the vector inversion. Negate(ref Vector2, out Vector2) Creates a new Vector2 that contains the specified vector inversion. Declaration public static void Negate(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value Source Vector2. Vector2 result The result of the vector inversion as an output parameter. Normalize() Turns this Vector2 to a unit vector with the same direction. Declaration public float Normalize() Returns Type Description float The previous vector length. Normalize(Vector2) Creates a new Vector2 that contains a normalized values from another vector. Declaration public static Vector2 Normalize(Vector2 value) Parameters Type Name Description Vector2 value Source Vector2. Returns Type Description Vector2 Unit vector. Normalize(ref Vector2, out Vector2) Creates a new Vector2 that contains a normalized values from another vector. Declaration public static void Normalize(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value Source Vector2. Vector2 result Unit vector as an output parameter. Project(Vector2, Vector2) Projects a Vector2 onto another Vector2. Declaration public static Vector2 Project(Vector2 vector, Vector2 onVector) Parameters Type Name Description Vector2 vector The Vector2 to project. Vector2 onVector The Vector2 to project vector on. Returns Type Description Vector2 The Vector2 obtained by projecting vector onto onVector. Remarks The returned vector is parallel to onVector. The function will return a zero vector if onVector is almost zero. Project(ref Vector2, ref Vector2, out Vector2) Projects a Vector2 onto another Vector2. Declaration public static void Project(ref Vector2 vector, ref Vector2 onVector, out Vector2 result) Parameters Type Name Description Vector2 vector The Vector2 to project. Vector2 onVector The Vector2 to project vector on. Vector2 result The Vector2 obtained by projecting vector onto onVector. Remarks The result vector is parallel to onVector. The function will return a zero vector if onVector is almost zero. Reflect(Vector2, Vector2) Creates a new Vector2 that contains reflect vector of the given vector and normal. Declaration public static Vector2 Reflect(Vector2 vector, Vector2 normal) Parameters Type Name Description Vector2 vector Source Vector2. Vector2 normal Reflection normal. Returns Type Description Vector2 Reflected vector. Reflect(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains reflect vector of the given vector and normal. Declaration public static void Reflect(ref Vector2 vector, ref Vector2 normal, out Vector2 result) Parameters Type Name Description Vector2 vector Source Vector2. Vector2 normal Reflection normal. Vector2 result Reflected vector as an output parameter. Rotate(Vector2, float) Rotates a vector. Declaration public static Vector2 Rotate(Vector2 vector, float angle) Parameters Type Name Description Vector2 vector The vector to be rotated. float angle The angle to rotate. Returns Type Description Vector2 The rotated vector. Rotate(ref Vector2, float, out Vector2) Rotates a vector. Declaration public static void Rotate(ref Vector2 vector, float angle, out Vector2 result) Parameters Type Name Description Vector2 vector The vector to be rotated. float angle The angle to rotate. Vector2 result The rotated vector as an output parameter. SmoothDamp(Vector2, Vector2, ref Vector2, float, float) Changes a vector towards a desired goal over time. Declaration public static Vector2 SmoothDamp(Vector2 current, Vector2 target, ref Vector2 currentVelocity, float smoothTime, float gameTime) Parameters Type Name Description Vector2 current The current position. Vector2 target The target position we are trying to reach. Vector2 currentVelocity The current velocity, modified by the function. float smoothTime The time it will take to reach the target. float gameTime The current game time (time between last frame). Returns Type Description Vector2 The smooth vector. SmoothDamp(Vector2, Vector2, ref Vector2, float, float, float) Changes a vector towards a desired goal over time. Declaration public static Vector2 SmoothDamp(Vector2 current, Vector2 target, ref Vector2 currentVelocity, float smoothTime, float maxSpeed, float gameTime) Parameters Type Name Description Vector2 current The current position. Vector2 target The target position we are trying to reach. Vector2 currentVelocity The current velocity, modified by the function. float smoothTime The time it will take to reach the target. float maxSpeed The maximum speed. float gameTime The current game time (time between last frame). Returns Type Description Vector2 The smooth vector. SmoothStep(Vector2, Vector2, float) Creates a new Vector2 that contains cubic interpolation of the specified vectors. Declaration public static Vector2 SmoothStep(Vector2 value1, Vector2 value2, float amount) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. float amount Weighting value. Returns Type Description Vector2 Cubic interpolation of the specified vectors. SmoothStep(ref Vector2, ref Vector2, float, out Vector2) Creates a new Vector2 that contains cubic interpolation of the specified vectors. Declaration public static void SmoothStep(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. float amount Weighting value. Vector2 result Cubic interpolation of the specified vectors as an output parameter. SquareRoot(Vector2) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static Vector2 SquareRoot(Vector2 value) Parameters Type Name Description Vector2 value The source vector. Returns Type Description Vector2 The square root vector. Subtract(Vector2, Vector2) Creates a new Vector2 that contains subtraction of on Vector2 from a another. Declaration public static Vector2 Subtract(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector to substract. Vector2 value2 The second vector to substract. Returns Type Description Vector2 The result of the vector subtraction. Subtract(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains subtraction of on Vector2 from a another. Declaration public static void Subtract(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector to substract. Vector2 value2 The second vector to substract. Vector2 result The result of the vector subtraction as an ouput parameter. ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() ToVector3(float) Convert a Vector2 to Vector3. Declaration public Vector3 ToVector3(float z) Parameters Type Name Description float z The Z value. Returns Type Description Vector3 The Vector3. ToVector3(float, Vector3*) Convert a Vector2 to Vector3. Declaration public void ToVector3(float z, Vector3* result) Parameters Type Name Description float z The Z value. Vector3* result The Vector3 as an output parameter. ToVector3(float, out Vector3) Convert a Vector2 to Vector3. Declaration public void ToVector3(float z, out Vector3 result) Parameters Type Name Description float z The Z value. Vector3 result The Vector3 as an output parameter. Transform(Vector2, Matrix4x4) Transforms a vector by the given matrix. Declaration public static Vector2 Transform(Vector2 position, Matrix4x4 matrix) Parameters Type Name Description Vector2 position The source vector. Matrix4x4 matrix The transformation matrix. Returns Type Description Vector2 The transformed vector. Transform(Vector2, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector2 Transform(Vector2 value, Quaternion rotation) Parameters Type Name Description Vector2 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector2 The transformed vector. Transform(ref Vector2, ref Matrix4x4, out Vector2) Transforms a vector by the given matrix. Declaration public static void Transform(ref Vector2 position, ref Matrix4x4 matrix, out Vector2 result) Parameters Type Name Description Vector2 position The source vector. Matrix4x4 matrix The transformation matrix. Vector2 result The transformed vector. Transform(ref Vector2, ref Quaternion, out Vector2) Creates a new Vector2 that contains a transformation of 2D vector by the specified Quaternion, representing the rotation. Declaration public static void Transform(ref Vector2 value, ref Quaternion rotation, out Vector2 result) Parameters Type Name Description Vector2 value Source Vector2. Quaternion rotation The Quaternion which contains rotation transformation. Vector2 result Transformed Vector2 as an output parameter. Transform(Vector2[], ref Matrix4x4, Vector2[]) Apply transformation on all vectors within array of Vector2 by the specified Matrix4x4 and places the results in an another array. Declaration public static void Transform(Vector2[] sourceArray, ref Matrix4x4 matrix, Vector2[] destinationArray) Parameters Type Name Description Vector2[] sourceArray Source array. Matrix4x4 matrix The transformation Matrix4x4. Vector2[] destinationArray Destination array. Transform(Vector2[], int, ref Matrix4x4, Vector2[], int, int) Apply transformation on vectors within array of Vector2 by the specified Matrix4x4 and places the results in an another array. Declaration public static void Transform(Vector2[] sourceArray, int sourceIndex, ref Matrix4x4 matrix, Vector2[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector2[] sourceArray Source array. int sourceIndex The starting index of transformation in the source array. Matrix4x4 matrix The transformation Matrix4x4. Vector2[] destinationArray Destination array. int destinationIndex The starting index in the destination array, where the first Vector2 should be written. int length The number of vectors to be transformed. TransformNormal(Vector2, Matrix4x4) Transforms a vector normal by the given matrix. Declaration public static Vector2 TransformNormal(Vector2 normal, Matrix4x4 matrix) Parameters Type Name Description Vector2 normal The source vector. Matrix4x4 matrix The transformation matrix. Returns Type Description Vector2 The transformed vector. TransformNormal(ref Vector2, ref Matrix4x4, out Vector2) Transforms a vector normal by the given matrix. Declaration public static void TransformNormal(ref Vector2 normal, ref Matrix4x4 matrix, out Vector2 result) Parameters Type Name Description Vector2 normal The source vector. Matrix4x4 matrix The transformation matrix. Vector2 result The transformed vector. Operators operator +(Vector2, Vector2) Adds two vectors. Declaration public static Vector2 operator +(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the add sign. Vector2 value2 Source Vector2 on the right of the add sign. Returns Type Description Vector2 Sum of the vectors. operator /(Vector2, Vector2) Divides the components of a Vector2 by the components of another Vector2. Declaration public static Vector2 operator /(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the div sign. Vector2 value2 Divisor Vector2 on the right of the div sign. Returns Type Description Vector2 The result of dividing the vectors. operator /(Vector2, float) Divides the components of a Vector2 by a scalar. Declaration public static Vector2 operator /(Vector2 value1, float divider) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the div sign. float divider Divisor scalar on the right of the div sign. Returns Type Description Vector2 The result of dividing a vector by a scalar. operator ==(Vector2, Vector2) Compares whether two Vector2 instances are equal. Declaration public static bool operator ==(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Vector2 instance on the left of the equal sign. Vector2 value2 Vector2 instance on the right of the equal sign. Returns Type Description bool true if the instances are equal; false otherwise. operator !=(Vector2, Vector2) Compares whether two Vector2 instances are not equal. Declaration public static bool operator !=(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Vector2 instance on the left of the not equal sign. Vector2 value2 Vector2 instance on the right of the not equal sign. Returns Type Description bool true if the instances are not equal; false otherwise. operator *(Vector2, Vector2) Multiplies the components of two vectors by each other. Declaration public static Vector2 operator *(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the mul sign. Vector2 value2 Source Vector2 on the right of the mul sign. Returns Type Description Vector2 Result of the vector multiplication. operator *(Vector2, float) Multiplies the components of vector by a scalar. Declaration public static Vector2 operator *(Vector2 value, float scaleFactor) Parameters Type Name Description Vector2 value Source Vector2 on the left of the mul sign. float scaleFactor Scalar value on the right of the mul sign. Returns Type Description Vector2 Result of the vector multiplication with a scalar. operator *(float, Vector2) Multiplies the components of vector by a scalar. Declaration public static Vector2 operator *(float scaleFactor, Vector2 value) Parameters Type Name Description float scaleFactor Scalar value on the left of the mul sign. Vector2 value Source Vector2 on the right of the mul sign. Returns Type Description Vector2 Result of the vector multiplication with a scalar. operator -(Vector2, Vector2) Subtracts a Vector2 from a Vector2. Declaration public static Vector2 operator -(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the sub sign. Vector2 value2 Source Vector2 on the right of the sub sign. Returns Type Description Vector2 Result of the vector subtraction. operator -(Vector2) Inverts values in the specified Vector2. Declaration public static Vector2 operator -(Vector2 value) Parameters Type Name Description Vector2 value Source Vector2 on the right of the sub sign. Returns Type Description Vector2 Result of the inversion. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Vector3.html": {
    "href": "api/Evergine.Mathematics.Vector3.html",
    "title": "Struct Vector3 | Evergine Doc",
    "keywords": "Struct Vector3 Represents a vector in a 3D coordinate system. Implements IEquatable<Vector3> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Vector3 : IEquatable<Vector3> Constructors Vector3(Vector2, float) Initializes a new instance of the Vector3 struct. Declaration public Vector3(Vector2 value, float z) Parameters Type Name Description Vector2 value The Vector2 vector with coordinates x and y. float z The z coordinate in 3D space. Vector3(float) Initializes a new instance of the Vector3 struct. Declaration public Vector3(float value) Parameters Type Name Description float value The x, y and z coordinates in 3D space. Vector3(float, float, float) Initializes a new instance of the Vector3 struct. Declaration public Vector3(float x, float y, float z) Parameters Type Name Description float x The x coordinate in 3D space. float y The y coordinate in 3D space. float z The z coordinate in 3D space. Fields X The x coordinate of this Vector3. Declaration public float X Field Value Type Description float Y The y coordinate of this Vector3. Declaration public float Y Field Value Type Description float Z The z coordinate of this Vector3. Declaration public float Z Field Value Type Description float Properties Backward Gets a Vector3 with components 0, 0, 1. Declaration public static Vector3 Backward { get; } Property Value Type Description Vector3 Down Gets a Vector3 with components 0, -1, 0. Declaration public static Vector3 Down { get; } Property Value Type Description Vector3 Forward Gets a Vector3 with components 0, 0, -1. Declaration public static Vector3 Forward { get; } Property Value Type Description Vector3 this[int] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description int index The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component. Property Value Type Description float The value of the X, Y, or Z component, depending on the index. Left Gets a Vector3 with components -1, 0, 0. Declaration public static Vector3 Left { get; } Property Value Type Description Vector3 One Gets a Vector3 with components 1, 1, 1. Declaration public static Vector3 One { get; } Property Value Type Description Vector3 Right Gets a Vector3 with components 1, 0, 0. Declaration public static Vector3 Right { get; } Property Value Type Description Vector3 UnitX Gets a Vector3 with components 1, 0, 0. Declaration public static Vector3 UnitX { get; } Property Value Type Description Vector3 UnitY Gets a Vector3 with components 0, 1, 0. Declaration public static Vector3 UnitY { get; } Property Value Type Description Vector3 UnitZ Gets a Vector3 with components 0, 0, 1. Declaration public static Vector3 UnitZ { get; } Property Value Type Description Vector3 Up Gets a Vector3 with components 0, 1, 0. Declaration public static Vector3 Up { get; } Property Value Type Description Vector3 Zero Gets a Vector3 with components 0, 0, 0. Declaration public static Vector3 Zero { get; } Property Value Type Description Vector3 Methods Abs(Vector3) Creates a new Vector3 that contains the absolute values from the a vector. Declaration public static Vector3 Abs(Vector3 value) Parameters Type Name Description Vector3 value The vector. Returns Type Description Vector3 The Vector3 with absolute values from the a vector. Abs(ref Vector3, out Vector3) Creates a new Vector3 that contains the absolute values from the a vector. Declaration public static void Abs(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value The vector. Vector3 result The Vector3 with absolute values from the a vector as an output parameter. Add(Vector3, Vector3) Performs vector addition on value1 and value2. Declaration public static Vector3 Add(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector to add. Vector3 value2 The second vector to add. Returns Type Description Vector3 The result of the vector addition. Add(ref Vector3, ref Vector3, out Vector3) Performs vector addition on value1 and value2, storing the result of the addition in result. Declaration public static void Add(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector to add. Vector3 value2 The second vector to add. Vector3 result The result of the vector addition as an ouput parameter. Angle(Vector3, Vector3) Return the angle in radians between from and to. Declaration public static float Angle(Vector3 from, Vector3 to) Parameters Type Name Description Vector3 from The angle extends round from this vector. Vector3 to The angle extends round to this vector. Returns Type Description float The angle in radians. Angle(ref Vector3, ref Vector3) Return the angle in radians between to vectors. Declaration public static float Angle(ref Vector3 from, ref Vector3 to) Parameters Type Name Description Vector3 from The vector from which the angular difference is measured. Vector3 to The vector to which the angular difference is measured. Returns Type Description float The angle in radians between two vectors. Barycentric(Vector3, Vector3, Vector3, float, float) Creates a new Vector3 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3D triangle. Declaration public static Vector3 Barycentric(Vector3 value1, Vector3 value2, Vector3 value3, float amount1, float amount2) Parameters Type Name Description Vector3 value1 The first vector of 3D triangle. Vector3 value2 The second vector of 3D triangle. Vector3 value3 The third vector of 3D triangle. float amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 3D triangle. float amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 3D triangle. Returns Type Description Vector3 The cartesian translation of barycentric coordinates. Barycentric(ref Vector3, ref Vector3, ref Vector3, float, float, out Vector3) Creates a new Vector3 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3D triangle. Declaration public static void Barycentric(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, float amount1, float amount2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector of 3D triangle. Vector3 value2 The second vector of 3D triangle. Vector3 value3 The third vector of 3D triangle. float amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 3D triangle. float amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 3D triangle. Vector3 result The cartesian translation of barycentric coordinates as an output parameter. CatmullRom(Vector3, Vector3, Vector3, Vector3, float) Creates a new Vector3 that contains CatmullRom interpolation of the specified vectors. Declaration public static Vector3 CatmullRom(Vector3 value1, Vector3 value2, Vector3 value3, Vector3 value4, float amount) Parameters Type Name Description Vector3 value1 The first vector in interpolation. Vector3 value2 The second vector in interpolation. Vector3 value3 The third vector in interpolation. Vector3 value4 The fourth vector in interpolation. float amount Weighting factor. Returns Type Description Vector3 The result of CatmullRom interpolation. CatmullRom(ref Vector3, ref Vector3, ref Vector3, ref Vector3, float, out Vector3) Creates a new Vector3 that contains CatmullRom interpolation of the specified vectors. Declaration public static void CatmullRom(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, ref Vector3 value4, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector in interpolation. Vector3 value2 The second vector in interpolation. Vector3 value3 The third vector in interpolation. Vector3 value4 The fourth vector in interpolation. float amount Weighting factor. Vector3 result The result of CatmullRom interpolation as an output parameter. Clamp(Vector3, Vector3, Vector3) Clamps the specified value within a range. Declaration public static Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 value1 The value to clamp. Vector3 min The min value. Vector3 max The max value. Returns Type Description Vector3 The clamped value. Clamp(ref Vector3, ref Vector3, ref Vector3, out Vector3) Clamps the specified value within a range. Declaration public static void Clamp(ref Vector3 value1, ref Vector3 min, ref Vector3 max, out Vector3 result) Parameters Type Name Description Vector3 value1 The value to clamp. Vector3 min The min value. Vector3 max The max value. Vector3 result The clamped value as an output parameter. ClampMagnitude(Vector3, float) Returns a vector with its magnitude clamped to maxLength. Declaration public static Vector3 ClampMagnitude(Vector3 vector, float maxLength) Parameters Type Name Description Vector3 vector The vector. float maxLength The max length. Returns Type Description Vector3 The clamped vector. Cross(Vector3) Computes the cross product of this Vector3 instance and given vector. Declaration public Vector3 Cross(Vector3 vector) Parameters Type Name Description Vector3 vector The second vector. Returns Type Description Vector3 The cross product of two vectors. Cross(Vector3, Vector3) Computes the cross product of two vectors. Declaration public static Vector3 Cross(Vector3 vector1, Vector3 vector2) Parameters Type Name Description Vector3 vector1 The first vector. Vector3 vector2 The second vector. Returns Type Description Vector3 The cross product of two vectors. Cross(ref Vector3, out Vector3) Computes the cross product of this Vector3 instance and given vector. Declaration public void Cross(ref Vector3 vector, out Vector3 result) Parameters Type Name Description Vector3 vector The second vector. Vector3 result The cross product of two vectors as an output parameter. Cross(ref Vector3, ref Vector3, out Vector3) Computes the cross product of two vectors. Declaration public static void Cross(ref Vector3 vector1, ref Vector3 vector2, out Vector3 result) Parameters Type Name Description Vector3 vector1 The first vector. Vector3 vector2 The second vector. Vector3 result The cross product of two vectors as an output parameter. Distance(Vector3, Vector3) Returns the Euclidean distance between the two given points. Declaration public static float Distance(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first point. Vector3 value2 The second point. Returns Type Description float The distance. Distance(ref Vector3, ref Vector3, out float) Returns the Euclidean distance between the two given points. Declaration public static void Distance(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first point. Vector3 value2 The second point. float result The distance. DistanceSquared(Vector3, Vector3) Returns the Euclidean distance squared between the two given points. Declaration public static float DistanceSquared(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first point. Vector3 value2 The second point. Returns Type Description float The distance squared. DistanceSquared(ref Vector3, ref Vector3, out float) Returns the Euclidean distance squared between the two given points. Declaration public static void DistanceSquared(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first point. Vector3 value2 The second point. float result The distance squared. Divide(Vector3, Vector3) Divides the components of a Vector3 by the components of another Vector3. Declaration public static Vector3 Divide(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3. Vector3 value2 Divisor Vector3. Returns Type Description Vector3 The result of dividing the vectors. Divide(Vector3, float) Divides the components of a Vector3 by a scalar. Declaration public static Vector3 Divide(Vector3 value1, float divider) Parameters Type Name Description Vector3 value1 Source Vector3. float divider Divisor scalar. Returns Type Description Vector3 The result of dividing a vector by a scalar. Divide(ref Vector3, ref Vector3, out Vector3) Divides the components of a Vector3 by the components of another Vector3. Declaration public static void Divide(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3. Vector3 value2 Divisor Vector3. Vector3 result The result of dividing the vectors as an output parameter. Divide(ref Vector3, float, out Vector3) Divides the components of a Vector3 by a scalar. Declaration public static void Divide(ref Vector3 value1, float divider, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3. float divider Divisor scalar. Vector3 result The result of dividing a vector by a scalar as an output parameter. Dot(Vector3) Returns a dot product between this Vector3 instance and another vector. Declaration public float Dot(Vector3 value) Parameters Type Name Description Vector3 value The second vector. Returns Type Description float The dot product of two vectors. Dot(Vector3, Vector3) Returns the dot product of two vectors. Declaration public static float Dot(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description float The dot product of two vectors. Dot(ref Vector3, ref Vector3) Returns a dot product of two vectors. Declaration public static float Dot(ref Vector3 value1, ref Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description float The dot product of two vectors. Dot(ref Vector3, ref Vector3, out float) Returns a dot product of two vectors. Declaration public static void Dot(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. float result The dot product of two vectors as an output parameter. Dot(ref Vector3, out float) Returns a dot product between this Vector3 instance and another vector. Declaration public void Dot(ref Vector3 value, out float result) Parameters Type Name Description Vector3 value The second vector. float result The dot product of two vectors as an output parameter. Equals(Vector3) Declaration public bool Equals(Vector3 other) Parameters Type Name Description Vector3 other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) FromQuaternion(ref Quaternion, out Vector3) Creates a new Vector3 that contains the euler angles from a quaternion. Declaration public static void FromQuaternion(ref Quaternion q, out Vector3 result) Parameters Type Name Description Quaternion q Source Quaternion. Vector3 result Vector3 that contains the euler angles from a quaternion as an output parameter. GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Hermite(Vector3, Vector3, Vector3, Vector3, float) Creates a new Vector3 that contains hermite spline interpolation. Declaration public static Vector3 Hermite(Vector3 value1, Vector3 tangent1, Vector3 value2, Vector3 tangent2, float amount) Parameters Type Name Description Vector3 value1 The first position vector. Vector3 tangent1 The first tangent vector. Vector3 value2 The second position vector. Vector3 tangent2 The second tangent vector. float amount Weighting factor. Returns Type Description Vector3 The hermite spline interpolation vector. Hermite(ref Vector3, ref Vector3, ref Vector3, ref Vector3, float, out Vector3) Creates a new Vector3 that contains hermite spline interpolation. Declaration public static void Hermite(ref Vector3 value1, ref Vector3 tangent1, ref Vector3 value2, ref Vector3 tangent2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first position vector. Vector3 tangent1 The first tangent vector. Vector3 value2 The second position vector. Vector3 tangent2 The second tangent vector. float amount Weighting factor. Vector3 result The hermite spline interpolation vector as an output parameter. Length() Returns the length of this Vector3. Declaration public float Length() Returns Type Description float The length of this Vector3. LengthSquared() Returns the squared length of this Vector3. Declaration public float LengthSquared() Returns Type Description float The squared length of this Vector3. Lerp(Vector3, Vector3, float) Creates a new Vector3 that contains linear interpolation of the specified vectors. Declaration public static Vector3 Lerp(Vector3 value1, Vector3 value2, float amount) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. float amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector3 The result of linear interpolation of the specified vectors. Lerp(ref Vector3, ref Vector3, float, out Vector3) Creates a new Vector3 that contains linear interpolation of the specified vectors. Declaration public static void Lerp(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. float amount Weighting value(between 0.0 and 1.0). Vector3 result The result of linear interpolation of the specified vectors as an output parameter. Max(Vector3, Vector3) Creates a new Vector3 that contains a maximal values from the two vectors. Declaration public static Vector3 Max(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description Vector3 The Vector3 with maximal values from the two vectors. Max(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains a maximal values from the two vectors. Declaration public static void Max(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Vector3 result The Vector3 with maximal values from the two vectors as an output parameter. Min(Vector3, Vector3) Creates a new Vector3 that contains a minimal values from the two vectors. Declaration public static Vector3 Min(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description Vector3 The Vector3 with minimal values from the two vectors. Min(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains a minimal values from the two vectors. Declaration public static void Min(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Vector3 result The Vector3 with minimal values from the two vectors as an output parameter. Multiply(Vector3, Vector3) Creates a new Vector3 that contains a multiplication of two vectors. Declaration public static Vector3 Multiply(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector to multiply. Vector3 value2 The second vector to multiply. Returns Type Description Vector3 The result of the vector multiplication. Multiply(Vector3, float) Creates a new Vector3 that contains a multiplication of Vector3 and a scalar. Declaration public static Vector3 Multiply(Vector3 value1, float scaleFactor) Parameters Type Name Description Vector3 value1 Source Vector3. float scaleFactor Scalar value. Returns Type Description Vector3 The result of the vector multiplication with a scalar. Multiply(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains a multiplication of two vectors. Declaration public static void Multiply(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector to multiply. Vector3 value2 The second vector to multiply. Vector3 result The result of the vector multiplication as an output parameter. Multiply(ref Vector3, float, out Vector3) Creates a new Vector3 that contains a multiplication of Vector3 and a scalar. Declaration public static void Multiply(ref Vector3 value1, float scaleFactor, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3. float scaleFactor Scalar value. Vector3 result The result of the multiplication with a scalar as an output parameter. Negate(Vector3) Creates a new Vector3 that contains the specified vector inversion. Declaration public static Vector3 Negate(Vector3 value) Parameters Type Name Description Vector3 value Source Vector3. Returns Type Description Vector3 The result of the vector inversion. Negate(ref Vector3, out Vector3) Creates a new Vector3 that contains the specified vector inversion. Declaration public static void Negate(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value Source Vector3. Vector3 result The result of the vector inversion as an output parameter. Normalize() Turns this Vector3 to a unit vector with the same direction. Declaration public float Normalize() Returns Type Description float The previous vector length. Normalize(Vector3) Creates a new Vector3 that contains a normalized values from another vector. Declaration public static Vector3 Normalize(Vector3 value) Parameters Type Name Description Vector3 value Source Vector3. Returns Type Description Vector3 Unit vector. Normalize(ref Vector3, out Vector3) Creates a new Vector3 that contains a normalized values from another vector. Declaration public static float Normalize(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value Source Vector3. Vector3 result Unit vector as an output parameter. Returns Type Description float The previous vector length. Project(Vector3, Vector3) Projects a Vector3 onto another Vector3. Declaration public static Vector3 Project(Vector3 vector, Vector3 onVector) Parameters Type Name Description Vector3 vector The Vector3 to project. Vector3 onVector The Vector3 to project vector on. Returns Type Description Vector3 The Vector3 obtained by projecting vector onto onVector. Remarks The returned vector is parallel to onVector. The function will return a zero vector if onVector is almost zero. Project(ref Vector3, ref Vector3, out Vector3) Projects a Vector3 onto another Vector3. Declaration public static void Project(ref Vector3 vector, ref Vector3 onVector, out Vector3 result) Parameters Type Name Description Vector3 vector The Vector3 to project. Vector3 onVector The Vector3 to project vector on. Vector3 result The Vector3 obtained by projecting vector onto onVector. Remarks The result vector is parallel to onVector. The function will return a zero vector if onVector is almost zero. Reflect(Vector3) Creates a new Vector3 that contains reflect vector of this Vector3 instance and given normal. Declaration public Vector3 Reflect(Vector3 normal) Parameters Type Name Description Vector3 normal Reflection normal. Returns Type Description Vector3 Reflected vector. Reflect(Vector3, Vector3) Creates a new Vector3 that contains reflect vector of the given vector and normal. Declaration public static Vector3 Reflect(Vector3 vector, Vector3 normal) Parameters Type Name Description Vector3 vector Source Vector3. Vector3 normal Reflection normal. Returns Type Description Vector3 Reflected vector. Reflect(ref Vector3, out Vector3) Creates a new Vector3 that contains reflect vector of this Vector3 instance and given normal. Declaration public void Reflect(ref Vector3 normal, out Vector3 result) Parameters Type Name Description Vector3 normal Reflection normal. Vector3 result Reflected vector as an output parameter. Reflect(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains reflect vector of the given vector and normal. Declaration public static void Reflect(ref Vector3 vector, ref Vector3 normal, out Vector3 result) Parameters Type Name Description Vector3 vector Source Vector3. Vector3 normal Reflection normal. Vector3 result Reflected vector as an output parameter. RotateAround(Vector3, Vector3, Quaternion) Apply a rotation to a point using a pivot as origin. Declaration public static Vector3 RotateAround(Vector3 point, Vector3 pivot, Quaternion rotation) Parameters Type Name Description Vector3 point The point to rotate. Vector3 pivot The pivot used as origin. Quaternion rotation The angle as quaternion. Returns Type Description Vector3 The point vector rotated. RotateAround(ref Vector3, ref Vector3, ref Quaternion, out Vector3) Apply a rotation to a point using a pivot as origin. Declaration public static void RotateAround(ref Vector3 point, ref Vector3 pivot, ref Quaternion rotation, out Vector3 rotatePoint) Parameters Type Name Description Vector3 point The point to rotate. Vector3 pivot The pivot used as origin. Quaternion rotation The angle as quaternion. Vector3 rotatePoint The point vector rotated. SignedAngle(Vector3, Vector3, Vector3) Return the angle in radians between to vectors indicating the direction. Positive in a clocwise direction and negative in a anti-clockwise direction. Declaration public static float SignedAngle(Vector3 from, Vector3 to, Vector3 axis) Parameters Type Name Description Vector3 from The vector from which the angular difference is measured. Vector3 to The vector to which the angular difference is measured. Vector3 axis A vector around which the other vectors are rotated. Returns Type Description float The angle in radians between two vectors with sign. Remarks The result will never be greater than 180 degrees or smoller than -180 degress. SmoothDamp(Vector3, Vector3, ref Vector3, float, float) Changes a vector towards a desired goal over time. Declaration public static Vector3 SmoothDamp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float gameTime) Parameters Type Name Description Vector3 current The current position. Vector3 target The target position we are trying to reach. Vector3 currentVelocity The current velocity, modified by the function. float smoothTime The time it will take to reach the target. float gameTime The current game time (time between last frame). Returns Type Description Vector3 The smooth vector. SmoothDamp(Vector3, Vector3, ref Vector3, float, float, float) Changes a vector towards a desired goal over time. Declaration public static Vector3 SmoothDamp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed, float gameTime) Parameters Type Name Description Vector3 current The current position. Vector3 target The target position we are trying to reach. Vector3 currentVelocity The current velocity, modified by the function. float smoothTime The time it will take to reach the target. float maxSpeed The maximum speed. float gameTime The current game time (time between last frame). Returns Type Description Vector3 The smooth vector. SmoothStep(Vector3, Vector3, float) Creates a new Vector3 that contains cubic interpolation of the specified vectors. Declaration public static Vector3 SmoothStep(Vector3 value1, Vector3 value2, float amount) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. float amount Weighting value. Returns Type Description Vector3 Cubic interpolation of the specified vectors. SmoothStep(ref Vector3, ref Vector3, float, out Vector3) Creates a new Vector3 that contains cubic interpolation of the specified vectors. Declaration public static void SmoothStep(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. float amount Weighting value. Vector3 result Cubic interpolation of the specified vectors as an output parameter. SquareRoot(Vector3) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static Vector3 SquareRoot(Vector3 value) Parameters Type Name Description Vector3 value The source vector. Returns Type Description Vector3 The square root vector. SquareRoot(ref Vector3, out Vector3) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static void SquareRoot(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value The source vector. Vector3 result The square root vector. Subtract(Vector3, Vector3) Creates a new Vector3 that contains subtraction of on Vector3 from a another. Declaration public static Vector3 Subtract(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector to substract. Vector3 value2 The second vector to substract. Returns Type Description Vector3 The result of the vector subtraction. Subtract(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains subtraction of on Vector3 from a another. Declaration public static void Subtract(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector to substract. Vector3 value2 The second vector to substract. Vector3 result The result of the vector subtraction as an ouput parameter. ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() ToVector2() Convert a Vector3 to Vector2. Declaration public Vector2 ToVector2() Returns Type Description Vector2 The Vector2 with the x and y components. ToVector2(out Vector2) Convert a Vector3 to Vector2. Declaration public void ToVector2(out Vector2 result) Parameters Type Name Description Vector2 result The Vector2 with the x and y components as an output parameter. ToVector4(out Vector4, float) Convert a Vector3 to Vector4. Declaration public void ToVector4(out Vector4 result, float w = 1) Parameters Type Name Description Vector4 result The Vector4 output. float w The W component. 1.0 by default. ToVector4(float) Convert a Vector3 to Vector4. The W component is 1.0. Declaration public Vector4 ToVector4(float w = 1) Parameters Type Name Description float w The W component. 1.0 by default. Returns Type Description Vector4 The Vector4 output. Transform(Vector3*, ref Matrix4x4, Vector3*) Creates a new Vector3 that contains a transformation of 3D vector by the specified Matrix4x4. Declaration public static void Transform(Vector3* position, ref Matrix4x4 matrix, Vector3* result) Parameters Type Name Description Vector3* position Source Vector3. Matrix4x4 matrix The transformation Matrix4x4. Vector3* result Transformed Vector3 as an output parameter. Transform(Vector3, Matrix3x3) Creates a new Vector3 that contains a transformation of 3D vector by the specified Matrix3x3. Declaration public static Vector3 Transform(Vector3 position, Matrix3x3 matrix) Parameters Type Name Description Vector3 position Source Vector3. Matrix3x3 matrix The transformation Matrix3x3. Returns Type Description Vector3 Transformed Vector3. Transform(Vector3, Matrix4x4) Transforms a vector by the given matrix. Declaration public static Vector3 Transform(Vector3 position, Matrix4x4 matrix) Parameters Type Name Description Vector3 position The source vector. Matrix4x4 matrix The transformation matrix. Returns Type Description Vector3 The transformed vector. Transform(Vector3, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector3 Transform(Vector3 value, Quaternion rotation) Parameters Type Name Description Vector3 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector3 The transformed vector. Transform(ref Vector3, ref Matrix3x3, out Vector3) Creates a new Vector3 that contains a transformation of 3D vector by the specified Matrix3x3. Declaration public static void Transform(ref Vector3 position, ref Matrix3x3 matrix, out Vector3 result) Parameters Type Name Description Vector3 position Source Vector3. Matrix3x3 matrix The transformation Matrix3x3. Vector3 result Transformed Vector3. Transform(ref Vector3, ref Matrix4x4, out Vector3) Transforms a vector by the given matrix. Declaration public static void Transform(ref Vector3 position, ref Matrix4x4 matrix, out Vector3 result) Parameters Type Name Description Vector3 position The source vector. Matrix4x4 matrix The transformation matrix. Vector3 result The transformed vector. Transform(ref Vector3, ref Quaternion, out Vector3) Transforms a vector by the given Quaternion rotation value. Declaration public static void Transform(ref Vector3 value, ref Quaternion rotation, out Vector3 result) Parameters Type Name Description Vector3 value The source vector to be rotated. Quaternion rotation The rotation to apply. Vector3 result The transformed vector. Transform(Vector3[], ref Matrix4x4, Vector3[]) Apply transformation on all vectors within array of Vector3 by the specified Matrix4x4 and places the results in an another array. Declaration public static void Transform(Vector3[] sourceArray, ref Matrix4x4 matrix, Vector3[] destinationArray) Parameters Type Name Description Vector3[] sourceArray Source array. Matrix4x4 matrix The transformation Matrix4x4. Vector3[] destinationArray Destination array. TransformCoordinate(Vector3, Matrix4x4) Performs a coordinate transformation using the given Matrix4x4. Declaration public static Vector3 TransformCoordinate(Vector3 coordinate, Matrix4x4 transform) Parameters Type Name Description Vector3 coordinate The coordinate vector to transform. Matrix4x4 transform The transformation Matrix4x4. Returns Type Description Vector3 The transformed coordinates. Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the wcomponent to be one and therefore makes the vector homogeneous. The homogeneous vector is often prefered when working with coordinates as the w component can safely be ignored. TransformCoordinate(ref Vector3, ref Matrix4x4, out Vector3) Performs a coordinate transformation using the given Matrix4x4. Declaration public static void TransformCoordinate(ref Vector3 coordinate, ref Matrix4x4 transform, out Vector3 result) Parameters Type Name Description Vector3 coordinate The coordinate vector to transform. Matrix4x4 transform The transformation Matrix4x4. Vector3 result When the method completes, contains the transformed coordinates. Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the wcomponent to be one and therefore makes the vector homogeneous. The homogeneous vector is often prefered when working with coordinates as the w component can safely be ignored. TransformNormal(Vector3*, ref Matrix4x4, Vector3*) Creates a new Vector3 that contains a transformation of the specified normal by the specified Matrix4x4. Declaration public static void TransformNormal(Vector3* normal, ref Matrix4x4 matrix, Vector3* result) Parameters Type Name Description Vector3* normal Source Vector3 which represents a normal vector. Matrix4x4 matrix The transformation Matrix4x4. Vector3* result Transformed normal as an output parameter. TransformNormal(Vector3, Matrix4x4) Creates a new Vector3 that contains a transformation of the specified normal by the specified Matrix4x4. Declaration public static Vector3 TransformNormal(Vector3 normal, Matrix4x4 matrix) Parameters Type Name Description Vector3 normal Source Vector3 which represents a normal vector. Matrix4x4 matrix The transformation Matrix4x4. Returns Type Description Vector3 Transformed normal. TransformNormal(ref Vector3, ref Matrix4x4, out Vector3) Creates a new Vector3 that contains a transformation of the specified normal by the specified Matrix4x4. Declaration public static void TransformNormal(ref Vector3 normal, ref Matrix4x4 matrix, out Vector3 result) Parameters Type Name Description Vector3 normal Source Vector3 which represents a normal vector. Matrix4x4 matrix The transformation Matrix4x4. Vector3 result Transformed normal as an output parameter. Operators operator +(Vector3, Vector3) Adds two vectors. Declaration public static Vector3 operator +(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the add sign. Vector3 value2 Source Vector3 on the right of the add sign. Returns Type Description Vector3 Sum of the vectors. operator /(Vector3, Vector3) Divides the components of a Vector3 by the components of another Vector3. Declaration public static Vector3 operator /(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the div sign. Vector3 value2 Divisor Vector3 on the right of the div sign. Returns Type Description Vector3 The result of dividing the vectors. operator /(Vector3, float) Divides the components of a Vector3 by a scalar. Declaration public static Vector3 operator /(Vector3 value1, float divider) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the div sign. float divider Divisor scalar on the right of the div sign. Returns Type Description Vector3 The result of dividing a vector by a scalar. operator ==(Vector3, Vector3) Compares whether two Vector3 instances are equal. Declaration public static bool operator ==(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Vector3 instance on the left of the equal sign. Vector3 value2 Vector3 instance on the right of the equal sign. Returns Type Description bool true if the instances are equal; false otherwise. operator !=(Vector3, Vector3) Compares whether two Vector3 instances are not equal. Declaration public static bool operator !=(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Vector3 instance on the left of the not equal sign. Vector3 value2 Vector3 instance on the right of the not equal sign. Returns Type Description bool true if the instances are not equal; false otherwise. operator *(Vector3, Vector3) Multiplies the components of two vectors by each other. Declaration public static Vector3 operator *(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the mul sign. Vector3 value2 Source Vector3 on the right of the mul sign. Returns Type Description Vector3 Result of the vector multiplication. operator *(Vector3, float) Multiplies the components of vector by a scalar. Declaration public static Vector3 operator *(Vector3 value, float scaleFactor) Parameters Type Name Description Vector3 value Source Vector3 on the left of the mul sign. float scaleFactor Scalar value on the right of the mul sign. Returns Type Description Vector3 Result of the vector multiplication with a scalar. operator *(float, Vector3) Multiplies the components of vector by a scalar. Declaration public static Vector3 operator *(float scaleFactor, Vector3 value) Parameters Type Name Description float scaleFactor Scalar value on the left of the mul sign. Vector3 value Source Vector3 on the right of the mul sign. Returns Type Description Vector3 Result of the vector multiplication with a scalar. operator -(Vector3, Vector3) Subtracts a Vector3 from a Vector3. Declaration public static Vector3 operator -(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the sub sign. Vector3 value2 Source Vector3 on the right of the sub sign. Returns Type Description Vector3 Result of the vector subtraction. operator -(Vector3) Inverts values in the specified Vector3. Declaration public static Vector3 operator -(Vector3 value) Parameters Type Name Description Vector3 value Source Vector3 on the right of the sub sign. Returns Type Description Vector3 Result of the inversion. Implements IEquatable<T> Extension Methods DXExtensionsMethods.ToSystemNumerics(Vector3, out Vector3) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Mathematics.Vector4.html": {
    "href": "api/Evergine.Mathematics.Vector4.html",
    "title": "Struct Vector4 | Evergine Doc",
    "keywords": "Struct Vector4 Represents a vector in a 4D coordinate system. Implements IEquatable<Vector4> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Mathematics Assembly: Evergine.Mathematics.dll Syntax public struct Vector4 : IEquatable<Vector4> Constructors Vector4(Vector2, float, float) Initializes a new instance of the Vector4 struct. Declaration public Vector4(Vector2 value, float z, float w) Parameters Type Name Description Vector2 value The Vector2 vector with coordinates x and y. float z The z coordinate in 4D space. float w The w coordinate in 4D space. Vector4(Vector3, float) Initializes a new instance of the Vector4 struct. Declaration public Vector4(Vector3 value, float w) Parameters Type Name Description Vector3 value The Vector3 vector with coordinates x, y and z. float w The w coordinate in 4D space. Vector4(float) Initializes a new instance of the Vector4 struct. Declaration public Vector4(float value) Parameters Type Name Description float value The x, y, z and w coordinates in 4D space. Vector4(float, float, float, float) Initializes a new instance of the Vector4 struct. Declaration public Vector4(float x, float y, float z, float w) Parameters Type Name Description float x The x coordinate in 4D space. float y The y coordinate in 4D space. float z The z coordinate in 4D space. float w The w coordinate in 4D space. Fields W The w coordinate of this Vector4. Declaration public float W Field Value Type Description float X The x coordinate of this Vector4. Declaration public float X Field Value Type Description float Y The y coordinate of this Vector4. Declaration public float Y Field Value Type Description float Z The z coordinate of this Vector4. Declaration public float Z Field Value Type Description float Properties this[int] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description int index The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component. Property Value Type Description float The value of the X, Y, Z or W component, depending on the index. One Gets a Vector4 with components 1, 1, 1, 1. Declaration public static Vector4 One { get; } Property Value Type Description Vector4 UnitW Gets a Vector4 with components 0, 0, 0, 1. Declaration public static Vector4 UnitW { get; } Property Value Type Description Vector4 UnitX Gets a Vector4 with components 1, 0, 0, 0. Declaration public static Vector4 UnitX { get; } Property Value Type Description Vector4 UnitY Gets a Vector4 with components 0, 1, 0, 0. Declaration public static Vector4 UnitY { get; } Property Value Type Description Vector4 UnitZ Gets a Vector4 with components 0, 0, 1, 0. Declaration public static Vector4 UnitZ { get; } Property Value Type Description Vector4 Zero Gets a Vector4 with components 0, 0, 0, 0. Declaration public static Vector4 Zero { get; } Property Value Type Description Vector4 Methods Abs(Vector4) Creates a new Vector4 that contains the absolute values from the a vector. Declaration public static Vector4 Abs(Vector4 value) Parameters Type Name Description Vector4 value The vector. Returns Type Description Vector4 The Vector4 with absolute values from the a vector. Abs(ref Vector4, out Vector4) Creates a new Vector4 that contains the absolute values from the a vector. Declaration public static void Abs(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value The vector. Vector4 result The Vector4 with absolute values from the a vector as an output parameter. Add(Vector4, Vector4) Performs vector addition on value1 and value2. Declaration public static Vector4 Add(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector to add. Vector4 value2 The second vector to add. Returns Type Description Vector4 The result of the vector addition. Add(ref Vector4, ref Vector4, out Vector4) Performs vector addition on value1 and value2, storing the result of the addition in result. Declaration public static void Add(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector to add. Vector4 value2 The second vector to add. Vector4 result The result of the vector addition as an ouput parameter. Barycentric(Vector4, Vector4, Vector4, float, float) Creates a new Vector4 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4D triangle. Declaration public static Vector4 Barycentric(Vector4 value1, Vector4 value2, Vector4 value3, float amount1, float amount2) Parameters Type Name Description Vector4 value1 The first vector of 4D triangle. Vector4 value2 The second vector of 4D triangle. Vector4 value3 The third vector of 4D triangle. float amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 4D triangle. float amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 4D triangle. Returns Type Description Vector4 The cartesian translation of barycentric coordinates. Barycentric(ref Vector4, ref Vector4, ref Vector4, float, float, out Vector4) Creates a new Vector4 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4D triangle. Declaration public static void Barycentric(ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, float amount1, float amount2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector of 4D triangle. Vector4 value2 The second vector of 4D triangle. Vector4 value3 The third vector of 4D triangle. float amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 4D triangle. float amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 4D triangle. Vector4 result The cartesian translation of barycentric coordinates as an output parameter. CatmullRom(Vector4, Vector4, Vector4, Vector4, float) Creates a new Vector4 that contains CatmullRom interpolation of the specified vectors. Declaration public static Vector4 CatmullRom(Vector4 value1, Vector4 value2, Vector4 value3, Vector4 value4, float amount) Parameters Type Name Description Vector4 value1 The first vector in interpolation. Vector4 value2 The second vector in interpolation. Vector4 value3 The third vector in interpolation. Vector4 value4 The fourth vector in interpolation. float amount Weighting factor. Returns Type Description Vector4 The result of CatmullRom interpolation. CatmullRom(ref Vector4, ref Vector4, ref Vector4, ref Vector4, float, out Vector4) Creates a new Vector4 that contains CatmullRom interpolation of the specified vectors. Declaration public static void CatmullRom(ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, ref Vector4 value4, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector in interpolation. Vector4 value2 The second vector in interpolation. Vector4 value3 The third vector in interpolation. Vector4 value4 The fourth vector in interpolation. float amount Weighting factor. Vector4 result The result of CatmullRom interpolation as an output parameter. Clamp(Vector4, Vector4, Vector4) Restricts a vector between a min and max value. Declaration public static Vector4 Clamp(Vector4 value1, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 value1 The source vector. Vector4 min The minimum value. Vector4 max The maximum value. Returns Type Description Vector4 The restricted vector. Clamp(ref Vector4, ref Vector4, ref Vector4, out Vector4) Restricts a vector between a min and max value. Declaration public static void Clamp(ref Vector4 value1, ref Vector4 min, ref Vector4 max, out Vector4 result) Parameters Type Name Description Vector4 value1 The source vector. Vector4 min The minimum value. Vector4 max The maximum value. Vector4 result The restricted vector. ClampMagnitude(Vector4, float) Returns a vector with its magnitude clamped to maxLength. Declaration public static Vector4 ClampMagnitude(Vector4 vector, float maxLength) Parameters Type Name Description Vector4 vector The vector. float maxLength The max length. Returns Type Description Vector4 The clamped vector. Distance(Vector4, Vector4) Returns the distance between two vectors. Declaration public static float Distance(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description float The distance between two vectors. Distance(ref Vector4, ref Vector4, out float) Returns the distance between two vectors. Declaration public static void Distance(ref Vector4 value1, ref Vector4 value2, out float result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. float result The distance between two vectors as an output parameter. DistanceSquared(Vector4, Vector4) Returns the Euclidean distance squared between the two given points. Declaration public static float DistanceSquared(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first point. Vector4 value2 The second point. Returns Type Description float The distance squared. DistanceSquared(ref Vector4, ref Vector4, out float) Returns the Euclidean distance squared between the two given points. Declaration public static void DistanceSquared(ref Vector4 value1, ref Vector4 value2, out float result) Parameters Type Name Description Vector4 value1 The first point. Vector4 value2 The second point. float result The distance squared. Divide(Vector4, Vector4) Divides the components of a Vector4 by the components of another Vector4. Declaration public static Vector4 Divide(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4. Vector4 value2 Divisor Vector4. Returns Type Description Vector4 The result of dividing the vectors. Divide(Vector4, float) Divides the components of a Vector4 by a scalar. Declaration public static Vector4 Divide(Vector4 value1, float divider) Parameters Type Name Description Vector4 value1 Source Vector4. float divider Divisor scalar. Returns Type Description Vector4 The result of dividing a vector by a scalar. Divide(ref Vector4, ref Vector4, out Vector4) Divides the components of a Vector4 by the components of another Vector4. Declaration public static void Divide(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4. Vector4 value2 Divisor Vector4. Vector4 result The result of dividing the vectors as an output parameter. Divide(ref Vector4, float, out Vector4) Divides the components of a Vector4 by a scalar. Declaration public static void Divide(ref Vector4 value1, float divider, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4. float divider Divisor scalar. Vector4 result The result of dividing a vector by a scalar as an output parameter. Dot(Vector4, Vector4) Returns the dot product of two vectors. Declaration public static float Dot(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description float The dot product of two vectors. Dot(ref Vector4, ref Vector4) Returns a dot product of two vectors. Declaration public static float Dot(ref Vector4 value1, ref Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description float The dot product of two vectors as an output parameter. Equals(Vector4) Declaration public bool Equals(Vector4 other) Parameters Type Name Description Vector4 other Returns Type Description bool Equals(ref Vector4) Indicates whether this instance and a specified Vector4 are equal. Declaration public bool Equals(ref Vector4 other) Parameters Type Name Description Vector4 other The vector to compare with the current instance. Returns Type Description bool true if other and this instance are the same type and represent the same value; otherwise, false. Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Hermite(Vector4, Vector4, Vector4, Vector4, float) Creates a new Vector4 that contains hermite spline interpolation. Declaration public static Vector4 Hermite(Vector4 value1, Vector4 tangent1, Vector4 value2, Vector4 tangent2, float amount) Parameters Type Name Description Vector4 value1 The first position vector. Vector4 tangent1 The first tangent vector. Vector4 value2 The second position vector. Vector4 tangent2 The second tangent vector. float amount Weighting factor. Returns Type Description Vector4 The hermite spline interpolation vector. Hermite(ref Vector4, ref Vector4, ref Vector4, ref Vector4, float, out Vector4) Creates a new Vector4 that contains hermite spline interpolation. Declaration public static void Hermite(ref Vector4 value1, ref Vector4 tangent1, ref Vector4 value2, ref Vector4 tangent2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first position vector. Vector4 tangent1 The first tangent vector. Vector4 value2 The second position vector. Vector4 tangent2 The second tangent vector. float amount Weighting factor. Vector4 result The hermite spline interpolation vector as an output parameter. Length() Returns the length of this Vector4. Declaration public float Length() Returns Type Description float The length of this Vector4. LengthSquared() Returns the squared length of this Vector4. Declaration public float LengthSquared() Returns Type Description float The squared length of this Vector4. Lerp(Vector4, Vector4, float) Creates a new Vector4 that contains linear interpolation of the specified vectors. Declaration public static Vector4 Lerp(Vector4 value1, Vector4 value2, float amount) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. float amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector4 The result of linear interpolation of the specified vectors. Lerp(ref Vector4, ref Vector4, float, out Vector4) Creates a new Vector4 that contains linear interpolation of the specified vectors. Declaration public static void Lerp(ref Vector4 value1, ref Vector4 value2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. float amount Weighting value(between 0.0 and 1.0). Vector4 result The result of linear interpolation of the specified vectors as an output parameter. Max(Vector4, Vector4) Creates a new Vector4 that contains a maximal values from the two vectors. Declaration public static Vector4 Max(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description Vector4 The Vector4 with maximal values from the two vectors. Max(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains a maximal values from the two vectors. Declaration public static void Max(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Vector4 result The Vector4 with maximal values from the two vectors as an output parameter. Min(Vector4, Vector4) Creates a new Vector4 that contains a minimal values from the two vectors. Declaration public static Vector4 Min(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description Vector4 The Vector4 with minimal values from the two vectors. Min(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains a minimal values from the two vectors. Declaration public static void Min(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Vector4 result The Vector4 with minimal values from the two vectors as an output parameter. Multiply(Vector4, Vector4) Creates a new Vector4 that contains a multiplication of two vectors. Declaration public static Vector4 Multiply(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector to multiply. Vector4 value2 The second vector to multiply. Returns Type Description Vector4 The result of the vector multiplication. Multiply(Vector4, float) Creates a new Vector4 that contains a multiplication of Vector4 and a scalar. Declaration public static Vector4 Multiply(Vector4 value1, float scaleFactor) Parameters Type Name Description Vector4 value1 Source Vector3. float scaleFactor Scalar value. Returns Type Description Vector4 The result of the vector multiplication with a scalar. Multiply(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains a multiplication of two vectors. Declaration public static void Multiply(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector to multiply. Vector4 value2 The second vector to multiply. Vector4 result The result of the vector multiplication as an output parameter. Multiply(ref Vector4, float, out Vector4) Creates a new Vector4 that contains a multiplication of Vector4 and a scalar. Declaration public static void Multiply(ref Vector4 value1, float scaleFactor, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4. float scaleFactor Scalar value. Vector4 result The result of the multiplication with a scalar as an output parameter. Negate(Vector4) Creates a new Vector4 that contains the specified vector inversion. Declaration public static Vector4 Negate(Vector4 value) Parameters Type Name Description Vector4 value Source Vector4. Returns Type Description Vector4 The result of the vector inversion. Negate(ref Vector4, out Vector4) Creates a new Vector4 that contains the specified vector inversion. Declaration public static void Negate(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value Source Vector4. Vector4 result The result of the vector inversion as an output parameter. Normalize() Turns this Vector4 to a unit vector with the same direction. Declaration public float Normalize() Returns Type Description float The previous vector length. Normalize(Vector4) Creates a new Vector4 that contains a normalized values from another vector. Declaration public static Vector4 Normalize(Vector4 value) Parameters Type Name Description Vector4 value Source Vector4. Returns Type Description Vector4 Unit vector. Normalize(ref Vector4, out Vector4) Creates a new Vector4 that contains a normalized values from another vector. Declaration public static float Normalize(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value Source Vector4. Vector4 result Unit vector as an output parameter. Returns Type Description float The previous vector length. Project(Vector4, Vector4) Projects a Vector4 onto another Vector4. Declaration public static Vector4 Project(Vector4 vector, Vector4 onVector) Parameters Type Name Description Vector4 vector The Vector4 to project. Vector4 onVector The Vector4 to project vector on. Returns Type Description Vector4 The Vector4 obtained by projecting vector onto onVector. Remarks The returned vector is parallel to onVector. The function will return a zero vector if onVector is almost zero. Project(ref Vector4, ref Vector4, out Vector4) Projects a Vector4 onto another Vector4. Declaration public static void Project(ref Vector4 vector, ref Vector4 onVector, out Vector4 result) Parameters Type Name Description Vector4 vector The Vector4 to project. Vector4 onVector The Vector4 to project vector on. Vector4 result The Vector4 obtained by projecting vector onto onVector. Remarks The result vector is parallel to onVector. The function will return a zero vector if onVector is almost zero. SmoothStep(Vector4, Vector4, float) Creates a new Vector4 that contains cubic interpolation of the specified vectors. Declaration public static Vector4 SmoothStep(Vector4 value1, Vector4 value2, float amount) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. float amount Weighting value. Returns Type Description Vector4 Cubic interpolation of the specified vectors. SmoothStep(ref Vector4, ref Vector4, float, out Vector4) Creates a new Vector4 that contains cubic interpolation of the specified vectors. Declaration public static void SmoothStep(ref Vector4 value1, ref Vector4 value2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. float amount Weighting value. Vector4 result Cubic interpolation of the specified vectors as an output parameter. SquareRoot(Vector4) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static Vector4 SquareRoot(Vector4 value) Parameters Type Name Description Vector4 value The source vector. Returns Type Description Vector4 The square root vector. SquareRoot(ref Vector4, out Vector4) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static void SquareRoot(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value The source vector. Vector4 result The square root vector. Subtract(Vector4, Vector4) Creates a new Vector4 that contains subtraction of on Vector4 from a another. Declaration public static Vector4 Subtract(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector to substract. Vector4 value2 The second vector to substract. Returns Type Description Vector4 The result of the vector subtraction. Subtract(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains subtraction of on Vector4 from a another. Declaration public static void Subtract(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector to substract. Vector4 value2 The second vector to substract. Vector4 result The result of the vector subtraction as an ouput parameter. ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() ToVector2() Convert a Vector4 to Vector2. Declaration public Vector2 ToVector2() Returns Type Description Vector2 The Vector2 with the x and y components. ToVector2(out Vector2) Convert a Vector4 to Vector2. Declaration public void ToVector2(out Vector2 result) Parameters Type Name Description Vector2 result The Vector2 with the x and y components as an output parameter. ToVector3() Convert a Vector4 to Vector3. Declaration public Vector3 ToVector3() Returns Type Description Vector3 The Vector3 with the x, y and z components. ToVector3(out Vector3) Convert a Vector4 to Vector3. Declaration public void ToVector3(out Vector3 result) Parameters Type Name Description Vector3 result The Vector3 with the x, y and z components as an output parameter. Transform(Vector2, Matrix4x4) Creates a new Vector4 that contains a transformation of 4D vector by the specified Matrix4x4. Declaration public static Vector4 Transform(Vector2 position, Matrix4x4 matrix) Parameters Type Name Description Vector2 position Source Vector2. Matrix4x4 matrix The transformation Matrix4x4. Returns Type Description Vector4 Transformed Vector4. Transform(Vector2, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector4 Transform(Vector2 value, Quaternion rotation) Parameters Type Name Description Vector2 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector4 The transformed vector. Transform(ref Vector2, ref Matrix4x4, out Vector4) Creates a new Vector4 that contains a transformation of 4D vector by the specified Matrix4x4. Declaration public static void Transform(ref Vector2 position, ref Matrix4x4 matrix, out Vector4 result) Parameters Type Name Description Vector2 position Source Vector2. Matrix4x4 matrix The transformation Matrix4x4. Vector4 result Transformed Vector4 as an output parameter. Transform(ref Vector2, ref Quaternion, out Vector4) Transforms a vector by the given Quaternion rotation value. Declaration public static void Transform(ref Vector2 value, ref Quaternion rotation, out Vector4 result) Parameters Type Name Description Vector2 value The source vector to be rotated. Quaternion rotation The rotation to apply. Vector4 result The transformed vector. Transform(Vector3, Matrix4x4) Creates a new Vector4 that contains a transformation of 4D vector by the specified Matrix4x4. Declaration public static Vector4 Transform(Vector3 position, Matrix4x4 matrix) Parameters Type Name Description Vector3 position Source Vector3. Matrix4x4 matrix The transformation Matrix4x4. Returns Type Description Vector4 Transformed Vector4. Transform(Vector3, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector4 Transform(Vector3 value, Quaternion rotation) Parameters Type Name Description Vector3 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector4 The transformed vector. Transform(ref Vector3, ref Matrix4x4, out Vector4) Creates a new Vector4 that contains a transformation of 4D vector by the specified Matrix4x4. Declaration public static void Transform(ref Vector3 position, ref Matrix4x4 matrix, out Vector4 result) Parameters Type Name Description Vector3 position Source Vector3. Matrix4x4 matrix The transformation Matrix4x4. Vector4 result Transformed Vector4 as an output parameter. Transform(ref Vector3, ref Quaternion, out Vector4) Transforms a vector by the given Quaternion rotation value. Declaration public static void Transform(ref Vector3 value, ref Quaternion rotation, out Vector4 result) Parameters Type Name Description Vector3 value The source vector to be rotated. Quaternion rotation The rotation to apply. Vector4 result The transformed vector. Transform(Vector4*, ref Matrix4x4, Vector4*) Creates a new Vector4 that contains a transformation of 4D vector by the specified Matrix4x4. Declaration public static void Transform(Vector4* position, ref Matrix4x4 matrix, Vector4* result) Parameters Type Name Description Vector4* position Source Vector4. Matrix4x4 matrix The transformation Matrix4x4. Vector4* result Transformed Vector4 as an output parameter. Transform(Vector4, Matrix4x4) Creates a new Vector4 that contains a transformation of 4D vector by the specified Matrix4x4. Declaration public static Vector4 Transform(Vector4 position, Matrix4x4 matrix) Parameters Type Name Description Vector4 position Source Vector4. Matrix4x4 matrix The transformation Matrix4x4. Returns Type Description Vector4 Transformed Vector4. Transform(Vector4, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector4 Transform(Vector4 value, Quaternion rotation) Parameters Type Name Description Vector4 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector4 The transformed vector. Transform(ref Vector4, ref Matrix4x4, out Vector4) Creates a new Vector4 that contains a transformation of 4D vector by the specified Matrix4x4. Declaration public static void Transform(ref Vector4 position, ref Matrix4x4 matrix, out Vector4 result) Parameters Type Name Description Vector4 position Source Vector4. Matrix4x4 matrix The transformation Matrix4x4. Vector4 result Transformed Vector4 as an output parameter. Transform(ref Vector4, ref Quaternion, out Vector4) Transforms a vector by the given Quaternion rotation value. Declaration public static void Transform(ref Vector4 value, ref Quaternion rotation, out Vector4 result) Parameters Type Name Description Vector4 value The source vector to be rotated. Quaternion rotation The rotation to apply. Vector4 result The transformed vector. Operators operator +(Vector4, Vector4) Adds two vectors. Declaration public static Vector4 operator +(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the add sign. Vector4 value2 Source Vector4 on the right of the add sign. Returns Type Description Vector4 Sum of the vectors. operator /(Vector4, Vector4) Divides the components of a Vector4 by the components of another Vector4. Declaration public static Vector4 operator /(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the div sign. Vector4 value2 Divisor Vector4 on the right of the div sign. Returns Type Description Vector4 The result of dividing the vectors. operator /(Vector4, float) Divides the components of a Vector4 by a scalar. Declaration public static Vector4 operator /(Vector4 value1, float divider) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the div sign. float divider Divisor scalar on the right of the div sign. Returns Type Description Vector4 The result of dividing a vector by a scalar. operator ==(Vector4, Vector4) Compares whether two Vector4 instances are equal. Declaration public static bool operator ==(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Vector4 instance on the left of the equal sign. Vector4 value2 Vector4 instance on the right of the equal sign. Returns Type Description bool true if the instances are equal; false otherwise. operator !=(Vector4, Vector4) Compares whether two Vector4 instances are not equal. Declaration public static bool operator !=(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Vector4 instance on the left of the not equal sign. Vector4 value2 Vector4 instance on the right of the not equal sign. Returns Type Description bool true if the instances are not equal; false otherwise. operator *(Vector4, Vector4) Multiplies the components of two vectors by each other. Declaration public static Vector4 operator *(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the mul sign. Vector4 value2 Source Vector4 on the right of the mul sign. Returns Type Description Vector4 Result of the vector multiplication. operator *(Vector4, float) Multiplies the components of vector by a scalar. Declaration public static Vector4 operator *(Vector4 value, float scaleFactor) Parameters Type Name Description Vector4 value Source Vector4 on the left of the mul sign. float scaleFactor Scalar value on the right of the mul sign. Returns Type Description Vector4 Result of the vector multiplication with a scalar. operator *(float, Vector4) Multiplies the components of vector by a scalar. Declaration public static Vector4 operator *(float scaleFactor, Vector4 value) Parameters Type Name Description float scaleFactor Scalar value on the left of the mul sign. Vector4 value Source Vector4 on the right of the mul sign. Returns Type Description Vector4 Result of the vector multiplication with a scalar. operator -(Vector4, Vector4) Subtracts a Vector4 from a Vector4. Declaration public static Vector4 operator -(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the sub sign. Vector4 value2 Source Vector4 on the right of the sub sign. Returns Type Description Vector4 Result of the vector subtraction. operator -(Vector4) Inverts values in the specified Vector4. Declaration public static Vector4 operator -(Vector4 value) Parameters Type Name Description Vector4 value Source Vector4 on the right of the sub sign. Returns Type Description Vector4 Result of the inversion. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.html": {
    "href": "api/Evergine.Metal.html",
    "title": "Namespace Evergine.Metal | Evergine Doc",
    "keywords": "Namespace Evergine.Metal Classes MTLBuffer Represents a Metal buffer object. MTLCapabilities The Metal capabilities. MTLCommandBuffer This class represent a set of commands. MTLCommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. MTLComputePipelineState This class represents a native pipelineState on Metal. MTLExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. MTLFeatures This class contains a set of supported features of Metal device. MTLFrameBuffer This class represents a native FrameBuffer object on Metal. MTLGraphicsContext Graphics context on Metal2. MTLGraphicsPipelineState This class represents a native pipelineState on Metal. MTLHelpers A set of Metal Helpers. MTLQueryHeap Represents a Metal queryheap object. MTLResourceFactory The Metal version of the resource factory. MTLResourceLayout The Metal implementation of the resourceLayout object. MTLResourceSet The Metal implementation of the resourceSet object. MTLSamplerState This class represents the a Metal samplerState object. MTLShader This class represents a native shader object on Metal. MTLSwapChain This class represents a native swapchain object on Metal. MTLSwapChainFrameBuffer This class represent the swapchain FrameBuffer on Metal. MTLTexture This class represents a native texture object on Metal."
  },
  "api/Evergine.Metal.MTLBuffer.html": {
    "href": "api/Evergine.Metal.MTLBuffer.html",
    "title": "Class MTLBuffer | Evergine Doc",
    "keywords": "Class MTLBuffer Represents a Metal buffer object. Inheritance object GraphicsResource Buffer MTLBuffer Implements IDisposable Inherited Members Buffer.Description Buffer.UpdateCounter GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLBuffer : Buffer, IDisposable Constructors MTLBuffer(MTLGraphicsContext, nint, ref BufferDescription) Initializes a new instance of the MTLBuffer class. Declaration public MTLBuffer(MTLGraphicsContext context, nint data, ref BufferDescription description) Parameters Type Name Description MTLGraphicsContext context The graphics context. IntPtr data The data pointer. BufferDescription description A buffer description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Buffer.Name NativePointer Gets the native pointer. Declaration public override nint NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods CopyTo(IMTLBlitCommandEncoder, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration public void CopyTo(IMTLBlitCommandEncoder commandBuffer, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description IMTLBlitCommandEncoder commandBuffer the blitcommand encoder. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() SetData(IMTLBlitCommandEncoder, nint, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(IMTLBlitCommandEncoder commandBuffer, nint source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description IMTLBlitCommandEncoder commandBuffer the blitcommand encoder. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLCapabilities.html": {
    "href": "api/Evergine.Metal.MTLCapabilities.html",
    "title": "Class MTLCapabilities | Evergine Doc",
    "keywords": "Class MTLCapabilities The Metal capabilities. Inheritance object GraphicsContextCapabilities MTLCapabilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLCapabilities : GraphicsContextCapabilities Properties ClipDepth Gets the depth range in clip space. Declaration public override ClipDepth ClipDepth { get; } Property Value Type Description ClipDepth Overrides GraphicsContextCapabilities.ClipDepth FlipProjectionRequired Gets a value indicating whether we need to flip projection matrix on Render Target. Declaration public override bool FlipProjectionRequired { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.FlipProjectionRequired IsComputeShaderSupported Gets a value indicating whether this graphics context support compute shaders. Declaration public override bool IsComputeShaderSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsComputeShaderSupported IsMRTSupported Gets a value indicating whether this graphics context supports Multi Render Target (MRT). Declaration public override bool IsMRTSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsMRTSupported IsRaytracingSupported Gets a value indicating whether this graphics context supports Raytracing. Declaration public override bool IsRaytracingSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsRaytracingSupported IsShadowMapSupported Gets a value indicating whether this graphics context supports Shadow Maps. Declaration public override bool IsShadowMapSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsShadowMapSupported MatrixMajorness Gets a value indicating whether this graphics context uses row major matrices by default. Declaration public override MatrixMajorness MatrixMajorness { get; } Property Value Type Description MatrixMajorness Overrides GraphicsContextCapabilities.MatrixMajorness MultiviewStrategy Gets the multiview strategy supported by this graphic context. Declaration public override MultiviewStrategy MultiviewStrategy { get; } Property Value Type Description MultiviewStrategy Overrides GraphicsContextCapabilities.MultiviewStrategy Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLCommandBuffer.html": {
    "href": "api/Evergine.Metal.MTLCommandBuffer.html",
    "title": "Class MTLCommandBuffer | Evergine Doc",
    "keywords": "Class MTLCommandBuffer This class represent a set of commands. Inheritance object CommandBuffer MTLCommandBuffer Implements IDisposable IGetNativePointers Inherited Members CommandBuffer.State CommandBuffer.AvailablePointerKeys CommandBuffer.InRenderPass CommandBuffer.End() CommandBuffer.SetVertexBuffers(Buffer[]) CommandBuffer.SetVertexBuffer(uint, Buffer, uint) CommandBuffer.SetVertexBuffers(Buffer[], int[]) CommandBuffer.SetIndexBuffer(Buffer, IndexFormat, uint) CommandBuffer.SetGraphicsPipelineState(GraphicsPipelineState) CommandBuffer.SetComputePipelineState(ComputePipelineState) CommandBuffer.SetRaytracingPipelineState(RaytracingPipelineState) CommandBuffer.SetResourceSet(ResourceSet, uint, uint[]) CommandBuffer.BeginRenderPass(ref RenderPassDescription) CommandBuffer.EndRenderPass() CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint) CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint, uint) CommandBuffer.UpdateBufferData<T>(Buffer, ref T, uint) CommandBuffer.UpdateBufferData(Buffer, IntPtr, uint, uint) CommandBuffer.CopyBufferDataTo(Buffer, Buffer, uint, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, Texture) CommandBuffer.CopyTextureDataTo(Texture, Texture, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) CommandBuffer.Blit(Texture, Texture) CommandBuffer.Dispatch1D(uint, uint) CommandBuffer.Dispatch2D(uint, uint, uint, uint) CommandBuffer.Dispatch3D(uint, uint, uint, uint, uint, uint) CommandBuffer.GetNativePointer(string, out IntPtr) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLCommandBuffer : CommandBuffer, IDisposable, IGetNativePointers Constructors MTLCommandBuffer(MTLGraphicsContext, MTLCommandQueue) Initializes a new instance of the MTLCommandBuffer class. Declaration public MTLCommandBuffer(MTLGraphicsContext context, MTLCommandQueue queue) Parameters Type Name Description MTLGraphicsContext context Graphics Context. MTLCommandQueue queue The commandqueue for this commandbuffer. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides CommandBuffer.GraphicsContext Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandBuffer.Name Methods Begin() Set the initialize state for this commandbuffer. This function must be called before other graphics commands ca be issued. Declaration public override void Begin() Overrides CommandBuffer.Begin() BeginDebugMarker(string) Marks the beginning of a section of event code. This allows subsequent commands to be categorized and filtered when viewed in external debugging tools. Declaration public override void BeginDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.BeginDebugMarker(string) Remarks You call the EndDebugMarker method to mark the end of the section of event code. BeginDebugMarker has no effect if the calling application is not running under an enabled profiling tool. BeginQuery(QueryHeap, uint) Begins a GPU query. Declaration public override void BeginQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.BeginQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. BeginRenderPassInternal(ref RenderPassDescription) Begin a render pass. Declaration protected override void BeginRenderPassInternal(ref RenderPassDescription description) Parameters Type Name Description RenderPassDescription description The renderPass description RenderPassDescription. Overrides CommandBuffer.BeginRenderPassInternal(ref RenderPassDescription) Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain. Declaration protected override void Blit(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint layerCount The number of array layers to copy. Overrides CommandBuffer.Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) BuildRaytracingAccelerationStructure(BottomLevelASDescription) Perform an bottom level acceleration structure build on the GPU. Declaration public override BottomLevelAS BuildRaytracingAccelerationStructure(BottomLevelASDescription description) Parameters Type Name Description BottomLevelASDescription description Returns Type Description BottomLevelAS Bottom Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(BottomLevelASDescription) BuildRaytracingAccelerationStructure(TopLevelASDescription) Perform an top level acceleration structure build on the GPU. Declaration public override TopLevelAS BuildRaytracingAccelerationStructure(TopLevelASDescription description) Parameters Type Name Description TopLevelASDescription description Returns Type Description TopLevelAS Top Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(TopLevelASDescription) ClearCache() Clear all cached values of this command buffer... Declaration protected override void ClearCache() Overrides CommandBuffer.ClearCache() Commit() Commits this command buffer to the command queue waiting to be execute on GPU after Submit(). Declaration public override void Commit() Overrides CommandBuffer.Commit() CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration protected override void CopyBufferDataToInternal(Buffer origin, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer origin the origin buffer. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Overrides CommandBuffer.CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copies a region from this texture in other texture. Declaration protected override void CopyTextureDataToInternal(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint width The width in texels of the copy region. uint height The height in texels of the copy region. uint depth The depth in texels of the copy region. uint layerCount The number of array layers to copy. Overrides CommandBuffer.CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Dispatch(uint, uint, uint) Execute commands in a compute shader from a thread group. Declaration public override void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) Parameters Type Name Description uint threadGroupCountX uint threadGroupCountY uint threadGroupCountZ Overrides CommandBuffer.Dispatch(uint, uint, uint) Remarks You call the Dispatch method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z). DispatchIndirect(Buffer, uint) Execute a command list over one or more thread groups. Declaration public override void DispatchIndirect(Buffer argBuffer, uint offset) Parameters Type Name Description Buffer argBuffer A buffer which must be loaded with data that matches the argument list for Dispatch(uint, uint, uint). uint offset A byte-aligned offset between the start of the buffer and the arguments. Overrides CommandBuffer.DispatchIndirect(Buffer, uint) DispatchRays(DispatchRaysDescription) Launch threads of a ray generation shader. See Initiating raytracing for an overview. Can be called from graphics or compute command lists and bundles. Declaration public override void DispatchRays(DispatchRaysDescription description) Parameters Type Name Description DispatchRaysDescription description Dispatch rays description. Overrides CommandBuffer.DispatchRays(DispatchRaysDescription) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandBuffer.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Draw(uint, uint) Draw non-indexed, non-instanced primitives. Declaration public override void Draw(uint vertexCount, uint startVertexLocation = 0) Parameters Type Name Description uint vertexCount Number of vertices to draw. uint startVertexLocation Index of the first vertex, which is usually an offset in a vertex buffer. Overrides CommandBuffer.Draw(uint, uint) DrawIndexed(uint, uint, uint) Draw indexed, non-instanced primitives. Declaration public override void DrawIndexed(uint indexCount, uint startIndexLocation = 0, uint baseVertexLocation = 0) Parameters Type Name Description uint indexCount Number of indices to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. Overrides CommandBuffer.DrawIndexed(uint, uint, uint) DrawIndexedInstanced(uint, uint, uint, uint, uint) Draw indexed, instanced primitives. Declaration public override void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation = 0, uint baseVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint indexCountPerInstance Number of indices read from the index buffer for each instance. uint instanceCount Number of instances to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawIndexedInstanced(uint, uint, uint, uint, uint) DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) Draw indexed, instanced, GPU-generated primitives. Declaration public override void DrawIndexedInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) DrawInstanced(uint, uint, uint, uint) Draw non-indexed, instanced primitives. Declaration public override void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint vertexCountPerInstance Number of vertices to draw. uint instanceCount Number of instances to draw. uint startVertexLocation Index of the first vertex. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawInstanced(uint, uint, uint, uint) DrawInstancedIndirect(Buffer, uint, uint, uint) Draw instanced, GPU-generated primitives. Declaration public override void DrawInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawInstancedIndirect(Buffer, uint, uint, uint) EndDebugMarker() Marks the end of a section of event code. Declaration public override void EndDebugMarker() Overrides CommandBuffer.EndDebugMarker() Remarks EndDebugMarker has no effect if the calling application is not running under an enabled profiling tool. EndInternal() Completes the command buffer. Declaration protected override void EndInternal() Overrides CommandBuffer.EndInternal() EndQuery(QueryHeap, uint) Ends a GPU query. Declaration public override void EndQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.EndQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. EndRenderPassInternal() End a render pass. Declaration protected override void EndRenderPassInternal() Overrides CommandBuffer.EndRenderPassInternal() GenerateMipmaps(Texture) Generates mipmaps for the given Texture. The largest mipmap is used to generate all of the lower mipmap levels contained in the Texture. Declaration public override void GenerateMipmaps(Texture texture) Parameters Type Name Description Texture texture The Texture to generate mipmaps for. This Texture must have been created with TextureFlags.GenerateMipmaps. Overrides CommandBuffer.GenerateMipmaps(Texture) InsertDebugMarker(string) Marks a single point of execution in code. This is used by graphics debuggers to identify points of interest in a command stream. Declaration public override void InsertDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.InsertDebugMarker(string) Remarks InsertDebugMarker has no effect if the calling application is not running under an enabled profiling tool. Reset() Reset the command buffer to the initial state. Declaration public override void Reset() Overrides CommandBuffer.Reset() ResourceBarrierUnorderedAccessView(Buffer) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Buffer buffer) Parameters Type Name Description Buffer buffer The buffer. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Buffer) ResourceBarrierUnorderedAccessView(Texture) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Texture texture) Parameters Type Name Description Texture texture The texture. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Texture) SetComputePipelineStateInternal(ComputePipelineState) Sets the compute pipeline state object for this commandbuffer. Declaration protected override void SetComputePipelineStateInternal(ComputePipelineState pipeline) Parameters Type Name Description ComputePipelineState pipeline The compute pipeline state description. Overrides CommandBuffer.SetComputePipelineStateInternal(ComputePipelineState) SetGraphicsPipelineStateInternal(GraphicsPipelineState) Sets the graphics pipeline state object for this commandbuffer. Declaration protected override void SetGraphicsPipelineStateInternal(GraphicsPipelineState pipeline) Parameters Type Name Description GraphicsPipelineState pipeline The graphics pipeline state description. Overrides CommandBuffer.SetGraphicsPipelineStateInternal(GraphicsPipelineState) SetIndexBufferInternal(Buffer, IndexFormat, uint) Set an array of index buffers to the input-assembler stage. Declaration protected override void SetIndexBufferInternal(Buffer buffer, IndexFormat format, uint offset) Parameters Type Name Description Buffer buffer The buffer being bound. IndexFormat format Indices Data Type (Default UInt16). uint offset Offset (in bytes) from the start of the index buffer to the first index to use. Overrides CommandBuffer.SetIndexBufferInternal(Buffer, IndexFormat, uint) SetRaytracingPipelineStateInternal(RaytracingPipelineState) Sets the raytracing pipeline state object for this commandbuffer. Declaration protected override void SetRaytracingPipelineStateInternal(RaytracingPipelineState pipeline) Parameters Type Name Description RaytracingPipelineState pipeline The raytracing pipeline state description. Overrides CommandBuffer.SetRaytracingPipelineStateInternal(RaytracingPipelineState) SetResourceSetInternal(ResourceSet, uint, uint[]) Set the active ResourceSet for the given index. Declaration protected override void SetResourceSetInternal(ResourceSet resourceSet, uint index, uint[] constantBufferOffsets) Parameters Type Name Description ResourceSet resourceSet The new ResourceSet. uint index The resourceSet index. uint[] constantBufferOffsets Array of values specifying the constant buffer offsets. Overrides CommandBuffer.SetResourceSetInternal(ResourceSet, uint, uint[]) SetScissorRectangles(Rectangle[]) Set an scissor rectangle in a specific slot. Declaration public override void SetScissorRectangles(Rectangle[] rectangles) Parameters Type Name Description Rectangle[] rectangles The array of the scissor rectangles. Overrides CommandBuffer.SetScissorRectangles(Rectangle[]) SetVertexBufferInternal(uint, Buffer, uint) Set an buffers to the input-assembler stage. Declaration protected override void SetVertexBufferInternal(uint slot, Buffer buffer, uint offset = 0) Parameters Type Name Description uint slot The buffer slot. Buffer buffer The buffer being bound. uint offset Offset (in bytes) from the start of buffer to the first vertex to use. Overrides CommandBuffer.SetVertexBufferInternal(uint, Buffer, uint) SetVertexBuffersInternal(Buffer[], int[]) Set an array of buffers to the input-assembler stage. Declaration protected override void SetVertexBuffersInternal(Buffer[] buffers, int[] offsets) Parameters Type Name Description Buffer[] buffers The array of the vertex buffers being bound. int[] offsets Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use. Overrides CommandBuffer.SetVertexBuffersInternal(Buffer[], int[]) SetViewports(Viewport[]) Set a viewport in a specific slot. Declaration public override void SetViewports(Viewport[] viewports) Parameters Type Name Description Viewport[] viewports The array of the viewports. Overrides CommandBuffer.SetViewports(Viewport[]) UpdateBufferDataInternal(Buffer, nint, uint, uint) Fill the buffer from a pointer. Declaration protected override void UpdateBufferDataInternal(Buffer buffer, nint source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides CommandBuffer.UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) Refit an top level accelerations structure build on the GPU. Declaration public override void UpdateRaytracingAccelerationStructure(ref TopLevelAS tlas, TopLevelASDescription newDescription) Parameters Type Name Description TopLevelAS tlas Top level acceleration structure. TopLevelASDescription newDescription New top level description. Overrides CommandBuffer.UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) WriteTimestamp(QueryHeap, uint) Write a device timestamp into a query heap. Declaration public override void WriteTimestamp(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap. uint index The query index. Overrides CommandBuffer.WriteTimestamp(QueryHeap, uint) Remarks This method works only with timestamp queryheap type. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLCommandQueue.html": {
    "href": "api/Evergine.Metal.MTLCommandQueue.html",
    "title": "Class MTLCommandQueue | Evergine Doc",
    "keywords": "Class MTLCommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. Inheritance object CommandQueue MTLCommandQueue Implements IDisposable Inherited Members CommandQueue.CommandBufferArraySize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLCommandQueue : CommandQueue, IDisposable Constructors MTLCommandQueue(MTLGraphicsContext, CommandQueueType) Initializes a new instance of the MTLCommandQueue class. Declaration public MTLCommandQueue(MTLGraphicsContext context, CommandQueueType queueType) Parameters Type Name Description MTLGraphicsContext context The graphics context instance. CommandQueueType queueType The commandqueue elements type. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandQueue.Name Methods CommandBuffer() Gets the next CommandBuffer(). Declaration public override CommandBuffer CommandBuffer() Returns Type Description CommandBuffer The CommandBuffer. Overrides CommandQueue.CommandBuffer() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandQueue.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Submit() Submits a CommandBuffer list to be executed by the GPU. Declaration public override void Submit() Overrides CommandQueue.Submit() WaitIdle() Wait for all command buffers are executed. Declaration public override void WaitIdle() Overrides CommandQueue.WaitIdle() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLComputePipelineState.html": {
    "href": "api/Evergine.Metal.MTLComputePipelineState.html",
    "title": "Class MTLComputePipelineState | Evergine Doc",
    "keywords": "Class MTLComputePipelineState This class represents a native pipelineState on Metal. Inheritance object PipelineState ComputePipelineState MTLComputePipelineState Implements IDisposable Inherited Members ComputePipelineState.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLComputePipelineState : ComputePipelineState, IDisposable Constructors MTLComputePipelineState(MTLGraphicsContext, ref ComputePipelineDescription) Initializes a new instance of the MTLComputePipelineState class. Declaration public MTLComputePipelineState(MTLGraphicsContext context, ref ComputePipelineDescription description) Parameters Type Name Description MTLGraphicsContext context The graphics context. ComputePipelineDescription description The graphics pipeline state description. Fields ThreadsPerThreadgroup The threadgroup dimensions. Declaration public MTLSize ThreadsPerThreadgroup Field Value Type Description MTLSize Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ComputePipelineState.Name Methods Apply(MTLCommandBuffer) Apply only changes compare with the previous pipelineState. Declaration public void Apply(MTLCommandBuffer commandBuffer) Parameters Type Name Description MTLCommandBuffer commandBuffer The commandBuffer where apply this pipeline. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLExtensionsMethods.html": {
    "href": "api/Evergine.Metal.MTLExtensionsMethods.html",
    "title": "Class MTLExtensionsMethods | Evergine Doc",
    "keywords": "Class MTLExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. Inheritance object MTLExtensionsMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public static class MTLExtensionsMethods Methods FromMetal(MTLPixelFormat) Converts to Evergine pixel format. Declaration public static PixelFormat FromMetal(this MTLPixelFormat format) Parameters Type Name Description MTLPixelFormat format The format to convert. Returns Type Description PixelFormat The Evergine format. ToMetal(Blend) Converts to native blendfactor. Declaration public static MTLBlendFactor ToMetal(this Blend blend) Parameters Type Name Description Blend blend The value to convert. Returns Type Description MTLBlendFactor The native value. ToMetal(BlendOperation) Converts to native blend operation. Declaration public static MTLBlendOperation ToMetal(this BlendOperation operation) Parameters Type Name Description BlendOperation operation The value to convert. Returns Type Description MTLBlendOperation The native value. ToMetal(ComparisonFunction) Converts to metal compareFunction. Declaration public static MTLCompareFunction ToMetal(this ComparisonFunction function) Parameters Type Name Description ComparisonFunction function The value to convert. Returns Type Description MTLCompareFunction The native value. ToMetal(CullMode) Converts to native CullMode. Declaration public static MTLCullMode ToMetal(this CullMode cullMode) Parameters Type Name Description CullMode cullMode The value to convert. Returns Type Description MTLCullMode The native value. ToMetal(ElementFormat) To convert from VertexElementFormat to Metal format. Declaration public static MTLVertexFormat ToMetal(this ElementFormat format) Parameters Type Name Description ElementFormat format The format to convert. Returns Type Description MTLVertexFormat The result Metal format. ToMetal(PixelFormat, bool) Converts to native pixel format. Declaration public static MTLPixelFormat ToMetal(this PixelFormat format, bool depthFormat) Parameters Type Name Description PixelFormat format The format to convert. bool depthFormat Whether is a depth texture. Returns Type Description MTLPixelFormat The native Metal format. ToMetal(PrimitiveTopology) Converts to native primiteTopology. Declaration public static MTLPrimitiveType ToMetal(this PrimitiveTopology primitive) Parameters Type Name Description PrimitiveTopology primitive The primitive topology to converts. Returns Type Description MTLPrimitiveType The native primitive topology. ToMetal(SamplerBorderColor) Converts to native bordercolor. Declaration public static MTLSamplerBorderColor ToMetal(this SamplerBorderColor borderColor) Parameters Type Name Description SamplerBorderColor borderColor The value to convert. Returns Type Description MTLSamplerBorderColor The MTLSamplerBorderColor value. ToMetal(StencilOperation) Converts to native stencil operation. Declaration public static MTLStencilOperation ToMetal(this StencilOperation operation) Parameters Type Name Description StencilOperation operation The value to convert. Returns Type Description MTLStencilOperation The native value. ToMetal(TextureAddressMode) Converts to Metal sampler address mode. Declaration public static MTLSamplerAddressMode ToMetal(this TextureAddressMode addressMode) Parameters Type Name Description TextureAddressMode addressMode The address mode to convert. Returns Type Description MTLSamplerAddressMode The native addressMode. ToMetal(TextureFilter, out MTLSamplerMinMagFilter, out MTLSamplerMinMagFilter, out MTLSamplerMipFilter) Converts to native Vulkan minFilter, MagFilter and SamplerMipmapMode. Declaration public static void ToMetal(this TextureFilter filter, out MTLSamplerMinMagFilter minFilter, out MTLSamplerMinMagFilter magFilter, out MTLSamplerMipFilter mipmapMode) Parameters Type Name Description TextureFilter filter The texture filter to convert. MTLSamplerMinMagFilter minFilter The native minFilter. MTLSamplerMinMagFilter magFilter The native magFilter. MTLSamplerMipFilter mipmapMode The native mipmapMode. ToMetal(TextureSampleCount) To convert from TextureSampleCount to DirectX SampleDescription. Declaration public static nuint ToMetal(this TextureSampleCount sampleCount) Parameters Type Name Description TextureSampleCount sampleCount The TextureSampleCount to convert. Returns Type Description nuint The SampleDescription value. ToMetal(VertexStepFunction) Converts to Metal InputClassification enum. Declaration public static MTLVertexStepFunction ToMetal(this VertexStepFunction stepFunction) Parameters Type Name Description VertexStepFunction stepFunction The value to convert. Returns Type Description MTLVertexStepFunction The native value."
  },
  "api/Evergine.Metal.MTLFeatures.html": {
    "href": "api/Evergine.Metal.MTLFeatures.html",
    "title": "Class MTLFeatures | Evergine Doc",
    "keywords": "Class MTLFeatures This class contains a set of supported features of Metal device. Inheritance object MTLFeatures Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLFeatures Constructors MTLFeatures(IMTLDevice) Initializes a new instance of the MTLFeatures class. Declaration public MTLFeatures(IMTLDevice device) Parameters Type Name Description IMTLDevice device The native metal device. Properties IsMacOS Gets a value indicating whether the current platform is MacOS. Declaration public bool IsMacOS { get; } Property Value Type Description bool MaxFeatureSet Gets the set of supported features. Declaration public MTLGpuFamily MaxFeatureSet { get; } Property Value Type Description MTLGpuFamily Methods IsSupported(MTLGpuFamily) Whether a feature set is supported. Declaration public bool IsSupported(MTLGpuFamily gpuFamily) Parameters Type Name Description MTLGpuFamily gpuFamily The gpu family. Returns Type Description bool True if the gpu family is supported. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLFrameBuffer.html": {
    "href": "api/Evergine.Metal.MTLFrameBuffer.html",
    "title": "Class MTLFrameBuffer | Evergine Doc",
    "keywords": "Class MTLFrameBuffer This class represents a native FrameBuffer object on Metal. Inheritance object FrameBuffer MTLFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLFrameBuffer : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors MTLFrameBuffer(MTLGraphicsContext, FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the MTLFrameBuffer class. Declaration public MTLFrameBuffer(MTLGraphicsContext context, FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description MTLGraphicsContext context The graphics context. FrameBufferAttachment? depthTarget The depth texture which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color textures, all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Fields ColorTargetTextures The array of color target textures. Declaration public MTLTexture[] ColorTargetTextures Field Value Type Description MTLTexture[] DepthTargetTexture The depthtarget texture. Declaration public MTLTexture DepthTargetTexture Field Value Type Description MTLTexture Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name Methods Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLGraphicsContext.html": {
    "href": "api/Evergine.Metal.MTLGraphicsContext.html",
    "title": "Class MTLGraphicsContext | Evergine Doc",
    "keywords": "Class MTLGraphicsContext Graphics context on Metal2. Inheritance object GraphicsContext MTLGraphicsContext Implements IDisposable IGetNativePointers Inherited Members GraphicsContext.TimestampFrequency GraphicsContext.DefaultSampler GraphicsContext.ValidationLayer GraphicsContext.IsValidationLayerEnabled GraphicsContext.Factory GraphicsContext.AvailablePointerKeys GraphicsContext.DefaultTextureUploaderSize GraphicsContext.DefaultBufferUploaderSize GraphicsContext.CreateDevice(ValidationLayer) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint, uint) GraphicsContext.UpdateBufferData<T>(Buffer, ref T, uint) GraphicsContext.UpdateBufferData(Buffer, IntPtr, uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, ref T, uint) GraphicsContext.ShaderCompile(string, string, ShaderStages) GraphicsContext.GetNativePointer(string, out IntPtr) GraphicsContext.Dispose() GraphicsContext.CreateDefaultSampler() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLGraphicsContext : GraphicsContext, IDisposable, IGetNativePointers Constructors MTLGraphicsContext() Initializes a new instance of the MTLGraphicsContext class. Declaration public MTLGraphicsContext() Fields SupportedFeatures The set of supported features. Declaration public MTLFeatures SupportedFeatures Field Value Type Description MTLFeatures device The Metal device. Declaration public IMTLDevice device Field Value Type Description IMTLDevice Properties BackendType Gets the backend type (DirectX, OpenGL ...) Declaration public override GraphicsBackend BackendType { get; } Property Value Type Description GraphicsBackend Overrides GraphicsContext.BackendType Capabilities Gets the capabilities of this graphics context. Declaration public override GraphicsContextCapabilities Capabilities { get; } Property Value Type Description GraphicsContextCapabilities Overrides GraphicsContext.Capabilities NativeDevicePointer Gets the native device pointer. Declaration public override nint NativeDevicePointer { get; } Property Value Type Description IntPtr Overrides GraphicsContext.NativeDevicePointer Methods CreateDeviceInternal() Initialize the graphics context to be used in a compute shader. Declaration public override void CreateDeviceInternal() Overrides GraphicsContext.CreateDeviceInternal() CreateSwapChain(SwapChainDescription) Initialize the swapchain. Declaration public override SwapChain CreateSwapChain(SwapChainDescription description) Parameters Type Name Description SwapChainDescription description The swapchain descriptor. Returns Type Description SwapChain Created Swapchain. Overrides GraphicsContext.CreateSwapChain(SwapChainDescription) Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides GraphicsContext.Dispose(bool) GenerateTextureMipmapping(Texture) Generate mipmapping texture levels. Declaration public override bool GenerateTextureMipmapping(Texture texture) Parameters Type Name Description Texture texture The texture to generate mipmapping. Returns Type Description bool True if the mipmapping has been generated. Overrides GraphicsContext.GenerateTextureMipmapping(Texture) InternalUpdateBufferData(Buffer, nint, uint, uint) Fill the buffer from a pointer. Declaration protected override void InternalUpdateBufferData(Buffer buffer, nint source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides GraphicsContext.InternalUpdateBufferData(Buffer, IntPtr, uint, uint) MapMemory(GraphicsResource, MapMode, uint) Maps a Buffer or Texture into a CPU-accessible data region. Declaration public override MappedResource MapMemory(GraphicsResource resource, MapMode mode, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. MapMode mode The MapMode used to map the resource. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Returns Type Description MappedResource A MappedResource structure describing the mapped data region. Overrides GraphicsContext.MapMemory(GraphicsResource, MapMode, uint) ShaderCompile(string, string, ShaderStages, CompilerParameters) Converts the shader source into bytecode. Declaration public override CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader bytecodes. Overrides GraphicsContext.ShaderCompile(string, string, ShaderStages, CompilerParameters) SyncUpcopyQueue() Sync the current buffer data in the copyQueue. Internal function used in the uploadbuffer strategy. Declaration public override void SyncUpcopyQueue() Overrides GraphicsContext.SyncUpcopyQueue() UnmapMemory(GraphicsResource, uint) Invalidates a previously-mapped data region for the given Buffer or Texture. Declaration public override void UnmapMemory(GraphicsResource resource, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Overrides GraphicsContext.UnmapMemory(GraphicsResource, uint) UpdateTextureData(Texture, nint, uint, uint) Fill the buffer from a pointer. Declaration public override void UpdateTextureData(Texture texture, nint source, uint sourceSizeInBytes, uint subResource) Parameters Type Name Description Texture texture Texture instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subResource index. Overrides GraphicsContext.UpdateTextureData(Texture, IntPtr, uint, uint) Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLGraphicsPipelineState.html": {
    "href": "api/Evergine.Metal.MTLGraphicsPipelineState.html",
    "title": "Class MTLGraphicsPipelineState | Evergine Doc",
    "keywords": "Class MTLGraphicsPipelineState This class represents a native pipelineState on Metal. Inheritance object PipelineState GraphicsPipelineState MTLGraphicsPipelineState Implements IDisposable Inherited Members GraphicsPipelineState.Description GraphicsPipelineState.InvalidatedViewport object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLGraphicsPipelineState : GraphicsPipelineState, IDisposable Constructors MTLGraphicsPipelineState(MTLGraphicsContext, ref GraphicsPipelineDescription) Initializes a new instance of the MTLGraphicsPipelineState class. Declaration public MTLGraphicsPipelineState(MTLGraphicsContext context, ref GraphicsPipelineDescription description) Parameters Type Name Description MTLGraphicsContext context The graphics context. GraphicsPipelineDescription description The graphics pipeline state description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides GraphicsPipelineState.Name Methods Apply(MTLCommandBuffer, bool) Apply only changes compare with the previous pipelineState. Declaration public void Apply(MTLCommandBuffer commandBuffer, bool hasDepthStencil) Parameters Type Name Description MTLCommandBuffer commandBuffer The commandBuffer where apply this pipeline. bool hasDepthStencil Whether depth and stencil is ative. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLHelpers.html": {
    "href": "api/Evergine.Metal.MTLHelpers.html",
    "title": "Class MTLHelpers | Evergine Doc",
    "keywords": "Class MTLHelpers A set of Metal Helpers. Inheritance object MTLHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public static class MTLHelpers Methods IsStencilFormat(PixelFormat) Whether a format support stencil or not. Declaration public static bool IsStencilFormat(PixelFormat format) Parameters Type Name Description PixelFormat format The format to evaluate. Returns Type Description bool True if the format support stencil."
  },
  "api/Evergine.Metal.MTLQueryHeap.html": {
    "href": "api/Evergine.Metal.MTLQueryHeap.html",
    "title": "Class MTLQueryHeap | Evergine Doc",
    "keywords": "Class MTLQueryHeap Represents a Metal queryheap object. Inheritance object GraphicsResource QueryHeap MTLQueryHeap Implements IDisposable Inherited Members QueryHeap.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLQueryHeap : QueryHeap, IDisposable Constructors MTLQueryHeap(MTLGraphicsContext, ref QueryHeapDescription) Initializes a new instance of the MTLQueryHeap class. Declaration public MTLQueryHeap(MTLGraphicsContext context, ref QueryHeapDescription description) Parameters Type Name Description MTLGraphicsContext context The graphics context. QueryHeapDescription description The queryheap description. Properties NativePointer Gets the native pointer. Declaration public override nint NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ReadData(uint, uint, ulong[]) Extract data from one or more queries. Declaration public override bool ReadData(uint startIndex, uint count, ulong[] results) Parameters Type Name Description uint startIndex Specifies the index of the fist query to read. uint count Specifies the number of queries to read. ulong[] results ulong buffer with the extracted queries data. Returns Type Description bool Return true if all queries to read are available and false if not. Overrides QueryHeap.ReadData(uint, uint, ulong[]) Remarks If the result is false, the results will conttains the latest available results. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLResourceFactory.html": {
    "href": "api/Evergine.Metal.MTLResourceFactory.html",
    "title": "Class MTLResourceFactory | Evergine Doc",
    "keywords": "Class MTLResourceFactory The Metal version of the resource factory. Inheritance object ResourceFactory MTLResourceFactory Inherited Members ResourceFactory.CreateCommandQueue(CommandQueueType) ResourceFactory.CreateGraphicsPipeline(ref GraphicsPipelineDescription) ResourceFactory.CreateComputePipeline(ref ComputePipelineDescription) ResourceFactory.CreateRaytracingPipeline(ref RaytracingPipelineDescription) ResourceFactory.CreateTexture(ref TextureDescription, string) ResourceFactory.GetTextureFromNativePointer(IntPtr, ref TextureDescription) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, string) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, ref SamplerStateDescription, string) ResourceFactory.CreateBuffer(ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(T[], ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(ref T, ref BufferDescription, string) ResourceFactory.CreateBuffer(IntPtr, ref BufferDescription, string) ResourceFactory.CreateShader(ref ShaderDescription) ResourceFactory.CreateSamplerState(ref SamplerStateDescription) ResourceFactory.CreateFrameBuffer(uint, uint, PixelFormat, PixelFormat, string) ResourceFactory.CreateFrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) ResourceFactory.CreateResourceLayout(ref ResourceLayoutDescription) ResourceFactory.CreateResourceSet(ref ResourceSetDescription) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLResourceFactory : ResourceFactory Constructors MTLResourceFactory(MTLGraphicsContext) Initializes a new instance of the MTLResourceFactory class. Declaration public MTLResourceFactory(MTLGraphicsContext graphicsContext) Parameters Type Name Description MTLGraphicsContext graphicsContext The Graphics Context. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides ResourceFactory.GraphicsContext Methods CreateBufferInternal(nint, ref BufferDescription) Creates a Buffer instance. Declaration protected override Buffer CreateBufferInternal(nint data, ref BufferDescription description) Parameters Type Name Description IntPtr data Data pointer. BufferDescription description The index buffer description. Returns Type Description Buffer The new buffer. Overrides ResourceFactory.CreateBufferInternal(IntPtr, ref BufferDescription) CreateCommandQueueInternal(CommandQueueType) Creates a CommandQueue instance. Declaration protected override CommandQueue CreateCommandQueueInternal(CommandQueueType queueType) Parameters Type Name Description CommandQueueType queueType The commandQueue type, CommandQueueType. Returns Type Description CommandQueue The new commandQueue. Overrides ResourceFactory.CreateCommandQueueInternal(CommandQueueType) CreateComputePipelineInternal(ref ComputePipelineDescription) Creates a ComputePipelineState instance. Declaration protected override ComputePipelineState CreateComputePipelineInternal(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipelinestate description. Returns Type Description ComputePipelineState The new pipelinestate. Overrides ResourceFactory.CreateComputePipelineInternal(ref ComputePipelineDescription) CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) Create a FrameBuffer instance. Declaration protected override FrameBuffer CreateFrameBufferInternal(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTarget, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth FrameBufferAttachment which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTarget bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Returns Type Description FrameBuffer The new framebuffer. Overrides ResourceFactory.CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) Creates a GraphicsPipelineState instance. Declaration protected override GraphicsPipelineState CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphics pipelinestate description. Returns Type Description GraphicsPipelineState The new pipelinestate. Overrides ResourceFactory.CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) CreateQueryHeap(ref QueryHeapDescription) Create a QueryHeap instance. Declaration public override QueryHeap CreateQueryHeap(ref QueryHeapDescription description) Parameters Type Name Description QueryHeapDescription description The queryheap description. Returns Type Description QueryHeap The new queryheap. Overrides ResourceFactory.CreateQueryHeap(ref QueryHeapDescription) CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) Creates a RaytracingPipelineState instance. Declaration protected override RaytracingPipelineState CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipelinestate description. Returns Type Description RaytracingPipelineState The new pipelinestate. Overrides ResourceFactory.CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) CreateResourceLayoutInternal(ref ResourceLayoutDescription) Create a new ResourceLayout. Declaration protected override ResourceLayout CreateResourceLayoutInternal(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The descriptions for all elements in this new resourceLayout. Returns Type Description ResourceLayout A new resourceLayout object. Overrides ResourceFactory.CreateResourceLayoutInternal(ref ResourceLayoutDescription) CreateResourceSetInternal(ref ResourceSetDescription) Create a new ResourceSet. Declaration protected override ResourceSet CreateResourceSetInternal(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The descriptions for all elements in this new resourceSet. Returns Type Description ResourceSet A new resourceSet object. Overrides ResourceFactory.CreateResourceSetInternal(ref ResourceSetDescription) CreateSamplerStateInternal(ref SamplerStateDescription) Creates a SamplerState instance. Declaration protected override SamplerState CreateSamplerStateInternal(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. Returns Type Description SamplerState The new samplerstate. Overrides ResourceFactory.CreateSamplerStateInternal(ref SamplerStateDescription) CreateShaderInternal(ref ShaderDescription) Create a Shader instance. Declaration protected override Shader CreateShaderInternal(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. Returns Type Description Shader The new shader. Overrides ResourceFactory.CreateShaderInternal(ref ShaderDescription) CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) Creates a Texture instance. Declaration protected override Texture CreateTextureInternal(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The sampler state description SamplerStateDescription struct. Returns Type Description Texture The new texture. Overrides ResourceFactory.CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) GetTextureFromNativePointerInternal(nint, ref TextureDescription) Gets a Texture instance from an existing texture using the specified native pointer. Declaration protected override Texture GetTextureFromNativePointerInternal(nint texturePointer, ref TextureDescription textureDescription) Parameters Type Name Description IntPtr texturePointer The pointer of the texture. TextureDescription textureDescription The texture description of the already created texture. Returns Type Description Texture The texture instance. Overrides ResourceFactory.GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLResourceLayout.html": {
    "href": "api/Evergine.Metal.MTLResourceLayout.html",
    "title": "Class MTLResourceLayout | Evergine Doc",
    "keywords": "Class MTLResourceLayout The Metal implementation of the resourceLayout object. Inheritance object ResourceLayout MTLResourceLayout Implements IDisposable Inherited Members ResourceLayout.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLResourceLayout : ResourceLayout, IDisposable Constructors MTLResourceLayout(ref ResourceLayoutDescription) Initializes a new instance of the MTLResourceLayout class. Declaration public MTLResourceLayout(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The resourceSet description. Fields BufferCount The number of buffer in this resourceLayout. Declaration public uint BufferCount Field Value Type Description uint SamplerCount The number of samples in this resourceLayout. Declaration public uint SamplerCount Field Value Type Description uint TextureCount The number of textures in this resourceLayout. Declaration public uint TextureCount Field Value Type Description uint Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceLayout.Name Methods Dispose() Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceLayout.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLResourceSet.html": {
    "href": "api/Evergine.Metal.MTLResourceSet.html",
    "title": "Class MTLResourceSet | Evergine Doc",
    "keywords": "Class MTLResourceSet The Metal implementation of the resourceSet object. Inheritance object ResourceSet MTLResourceSet Implements IDisposable Inherited Members ResourceSet.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLResourceSet : ResourceSet, IDisposable Constructors MTLResourceSet(ref ResourceSetDescription) Initializes a new instance of the MTLResourceSet class. Declaration public MTLResourceSet(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The resourceSet description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceSet.Name Methods Dispose() /// Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceSet.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLSamplerState.html": {
    "href": "api/Evergine.Metal.MTLSamplerState.html",
    "title": "Class MTLSamplerState | Evergine Doc",
    "keywords": "Class MTLSamplerState This class represents the a Metal samplerState object. Inheritance object GraphicsResource SamplerState MTLSamplerState Implements ILoadable IDisposable IDependencyObject Inherited Members SamplerState.Id SamplerState.ReaderVersion SamplerState.Invalidated SamplerState.Dependencies SamplerState.Description SamplerState.Invalidate(ILoadable) SamplerState.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLSamplerState : SamplerState, ILoadable, IDisposable, IDependencyObject Constructors MTLSamplerState(GraphicsContext, ref SamplerStateDescription) Initializes a new instance of the MTLSamplerState class. Declaration public MTLSamplerState(GraphicsContext context, ref SamplerStateDescription description) Parameters Type Name Description GraphicsContext context The graphics context. GraphicsContext. SamplerStateDescription description The sampler state description. SamplerStateDescription. Fields NativeSampler The native sampler state. Declaration public readonly IMTLSamplerState NativeSampler Field Value Type Description IMTLSamplerState Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SamplerState.Name NativePointer Gets the native pointer. Declaration public override nint NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides SamplerState.Dispose() Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLShader.html": {
    "href": "api/Evergine.Metal.MTLShader.html",
    "title": "Class MTLShader | Evergine Doc",
    "keywords": "Class MTLShader This class represents a native shader object on Metal. Inheritance object GraphicsResource Shader MTLShader Implements IDisposable Inherited Members Shader.Description Shader.GetHashCode() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLShader : Shader, IDisposable Constructors MTLShader(GraphicsContext, ref ShaderDescription) Initializes a new instance of the MTLShader class. Declaration public MTLShader(GraphicsContext context, ref ShaderDescription description) Parameters Type Name Description GraphicsContext context The graphics context. ShaderDescription description The shader description. Fields Function The public shader function in the library. Declaration public IMTLFunction Function Field Value Type Description IMTLFunction Library A collection of Metal shader functions. Declaration public IMTLLibrary Library Field Value Type Description IMTLLibrary Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Shader.Name NativePointer Gets the native pointer. Declaration public override nint NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ShaderCompile(string, string, ShaderStages, CompilerParameters) Converts the shader source into bytecode. Declaration public static CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader bytecodes. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLSwapChain.html": {
    "href": "api/Evergine.Metal.MTLSwapChain.html",
    "title": "Class MTLSwapChain | Evergine Doc",
    "keywords": "Class MTLSwapChain This class represents a native swapchain object on Metal. Inheritance object SwapChain MTLSwapChain Implements IDisposable Inherited Members SwapChain.disposed SwapChain.GraphicsContext SwapChain.NativeSwapChainPointer SwapChain.SwapChainDescription SwapChain.FrameBuffer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLSwapChain : SwapChain, IDisposable Constructors MTLSwapChain(GraphicsContext, SwapChainDescription) Initializes a new instance of the MTLSwapChain class. Declaration public MTLSwapChain(GraphicsContext context, SwapChainDescription description) Parameters Type Name Description GraphicsContext context Graphics Context. SwapChainDescription description SwapChain description. Properties CurrentDrawable Gets the current CA Metal Drawable. Declaration public ICAMetalDrawable CurrentDrawable { get; } Property Value Type Description ICAMetalDrawable MetalLayer Gets the Core Animation metal layer. Declaration public CAMetalLayer MetalLayer { get; } Property Value Type Description CAMetalLayer Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SwapChain.Name RenderPassDescriptor Gets the Render pass descriptor. Declaration public MTLRenderPassDescriptor RenderPassDescriptor { get; } Property Value Type Description MTLRenderPassDescriptor VerticalSync Gets or sets a value indicating whether vertical synchronization is enable or not. Declaration public override bool VerticalSync { get; set; } Property Value Type Description bool Overrides SwapChain.VerticalSync Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides SwapChain.Dispose() GetCurrentFramebufferTexture() Gets the current Framebuffer Texture. Declaration public override Texture GetCurrentFramebufferTexture() Returns Type Description Texture Framebuffer texture. Overrides SwapChain.GetCurrentFramebufferTexture() InitFrame() This methid is invoked when the frame is start.. Declaration public override void InitFrame() Overrides SwapChain.InitFrame() Present() Presents a rendered image to the user. Declaration public override void Present() Overrides SwapChain.Present() RefreshSurfaceInfo(SurfaceInfo) The swapchain surface info has changed. Declaration public override void RefreshSurfaceInfo(SurfaceInfo surfaceInfo) Parameters Type Name Description SurfaceInfo surfaceInfo The surface info. Overrides SwapChain.RefreshSurfaceInfo(SurfaceInfo) ResizeSwapChain(uint, uint) Resize SwapChain. Declaration public override void ResizeSwapChain(uint width, uint height) Parameters Type Name Description uint width New width. uint height New height. Overrides SwapChain.ResizeSwapChain(uint, uint) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLSwapChainFrameBuffer.html": {
    "href": "api/Evergine.Metal.MTLSwapChainFrameBuffer.html",
    "title": "Class MTLSwapChainFrameBuffer | Evergine Doc",
    "keywords": "Class MTLSwapChainFrameBuffer This class represent the swapchain FrameBuffer on Metal. Inheritance object FrameBuffer MTLSwapChainFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLSwapChainFrameBuffer : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors MTLSwapChainFrameBuffer(MTLGraphicsContext, MTLSwapChain) Initializes a new instance of the MTLSwapChainFrameBuffer class. Declaration public MTLSwapChainFrameBuffer(MTLGraphicsContext context, MTLSwapChain swapchain) Parameters Type Name Description MTLGraphicsContext context The graphics context. MTLSwapChain swapchain The swapchain to create from. Fields DepthTargetTexture A depthTarget texture. Declaration public MTLTexture DepthTargetTexture Field Value Type Description MTLTexture Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name Methods Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Metal.MTLTexture.html": {
    "href": "api/Evergine.Metal.MTLTexture.html",
    "title": "Class MTLTexture | Evergine Doc",
    "keywords": "Class MTLTexture This class represents a native texture object on Metal. Inheritance object GraphicsResource Texture MTLTexture Implements ILoadable IDisposable IDependencyObject Inherited Members Texture.Id Texture.Description Texture.ReaderVersion Texture.Invalidated Texture.Dependencies Texture.Sampler Texture.CouldBeAttachedToFramebuffer Texture.Invalidate(ILoadable) Texture.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Metal Assembly: Evergine.Metal.dll Syntax public class MTLTexture : Texture, ILoadable, IDisposable, IDependencyObject Constructors MTLTexture(MTLGraphicsContext, DataBox[], ref TextureDescription) Initializes a new instance of the MTLTexture class. Declaration public MTLTexture(MTLGraphicsContext context, DataBox[] data, ref TextureDescription description) Parameters Type Name Description MTLGraphicsContext context The graphics context. DataBox[] data The data pointer. TextureDescription description The texture description. MTLTexture(MTLGraphicsContext, DataBox[], ref TextureDescription, ref SamplerStateDescription) Initializes a new instance of the MTLTexture class. Declaration public MTLTexture(MTLGraphicsContext context, DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description MTLGraphicsContext context The graphics context. DataBox[] data The data pointer. TextureDescription description The texture description. SamplerStateDescription samplerState the sampler state description for this texture. Fields NativeBuffer The native buffer object for staging textures. Declaration public IMTLBuffer NativeBuffer Field Value Type Description IMTLBuffer NativeTexture The native texture object. Declaration public IMTLTexture NativeTexture Field Value Type Description IMTLTexture PixelFormat The native pixelformat of this texture. Declaration public MTLPixelFormat PixelFormat Field Value Type Description MTLPixelFormat Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Texture.Name NativePointer Gets the native pointer. Declaration public override nint NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods CopyTo(IMTLBlitCommandEncoder, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copy a pixel region from source to destination texture. Declaration public void CopyTo(IMTLBlitCommandEncoder commandBuffer, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBaseArray, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArray, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description IMTLBlitCommandEncoder commandBuffer The copy commandbuffer. uint sourceX U coord source texture. uint sourceY V coord source texture. uint sourceZ W coord source texture. uint sourceMipLevel Source mip level. uint sourceBaseArray Source array index. Texture destination Destination texture. uint destinationX U coord destination texture. uint destinationY V coord destination texture. uint destinationZ W coord destination texture. uint destinationMipLevel Destination mip level. uint destinationBasedArray Destination array index. uint width Destination width. uint height Destination heigh. uint depth Destination depth. uint layerCount Destination layer count. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides Texture.Dispose() FromMetalImage(MTLGraphicsContext, ref TextureDescription, IMTLTexture) Create a new texture from a MTLTexture. Declaration public static MTLTexture FromMetalImage(MTLGraphicsContext context, ref TextureDescription description, IMTLTexture image) Parameters Type Name Description MTLGraphicsContext context The graphics context. TextureDescription description The texture description. IMTLTexture image The metal image already created. Returns Type Description MTLTexture A new VKTexture. SetData(IMTLBlitCommandEncoder, nint, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(IMTLBlitCommandEncoder commandBuffer, nint source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description IMTLBlitCommandEncoder commandBuffer The copy commandbuffer. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subresource index. ToStaging() Return a new Buffer with ResourceUsage set to staging. Declaration public MTLTexture ToStaging() Returns Type Description MTLTexture New staging Buffer. Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Client.ClientStates.html": {
    "href": "api/Evergine.Networking.Client.ClientStates.html",
    "title": "Enum ClientStates | Evergine Doc",
    "keywords": "Enum ClientStates State values for a client. Namespace: Evergine.Networking.Client Assembly: Evergine.Networking.dll Syntax public enum ClientStates Fields Name Description Disconnected The client is no longer connected (to any server). Connect to a server to go on. InLobby Connected to a matchmaking server. You might use matchmaking now. Joined The client entered a room. The CurrentRoom and Players are known and you can now raise events. Joining Transition state while joining or creating a room on the server. Leaving Transition state when leaving a room. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Client.html": {
    "href": "api/Evergine.Networking.Client.html",
    "title": "Namespace Evergine.Networking.Client | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Client Classes MatchmakingClientService The client service for matchmaking. MessageFromPlayerEventArgs Represents the arguments of the message received from player event. Enums ClientStates State values for a client."
  },
  "api/Evergine.Networking.Client.MatchmakingClientService.html": {
    "href": "api/Evergine.Networking.Client.MatchmakingClientService.html",
    "title": "Class MatchmakingClientService | Evergine Doc",
    "keywords": "Class MatchmakingClientService The client service for matchmaking. Inheritance object IdentifiableObject DependencyObject AttachableObject Service UpdatableService MatchmakingClientService Implements IDependencyObject Inherited Members Service.OnLoaded() Service.OnAttached() Service.OnActivated() Service.Start() Service.OnDeactivated() Service.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Client Assembly: Evergine.Networking.dll Syntax public class MatchmakingClientService : UpdatableService, IDependencyObject Constructors MatchmakingClientService() Initializes a new instance of the MatchmakingClientService class. Declaration public MatchmakingClientService() Properties ApplicationIdentifier Gets or sets the application Identifier. Used by the matchmaking server to separate players by different game. Declaration public string ApplicationIdentifier { get; set; } Property Value Type Description string ClientApplicationVersion Gets or sets the version of your client. A new version also creates a new \"virtual app\" to separate players from older client versions. Declaration public string ClientApplicationVersion { get; set; } Property Value Type Description string ClientState Gets the current state this client is in. Careful: several states are \"transitions\" that lead to other states. Declaration public ClientStates ClientState { get; } Property Value Type Description ClientStates ConnectionTimeout Gets or sets the connection timeout. Default value is 25 seconds. Declaration public TimeSpan ConnectionTimeout { get; set; } Property Value Type Description TimeSpan CurrentRoom Gets the current room this client is connected to (null if none available). Declaration public LocalNetworkRoom CurrentRoom { get; } Property Value Type Description LocalNetworkRoom IsConnected Gets a value indicating whether this client is currently connected or connecting to the matchmaking server. Declaration public bool IsConnected { get; } Property Value Type Description bool Remarks This is even true while switching servers. Use IsConnectedAndReady to check only for those states that enable you to send Operations. IsConnectedAndReady Gets a value indicating whether your connection to the matchmaking server is ready to accept operations. Declaration public bool IsConnectedAndReady { get; } Property Value Type Description bool LocalPlayer Gets the local player is never null but not valid unless the client is in a room, too. The ID will be -1 outside of rooms. Declaration public LocalNetworkPlayer LocalPlayer { get; } Property Value Type Description LocalNetworkPlayer NetworkFactory Gets or sets the factory used to create the INetworkClient peer. Declaration public INetworkFactory NetworkFactory { get; set; } Property Value Type Description INetworkFactory PingInterval Gets or sets the ping interval. Default value is 4 seconds. Declaration public TimeSpan PingInterval { get; set; } Property Value Type Description TimeSpan RoomsInLobby Gets a \"list\" that is populated while being in the lobby. Declaration public IEnumerable<RoomInfo> RoomsInLobby { get; } Property Value Type Description IEnumerable<RoomInfo> Methods ConnectAsync(NetworkEndpoint) Connects the client to the specified matchmaking server asynchronously. Declaration public Task<bool> ConnectAsync(NetworkEndpoint serverEndpoint) Parameters Type Name Description NetworkEndpoint serverEndpoint The matchmaking server endpoint. Returns Type Description Task<bool> An a value indicating whether the connection was succeed or not. Exceptions Type Condition InvalidOperationException You can't call Connect method while is connected to a matchmaking server. Call before to Disconnect() method. or ApplicationIdentifier must have a valid value before trying to connect. CreateMessage() Creates a new outgoing message. Declaration public OutgoingMessage CreateMessage() Returns Type Description OutgoingMessage The create outgoing message. CreateRoomAsync(RoomOptions) Creates a new room on the server (or fails if the name is already in use). Declaration public Task<EnterRoomResultCodes> CreateRoomAsync(RoomOptions options) Parameters Type Name Description RoomOptions options Contains the parameters and properties of the new room. See RoomOptions class for a description of each. Returns Type Description Task<EnterRoomResultCodes> A value indicating if the operation was successful (requires connection to matchmaking server). Remarks If you don't want to create a unique room-name, pass null or \"\" as name and the server will assign a roomName (a GUID as string). Room names are unique. This method can only be called while the client is connected to a matchmaking server. You should check IsConnectedAndReady before calling this method. Alternatively, check the returned boolean value. Even when sent, the Operation will fail (on the server) if the roomName is in use. While the matchmaking server is creating the game, the State will be Joining. The state Joining is used because the client is on the way to enter a room (no matter if joining or creating). It's set immediately when this method sends the Operation. If successful, the client will enter the room. When you're in the room, this client's State will become Joined (both, for joining or creating it). Subscribe to ClientStateChanged event to check for states. When entering the room, this client's Player Custom Properties will be sent to the room. Use CustomProperties to set them, even while not yet in the room. Note that the player properties will be cached locally and sent to any next room you would join, too. Disconnect() Disconnects this client from any matchmaking server and sets the ClientState if the connection is successfully closed. Declaration public void Disconnect() DiscoverServers(int) Starts the process to discover servers in the local network with the same ApplicationIdentifier, ClientApplicationVersion and port. Register to ServerDiscovered event to be know about discovered servers. Declaration public void DiscoverServers(int port) Parameters Type Name Description int port The port. Exceptions Type Condition InvalidOperationException ApplicationIdentifier must have a valid value before trying to connect. or You can't call discovery method while is connected to a matchmaking server. Call before to Disconnect() method. JoinOrCreateRoomAsync(RoomOptions) Joins a specific room by name. If the room does not exist (yet), it will be created implicitly. Declaration public Task<EnterRoomResultCodes> JoinOrCreateRoomAsync(RoomOptions options) Parameters Type Name Description RoomOptions options Contains the parameters and properties of the new room. See RoomOptions class for a description of each. Returns Type Description Task<EnterRoomResultCodes> A value indicating if the operation was successful (requires connection to matchmaking server). Remarks Unlike JoinRoomAsync(string), this operation does not fail if the room does not exist. This can be useful when you send invitations to a room before actually creating it: Any invited player (whoever is first) can call this and on demand, the room gets created implicitly. If you set room properties in RoomOptions, they get ignored when the room is existing already. This avoids changing the room properties by late joining players. Only when the room gets created, the RoomOptions are set in this case. If the room is full or closed, this will fail. This method can only be called while the client is connected to a server. You should check IsConnectedAndReady before calling this method. Alternatively, check the returned boolean value. While the server is joining the game, the State will be Joining. It's set immediately when this method sends the Operation. If successful, the client will enter the room. When you're in the room, this client's State will become Joined (both, for joining or creating it). Subscribe to ClientStateChanged event to check for states. When entering the room, this client's Player Custom Properties will be sent to the room. Use CustomProperties to set them, even while not yet in the room. Note that the player properties will be cached locally and sent to any next room you would join, too. JoinRoomAsync(string) Joins a room by roomName. Useful when using room lists in lobby or when you know the name otherwise. Declaration public Task<EnterRoomResultCodes> JoinRoomAsync(string name) Parameters Type Name Description string name The name of the room to join. Must be existing already, open and non-full or can't be joined. Returns Type Description Task<EnterRoomResultCodes> A value indicating if the operation was successful (requires connection to matchmaking server). Remarks This method is useful when you are using a lobby to list rooms and know their names. A room's name has to be unique (per game version). If the room is full, closed or not existing, this will fail. This method can only be called while the client is connected to a matchmaking server. You should check IsConnectedAndReady before calling this method. Alternatively, check the returned boolean value. While the matchmaking server is creating the game, the State will be Joining. The state Joining is used because the client is on the way to enter a room (no matter if joining or creating). It's set immediately when this method sends the Operation. If successful, the client will enter the room. When you're in the room, this client's State will become Joined (both, for joining or creating it). Subscribe to ClientStateChanged event to check for states. When joining a room, this client's Player Custom Properties will be sent to the room. Use CustomProperties to set them, even while not yet in the room. Note that the player properties will be cached locally and sent to any next room you would join, too. It's usually better to use JoinOrCreateRoomAsync(RoomOptions) for invitations. Then it does not matter if the room is already setup. LeaveRoom() Leaves the CurrentRoom and returns to the lobby. Declaration public bool LeaveRoom() Returns Type Description bool If the current room could be left (impossible while not in a room). OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Services.Service.OnDetach() SendToCurrentRoom(OutgoingMessage, DeliveryMethod) Sends a user data message to the all remote players in the current room. Declaration public bool SendToCurrentRoom(OutgoingMessage messageToSend, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage messageToSend The message to be sent. DeliveryMethod deliveryMethod The delivery method. Returns Type Description bool If the message can be sent to the current room (impossible while not in a room). SendToPlayer(OutgoingMessage, RemoteNetworkPlayer, DeliveryMethod) Sends a user data message to the a remote player in the current room. Declaration public bool SendToPlayer(OutgoingMessage messageToSend, RemoteNetworkPlayer remotePlayer, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage messageToSend The message to be sent. RemoteNetworkPlayer remotePlayer The remote player that should receive the message. DeliveryMethod deliveryMethod The delivery method. Returns Type Description bool If the message can be sent to the current room (impossible while not in a room). SendToServer(OutgoingMessage, DeliveryMethod) Sends a user data message to the matchmaking server. Declaration public void SendToServer(OutgoingMessage messageToSend, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage messageToSend The message to be sent. DeliveryMethod deliveryMethod The delivery method. Update(TimeSpan) Updates this instance. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed game time since the last update. Overrides UpdatableService.Update(TimeSpan) Events ClientStateChanged Occurs when this client's State is changed. Declaration public event EventHandler<ClientStates> ClientStateChanged Event Type Type Description EventHandler<ClientStates> Remarks This can be useful to react to being connected, joined into a room, etc. CurrentRoomSynchronized Occurs when a the current room is refreshed. Declaration public event EventHandler CurrentRoomSynchronized Event Type Type Description EventHandler Remarks This occurs only when the client is in the room. MessageReceivedFromCurrentRoom Occurs when a user data message from the current room is received by the client. Declaration public event EventHandler<MessageFromPlayerEventArgs> MessageReceivedFromCurrentRoom Event Type Type Description EventHandler<MessageFromPlayerEventArgs> Remarks This occurs only when the client is in a room. MessageReceivedFromPlayer Occurs when a user data message from a player in the same room is received by the client. Declaration public event EventHandler<MessageFromPlayerEventArgs> MessageReceivedFromPlayer Event Type Type Description EventHandler<MessageFromPlayerEventArgs> Remarks This occurs only when the client is in a room. MessageReceivedFromServer Occurs when a user data message from the matchmaking server is received by the client. Declaration public event EventHandler<MessageReceivedEventArgs> MessageReceivedFromServer Event Type Type Description EventHandler<MessageReceivedEventArgs> RoomsInLobbySynchronized Occurs when a the Room Info list is refreshed. Declaration public event EventHandler RoomsInLobbySynchronized Event Type Type Description EventHandler Remarks This occurs only when the client is in the lobby. This can be useful to refresh a list of available rooms. ServerDiscovered Occurs when a new matchmaking server with the same ApplicationIdentifier and ClientApplicationVersion is discovered. Occurs when a new matchmaking server is discovered Declaration public event EventHandler<HostDiscoveredEventArgs> ServerDiscovered Event Type Type Description EventHandler<HostDiscoveredEventArgs> Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Client.MessageFromPlayerEventArgs.html": {
    "href": "api/Evergine.Networking.Client.MessageFromPlayerEventArgs.html",
    "title": "Class MessageFromPlayerEventArgs | Evergine Doc",
    "keywords": "Class MessageFromPlayerEventArgs Represents the arguments of the message received from player event. Inheritance object EventArgs MessageFromPlayerEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Client Assembly: Evergine.Networking.dll Syntax public class MessageFromPlayerEventArgs : EventArgs Constructors MessageFromPlayerEventArgs(RemoteNetworkPlayer, IncomingMessage) Initializes a new instance of the MessageFromPlayerEventArgs class. Declaration public MessageFromPlayerEventArgs(RemoteNetworkPlayer fromPlayer, IncomingMessage receivedMessage) Parameters Type Name Description RemoteNetworkPlayer fromPlayer The players that sent the message. IncomingMessage receivedMessage The received message. Properties FromPlayer Gets the sender player. Declaration public RemoteNetworkPlayer FromPlayer { get; } Property Value Type Description RemoteNetworkPlayer ReceivedMessage Gets the received message. Declaration public IncomingMessage ReceivedMessage { get; } Property Value Type Description IncomingMessage Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Client.Players.html": {
    "href": "api/Evergine.Networking.Client.Players.html",
    "title": "Namespace Evergine.Networking.Client.Players | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Client.Players Classes LocalNetworkPlayer This class represents the local player in the clients. RemoteNetworkPlayer This class represents the remote players in the clients."
  },
  "api/Evergine.Networking.Client.Players.LocalNetworkPlayer.html": {
    "href": "api/Evergine.Networking.Client.Players.LocalNetworkPlayer.html",
    "title": "Class LocalNetworkPlayer | Evergine Doc",
    "keywords": "Class LocalNetworkPlayer This class represents the local player in the clients. Inheritance object BaseNetworkPlayer BaseSyncNetworkPlayer LocalNetworkPlayer Implements INetworkPlayer Inherited Members BaseSyncNetworkPlayer.Nickname BaseNetworkPlayer.Id BaseNetworkPlayer.CustomProperties BaseNetworkPlayer.TagObject BaseNetworkPlayer.IsMasterClient BaseNetworkPlayer.IsInLobby BaseNetworkPlayer.IsLocalPlayer BaseNetworkPlayer.OnNicknameChanged BaseNetworkPlayer.OnCustomPropertiesChanged BaseNetworkPlayer.WriteToMessage(OutgoingMessage, BaseNetworkPlayer.PlayerFliedsFlags) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Client.Players Assembly: Evergine.Networking.dll Syntax public class LocalNetworkPlayer : BaseSyncNetworkPlayer, INetworkPlayer Constructors LocalNetworkPlayer() Initializes a new instance of the LocalNetworkPlayer class. Declaration public LocalNetworkPlayer() Properties Endpoint Gets the network endpoint of the local player. Declaration public NetworkEndpoint Endpoint { get; } Property Value Type Description NetworkEndpoint Room Gets the room where is the player. It is null if the player is in the lobby. Declaration public LocalNetworkRoom Room { get; } Property Value Type Description LocalNetworkRoom Implements INetworkPlayer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Client.Players.RemoteNetworkPlayer.html": {
    "href": "api/Evergine.Networking.Client.Players.RemoteNetworkPlayer.html",
    "title": "Class RemoteNetworkPlayer | Evergine Doc",
    "keywords": "Class RemoteNetworkPlayer This class represents the remote players in the clients. Inheritance object BaseNetworkPlayer RemoteNetworkPlayer Implements INetworkPlayer Inherited Members BaseNetworkPlayer.Id BaseNetworkPlayer.Nickname BaseNetworkPlayer.CustomProperties BaseNetworkPlayer.TagObject BaseNetworkPlayer.IsMasterClient BaseNetworkPlayer.IsInLobby BaseNetworkPlayer.IsLocalPlayer BaseNetworkPlayer.Room BaseNetworkPlayer.OnNicknameChanged BaseNetworkPlayer.OnCustomPropertiesChanged BaseNetworkPlayer.WriteToMessage(OutgoingMessage, BaseNetworkPlayer.PlayerFliedsFlags) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Client.Players Assembly: Evergine.Networking.dll Syntax public class RemoteNetworkPlayer : BaseNetworkPlayer, INetworkPlayer Fields matchmakingClientService A reference to the MatchmakingClientService which is currently keeping the connection and state. Declaration protected MatchmakingClientService matchmakingClientService Field Value Type Description MatchmakingClientService Implements INetworkPlayer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.html": {
    "href": "api/Evergine.Networking.Components.html",
    "title": "Namespace Evergine.Networking.Components | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Components Classes NetworkBooleanPropertySync<K> Provides an abstraction to track changes on a bool property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkByteArrayPropertySync<K> Provides an abstraction to track changes on a byte array property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkBytePropertySync<K> Provides an abstraction to track changes on a byte property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkColorPropertySync<K> Provides an abstraction to track changes on a Color property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkCustomPropertiesProvider Provides the NetworkPropertiesTable neccessary for NetworkPropertySync<K, V> components. NetworkDateTimePropertySync<K> Provides an abstraction to track changes on a DateTime property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkEndpointPropertySync<K> Provides an abstraction to track changes on a NetworkEndpoint property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkFloatPropertySync<K> Provides an abstraction to track changes on a float property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkIntegerPropertySync<K> Provides an abstraction to track changes on a int property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkLongIntegerPropertySync<K> Provides an abstraction to track changes on a long property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkMatrix3x3PropertySync<K> Provides an abstraction to track changes on a Matrix3x3 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkMatrix4x4PropertySync<K> Provides an abstraction to track changes on a Matrix3x3 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkPlayerProvider Provides the INetworkPlayer and its CustomProperties neccessary for NetworkPropertySync<K, V> components. NetworkPropertySync<K, V> Provides an abstraction to track changes on a property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. This class simplifies the access to the property value with the methods ReadValue(NetworkPropertiesTable) and WriteValue(NetworkPropertiesTable, V). NetworkQuaternionPropertySync<K> Provides an abstraction to track changes on a Quaternion property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkRoomProvider Provides CustomProperties of the current room neccessary for NetworkPropertySync<K, V> components. NetworkSerializablePropertySync<K, V> Provides an abstraction to track changes on a bool property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkStringPropertySync<K> Provides an abstraction to track changes on a string property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkTimeSpanPropertySync<K> Provides an abstraction to track changes on a TimeSpan property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkVector2PropertySync<K> Provides an abstraction to track changes on a Vector2 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkVector3PropertySync<K> Provides an abstraction to track changes on a Vector3 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. NetworkVector4PropertySync<K> Provides an abstraction to track changes on a Vector4 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Enums NetworkPropertyProviderFilter Defines the available filters to be used during NetworkCustomPropertiesProvider dependency resolution."
  },
  "api/Evergine.Networking.Components.NetworkBooleanPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkBooleanPropertySync-1.html",
    "title": "Class NetworkBooleanPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkBooleanPropertySync<K> Provides an abstraction to track changes on a bool property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, bool> NetworkBooleanPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, bool>.propertiesTableProvider NetworkPropertySync<K, bool>.PropertyKeyByte NetworkPropertySync<K, bool>.PropertyKey NetworkPropertySync<K, bool>.IsReady NetworkPropertySync<K, bool>.IsLocalPlayerProvider NetworkPropertySync<K, bool>.ProviderFilter NetworkPropertySync<K, bool>.HasValue NetworkPropertySync<K, bool>.PropertyValue NetworkPropertySync<K, bool>.OnAttached() NetworkPropertySync<K, bool>.OnActivated() NetworkPropertySync<K, bool>.OnDeactivated() NetworkPropertySync<K, bool>.OnDetach() NetworkPropertySync<K, bool>.OnPropertyReadyToSet() NetworkPropertySync<K, bool>.OnPropertyAddedOrChanged() NetworkPropertySync<K, bool>.OnPropertyRemoved() NetworkPropertySync<K, bool>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, bool>.WriteValue(NetworkPropertiesTable, bool) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkBooleanPropertySync<K> : NetworkPropertySync<K, bool>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override bool ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description bool The property value. Overrides NetworkPropertySync<K, bool>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, bool) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, bool value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. bool value The value to write. Overrides NetworkPropertySync<K, bool>.WriteValue(NetworkPropertiesTable, bool) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkByteArrayPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkByteArrayPropertySync-1.html",
    "title": "Class NetworkByteArrayPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkByteArrayPropertySync<K> Provides an abstraction to track changes on a byte array property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, byte[]> NetworkByteArrayPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, byte[]>.propertiesTableProvider NetworkPropertySync<K, byte[]>.PropertyKeyByte NetworkPropertySync<K, byte[]>.PropertyKey NetworkPropertySync<K, byte[]>.IsReady NetworkPropertySync<K, byte[]>.IsLocalPlayerProvider NetworkPropertySync<K, byte[]>.ProviderFilter NetworkPropertySync<K, byte[]>.HasValue NetworkPropertySync<K, byte[]>.PropertyValue NetworkPropertySync<K, byte[]>.OnAttached() NetworkPropertySync<K, byte[]>.OnActivated() NetworkPropertySync<K, byte[]>.OnDeactivated() NetworkPropertySync<K, byte[]>.OnDetach() NetworkPropertySync<K, byte[]>.OnPropertyReadyToSet() NetworkPropertySync<K, byte[]>.OnPropertyAddedOrChanged() NetworkPropertySync<K, byte[]>.OnPropertyRemoved() NetworkPropertySync<K, byte[]>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, byte[]>.WriteValue(NetworkPropertiesTable, byte[]) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkByteArrayPropertySync<K> : NetworkPropertySync<K, byte[]>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override byte[] ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description byte[] The property value. Overrides NetworkPropertySync<K, byte[]>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, byte[]) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, byte[] value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. byte[] value The value to write. Overrides NetworkPropertySync<K, byte[]>.WriteValue(NetworkPropertiesTable, byte[]) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkBytePropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkBytePropertySync-1.html",
    "title": "Class NetworkBytePropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkBytePropertySync<K> Provides an abstraction to track changes on a byte property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, byte> NetworkBytePropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, byte>.propertiesTableProvider NetworkPropertySync<K, byte>.PropertyKeyByte NetworkPropertySync<K, byte>.PropertyKey NetworkPropertySync<K, byte>.IsReady NetworkPropertySync<K, byte>.IsLocalPlayerProvider NetworkPropertySync<K, byte>.ProviderFilter NetworkPropertySync<K, byte>.HasValue NetworkPropertySync<K, byte>.PropertyValue NetworkPropertySync<K, byte>.OnAttached() NetworkPropertySync<K, byte>.OnActivated() NetworkPropertySync<K, byte>.OnDeactivated() NetworkPropertySync<K, byte>.OnDetach() NetworkPropertySync<K, byte>.OnPropertyReadyToSet() NetworkPropertySync<K, byte>.OnPropertyAddedOrChanged() NetworkPropertySync<K, byte>.OnPropertyRemoved() NetworkPropertySync<K, byte>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, byte>.WriteValue(NetworkPropertiesTable, byte) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkBytePropertySync<K> : NetworkPropertySync<K, byte>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override byte ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description byte The property value. Overrides NetworkPropertySync<K, byte>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, byte) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, byte value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. byte value The value to write. Overrides NetworkPropertySync<K, byte>.WriteValue(NetworkPropertiesTable, byte) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkColorPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkColorPropertySync-1.html",
    "title": "Class NetworkColorPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkColorPropertySync<K> Provides an abstraction to track changes on a Color property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, Color> NetworkColorPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, Color>.propertiesTableProvider NetworkPropertySync<K, Color>.PropertyKeyByte NetworkPropertySync<K, Color>.PropertyKey NetworkPropertySync<K, Color>.IsReady NetworkPropertySync<K, Color>.IsLocalPlayerProvider NetworkPropertySync<K, Color>.ProviderFilter NetworkPropertySync<K, Color>.HasValue NetworkPropertySync<K, Color>.PropertyValue NetworkPropertySync<K, Color>.OnAttached() NetworkPropertySync<K, Color>.OnActivated() NetworkPropertySync<K, Color>.OnDeactivated() NetworkPropertySync<K, Color>.OnDetach() NetworkPropertySync<K, Color>.OnPropertyReadyToSet() NetworkPropertySync<K, Color>.OnPropertyAddedOrChanged() NetworkPropertySync<K, Color>.OnPropertyRemoved() NetworkPropertySync<K, Color>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, Color>.WriteValue(NetworkPropertiesTable, Color) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkColorPropertySync<K> : NetworkPropertySync<K, Color>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override Color ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description Color The property value. Overrides NetworkPropertySync<K, Color>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, Color) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, Color value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Color value The value to write. Overrides NetworkPropertySync<K, Color>.WriteValue(NetworkPropertiesTable, Color) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkCustomPropertiesProvider.html": {
    "href": "api/Evergine.Networking.Components.NetworkCustomPropertiesProvider.html",
    "title": "Class NetworkCustomPropertiesProvider | Evergine Doc",
    "keywords": "Class NetworkCustomPropertiesProvider Provides the NetworkPropertiesTable neccessary for NetworkPropertySync<K, V> components. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkCustomPropertiesProvider NetworkPlayerProvider NetworkRoomProvider Implements IDependencyObject IDisposable Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkCustomPropertiesProvider : Component, IDependencyObject, IDisposable Properties CustomProperties Gets the NetworkPropertiesTable. Declaration public NetworkPropertiesTable CustomProperties { get; } Property Value Type Description NetworkPropertiesTable Methods CheckMultipleProvidersOfType<T>() Checks if there is more than one provider of type T in the Evergine.Framework.Component.Owner entity and raises an exception in that case. Declaration protected void CheckMultipleProvidersOfType<T>() where T : NetworkCustomPropertiesProvider Type Parameters Name Description T The NetworkCustomPropertiesProvider type to be checked. Dispose() Declaration public void Dispose() GetCustomProperties(MatchmakingClientService) Gets the NetworkPropertiesTable instance. Declaration protected abstract NetworkPropertiesTable GetCustomProperties(MatchmakingClientService matchmakingClientService) Parameters Type Name Description MatchmakingClientService matchmakingClientService The MatchmakingClientService reference. Returns Type Description NetworkPropertiesTable The NetworkPropertiesTable instance. OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() UpdateCustomPropertiesReference() Updates the custom properties reference. Declaration protected void UpdateCustomPropertiesReference() Events CustomPropertiesRefreshed Occurs when the CustomProperties property is changed. Previous properties table is received as parameter. Declaration public event EventHandler<NetworkPropertiesTable> CustomPropertiesRefreshed Event Type Type Description EventHandler<NetworkPropertiesTable> Implements IDependencyObject IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkDateTimePropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkDateTimePropertySync-1.html",
    "title": "Class NetworkDateTimePropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkDateTimePropertySync<K> Provides an abstraction to track changes on a DateTime property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, DateTime> NetworkDateTimePropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, DateTime>.propertiesTableProvider NetworkPropertySync<K, DateTime>.PropertyKeyByte NetworkPropertySync<K, DateTime>.PropertyKey NetworkPropertySync<K, DateTime>.IsReady NetworkPropertySync<K, DateTime>.IsLocalPlayerProvider NetworkPropertySync<K, DateTime>.ProviderFilter NetworkPropertySync<K, DateTime>.HasValue NetworkPropertySync<K, DateTime>.PropertyValue NetworkPropertySync<K, DateTime>.OnAttached() NetworkPropertySync<K, DateTime>.OnActivated() NetworkPropertySync<K, DateTime>.OnDeactivated() NetworkPropertySync<K, DateTime>.OnDetach() NetworkPropertySync<K, DateTime>.OnPropertyReadyToSet() NetworkPropertySync<K, DateTime>.OnPropertyAddedOrChanged() NetworkPropertySync<K, DateTime>.OnPropertyRemoved() NetworkPropertySync<K, DateTime>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, DateTime>.WriteValue(NetworkPropertiesTable, DateTime) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkDateTimePropertySync<K> : NetworkPropertySync<K, DateTime>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override DateTime ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description DateTime The property value. Overrides NetworkPropertySync<K, DateTime>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, DateTime) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, DateTime value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. DateTime value The value to write. Overrides NetworkPropertySync<K, DateTime>.WriteValue(NetworkPropertiesTable, DateTime) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkEndpointPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkEndpointPropertySync-1.html",
    "title": "Class NetworkEndpointPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkEndpointPropertySync<K> Provides an abstraction to track changes on a NetworkEndpoint property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, NetworkEndpoint> NetworkEndpointPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, NetworkEndpoint>.propertiesTableProvider NetworkPropertySync<K, NetworkEndpoint>.PropertyKeyByte NetworkPropertySync<K, NetworkEndpoint>.PropertyKey NetworkPropertySync<K, NetworkEndpoint>.IsReady NetworkPropertySync<K, NetworkEndpoint>.IsLocalPlayerProvider NetworkPropertySync<K, NetworkEndpoint>.ProviderFilter NetworkPropertySync<K, NetworkEndpoint>.HasValue NetworkPropertySync<K, NetworkEndpoint>.PropertyValue NetworkPropertySync<K, NetworkEndpoint>.OnAttached() NetworkPropertySync<K, NetworkEndpoint>.OnActivated() NetworkPropertySync<K, NetworkEndpoint>.OnDeactivated() NetworkPropertySync<K, NetworkEndpoint>.OnDetach() NetworkPropertySync<K, NetworkEndpoint>.OnPropertyReadyToSet() NetworkPropertySync<K, NetworkEndpoint>.OnPropertyAddedOrChanged() NetworkPropertySync<K, NetworkEndpoint>.OnPropertyRemoved() NetworkPropertySync<K, NetworkEndpoint>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, NetworkEndpoint>.WriteValue(NetworkPropertiesTable, NetworkEndpoint) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkEndpointPropertySync<K> : NetworkPropertySync<K, NetworkEndpoint>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override NetworkEndpoint ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description NetworkEndpoint The property value. Overrides NetworkPropertySync<K, NetworkEndpoint>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, NetworkEndpoint) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, NetworkEndpoint value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. NetworkEndpoint value The value to write. Overrides NetworkPropertySync<K, NetworkEndpoint>.WriteValue(NetworkPropertiesTable, NetworkEndpoint) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkFloatPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkFloatPropertySync-1.html",
    "title": "Class NetworkFloatPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkFloatPropertySync<K> Provides an abstraction to track changes on a float property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, float> NetworkFloatPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, float>.propertiesTableProvider NetworkPropertySync<K, float>.PropertyKeyByte NetworkPropertySync<K, float>.PropertyKey NetworkPropertySync<K, float>.IsReady NetworkPropertySync<K, float>.IsLocalPlayerProvider NetworkPropertySync<K, float>.ProviderFilter NetworkPropertySync<K, float>.HasValue NetworkPropertySync<K, float>.PropertyValue NetworkPropertySync<K, float>.OnAttached() NetworkPropertySync<K, float>.OnActivated() NetworkPropertySync<K, float>.OnDeactivated() NetworkPropertySync<K, float>.OnDetach() NetworkPropertySync<K, float>.OnPropertyReadyToSet() NetworkPropertySync<K, float>.OnPropertyAddedOrChanged() NetworkPropertySync<K, float>.OnPropertyRemoved() NetworkPropertySync<K, float>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, float>.WriteValue(NetworkPropertiesTable, float) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkFloatPropertySync<K> : NetworkPropertySync<K, float>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override float ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description float The property value. Overrides NetworkPropertySync<K, float>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, float) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, float value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. float value The value to write. Overrides NetworkPropertySync<K, float>.WriteValue(NetworkPropertiesTable, float) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkIntegerPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkIntegerPropertySync-1.html",
    "title": "Class NetworkIntegerPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkIntegerPropertySync<K> Provides an abstraction to track changes on a int property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, int> NetworkIntegerPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, int>.propertiesTableProvider NetworkPropertySync<K, int>.PropertyKeyByte NetworkPropertySync<K, int>.PropertyKey NetworkPropertySync<K, int>.IsReady NetworkPropertySync<K, int>.IsLocalPlayerProvider NetworkPropertySync<K, int>.ProviderFilter NetworkPropertySync<K, int>.HasValue NetworkPropertySync<K, int>.PropertyValue NetworkPropertySync<K, int>.OnAttached() NetworkPropertySync<K, int>.OnActivated() NetworkPropertySync<K, int>.OnDeactivated() NetworkPropertySync<K, int>.OnDetach() NetworkPropertySync<K, int>.OnPropertyReadyToSet() NetworkPropertySync<K, int>.OnPropertyAddedOrChanged() NetworkPropertySync<K, int>.OnPropertyRemoved() NetworkPropertySync<K, int>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, int>.WriteValue(NetworkPropertiesTable, int) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkIntegerPropertySync<K> : NetworkPropertySync<K, int>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override int ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description int The property value. Overrides NetworkPropertySync<K, int>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, int) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, int value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. int value The value to write. Overrides NetworkPropertySync<K, int>.WriteValue(NetworkPropertiesTable, int) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkLongIntegerPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkLongIntegerPropertySync-1.html",
    "title": "Class NetworkLongIntegerPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkLongIntegerPropertySync<K> Provides an abstraction to track changes on a long property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, long> NetworkLongIntegerPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, long>.propertiesTableProvider NetworkPropertySync<K, long>.PropertyKeyByte NetworkPropertySync<K, long>.PropertyKey NetworkPropertySync<K, long>.IsReady NetworkPropertySync<K, long>.IsLocalPlayerProvider NetworkPropertySync<K, long>.ProviderFilter NetworkPropertySync<K, long>.HasValue NetworkPropertySync<K, long>.PropertyValue NetworkPropertySync<K, long>.OnAttached() NetworkPropertySync<K, long>.OnActivated() NetworkPropertySync<K, long>.OnDeactivated() NetworkPropertySync<K, long>.OnDetach() NetworkPropertySync<K, long>.OnPropertyReadyToSet() NetworkPropertySync<K, long>.OnPropertyAddedOrChanged() NetworkPropertySync<K, long>.OnPropertyRemoved() NetworkPropertySync<K, long>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, long>.WriteValue(NetworkPropertiesTable, long) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkLongIntegerPropertySync<K> : NetworkPropertySync<K, long>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override long ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description long The property value. Overrides NetworkPropertySync<K, long>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, long) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, long value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. long value The value to write. Overrides NetworkPropertySync<K, long>.WriteValue(NetworkPropertiesTable, long) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkMatrix3x3PropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkMatrix3x3PropertySync-1.html",
    "title": "Class NetworkMatrix3x3PropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkMatrix3x3PropertySync<K> Provides an abstraction to track changes on a Matrix3x3 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, Matrix3x3> NetworkMatrix3x3PropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, Matrix3x3>.propertiesTableProvider NetworkPropertySync<K, Matrix3x3>.PropertyKeyByte NetworkPropertySync<K, Matrix3x3>.PropertyKey NetworkPropertySync<K, Matrix3x3>.IsReady NetworkPropertySync<K, Matrix3x3>.IsLocalPlayerProvider NetworkPropertySync<K, Matrix3x3>.ProviderFilter NetworkPropertySync<K, Matrix3x3>.HasValue NetworkPropertySync<K, Matrix3x3>.PropertyValue NetworkPropertySync<K, Matrix3x3>.OnAttached() NetworkPropertySync<K, Matrix3x3>.OnActivated() NetworkPropertySync<K, Matrix3x3>.OnDeactivated() NetworkPropertySync<K, Matrix3x3>.OnDetach() NetworkPropertySync<K, Matrix3x3>.OnPropertyReadyToSet() NetworkPropertySync<K, Matrix3x3>.OnPropertyAddedOrChanged() NetworkPropertySync<K, Matrix3x3>.OnPropertyRemoved() NetworkPropertySync<K, Matrix3x3>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, Matrix3x3>.WriteValue(NetworkPropertiesTable, Matrix3x3) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkMatrix3x3PropertySync<K> : NetworkPropertySync<K, Matrix3x3>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override Matrix3x3 ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description Matrix3x3 The property value. Overrides NetworkPropertySync<K, Matrix3x3>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, Matrix3x3) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, Matrix3x3 value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Matrix3x3 value The value to write. Overrides NetworkPropertySync<K, Matrix3x3>.WriteValue(NetworkPropertiesTable, Matrix3x3) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkMatrix4x4PropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkMatrix4x4PropertySync-1.html",
    "title": "Class NetworkMatrix4x4PropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkMatrix4x4PropertySync<K> Provides an abstraction to track changes on a Matrix3x3 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, Matrix4x4> NetworkMatrix4x4PropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, Matrix4x4>.propertiesTableProvider NetworkPropertySync<K, Matrix4x4>.PropertyKeyByte NetworkPropertySync<K, Matrix4x4>.PropertyKey NetworkPropertySync<K, Matrix4x4>.IsReady NetworkPropertySync<K, Matrix4x4>.IsLocalPlayerProvider NetworkPropertySync<K, Matrix4x4>.ProviderFilter NetworkPropertySync<K, Matrix4x4>.HasValue NetworkPropertySync<K, Matrix4x4>.PropertyValue NetworkPropertySync<K, Matrix4x4>.OnAttached() NetworkPropertySync<K, Matrix4x4>.OnActivated() NetworkPropertySync<K, Matrix4x4>.OnDeactivated() NetworkPropertySync<K, Matrix4x4>.OnDetach() NetworkPropertySync<K, Matrix4x4>.OnPropertyReadyToSet() NetworkPropertySync<K, Matrix4x4>.OnPropertyAddedOrChanged() NetworkPropertySync<K, Matrix4x4>.OnPropertyRemoved() NetworkPropertySync<K, Matrix4x4>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, Matrix4x4>.WriteValue(NetworkPropertiesTable, Matrix4x4) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkMatrix4x4PropertySync<K> : NetworkPropertySync<K, Matrix4x4>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override Matrix4x4 ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description Matrix4x4 The property value. Overrides NetworkPropertySync<K, Matrix4x4>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, Matrix4x4) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, Matrix4x4 value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Matrix4x4 value The value to write. Overrides NetworkPropertySync<K, Matrix4x4>.WriteValue(NetworkPropertiesTable, Matrix4x4) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkPlayerProvider.html": {
    "href": "api/Evergine.Networking.Components.NetworkPlayerProvider.html",
    "title": "Class NetworkPlayerProvider | Evergine Doc",
    "keywords": "Class NetworkPlayerProvider Provides the INetworkPlayer and its CustomProperties neccessary for NetworkPropertySync<K, V> components. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkCustomPropertiesProvider NetworkPlayerProvider Implements IDependencyObject IDisposable Inherited Members NetworkCustomPropertiesProvider.CustomProperties NetworkCustomPropertiesProvider.CustomPropertiesRefreshed NetworkCustomPropertiesProvider.Dispose() NetworkCustomPropertiesProvider.OnDetach() NetworkCustomPropertiesProvider.UpdateCustomPropertiesReference() NetworkCustomPropertiesProvider.CheckMultipleProvidersOfType<T>() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public class NetworkPlayerProvider : NetworkCustomPropertiesProvider, IDependencyObject, IDisposable Constructors NetworkPlayerProvider() Initializes a new instance of the NetworkPlayerProvider class. Declaration public NetworkPlayerProvider() Properties Player Gets the target player. Declaration public INetworkPlayer Player { get; } Property Value Type Description INetworkPlayer PlayerId Gets or sets the identifier of the target player. If set to -1 the target will be the local player. Declaration [RenderPropertyAsInput(MinLimit = -1, Tooltip = \"The identifier of the target player. If set to -1 the target will be the local player\")] public int PlayerId { get; set; } Property Value Type Description int Methods GetCustomProperties(MatchmakingClientService) Gets the NetworkPropertiesTable instance. Declaration protected override NetworkPropertiesTable GetCustomProperties(MatchmakingClientService matchmakingClientService) Parameters Type Name Description MatchmakingClientService matchmakingClientService The MatchmakingClientService reference. Returns Type Description NetworkPropertiesTable The NetworkPropertiesTable instance. Overrides NetworkCustomPropertiesProvider.GetCustomProperties(MatchmakingClientService) OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides NetworkCustomPropertiesProvider.OnAttached() Events PlayerRefreshed Occurs when the Player property is changed. Previous player is received as parameter. Declaration public event EventHandler<INetworkPlayer> PlayerRefreshed Event Type Type Description EventHandler<INetworkPlayer> Implements IDependencyObject IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkPropertyProviderFilter.html": {
    "href": "api/Evergine.Networking.Components.NetworkPropertyProviderFilter.html",
    "title": "Enum NetworkPropertyProviderFilter | Evergine Doc",
    "keywords": "Enum NetworkPropertyProviderFilter Defines the available filters to be used during NetworkCustomPropertiesProvider dependency resolution. Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public enum NetworkPropertyProviderFilter Fields Name Description Any Any NetworkCustomPropertiesProvider is valid Player Only NetworkPlayerProvider components are valid Room Only NetworkRoomProvider components are valid Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkPropertySync-2.html": {
    "href": "api/Evergine.Networking.Components.NetworkPropertySync-2.html",
    "title": "Class NetworkPropertySync<K, V> | Evergine Doc",
    "keywords": "Class NetworkPropertySync<K, V> Provides an abstraction to track changes on a property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. This class simplifies the access to the property value with the methods ReadValue(NetworkPropertiesTable) and WriteValue(NetworkPropertiesTable, V). Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, V> NetworkBooleanPropertySync<K> NetworkByteArrayPropertySync<K> NetworkBytePropertySync<K> NetworkColorPropertySync<K> NetworkDateTimePropertySync<K> NetworkEndpointPropertySync<K> NetworkFloatPropertySync<K> NetworkIntegerPropertySync<K> NetworkLongIntegerPropertySync<K> NetworkMatrix3x3PropertySync<K> NetworkMatrix4x4PropertySync<K> NetworkQuaternionPropertySync<K> NetworkSerializablePropertySync<K, V> NetworkStringPropertySync<K> NetworkTimeSpanPropertySync<K> NetworkVector2PropertySync<K> NetworkVector3PropertySync<K> NetworkVector4PropertySync<K> Implements IDependencyObject Inherited Members Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkPropertySync<K, V> : Component, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. V The type of the property value. Constructors NetworkPropertySync() Initializes a new instance of the NetworkPropertySync<K, V> class. Declaration public NetworkPropertySync() Fields propertiesTableProvider The NetworkCustomPropertiesProvider provider. Declaration protected NetworkCustomPropertiesProvider propertiesTableProvider Field Value Type Description NetworkCustomPropertiesProvider Properties HasValue Gets a value indicating whether the custom property table has a value defined for this PropertyKey. Declaration public bool HasValue { get; } Property Value Type Description bool IsLocalPlayerProvider Gets a value indicating whether the custom property comes from the local player NetworkPropertiesTable. Declaration public bool IsLocalPlayerProvider { get; } Property Value Type Description bool IsReady Gets a value indicating whether this instance is ready to synchronize the property value. Declaration public bool IsReady { get; } Property Value Type Description bool PropertyKey Gets or sets the key of the custom property. Declaration [RenderProperty(Tooltip = \"The key of the custom property\")] public K PropertyKey { get; set; } Property Value Type Description K PropertyKeyByte Gets or sets the property key stored as a byte. Declaration public byte PropertyKeyByte { get; set; } Property Value Type Description byte PropertyValue Gets or sets the value of the custom property. Declaration public V PropertyValue { get; set; } Property Value Type Description V ProviderFilter Gets or sets a value that restricts which NetworkCustomPropertiesProvider is valid during the resolution of dependencies. Declaration [RenderProperty(Tooltip = \"Restricts which provider is valid during the resolution of dependencies\")] public NetworkPropertyProviderFilter ProviderFilter { get; set; } Property Value Type Description NetworkPropertyProviderFilter Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Component.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Component.OnDetach() OnPropertyAddedOrChanged() Called every time a value with the target property key is added or modified. Declaration protected abstract void OnPropertyAddedOrChanged() OnPropertyReadyToSet() Called every time the target property is ready to be set. Declaration protected virtual void OnPropertyReadyToSet() OnPropertyRemoved() Called every time a value with the target property key is removed. Declaration protected abstract void OnPropertyRemoved() ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected abstract V ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description V The property value. WriteValue(NetworkPropertiesTable, V) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected abstract void WriteValue(NetworkPropertiesTable propertiesTable, V value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. V value The value to write. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkQuaternionPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkQuaternionPropertySync-1.html",
    "title": "Class NetworkQuaternionPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkQuaternionPropertySync<K> Provides an abstraction to track changes on a Quaternion property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, Quaternion> NetworkQuaternionPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, Quaternion>.propertiesTableProvider NetworkPropertySync<K, Quaternion>.PropertyKeyByte NetworkPropertySync<K, Quaternion>.PropertyKey NetworkPropertySync<K, Quaternion>.IsReady NetworkPropertySync<K, Quaternion>.IsLocalPlayerProvider NetworkPropertySync<K, Quaternion>.ProviderFilter NetworkPropertySync<K, Quaternion>.HasValue NetworkPropertySync<K, Quaternion>.PropertyValue NetworkPropertySync<K, Quaternion>.OnAttached() NetworkPropertySync<K, Quaternion>.OnActivated() NetworkPropertySync<K, Quaternion>.OnDeactivated() NetworkPropertySync<K, Quaternion>.OnDetach() NetworkPropertySync<K, Quaternion>.OnPropertyReadyToSet() NetworkPropertySync<K, Quaternion>.OnPropertyAddedOrChanged() NetworkPropertySync<K, Quaternion>.OnPropertyRemoved() NetworkPropertySync<K, Quaternion>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, Quaternion>.WriteValue(NetworkPropertiesTable, Quaternion) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkQuaternionPropertySync<K> : NetworkPropertySync<K, Quaternion>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override Quaternion ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description Quaternion The property value. Overrides NetworkPropertySync<K, Quaternion>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, Quaternion) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, Quaternion value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Quaternion value The value to write. Overrides NetworkPropertySync<K, Quaternion>.WriteValue(NetworkPropertiesTable, Quaternion) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkRoomProvider.html": {
    "href": "api/Evergine.Networking.Components.NetworkRoomProvider.html",
    "title": "Class NetworkRoomProvider | Evergine Doc",
    "keywords": "Class NetworkRoomProvider Provides CustomProperties of the current room neccessary for NetworkPropertySync<K, V> components. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkCustomPropertiesProvider NetworkRoomProvider Implements IDependencyObject IDisposable Inherited Members NetworkCustomPropertiesProvider.CustomProperties NetworkCustomPropertiesProvider.CustomPropertiesRefreshed NetworkCustomPropertiesProvider.Dispose() NetworkCustomPropertiesProvider.OnDetach() NetworkCustomPropertiesProvider.UpdateCustomPropertiesReference() NetworkCustomPropertiesProvider.CheckMultipleProvidersOfType<T>() Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public class NetworkRoomProvider : NetworkCustomPropertiesProvider, IDependencyObject, IDisposable Methods GetCustomProperties(MatchmakingClientService) Gets the NetworkPropertiesTable instance. Declaration protected override NetworkPropertiesTable GetCustomProperties(MatchmakingClientService matchmakingClientService) Parameters Type Name Description MatchmakingClientService matchmakingClientService The MatchmakingClientService reference. Returns Type Description NetworkPropertiesTable The NetworkPropertiesTable instance. Overrides NetworkCustomPropertiesProvider.GetCustomProperties(MatchmakingClientService) OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides NetworkCustomPropertiesProvider.OnAttached() Implements IDependencyObject IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkSerializablePropertySync-2.html": {
    "href": "api/Evergine.Networking.Components.NetworkSerializablePropertySync-2.html",
    "title": "Class NetworkSerializablePropertySync<K, V> | Evergine Doc",
    "keywords": "Class NetworkSerializablePropertySync<K, V> Provides an abstraction to track changes on a bool property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, V> NetworkSerializablePropertySync<K, V> Implements IDependencyObject Inherited Members NetworkPropertySync<K, V>.propertiesTableProvider NetworkPropertySync<K, V>.PropertyKeyByte NetworkPropertySync<K, V>.PropertyKey NetworkPropertySync<K, V>.IsReady NetworkPropertySync<K, V>.IsLocalPlayerProvider NetworkPropertySync<K, V>.ProviderFilter NetworkPropertySync<K, V>.HasValue NetworkPropertySync<K, V>.PropertyValue NetworkPropertySync<K, V>.OnAttached() NetworkPropertySync<K, V>.OnActivated() NetworkPropertySync<K, V>.OnDeactivated() NetworkPropertySync<K, V>.OnDetach() NetworkPropertySync<K, V>.OnPropertyReadyToSet() NetworkPropertySync<K, V>.OnPropertyAddedOrChanged() NetworkPropertySync<K, V>.OnPropertyRemoved() NetworkPropertySync<K, V>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, V>.WriteValue(NetworkPropertiesTable, V) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkSerializablePropertySync<K, V> : NetworkPropertySync<K, V>, IDependencyObject where K : struct, IConvertible where V : INetworkSerializable, new() Type Parameters Name Description K The type of the property key. Must be byte or Enum. V The INetworkSerializable of the property value. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override V ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description V The property value. Overrides NetworkPropertySync<K, V>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, V) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, V value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. V value The value to write. Overrides NetworkPropertySync<K, V>.WriteValue(NetworkPropertiesTable, V) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkStringPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkStringPropertySync-1.html",
    "title": "Class NetworkStringPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkStringPropertySync<K> Provides an abstraction to track changes on a string property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, string> NetworkStringPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, string>.propertiesTableProvider NetworkPropertySync<K, string>.PropertyKeyByte NetworkPropertySync<K, string>.PropertyKey NetworkPropertySync<K, string>.IsReady NetworkPropertySync<K, string>.IsLocalPlayerProvider NetworkPropertySync<K, string>.ProviderFilter NetworkPropertySync<K, string>.HasValue NetworkPropertySync<K, string>.PropertyValue NetworkPropertySync<K, string>.OnAttached() NetworkPropertySync<K, string>.OnActivated() NetworkPropertySync<K, string>.OnDeactivated() NetworkPropertySync<K, string>.OnDetach() NetworkPropertySync<K, string>.OnPropertyReadyToSet() NetworkPropertySync<K, string>.OnPropertyAddedOrChanged() NetworkPropertySync<K, string>.OnPropertyRemoved() NetworkPropertySync<K, string>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, string>.WriteValue(NetworkPropertiesTable, string) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkStringPropertySync<K> : NetworkPropertySync<K, string>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override string ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description string The property value. Overrides NetworkPropertySync<K, string>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, string) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, string value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. string value The value to write. Overrides NetworkPropertySync<K, string>.WriteValue(NetworkPropertiesTable, string) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkTimeSpanPropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkTimeSpanPropertySync-1.html",
    "title": "Class NetworkTimeSpanPropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkTimeSpanPropertySync<K> Provides an abstraction to track changes on a TimeSpan property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, TimeSpan> NetworkTimeSpanPropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, TimeSpan>.propertiesTableProvider NetworkPropertySync<K, TimeSpan>.PropertyKeyByte NetworkPropertySync<K, TimeSpan>.PropertyKey NetworkPropertySync<K, TimeSpan>.IsReady NetworkPropertySync<K, TimeSpan>.IsLocalPlayerProvider NetworkPropertySync<K, TimeSpan>.ProviderFilter NetworkPropertySync<K, TimeSpan>.HasValue NetworkPropertySync<K, TimeSpan>.PropertyValue NetworkPropertySync<K, TimeSpan>.OnAttached() NetworkPropertySync<K, TimeSpan>.OnActivated() NetworkPropertySync<K, TimeSpan>.OnDeactivated() NetworkPropertySync<K, TimeSpan>.OnDetach() NetworkPropertySync<K, TimeSpan>.OnPropertyReadyToSet() NetworkPropertySync<K, TimeSpan>.OnPropertyAddedOrChanged() NetworkPropertySync<K, TimeSpan>.OnPropertyRemoved() NetworkPropertySync<K, TimeSpan>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, TimeSpan>.WriteValue(NetworkPropertiesTable, TimeSpan) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkTimeSpanPropertySync<K> : NetworkPropertySync<K, TimeSpan>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Properties HighPrecision Gets or sets a value indicating whether the TimeSpan will be stored using high precision (ticks) or not (milliseconds). Declaration [RenderProperty(Tooltip = \"Indicates whether the TimeSpan will be stored using high precision (ticks) or not (milliseconds)\")] public bool HighPrecision { get; set; } Property Value Type Description bool Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds). Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override TimeSpan ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description TimeSpan The property value. Overrides NetworkPropertySync<K, TimeSpan>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, TimeSpan) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, TimeSpan value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. TimeSpan value The value to write. Overrides NetworkPropertySync<K, TimeSpan>.WriteValue(NetworkPropertiesTable, TimeSpan) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkVector2PropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkVector2PropertySync-1.html",
    "title": "Class NetworkVector2PropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkVector2PropertySync<K> Provides an abstraction to track changes on a Vector2 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, Vector2> NetworkVector2PropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, Vector2>.propertiesTableProvider NetworkPropertySync<K, Vector2>.PropertyKeyByte NetworkPropertySync<K, Vector2>.PropertyKey NetworkPropertySync<K, Vector2>.IsReady NetworkPropertySync<K, Vector2>.IsLocalPlayerProvider NetworkPropertySync<K, Vector2>.ProviderFilter NetworkPropertySync<K, Vector2>.HasValue NetworkPropertySync<K, Vector2>.PropertyValue NetworkPropertySync<K, Vector2>.OnAttached() NetworkPropertySync<K, Vector2>.OnActivated() NetworkPropertySync<K, Vector2>.OnDeactivated() NetworkPropertySync<K, Vector2>.OnDetach() NetworkPropertySync<K, Vector2>.OnPropertyReadyToSet() NetworkPropertySync<K, Vector2>.OnPropertyAddedOrChanged() NetworkPropertySync<K, Vector2>.OnPropertyRemoved() NetworkPropertySync<K, Vector2>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, Vector2>.WriteValue(NetworkPropertiesTable, Vector2) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkVector2PropertySync<K> : NetworkPropertySync<K, Vector2>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override Vector2 ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description Vector2 The property value. Overrides NetworkPropertySync<K, Vector2>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, Vector2) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, Vector2 value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Vector2 value The value to write. Overrides NetworkPropertySync<K, Vector2>.WriteValue(NetworkPropertiesTable, Vector2) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkVector3PropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkVector3PropertySync-1.html",
    "title": "Class NetworkVector3PropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkVector3PropertySync<K> Provides an abstraction to track changes on a Vector3 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, Vector3> NetworkVector3PropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, Vector3>.propertiesTableProvider NetworkPropertySync<K, Vector3>.PropertyKeyByte NetworkPropertySync<K, Vector3>.PropertyKey NetworkPropertySync<K, Vector3>.IsReady NetworkPropertySync<K, Vector3>.IsLocalPlayerProvider NetworkPropertySync<K, Vector3>.ProviderFilter NetworkPropertySync<K, Vector3>.HasValue NetworkPropertySync<K, Vector3>.PropertyValue NetworkPropertySync<K, Vector3>.OnAttached() NetworkPropertySync<K, Vector3>.OnActivated() NetworkPropertySync<K, Vector3>.OnDeactivated() NetworkPropertySync<K, Vector3>.OnDetach() NetworkPropertySync<K, Vector3>.OnPropertyReadyToSet() NetworkPropertySync<K, Vector3>.OnPropertyAddedOrChanged() NetworkPropertySync<K, Vector3>.OnPropertyRemoved() NetworkPropertySync<K, Vector3>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, Vector3>.WriteValue(NetworkPropertiesTable, Vector3) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkVector3PropertySync<K> : NetworkPropertySync<K, Vector3>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override Vector3 ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description Vector3 The property value. Overrides NetworkPropertySync<K, Vector3>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, Vector3) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, Vector3 value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Vector3 value The value to write. Overrides NetworkPropertySync<K, Vector3>.WriteValue(NetworkPropertiesTable, Vector3) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Components.NetworkVector4PropertySync-1.html": {
    "href": "api/Evergine.Networking.Components.NetworkVector4PropertySync-1.html",
    "title": "Class NetworkVector4PropertySync<K> | Evergine Doc",
    "keywords": "Class NetworkVector4PropertySync<K> Provides an abstraction to track changes on a Vector4 property contained on a NetworkPropertiesTable. A NetworkPropertiesTable component is needed in the same entity or any of its parents. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component NetworkPropertySync<K, Vector4> NetworkVector4PropertySync<K> Implements IDependencyObject Inherited Members NetworkPropertySync<K, Vector4>.propertiesTableProvider NetworkPropertySync<K, Vector4>.PropertyKeyByte NetworkPropertySync<K, Vector4>.PropertyKey NetworkPropertySync<K, Vector4>.IsReady NetworkPropertySync<K, Vector4>.IsLocalPlayerProvider NetworkPropertySync<K, Vector4>.ProviderFilter NetworkPropertySync<K, Vector4>.HasValue NetworkPropertySync<K, Vector4>.PropertyValue NetworkPropertySync<K, Vector4>.OnAttached() NetworkPropertySync<K, Vector4>.OnActivated() NetworkPropertySync<K, Vector4>.OnDeactivated() NetworkPropertySync<K, Vector4>.OnDetach() NetworkPropertySync<K, Vector4>.OnPropertyReadyToSet() NetworkPropertySync<K, Vector4>.OnPropertyAddedOrChanged() NetworkPropertySync<K, Vector4>.OnPropertyRemoved() NetworkPropertySync<K, Vector4>.ReadValue(NetworkPropertiesTable) NetworkPropertySync<K, Vector4>.WriteValue(NetworkPropertiesTable, Vector4) Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnAttached() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDetach() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Components Assembly: Evergine.Networking.dll Syntax public abstract class NetworkVector4PropertySync<K> : NetworkPropertySync<K, Vector4>, IDependencyObject where K : struct, IConvertible Type Parameters Name Description K The type of the property key. Must be byte or Enum. Methods ReadValue(NetworkPropertiesTable) Defines a delegate to read the value from the player NetworkPropertiesTable. Declaration protected override Vector4 ReadValue(NetworkPropertiesTable propertiesTable) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Returns Type Description Vector4 The property value. Overrides NetworkPropertySync<K, Vector4>.ReadValue(NetworkPropertiesTable) WriteValue(NetworkPropertiesTable, Vector4) Defines a delegate to write the value in the player NetworkPropertiesTable. Declaration protected override void WriteValue(NetworkPropertiesTable propertiesTable, Vector4 value) Parameters Type Name Description NetworkPropertiesTable propertiesTable The properties table that contains the player custom properties. Vector4 value The value to write. Overrides NetworkPropertySync<K, Vector4>.WriteValue(NetworkPropertiesTable, Vector4) Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.ClientConnectedEventArgs.html": {
    "href": "api/Evergine.Networking.Connection.ClientConnectedEventArgs.html",
    "title": "Class ClientConnectedEventArgs | Evergine Doc",
    "keywords": "Class ClientConnectedEventArgs Represents the arguments of the client connected event. Inheritance object EventArgs ClientConnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class ClientConnectedEventArgs : EventArgs Constructors ClientConnectedEventArgs(NetworkEndpoint, IncomingMessage) Initializes a new instance of the ClientConnectedEventArgs class. Declaration public ClientConnectedEventArgs(NetworkEndpoint clientEndpoint, IncomingMessage hailMessage) Parameters Type Name Description NetworkEndpoint clientEndpoint The endpoint of the client. IncomingMessage hailMessage The received hail message. Properties ClientEndpoint Gets the endpoint of the new client. Declaration public NetworkEndpoint ClientEndpoint { get; } Property Value Type Description NetworkEndpoint HailMessage Gets the received hail message of the client. Declaration public IncomingMessage HailMessage { get; } Property Value Type Description IncomingMessage Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.ClientConnectingEventArgs.html": {
    "href": "api/Evergine.Networking.Connection.ClientConnectingEventArgs.html",
    "title": "Class ClientConnectingEventArgs | Evergine Doc",
    "keywords": "Class ClientConnectingEventArgs Represents the arguments of the client connection request event. Inheritance object EventArgs ClientConnectingEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class ClientConnectingEventArgs : EventArgs Constructors ClientConnectingEventArgs(NetworkEndpoint, IncomingMessage) Initializes a new instance of the ClientConnectingEventArgs class. Declaration public ClientConnectingEventArgs(NetworkEndpoint clientEndpoint, IncomingMessage hailMessage) Parameters Type Name Description NetworkEndpoint clientEndpoint The endpoint of the client. IncomingMessage hailMessage The received hail message. Properties ClientEndpoint Gets the endpoint of the new client. Declaration public NetworkEndpoint ClientEndpoint { get; } Property Value Type Description NetworkEndpoint HailMessage Gets the received hail message of the client. Declaration public IncomingMessage HailMessage { get; } Property Value Type Description IncomingMessage IsRejected Gets a value indicating whether the connection request is rejected. Declaration public bool IsRejected { get; } Property Value Type Description bool Methods Reject() Mark the connection request as rejected. Declaration public void Reject() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.ClientDisconnectedEventArgs.html": {
    "href": "api/Evergine.Networking.Connection.ClientDisconnectedEventArgs.html",
    "title": "Class ClientDisconnectedEventArgs | Evergine Doc",
    "keywords": "Class ClientDisconnectedEventArgs Represents the arguments of the client disconnected event. Inheritance object EventArgs ClientDisconnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class ClientDisconnectedEventArgs : EventArgs Constructors ClientDisconnectedEventArgs(NetworkEndpoint) Initializes a new instance of the ClientDisconnectedEventArgs class. Declaration public ClientDisconnectedEventArgs(NetworkEndpoint clientEndpoint) Parameters Type Name Description NetworkEndpoint clientEndpoint The endpoint of the disconnected client. Properties ClientEndpoint Gets the endpoint of the disconnected client. Declaration public NetworkEndpoint ClientEndpoint { get; } Property Value Type Description NetworkEndpoint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.HostConnectedEventArgs.html": {
    "href": "api/Evergine.Networking.Connection.HostConnectedEventArgs.html",
    "title": "Class HostConnectedEventArgs | Evergine Doc",
    "keywords": "Class HostConnectedEventArgs Represents the arguments of the host connected event. Inheritance object EventArgs HostConnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class HostConnectedEventArgs : EventArgs Constructors HostConnectedEventArgs(NetworkEndpoint) Initializes a new instance of the HostConnectedEventArgs class. Declaration public HostConnectedEventArgs(NetworkEndpoint hostEndpoint) Parameters Type Name Description NetworkEndpoint hostEndpoint The endpoint of the new client. Properties HostEndpoint Gets the endpoint of the new host. Declaration public NetworkEndpoint HostEndpoint { get; } Property Value Type Description NetworkEndpoint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.HostDisconnectedEventArgs.html": {
    "href": "api/Evergine.Networking.Connection.HostDisconnectedEventArgs.html",
    "title": "Class HostDisconnectedEventArgs | Evergine Doc",
    "keywords": "Class HostDisconnectedEventArgs Represents the arguments of the host disconnected event. Inheritance object EventArgs HostDisconnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class HostDisconnectedEventArgs : EventArgs Constructors HostDisconnectedEventArgs(NetworkEndpoint) Initializes a new instance of the HostDisconnectedEventArgs class. Declaration public HostDisconnectedEventArgs(NetworkEndpoint hostEndpoint) Parameters Type Name Description NetworkEndpoint hostEndpoint The endpoint of the disconnected host. Properties HostEndpoint Gets the endpoint of the disconnected host. Declaration public NetworkEndpoint HostEndpoint { get; } Property Value Type Description NetworkEndpoint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.HostDiscoveredEventArgs.html": {
    "href": "api/Evergine.Networking.Connection.HostDiscoveredEventArgs.html",
    "title": "Class HostDiscoveredEventArgs | Evergine Doc",
    "keywords": "Class HostDiscoveredEventArgs Represents the arguments of the host discovered event. Inheritance object EventArgs HostDiscoveredEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class HostDiscoveredEventArgs : EventArgs Constructors HostDiscoveredEventArgs(NetworkEndpoint, string) Initializes a new instance of the HostDiscoveredEventArgs class. Declaration public HostDiscoveredEventArgs(NetworkEndpoint host, string serverName) Parameters Type Name Description NetworkEndpoint host The discovered host endpoint. string serverName The server name. Properties Host Gets the discovered host endpoint. Declaration public NetworkEndpoint Host { get; } Property Value Type Description NetworkEndpoint ServerName Gets the server name. Declaration public string ServerName { get; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.html": {
    "href": "api/Evergine.Networking.Connection.html",
    "title": "Namespace Evergine.Networking.Connection | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Connection Classes ClientConnectedEventArgs Represents the arguments of the client connected event. ClientConnectingEventArgs Represents the arguments of the client connection request event. ClientDisconnectedEventArgs Represents the arguments of the client disconnected event. HostConnectedEventArgs Represents the arguments of the host connected event. HostDisconnectedEventArgs Represents the arguments of the host disconnected event. HostDiscoveredEventArgs Represents the arguments of the host discovered event. MessageReceivedEventArgs Represents the arguments of the message received event. NetworkClient The network client. NetworkFactory Factory to main network components. NetworkServer The network server. Interfaces INetworkClient The network client interface. INetworkFactory This class is a factory of main network components. INetworkServer The network server interface."
  },
  "api/Evergine.Networking.Connection.INetworkClient.html": {
    "href": "api/Evergine.Networking.Connection.INetworkClient.html",
    "title": "Interface INetworkClient | Evergine Doc",
    "keywords": "Interface INetworkClient The network client interface. Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public interface INetworkClient Properties Identifier Gets the identifier. Declaration long Identifier { get; } Property Value Type Description long The identifier. IsConnected Gets a value indicating whether this instance is connected. Declaration bool IsConnected { get; } Property Value Type Description bool true if this instance is connected; otherwise, false. Methods Connect(NetworkEndpoint) Connects to a remote host. Declaration void Connect(NetworkEndpoint host) Parameters Type Name Description NetworkEndpoint host The remote host endpoint to connect to. Connect(NetworkEndpoint, OutgoingMessage) Connects to a remote host. Declaration void Connect(NetworkEndpoint host, OutgoingMessage hailMessage) Parameters Type Name Description NetworkEndpoint host The remote host endpoint to connect to. OutgoingMessage hailMessage The hail message to pass. CreateMessage(MessageType) Creates a new outgoing message. Declaration OutgoingMessage CreateMessage(MessageType type = MessageType.Data) Parameters Type Name Description MessageType type The message type. Returns Type Description OutgoingMessage The create outgoing message. Disconnect() Disconnect from server. Declaration void Disconnect() DiscoverHosts(int) Emit a discovery signal to all hosts on your subnet. Hosts with the same appId and port will be notified by the HostDisconnected event. Declaration void DiscoverHosts(int port) Parameters Type Name Description int port The expected port. Send(OutgoingMessage, DeliveryMethod) Sends the specified message to host. Declaration void Send(OutgoingMessage toSendMessage, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage toSendMessage To message to send. DeliveryMethod deliveryMethod The delivery method. Events HostConnected Occurs when the client is connected to a host. Declaration event EventHandler<HostConnectedEventArgs> HostConnected Event Type Type Description EventHandler<HostConnectedEventArgs> HostDisconnected Occurs when the client is disconnected from the host. Declaration event EventHandler<HostDisconnectedEventArgs> HostDisconnected Event Type Type Description EventHandler<HostDisconnectedEventArgs> HostDiscovered Occurs when a new host with the same application identifier is discovered. Declaration event EventHandler<HostDiscoveredEventArgs> HostDiscovered Event Type Type Description EventHandler<HostDiscoveredEventArgs> MessageReceived Occurs when a host message is received by the client. Declaration event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler<MessageReceivedEventArgs> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.INetworkFactory.html": {
    "href": "api/Evergine.Networking.Connection.INetworkFactory.html",
    "title": "Interface INetworkFactory | Evergine Doc",
    "keywords": "Interface INetworkFactory This class is a factory of main network components. Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public interface INetworkFactory Methods CreateNetworkClient(string, float, float) Creates the network client. Declaration INetworkClient CreateNetworkClient(string applicationIdentifier, float pingInterval, float connectionTimeout) Parameters Type Name Description string applicationIdentifier The application identifier. float pingInterval Ping interval in seconds. float connectionTimeout Connection timeout in seconds. Returns Type Description INetworkClient A network client instance. CreateNetworkServer(string, int, float, float, string) Creates the network server. Declaration INetworkServer CreateNetworkServer(string applicationIdentifier, int port, float pingInterval, float connectionTimeout, string serverName = null) Parameters Type Name Description string applicationIdentifier The application identifier. int port The port. float pingInterval Ping interval in seconds. float connectionTimeout Connection timeout in seconds. string serverName The server name. It is sent in every discovery response. Returns Type Description INetworkServer A network server instance. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.INetworkServer.html": {
    "href": "api/Evergine.Networking.Connection.INetworkServer.html",
    "title": "Interface INetworkServer | Evergine Doc",
    "keywords": "Interface INetworkServer The network server interface. Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public interface INetworkServer Methods CreateMessage(MessageType) Creates a new outgoing message. Declaration OutgoingMessage CreateMessage(MessageType type = MessageType.Data) Parameters Type Name Description MessageType type The type. Returns Type Description OutgoingMessage The created outgoing message. Send(IncomingMessage, DeliveryMethod) Sends the specified incoming message to others clients. Declaration void Send(IncomingMessage message, DeliveryMethod deliveryMethod) Parameters Type Name Description IncomingMessage message The message. DeliveryMethod deliveryMethod The delivery method. Send(IncomingMessage, DeliveryMethod, NetworkEndpoint) Sends the specified incoming message to the specified client. Declaration void Send(IncomingMessage message, DeliveryMethod deliveryMethod, NetworkEndpoint destinationClient) Parameters Type Name Description IncomingMessage message The message. DeliveryMethod deliveryMethod The delivery method. NetworkEndpoint destinationClient The destination client. Send(IncomingMessage, DeliveryMethod, IEnumerable<NetworkEndpoint>) Sends the specified incoming message to the specified clients. Declaration void Send(IncomingMessage message, DeliveryMethod deliveryMethod, IEnumerable<NetworkEndpoint> destinationClients) Parameters Type Name Description IncomingMessage message The message. DeliveryMethod deliveryMethod The delivery method. IEnumerable<NetworkEndpoint> destinationClients The destination clients. Send(OutgoingMessage, DeliveryMethod) Sends the specified outgoing message to all the clients. Declaration void Send(OutgoingMessage message, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage message The message. DeliveryMethod deliveryMethod The delivery method. Send(OutgoingMessage, DeliveryMethod, NetworkEndpoint) Sends the specified outgoing message to the specified client. Declaration void Send(OutgoingMessage message, DeliveryMethod deliveryMethod, NetworkEndpoint destinationClient) Parameters Type Name Description OutgoingMessage message The message. DeliveryMethod deliveryMethod The delivery method. NetworkEndpoint destinationClient The destination client. Send(OutgoingMessage, DeliveryMethod, IEnumerable<NetworkEndpoint>) Sends the specified outgoing message to the specified clients. Declaration void Send(OutgoingMessage message, DeliveryMethod deliveryMethod, IEnumerable<NetworkEndpoint> destinationClients) Parameters Type Name Description OutgoingMessage message The message. DeliveryMethod deliveryMethod The delivery method. IEnumerable<NetworkEndpoint> destinationClients The destination clients. ShutdownAsync() Shutdowns the server. Declaration Task ShutdownAsync() Returns Type Description Task A Task representing the asynchronous operation. StartAsync() Starts the server. Declaration Task StartAsync() Returns Type Description Task A Task representing the asynchronous operation. Events ClientConnected Occurs when the server receives a new client connection. Declaration event EventHandler<ClientConnectedEventArgs> ClientConnected Event Type Type Description EventHandler<ClientConnectedEventArgs> Remarks The incoming message represent the hail message sent by the client. ClientConnecting Occurs when the server receives a new client connection request. Declaration event EventHandler<ClientConnectingEventArgs> ClientConnecting Event Type Type Description EventHandler<ClientConnectingEventArgs> ClientDisconnected Occurs when the server lose the connection with a client. Declaration event EventHandler<ClientDisconnectedEventArgs> ClientDisconnected Event Type Type Description EventHandler<ClientDisconnectedEventArgs> MessageReceived Occurs when a message is received by the server. Declaration event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler<MessageReceivedEventArgs> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.MessageReceivedEventArgs.html": {
    "href": "api/Evergine.Networking.Connection.MessageReceivedEventArgs.html",
    "title": "Class MessageReceivedEventArgs | Evergine Doc",
    "keywords": "Class MessageReceivedEventArgs Represents the arguments of the message received event. Inheritance object EventArgs MessageReceivedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class MessageReceivedEventArgs : EventArgs Constructors MessageReceivedEventArgs(NetworkEndpoint, IncomingMessage) Initializes a new instance of the MessageReceivedEventArgs class. Declaration public MessageReceivedEventArgs(NetworkEndpoint fromEndpoint, IncomingMessage receivedMessage) Parameters Type Name Description NetworkEndpoint fromEndpoint The endpoint of the sender. IncomingMessage receivedMessage The received message. Properties FromEndpoint Gets the endpoint of the sender. Declaration public NetworkEndpoint FromEndpoint { get; } Property Value Type Description NetworkEndpoint ReceivedMessage Gets the received message. Declaration public IncomingMessage ReceivedMessage { get; } Property Value Type Description IncomingMessage Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.Messages.EvergineExtensions.html": {
    "href": "api/Evergine.Networking.Connection.Messages.EvergineExtensions.html",
    "title": "Class EvergineExtensions | Evergine Doc",
    "keywords": "Class EvergineExtensions Extension methods to read and write Evergine types in or from a Lidgren.Network.NetBuffer. Inheritance object EvergineExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection.Messages Assembly: Evergine.Networking.dll Syntax public static class EvergineExtensions Methods ReadColor(NetBuffer) Reads a Color value from the Lidgren.Network.NetBuffer. Declaration public static Color ReadColor(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to write to. Returns Type Description Color A Color value. ReadDateTime(NetBuffer) Reads a DateTime value from the Lidgren.Network.NetBuffer using a 64 bits data. Declaration public static DateTime ReadDateTime(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to write to. Returns Type Description DateTime A DateTime value. ReadMatrix3x3(NetBuffer) Reads a Matrix3x3 value from the Lidgren.Network.NetBuffer. Declaration public static Matrix3x3 ReadMatrix3x3(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to write to. Returns Type Description Matrix3x3 A Matrix3x3 value. ReadMatrix4x4(NetBuffer) Reads a Matrix4x4 value from the Lidgren.Network.NetBuffer. Declaration public static Matrix4x4 ReadMatrix4x4(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to write to. Returns Type Description Matrix4x4 A Matrix4x4 value. ReadNetworkEndpoint(NetBuffer) Reads a NetworkEndpoint value from the Lidgren.Network.NetBuffer. Declaration public static NetworkEndpoint ReadNetworkEndpoint(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to write to. Returns Type Description NetworkEndpoint A NetworkEndpoint value. ReadQuaternion(NetBuffer) Reads a Quaternion value from the Lidgren.Network.NetBuffer. Declaration public static Quaternion ReadQuaternion(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to write to. Returns Type Description Quaternion A Quaternion value. ReadTimeSpan(NetBuffer, bool) Reads a TimeSpan value from the Lidgren.Network.NetBuffer. Declaration public static TimeSpan ReadTimeSpan(this NetBuffer message, bool highPrecision) Parameters Type Name Description NetBuffer message The buffer to write to. bool highPrecision Indicates whether the TimeSpan will be read using high precision (ticks) or not (milliseconds). Returns Type Description TimeSpan A TimeSpan value. Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds). ReadVector2(NetBuffer) Reads a Vector2 value from the Lidgren.Network.NetBuffer. Declaration public static Vector2 ReadVector2(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to read from. Returns Type Description Vector2 A Vector2 value. ReadVector3(NetBuffer) Reads a Vector3 value from the Lidgren.Network.NetBuffer. Declaration public static Vector3 ReadVector3(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to read from. Returns Type Description Vector3 A Vector3 value. ReadVector4(NetBuffer) Reads a Vector4 value from the Lidgren.Network.NetBuffer. Declaration public static Vector4 ReadVector4(this NetBuffer message) Parameters Type Name Description NetBuffer message The buffer to read from. Returns Type Description Vector4 A Vector4 value. Write(NetBuffer, Color) Write a Color to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, Color value) Parameters Type Name Description NetBuffer message The buffer to write to. Color value The Color value. Write(NetBuffer, Matrix3x3) Write a Matrix3x3 to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, Matrix3x3 value) Parameters Type Name Description NetBuffer message The buffer to write to. Matrix3x3 value The Matrix3x3 value. Write(NetBuffer, Matrix4x4) Write a Matrix4x4 to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, Matrix4x4 value) Parameters Type Name Description NetBuffer message The buffer to write to. Matrix4x4 value The Matrix4x4 value. Write(NetBuffer, Quaternion) Write a Quaternion to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, Quaternion value) Parameters Type Name Description NetBuffer message The buffer to write to. Quaternion value The Quaternion value. Write(NetBuffer, Vector2) Write a Vector2 to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, Vector2 value) Parameters Type Name Description NetBuffer message The buffer to write to. Vector2 value The Vector2 value. Write(NetBuffer, Vector3) Write a Vector3 to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, Vector3 value) Parameters Type Name Description NetBuffer message The buffer to write to. Vector3 value The Vector3 value. Write(NetBuffer, Vector4) Write a Vector4 to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, Vector4 value) Parameters Type Name Description NetBuffer message The buffer to write to. Vector4 value The Vector4 value. Write(NetBuffer, NetworkEndpoint) Write a NetworkEndpoint to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, NetworkEndpoint value) Parameters Type Name Description NetBuffer message The buffer to write to. NetworkEndpoint value The NetworkEndpoint value. Write(NetBuffer, DateTime) Write a DateTime to the specified Lidgren.Network.NetBuffer using a 64 bits data. Declaration public static void Write(this NetBuffer message, DateTime value) Parameters Type Name Description NetBuffer message The buffer to write to. DateTime value The DateTime value. Write(NetBuffer, TimeSpan, bool) Write a TimeSpan to the specified Lidgren.Network.NetBuffer. Declaration public static void Write(this NetBuffer message, TimeSpan value, bool highPrecision) Parameters Type Name Description NetBuffer message The buffer to write to. TimeSpan value The TimeSpan value. bool highPrecision Indicates whether the TimeSpan will be written using high precision (ticks) or not (milliseconds). Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds)."
  },
  "api/Evergine.Networking.Connection.Messages.html": {
    "href": "api/Evergine.Networking.Connection.Messages.html",
    "title": "Namespace Evergine.Networking.Connection.Messages | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Connection.Messages Classes EvergineExtensions Extension methods to read and write Evergine types in or from a Lidgren.Network.NetBuffer. IncomingMessage This class represent an incoming message. OutgoingMessage This class represent an outgoing message. Enums MessageType Message type."
  },
  "api/Evergine.Networking.Connection.Messages.IncomingMessage.html": {
    "href": "api/Evergine.Networking.Connection.Messages.IncomingMessage.html",
    "title": "Class IncomingMessage | Evergine Doc",
    "keywords": "Class IncomingMessage This class represent an incoming message. Inheritance object IncomingMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection.Messages Assembly: Evergine.Networking.dll Syntax public class IncomingMessage Constructors IncomingMessage(NetIncomingMessage) Initializes a new instance of the IncomingMessage class. Declaration public IncomingMessage(NetIncomingMessage message) Parameters Type Name Description NetIncomingMessage message The message. Properties InnerMessage Gets the inner NetIncomingMessage. Declaration public object InnerMessage { get; } Property Value Type Description object LengthBits Gets the length of the used portion of the buffer in bits. Declaration public int LengthBits { get; } Property Value Type Description int LengthBytes Gets the length of the used portion of the buffer in bytes. Declaration public int LengthBytes { get; } Property Value Type Description int Methods GetData() Gets the message data. Declaration public byte[] GetData() Returns Type Description byte[] The message byte[]. ReadBoolean() Reads the next boolean. Declaration public bool ReadBoolean() Returns Type Description bool The next boolean in the message. ReadByte(int) Reads the next byte (or bits). Declaration public byte ReadByte(int numberOfBits = 8) Parameters Type Name Description int numberOfBits The number of bits that should be read. By default 8 bits. Returns Type Description byte The next byte (or bits) in the message. Exceptions Type Condition ArgumentException ReadByte(bits) can only read between 1 and 8 bits. ReadBytes() Reads the bytes of length of next int. Declaration public byte[] ReadBytes() Returns Type Description byte[] The next byte array. ReadColor() Reads the next Color. Declaration public Color ReadColor() Returns Type Description Color The next Color in the message. ReadDateTime() Reads the next DateTime. Declaration public DateTime ReadDateTime() Returns Type Description DateTime The next DateTime in the message. ReadInt16() Reads the next int16. Declaration public short ReadInt16() Returns Type Description short The next int16 in the message. ReadInt32() Reads the next int32. Declaration public int ReadInt32() Returns Type Description int The next int32 in the message. ReadInt64() Reads the next int64. Declaration public long ReadInt64() Returns Type Description long The next int64 in the message. ReadMatrix3x3() Reads the next Matrix3x3. Declaration public Matrix3x3 ReadMatrix3x3() Returns Type Description Matrix3x3 The next Matrix3x3 in the message. ReadMatrix4x4() Reads the next Matrix4x4. Declaration public Matrix4x4 ReadMatrix4x4() Returns Type Description Matrix4x4 The next Matrix4x4 in the message. ReadQuaternion() Reads the next Quaternion. Declaration public Quaternion ReadQuaternion() Returns Type Description Quaternion The next Quaternion in the message. ReadSingle() Reads the next single. Declaration public float ReadSingle() Returns Type Description float The next single in the message. ReadString() Reads the next string. Declaration public string ReadString() Returns Type Description string The next string in the message. ReadTimeSpan(bool) Reads the next TimeSpan. Declaration public TimeSpan ReadTimeSpan(bool highPrecision) Parameters Type Name Description bool highPrecision Indicates whether the TimeSpan will be read using high precision (ticks) or not (milliseconds). Returns Type Description TimeSpan The next TimeSpan in the message. Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds). ReadVector2() Reads the next Vector2. Declaration public Vector2 ReadVector2() Returns Type Description Vector2 The next Vector2 in the message. ReadVector3() Reads the next Vector3. Declaration public Vector3 ReadVector3() Returns Type Description Vector3 The next Vector3 in the message. ReadVector4() Reads the next Vector4. Declaration public Vector4 ReadVector4() Returns Type Description Vector4 The next Vector4 in the message. Seek(int) Seeks the specified offset bytes. Declaration public void Seek(int offsetBytes) Parameters Type Name Description int offsetBytes The offset bytes. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.Messages.MessageType.html": {
    "href": "api/Evergine.Networking.Connection.Messages.MessageType.html",
    "title": "Enum MessageType | Evergine Doc",
    "keywords": "Enum MessageType Message type. Namespace: Evergine.Networking.Connection.Messages Assembly: Evergine.Networking.dll Syntax public enum MessageType : byte Fields Name Description Data Data message type. Synchronization Synchronization message type. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.Messages.OutgoingMessage.html": {
    "href": "api/Evergine.Networking.Connection.Messages.OutgoingMessage.html",
    "title": "Class OutgoingMessage | Evergine Doc",
    "keywords": "Class OutgoingMessage This class represent an outgoing message. Inheritance object OutgoingMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection.Messages Assembly: Evergine.Networking.dll Syntax public class OutgoingMessage Constructors OutgoingMessage(NetOutgoingMessage) Initializes a new instance of the OutgoingMessage class. Declaration public OutgoingMessage(NetOutgoingMessage message) Parameters Type Name Description NetOutgoingMessage message The message. Properties InnerMessage Gets the inner NetOutgoingMessage. Declaration public object InnerMessage { get; } Property Value Type Description object LengthBits Gets the length of the used portion of the buffer in bits. Declaration public int LengthBits { get; } Property Value Type Description int LengthBytes Gets the length of the used portion of the buffer in bytes. Declaration public int LengthBytes { get; } Property Value Type Description int Methods Write(Color) Writes the specified value. Declaration public void Write(Color value) Parameters Type Name Description Color value The value. Write(Matrix3x3) Writes the specified value. Declaration public void Write(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The value. Write(Matrix4x4) Writes the specified value. Declaration public void Write(Matrix4x4 value) Parameters Type Name Description Matrix4x4 value The value. Write(Quaternion) Writes the specified value. Declaration public void Write(Quaternion value) Parameters Type Name Description Quaternion value The value. Write(Vector2) Writes the specified value. Declaration public void Write(Vector2 value) Parameters Type Name Description Vector2 value The value. Write(Vector3) Writes the specified value. Declaration public void Write(Vector3 value) Parameters Type Name Description Vector3 value The value. Write(Vector4) Writes the specified value. Declaration public void Write(Vector4 value) Parameters Type Name Description Vector4 value The value. Write(OutgoingMessage) Append all the bits of message to this message. Declaration public void Write(OutgoingMessage message) Parameters Type Name Description OutgoingMessage message The message. Write(bool) Writes the specified value. Declaration public void Write(bool value) Parameters Type Name Description bool value The value. Write(byte, int) Writes the specified byte (or bits). Declaration public void Write(byte source, int numberOfBits = 8) Parameters Type Name Description byte source The value. int numberOfBits The number of bits that should be read. By default 8 bits. Exceptions Type Condition ArgumentException ReadByte(bits) can only read between 1 and 8 bits. Write(byte[]) Writes all bytes in an array, preceded with the length as an integer. Declaration public void Write(byte[] value) Parameters Type Name Description byte[] value The value. Write(byte[], int, int) Writes the specified number of bytes from an array, preceded with the length as an integer. Declaration public void Write(byte[] value, int offsetInBytes, int numberOfBytes) Parameters Type Name Description byte[] value The value. int offsetInBytes Offset in bytes. int numberOfBytes Numbers of bytes to write. Write(DateTime) Writes the specified value. Declaration public void Write(DateTime value) Parameters Type Name Description DateTime value The value. Write(short) Writes the specified value. Declaration public void Write(short value) Parameters Type Name Description short value The value. Write(int) Writes the specified value. Declaration public void Write(int value) Parameters Type Name Description int value The value. Write(long) Writes the specified value. Declaration public void Write(long value) Parameters Type Name Description long value The value. Write(float) Writes the specified value. Declaration public void Write(float value) Parameters Type Name Description float value The value. Write(string) Writes the specified value. Declaration public void Write(string value) Parameters Type Name Description string value The value. Write(TimeSpan, bool) Writes the specified value. Declaration public void Write(TimeSpan value, bool highPrecision) Parameters Type Name Description TimeSpan value The value. bool highPrecision Indicates whether the TimeSpan will be written using high precision (ticks) or not (milliseconds). Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds). Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.NetworkClient.html": {
    "href": "api/Evergine.Networking.Connection.NetworkClient.html",
    "title": "Class NetworkClient | Evergine Doc",
    "keywords": "Class NetworkClient The network client. Inheritance object NetworkClient Implements INetworkClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class NetworkClient : INetworkClient Constructors NetworkClient(string, float, float) Initializes a new instance of the NetworkClient class. Declaration public NetworkClient(string applicationIdentifier, float pingInterval, float connectionTimeout) Parameters Type Name Description string applicationIdentifier The application identifier. float pingInterval Ping interval in seconds. float connectionTimeout Connection timeout in seconds. Properties Identifier Gets the identifier. Declaration public long Identifier { get; } Property Value Type Description long The identifier. IsConnected Gets a value indicating whether this instance is connected. Declaration public bool IsConnected { get; } Property Value Type Description bool true if this instance is connected; otherwise, false. Methods Connect(NetworkEndpoint) Connects to a remote host. Declaration public void Connect(NetworkEndpoint host) Parameters Type Name Description NetworkEndpoint host The remote host endpoint to connect to. Connect(NetworkEndpoint, OutgoingMessage) Connects to a remote host. Declaration public void Connect(NetworkEndpoint host, OutgoingMessage hailMessage) Parameters Type Name Description NetworkEndpoint host The remote host endpoint to connect to. OutgoingMessage hailMessage The hail message to pass. CreateMessage(MessageType) Creates a new outgoing message. Declaration public OutgoingMessage CreateMessage(MessageType type = MessageType.Data) Parameters Type Name Description MessageType type The message type. Returns Type Description OutgoingMessage The create outgoing message. Disconnect() Disconnect from server. Declaration public void Disconnect() DiscoverHosts(int) Emit a discovery signal to all hosts on your subnet. Hosts with the same appId and port will be notified by the HostDisconnected event. Declaration public void DiscoverHosts(int port) Parameters Type Name Description int port The expected port. OnHostConnected(NetworkEndpoint) Called when the client connects with the host. Declaration protected virtual void OnHostConnected(NetworkEndpoint host) Parameters Type Name Description NetworkEndpoint host The host. OnHostDisconnected(NetworkEndpoint) Called when the client lose the connection with the host. Declaration protected virtual void OnHostDisconnected(NetworkEndpoint host) Parameters Type Name Description NetworkEndpoint host The host endpoint. OnHostDiscovered(NetworkEndpoint, string) Called when a host with the same application identifier is discovered. Declaration protected virtual void OnHostDiscovered(NetworkEndpoint host, string serverName) Parameters Type Name Description NetworkEndpoint host The discovered host endpoint. string serverName The server name. OnMessageReceived(NetworkEndpoint, IncomingMessage) Called when message is received. Declaration protected virtual void OnMessageReceived(NetworkEndpoint host, IncomingMessage receivedMessage) Parameters Type Name Description NetworkEndpoint host The host endpoint that sent the message. IncomingMessage receivedMessage The received message. Send(OutgoingMessage, DeliveryMethod) Sends the specified message to host. Declaration public void Send(OutgoingMessage toSendMessage, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage toSendMessage To message to send. DeliveryMethod deliveryMethod The delivery method. Events HostConnected Occurs when the client is connected to a host. Declaration public event EventHandler<HostConnectedEventArgs> HostConnected Event Type Type Description EventHandler<HostConnectedEventArgs> HostDisconnected Occurs when the client is disconnected from the host. Declaration public event EventHandler<HostDisconnectedEventArgs> HostDisconnected Event Type Type Description EventHandler<HostDisconnectedEventArgs> HostDiscovered Occurs when a new host with the same application identifier is discovered. Declaration public event EventHandler<HostDiscoveredEventArgs> HostDiscovered Event Type Type Description EventHandler<HostDiscoveredEventArgs> MessageReceived Occurs when a host message is received by the client. Declaration public event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler<MessageReceivedEventArgs> Implements INetworkClient Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.NetworkFactory.html": {
    "href": "api/Evergine.Networking.Connection.NetworkFactory.html",
    "title": "Class NetworkFactory | Evergine Doc",
    "keywords": "Class NetworkFactory Factory to main network components. Inheritance object NetworkFactory Implements INetworkFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class NetworkFactory : INetworkFactory Methods CreateNetworkClient(string, float, float) Creates the network client. Declaration public INetworkClient CreateNetworkClient(string applicationIdentifier, float pingInterval, float connectionTimeout) Parameters Type Name Description string applicationIdentifier The application identifier. float pingInterval Ping interval in seconds. float connectionTimeout Connection timeout in seconds. Returns Type Description INetworkClient A new network client. CreateNetworkServer(string, int, float, float, string) Creates the network server. Declaration public INetworkServer CreateNetworkServer(string applicationIdentifier, int port, float pingInterval, float connectionTimeout, string serverName = null) Parameters Type Name Description string applicationIdentifier The application identifier. int port The port. float pingInterval Ping interval in seconds. float connectionTimeout Connection timeout in seconds. string serverName The server name. It is sent in every discovery response. Returns Type Description INetworkServer A new network server. Implements INetworkFactory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Connection.NetworkServer.html": {
    "href": "api/Evergine.Networking.Connection.NetworkServer.html",
    "title": "Class NetworkServer | Evergine Doc",
    "keywords": "Class NetworkServer The network server. Inheritance object NetworkServer Implements INetworkServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Connection Assembly: Evergine.Networking.dll Syntax public class NetworkServer : INetworkServer Constructors NetworkServer(string, int, float, float, string) Initializes a new instance of the NetworkServer class. Declaration public NetworkServer(string applicationIdentifier, int port, float pingInterval, float connectionTimeout, string serverName = null) Parameters Type Name Description string applicationIdentifier The application identifier. int port The port. float pingInterval Ping interval in seconds. float connectionTimeout Connection timeout in seconds. string serverName The server name. It is sent in every discovery response. Methods CreateMessage(MessageType) Creates a new outgoing message. Declaration public OutgoingMessage CreateMessage(MessageType type = MessageType.Data) Parameters Type Name Description MessageType type The type. Returns Type Description OutgoingMessage The created outgoing message. OnClientConnected(NetworkEndpoint, IncomingMessage) Called when [client connected]. Declaration protected virtual void OnClientConnected(NetworkEndpoint client, IncomingMessage hailMessage) Parameters Type Name Description NetworkEndpoint client The client endpoint. IncomingMessage hailMessage The hail message received from the client. OnClientDisconnected(NetworkEndpoint) Called when [client disconnected]. Declaration protected virtual void OnClientDisconnected(NetworkEndpoint client) Parameters Type Name Description NetworkEndpoint client The client endpoint. OnMessageReceived(NetworkEndpoint, IncomingMessage) Called when a message is received by the server. Declaration protected virtual void OnMessageReceived(NetworkEndpoint client, IncomingMessage receivedMessage) Parameters Type Name Description NetworkEndpoint client The client endpoint that sent the message. IncomingMessage receivedMessage The received message. Send(IncomingMessage, DeliveryMethod) Sends the specified incoming message to others clients. Declaration public void Send(IncomingMessage incomingMessage, DeliveryMethod deliveryMethod) Parameters Type Name Description IncomingMessage incomingMessage DeliveryMethod deliveryMethod The delivery method. Send(IncomingMessage, DeliveryMethod, NetworkEndpoint) Sends the specified incoming message to the specified client. Declaration public void Send(IncomingMessage toSendMessage, DeliveryMethod deliveryMethod, NetworkEndpoint destinationClient) Parameters Type Name Description IncomingMessage toSendMessage DeliveryMethod deliveryMethod The delivery method. NetworkEndpoint destinationClient The destination client. Send(IncomingMessage, DeliveryMethod, IEnumerable<NetworkEndpoint>) Sends the specified incoming message to the specified clients. Declaration public void Send(IncomingMessage toSendMessage, DeliveryMethod deliveryMethod, IEnumerable<NetworkEndpoint> destinationClients) Parameters Type Name Description IncomingMessage toSendMessage DeliveryMethod deliveryMethod The delivery method. IEnumerable<NetworkEndpoint> destinationClients The destination clients. Send(OutgoingMessage, DeliveryMethod) Sends the specified outgoing message to all the clients. Declaration public void Send(OutgoingMessage toSendMessage, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage toSendMessage DeliveryMethod deliveryMethod The delivery method. Send(OutgoingMessage, DeliveryMethod, NetworkEndpoint) Sends the specified outgoing message to the specified client. Declaration public void Send(OutgoingMessage toSendMessage, DeliveryMethod deliveryMethod, NetworkEndpoint destinationClient) Parameters Type Name Description OutgoingMessage toSendMessage DeliveryMethod deliveryMethod The delivery method. NetworkEndpoint destinationClient The destination client. Send(OutgoingMessage, DeliveryMethod, IEnumerable<NetworkEndpoint>) Sends the specified outgoing message to the specified clients. Declaration public void Send(OutgoingMessage toSendMessage, DeliveryMethod deliveryMethod, IEnumerable<NetworkEndpoint> destinationClients) Parameters Type Name Description OutgoingMessage toSendMessage DeliveryMethod deliveryMethod The delivery method. IEnumerable<NetworkEndpoint> destinationClients The destination clients. ShutdownAsync() Shutdowns the server. Declaration public Task ShutdownAsync() Returns Type Description Task A Task representing the asynchronous operation. StartAsync() Starts the server. Declaration public Task StartAsync() Returns Type Description Task A Task representing the asynchronous operation. Events ClientConnected Occurs when the server receives a new client connection. Declaration public event EventHandler<ClientConnectedEventArgs> ClientConnected Event Type Type Description EventHandler<ClientConnectedEventArgs> Remarks The incoming message represent the hail message sent by the client. ClientConnecting Occurs when the server receives a new client connection request. Declaration public event EventHandler<ClientConnectingEventArgs> ClientConnecting Event Type Type Description EventHandler<ClientConnectingEventArgs> ClientDisconnected Occurs when the server lose the connection with a client. Declaration public event EventHandler<ClientDisconnectedEventArgs> ClientDisconnected Event Type Type Description EventHandler<ClientDisconnectedEventArgs> MessageReceived Occurs when a message is received by the server. Declaration public event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler<MessageReceivedEventArgs> Implements INetworkServer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.html": {
    "href": "api/Evergine.Networking.html",
    "title": "Namespace Evergine.Networking | Evergine Doc",
    "keywords": "Namespace Evergine.Networking Classes NetworkEndpoint This class represent a network endpoint. NetworkPropertiesTable This class represents a properties table used for custom properties of network players and rooms. RoomOptions This class describes the options for a new room. Interfaces INetworkSerializable This interface defines a network serializable object."
  },
  "api/Evergine.Networking.INetworkSerializable.html": {
    "href": "api/Evergine.Networking.INetworkSerializable.html",
    "title": "Interface INetworkSerializable | Evergine Doc",
    "keywords": "Interface INetworkSerializable This interface defines a network serializable object. Namespace: Evergine.Networking Assembly: Evergine.Networking.dll Syntax public interface INetworkSerializable Methods Read(NetBuffer) Read this instance fields from a network buffer. Declaration void Read(NetBuffer buffer) Parameters Type Name Description NetBuffer buffer The network buffer. Write(NetBuffer) Writes this instance fields to a network buffer. Declaration void Write(NetBuffer buffer) Parameters Type Name Description NetBuffer buffer The network buffer. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Messages.DeliveryMethod.html": {
    "href": "api/Evergine.Networking.Messages.DeliveryMethod.html",
    "title": "Enum DeliveryMethod | Evergine Doc",
    "keywords": "Enum DeliveryMethod How the library deals with resends and handling of late messages. Namespace: Evergine.Networking.Messages Assembly: Evergine.Networking.dll Syntax public enum DeliveryMethod : byte Fields Name Description ReliableOrdered Reliable, ordered delivery ReliableSequenced Reliable delivery, except for late messages which are dropped ReliableUnordered Reliable delivery, but unordered Unknown Indicates an error Unreliable Unreliable, unordered delivery UnreliableSequenced Unreliable delivery, but automatically dropping late messages Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Messages.EnterRoomResultCodes.html": {
    "href": "api/Evergine.Networking.Messages.EnterRoomResultCodes.html",
    "title": "Enum EnterRoomResultCodes | Evergine Doc",
    "keywords": "Enum EnterRoomResultCodes Incoming enter room result codes received by the client. Namespace: Evergine.Networking.Messages Assembly: Evergine.Networking.dll Syntax public enum EnterRoomResultCodes : byte Fields Name Description Aborted The join or create operation has been aborted by the client. Rejected The join operation has been rejected by the server. RoomAlreadyExists The room specified by the create operation already exists. RoomIsFull The room operation by the join operation is full. RoomNotExists The room specified by the join opeartion does not exists. Succeed The join or create operation was succeeded. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Messages.html": {
    "href": "api/Evergine.Networking.Messages.html",
    "title": "Namespace Evergine.Networking.Messages | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Messages Enums DeliveryMethod How the library deals with resends and handling of late messages. EnterRoomResultCodes Incoming enter room result codes received by the client."
  },
  "api/Evergine.Networking.NetworkEndpoint.html": {
    "href": "api/Evergine.Networking.NetworkEndpoint.html",
    "title": "Class NetworkEndpoint | Evergine Doc",
    "keywords": "Class NetworkEndpoint This class represent a network endpoint. Inheritance object NetworkEndpoint Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.Networking Assembly: Evergine.Networking.dll Syntax public class NetworkEndpoint Constructors NetworkEndpoint(string, int) Initializes a new instance of the NetworkEndpoint class. Declaration public NetworkEndpoint(string address, int port) Parameters Type Name Description string address The IP address. int port The port. Properties Address Gets the IP address. Declaration public string Address { get; } Property Value Type Description string Port Gets the port. Declaration public int Port { get; } Property Value Type Description int Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() Parse(string) Converts an IP address string with port to a NetworkEndpoint instance. Declaration public static NetworkEndpoint Parse(string epString) Parameters Type Name Description string epString A string that contains an IP address in dotted-quad notation for IPv4 followed by colon and the port number. Returns Type Description NetworkEndpoint A NetworkEndpoint instance. ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.NetworkPropertiesTable.html": {
    "href": "api/Evergine.Networking.NetworkPropertiesTable.html",
    "title": "Class NetworkPropertiesTable | Evergine Doc",
    "keywords": "Class NetworkPropertiesTable This class represents a properties table used for custom properties of network players and rooms. Inheritance object NetworkPropertiesTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking Assembly: Evergine.Networking.dll Syntax public class NetworkPropertiesTable Properties IsReadOnly Gets a value indicating whether the properties of this table are read only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool Keys Gets a enumerable that contains the existing keys in the properties table. Declaration public IEnumerable<byte> Keys { get; } Property Value Type Description IEnumerable<byte> NeedSync Gets a value indicating whether this properties table needs to be sync or not. Declaration public bool NeedSync { get; } Property Value Type Description bool Methods Clear() Clears all the existing properties in the table. Declaration public void Clear() ContainsKey(byte) Determines whether the properties table contains the specified key. Declaration public bool ContainsKey(byte key) Parameters Type Name Description byte key The byte key to locate in the properties table. Returns Type Description bool true if the properties table contains an element with the specified key; otherwise, false. GetBoolean(byte) Gets a boolean value from the specified key from the properties table. Declaration public bool GetBoolean(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description bool A boolean value. GetByte(byte) Gets a byte value from the specified key from the properties table. Declaration public byte GetByte(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description byte A byte value. GetBytes(byte) Gets a byte array from the specified key from the properties table. Declaration public byte[] GetBytes(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description byte[] A byte array. GetColor(byte) Gets a Color value from the specified key from the properties table. Declaration public Color GetColor(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description Color A Color value. GetDateTime(byte) Gets a DateTime value from the specified key from the properties table. Declaration public DateTime GetDateTime(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description DateTime A DateTime value. GetFloat(byte) Gets a float value from the specified key from the properties table. Declaration public float GetFloat(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description float A float value. GetInt32(byte) Gets a integer value from the specified key from the properties table. Declaration public int GetInt32(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description int A integer value. GetInt64(byte) Gets a long value from the specified key from the properties table. Declaration public long GetInt64(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description long A long value. GetMatrix3x3(byte) Gets a Matrix3x3 value from the specified key from the properties table. Declaration public Matrix3x3 GetMatrix3x3(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description Matrix3x3 A Matrix3x3 value. GetMatrix4x4(byte) Gets a Matrix4x4 value from the specified key from the properties table. Declaration public Matrix4x4 GetMatrix4x4(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description Matrix4x4 A Matrix4x4 value. GetNetworkEndpoint(byte) Gets a NetworkEndpoint value from the specified key from the properties table. Declaration public NetworkEndpoint GetNetworkEndpoint(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description NetworkEndpoint A NetworkEndpoint value. GetQuaternion(byte) Gets a Quaternion value from the specified key from the properties table. Declaration public Quaternion GetQuaternion(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description Quaternion A Quaternion value. GetSerializable<T>(byte) Gets a INetworkSerializable value from the specified key from the properties table. Declaration public T GetSerializable<T>(byte key) where T : INetworkSerializable, new() Parameters Type Name Description byte key The byte key. Returns Type Description T A INetworkSerializable value. Type Parameters Name Description T An INetworkSerializable type. GetString(byte) Gets a string value from the specified key from the properties table. Declaration public string GetString(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description string A string value. GetTimeSpan(byte, bool) Gets a TimeSpan value from the specified key from the properties table. Declaration public TimeSpan GetTimeSpan(byte key, bool highPrecision) Parameters Type Name Description byte key The byte key. bool highPrecision Indicates whether the TimeSpan will be read using high precision (ticks) or not (milliseconds). Returns Type Description TimeSpan A TimeSpan value. Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds). GetVector2(byte) Gets a Vector2 value from the specified key from the properties table. Declaration public Vector2 GetVector2(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description Vector2 A Vector2 value. GetVector3(byte) Gets a Vector3 value from the specified key from the properties table. Declaration public Vector3 GetVector3(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description Vector3 A Vector3 value. GetVector4(byte) Gets a Vector4 value from the specified key from the properties table. Declaration public Vector4 GetVector4(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description Vector4 A Vector4 value. Remove(byte) Removes the value with the specified key from the properties table. Declaration public bool Remove(byte key) Parameters Type Name Description byte key The byte key. Returns Type Description bool true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the properties table. Set(byte, Color) Set a Color value for the specified key in the properties table. Declaration public void Set(byte key, Color value) Parameters Type Name Description byte key The byte key. Color value The Color value. Set(byte, Matrix3x3) Set a Matrix3x3 value for the specified key in the properties table. Declaration public void Set(byte key, Matrix3x3 value) Parameters Type Name Description byte key The byte key. Matrix3x3 value The Matrix3x3 value. Set(byte, Matrix4x4) Set a Matrix4x4 value for the specified key in the properties table. Declaration public void Set(byte key, Matrix4x4 value) Parameters Type Name Description byte key The byte key. Matrix4x4 value The Matrix4x4 value. Set(byte, Quaternion) Set a Quaternion value for the specified key in the properties table. Declaration public void Set(byte key, Quaternion value) Parameters Type Name Description byte key The byte key. Quaternion value The Quaternion value. Set(byte, Vector2) Set a Vector2 value for the specified key in the properties table. Declaration public void Set(byte key, Vector2 value) Parameters Type Name Description byte key The byte key. Vector2 value The Vector2 value. Set(byte, Vector3) Set a Vector3 value for the specified key in the properties table. Declaration public void Set(byte key, Vector3 value) Parameters Type Name Description byte key The byte key. Vector3 value The Vector3 value. Set(byte, Vector4) Set a Vector4 value for the specified key in the properties table. Declaration public void Set(byte key, Vector4 value) Parameters Type Name Description byte key The byte key. Vector4 value The Vector4 value. Set(byte, NetworkEndpoint) Set a NetworkEndpoint value for the specified key in the properties table. Declaration public void Set(byte key, NetworkEndpoint value) Parameters Type Name Description byte key The byte key. NetworkEndpoint value The NetworkEndpoint value. Set(byte, bool) Set a boolean value for the specified key in the properties table. Declaration public void Set(byte key, bool value) Parameters Type Name Description byte key The byte key. bool value The boolean value. Set(byte, byte) Set a byte value for the specified key in the properties table. Declaration public void Set(byte key, byte value) Parameters Type Name Description byte key The byte key. byte value The byte value. Set(byte, byte[]) Set a byte array for the specified key in the properties table. Declaration public void Set(byte key, byte[] value) Parameters Type Name Description byte key The byte key. byte[] value The byte array. Set(byte, DateTime) Set a DateTime value for the specified key in the properties table. Declaration public void Set(byte key, DateTime value) Parameters Type Name Description byte key The byte key. DateTime value The DateTime value. Set(byte, int) Set a integer value for the specified key in the properties table. Declaration public void Set(byte key, int value) Parameters Type Name Description byte key The byte key. int value The integer value. Set(byte, long) Set a long integer value for the specified key in the properties table. Declaration public void Set(byte key, long value) Parameters Type Name Description byte key The byte key. long value The long integer value. Set(byte, float) Set a float value for the specified key in the properties table. Declaration public void Set(byte key, float value) Parameters Type Name Description byte key The byte key. float value The float value. Set(byte, string) Set a string value for the specified key in the properties table. Declaration public void Set(byte key, string value) Parameters Type Name Description byte key The byte key. string value The string value. Set(byte, TimeSpan, bool) Set a TimeSpan value for the specified key in the properties table. Declaration public void Set(byte key, TimeSpan value, bool highPrecision) Parameters Type Name Description byte key The byte key. TimeSpan value The TimeSpan value. bool highPrecision Indicates whether the TimeSpan will be written using high precision (ticks) or not (milliseconds). Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds). Set<T>(byte, T) Gets a INetworkSerializable value from the specified key from the properties table. Declaration public void Set<T>(byte key, T value) where T : INetworkSerializable, new() Parameters Type Name Description byte key The byte key. T value The INetworkSerializable value. Type Parameters Name Description T An INetworkSerializable type. TryGetBoolean(byte, out bool) Gets a boolean value from the specified key from the properties table. Declaration public bool TryGetBoolean(byte key, out bool value) Parameters Type Name Description byte key The byte key. bool value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetByte(byte, out byte) Gets a byte value from the specified key from the properties table. Declaration public bool TryGetByte(byte key, out byte value) Parameters Type Name Description byte key The byte key. byte value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetBytes(byte, out byte[]) Gets a byte array from the specified key from the properties table. Declaration public bool TryGetBytes(byte key, out byte[] value) Parameters Type Name Description byte key The byte key. byte[] value The byte array associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetColor(byte, out Color) Gets a Color value from the specified key from the properties table. Declaration public bool TryGetColor(byte key, out Color value) Parameters Type Name Description byte key The byte key. Color value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetDateTime(byte, out DateTime) Gets a DateTime value from the specified key from the properties table. Declaration public bool TryGetDateTime(byte key, out DateTime value) Parameters Type Name Description byte key The byte key. DateTime value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetFloat(byte, out float) Gets a float value from the specified key from the properties table. Declaration public bool TryGetFloat(byte key, out float value) Parameters Type Name Description byte key The byte key. float value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetInt32(byte, out int) Gets a integer value from the specified key from the properties table. Declaration public bool TryGetInt32(byte key, out int value) Parameters Type Name Description byte key The byte key. int value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetInt64(byte, out long) Gets a long value from the specified key from the properties table. Declaration public bool TryGetInt64(byte key, out long value) Parameters Type Name Description byte key The byte key. long value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetMatrix3x3(byte, out Matrix3x3) Gets a Matrix3x3 value from the specified key from the properties table. Declaration public bool TryGetMatrix3x3(byte key, out Matrix3x3 value) Parameters Type Name Description byte key The byte key. Matrix3x3 value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetMatrix4x4(byte, out Matrix4x4) Gets a Matrix4x4 value from the specified key from the properties table. Declaration public bool TryGetMatrix4x4(byte key, out Matrix4x4 value) Parameters Type Name Description byte key The byte key. Matrix4x4 value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetNetworkEndpoint(byte, out NetworkEndpoint) Gets a NetworkEndpoint value from the specified key from the properties table. Declaration public bool TryGetNetworkEndpoint(byte key, out NetworkEndpoint value) Parameters Type Name Description byte key The byte key. NetworkEndpoint value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetQuaternion(byte, out Quaternion) Gets a Quaternion value from the specified key from the properties table. Declaration public bool TryGetQuaternion(byte key, out Quaternion value) Parameters Type Name Description byte key The byte key. Quaternion value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetSerializable<T>(byte, out T) Gets a INetworkSerializable value from the specified key from the properties table. Declaration public bool TryGetSerializable<T>(byte key, out T value) where T : INetworkSerializable, new() Parameters Type Name Description byte key The byte key. T value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. Type Parameters Name Description T An INetworkSerializable type. TryGetString(byte, out string) Gets a string value from the specified key from the properties table. Declaration public bool TryGetString(byte key, out string value) Parameters Type Name Description byte key The byte key. string value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetTimeSpan(byte, bool, out TimeSpan) Gets a TimeSpan value from the specified key from the properties table. Declaration public bool TryGetTimeSpan(byte key, bool highPrecision, out TimeSpan value) Parameters Type Name Description byte key The byte key. bool highPrecision Indicates whether the TimeSpan will be read using high precision (ticks) or not (milliseconds). TimeSpan value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. Remarks High precision allows full TimeSpan range, otherwise it will be limited to \"+-24.20:31:23.647\" (+-24 days, 20 hours, 31 minutes, 23 seconds and 647 milliseconds). TryGetVector2(byte, out Vector2) Gets a Vector2 value from the specified key from the properties table. Declaration public bool TryGetVector2(byte key, out Vector2 value) Parameters Type Name Description byte key The byte key. Vector2 value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetVector3(byte, out Vector3) Gets a Vector3 value from the specified key from the properties table. Declaration public bool TryGetVector3(byte key, out Vector3 value) Parameters Type Name Description byte key The byte key. Vector3 value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. TryGetVector4(byte, out Vector4) Gets a Vector4 value from the specified key from the properties table. Declaration public bool TryGetVector4(byte key, out Vector4 value) Parameters Type Name Description byte key The byte key. Vector4 value The value associated with the specified key, if the key exists; otherwise, the predefined value for the parameter type. Returns Type Description bool true if the table contains a property for the specified key; otherwise, false. Events PropertyAdded Occurs when a property in the properties table is added by a remote player. Declaration public event EventHandler<byte> PropertyAdded Event Type Type Description EventHandler<byte> PropertyChanged Occurs when a property in the properties table is changed by a remote player. Declaration public event EventHandler<byte> PropertyChanged Event Type Type Description EventHandler<byte> PropertyRemoved Occurs when a property in the properties table is removed by a remote player. Declaration public event EventHandler<byte> PropertyRemoved Event Type Type Description EventHandler<byte> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Players.BaseNetworkPlayer.html": {
    "href": "api/Evergine.Networking.Players.BaseNetworkPlayer.html",
    "title": "Class BaseNetworkPlayer | Evergine Doc",
    "keywords": "Class BaseNetworkPlayer Base class for network players. Inheritance object BaseNetworkPlayer RemoteNetworkPlayer BaseSyncNetworkPlayer Implements INetworkPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Players Assembly: Evergine.Networking.dll Syntax public abstract class BaseNetworkPlayer : INetworkPlayer Constructors BaseNetworkPlayer(bool) Initializes a new instance of the BaseNetworkPlayer class. Declaration public BaseNetworkPlayer(bool hasReadOnlyProperties) Parameters Type Name Description bool hasReadOnlyProperties Indicates if the custom properties of the player are read only. Properties CustomProperties Gets the custom properties of the player. Those properties are synchronized by the server automatically. Declaration public NetworkPropertiesTable CustomProperties { get; } Property Value Type Description NetworkPropertiesTable Remarks Only the local player might change his own custom properties in a room. Setting properties in this table updates the server and other players. Keys in the table are bytes to reduce network traffic. It is recommended to use a custom enumerator for better clarity. Examples var matchmakingClient = Evergine.GetService<MatchmakingClientService>(); var playerProperties = matchmakingClient.LocalPlayer.CustomProperties; playerProperties.Set((byte)CustomEnum.PlayerPosition, Vector3.Zero); var position = playerProperties.GetVector3((byte)CustomEnum.PlayerPosition); Id Gets an identifier of this player in current room. It's -1 outside of rooms. Declaration public int Id { get; } Property Value Type Description int Remarks The Id is assigned per room and only valid in that context. It will change even on leave and re-join. Ids are never re-used per room. IsInLobby Gets a value indicating whether this player is in the lobby (not in a room). Declaration public bool IsInLobby { get; } Property Value Type Description bool IsLocalPlayer Gets a value indicating whether this player is the local player. Declaration public bool IsLocalPlayer { get; } Property Value Type Description bool IsMasterClient Gets a value indicating whether this player is the Master Client of the current room or not. Declaration public bool IsMasterClient { get; } Property Value Type Description bool Remarks Can be used as \"authoritative\" client/player to make decisions, run AI or other. If the current Master Client leaves the room (leave/disconnect), the server will quickly assign someone else. If the current Master Client times out (closed app, lost connection, etc), messages sent to this client are effectively lost for the others!. Nickname Gets a non-unique nickname of this player. Synced automatically in a room. Declaration public string Nickname { get; protected set; } Property Value Type Description string Remarks A player might change his own nickname in a room. Setting this value updates the server and other players. Room Gets the room where is the player. It is null if the player is in the lobby. Declaration public INetworkRoom Room { get; } Property Value Type Description INetworkRoom TagObject Gets or sets an object that can be used to store a reference that's useful to know \"by player\". This property is not sync by the server. Declaration public object TagObject { get; set; } Property Value Type Description object Remarks Example: Set a player's character as Tag by assigning its Entity or EntityPath. Methods WriteToMessage(OutgoingMessage, PlayerFliedsFlags) Writes the specified fields to an outgoing message. Declaration protected void WriteToMessage(OutgoingMessage message, BaseNetworkPlayer.PlayerFliedsFlags includedFields) Parameters Type Name Description OutgoingMessage message The outgoing message. BaseNetworkPlayer.PlayerFliedsFlags includedFields Indicates the fields that must synchronized. Events OnCustomPropertiesChanged Event raised when the server updates custom properties. Declaration public event EventHandler OnCustomPropertiesChanged Event Type Type Description EventHandler OnNicknameChanged Event raised when the server updates the player nickname. Declaration public event EventHandler OnNicknameChanged Event Type Type Description EventHandler Implements INetworkPlayer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Players.BaseNetworkPlayer.PlayerFliedsFlags.html": {
    "href": "api/Evergine.Networking.Players.BaseNetworkPlayer.PlayerFliedsFlags.html",
    "title": "Enum BaseNetworkPlayer.PlayerFliedsFlags | Evergine Doc",
    "keywords": "Enum BaseNetworkPlayer.PlayerFliedsFlags Player field flags used for sync. Namespace: Evergine.Networking.Players Assembly: Evergine.Networking.dll Syntax [Flags] protected enum BaseNetworkPlayer.PlayerFliedsFlags : byte Fields Name Description All All fields flag CustomProperties Custom properties field flag Nickname Nickname field flag None No field flag Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Players.BaseSyncNetworkPlayer.html": {
    "href": "api/Evergine.Networking.Players.BaseSyncNetworkPlayer.html",
    "title": "Class BaseSyncNetworkPlayer | Evergine Doc",
    "keywords": "Class BaseSyncNetworkPlayer This class represents a player, whose properties can be modified and synchronized. Inheritance object BaseNetworkPlayer BaseSyncNetworkPlayer LocalNetworkPlayer ServerPlayer Implements INetworkPlayer Inherited Members BaseNetworkPlayer.Id BaseNetworkPlayer.CustomProperties BaseNetworkPlayer.TagObject BaseNetworkPlayer.IsMasterClient BaseNetworkPlayer.IsInLobby BaseNetworkPlayer.IsLocalPlayer BaseNetworkPlayer.Room BaseNetworkPlayer.OnNicknameChanged BaseNetworkPlayer.OnCustomPropertiesChanged BaseNetworkPlayer.WriteToMessage(OutgoingMessage, BaseNetworkPlayer.PlayerFliedsFlags) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Players Assembly: Evergine.Networking.dll Syntax public abstract class BaseSyncNetworkPlayer : BaseNetworkPlayer, INetworkPlayer Constructors BaseSyncNetworkPlayer() Initializes a new instance of the BaseSyncNetworkPlayer class. Declaration public BaseSyncNetworkPlayer() Properties Nickname Gets or sets a non-unique nickname of the player. Synced automatically in a room. Declaration public string Nickname { get; set; } Property Value Type Description string Remarks A player might change his own nickname in a room. Setting this value updates the server and other players. Implements INetworkPlayer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Players.html": {
    "href": "api/Evergine.Networking.Players.html",
    "title": "Namespace Evergine.Networking.Players | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Players Classes BaseNetworkPlayer Base class for network players. BaseSyncNetworkPlayer This class represents a player, whose properties can be modified and synchronized. Interfaces INetworkPlayer This interface defines a network player. Enums BaseNetworkPlayer.PlayerFliedsFlags Player field flags used for sync."
  },
  "api/Evergine.Networking.Players.INetworkPlayer.html": {
    "href": "api/Evergine.Networking.Players.INetworkPlayer.html",
    "title": "Interface INetworkPlayer | Evergine Doc",
    "keywords": "Interface INetworkPlayer This interface defines a network player. Namespace: Evergine.Networking.Players Assembly: Evergine.Networking.dll Syntax public interface INetworkPlayer Properties CustomProperties Gets the custom properties of the player. Those properties are synchronized by the server automatically. Declaration NetworkPropertiesTable CustomProperties { get; } Property Value Type Description NetworkPropertiesTable Remarks Only the local player might change his own custom properties in a room. Setting properties in this table updates the server and other players. Keys in the table are bytes to reduce network traffic. It is recommended to use a custom enumerator for better clarity. Examples var matchmakingClient = Evergine.GetService<MatchmakingClientService>(); var playerProperties = matchmakingClient.LocalPlayer.CustomProperties; playerProperties.Set((byte)CustomEnum.PlayerPosition, Vector3.Zero); var position = playerProperties.GetVector3((byte)CustomEnum.PlayerPosition); Id Gets an identifier of this player in current room. It's -1 outside of rooms. Declaration int Id { get; } Property Value Type Description int Remarks The Id is assigned per room and only valid in that context. It will change even on leave and re-join. Ids are never re-used per room. IsInLobby Gets a value indicating whether this player is in the lobby (not in a room). Declaration bool IsInLobby { get; } Property Value Type Description bool IsLocalPlayer Gets a value indicating whether this player is the local player. Declaration bool IsLocalPlayer { get; } Property Value Type Description bool IsMasterClient Gets a value indicating whether this player is the Master Client of the current room or not. Declaration bool IsMasterClient { get; } Property Value Type Description bool Remarks Can be used as \"authoritative\" client/player to make decisions, run AI or other. If the current Master Client leaves the room (leave/disconnect), the server will quickly assign someone else. If the current Master Client times out (closed app, lost connection, etc), messages sent to this client are effectively lost for the others!. Nickname Gets a non-unique nickname of this player. Synced automatically in a room. Declaration string Nickname { get; } Property Value Type Description string Remarks A player might change his own nickname in a room. Setting this value updates the server and other players. Room Gets the room where is the player. It is null if the player is in the lobby. Declaration INetworkRoom Room { get; } Property Value Type Description INetworkRoom TagObject Gets or sets an object that can be used to store a reference that's useful to know \"by player\". This property is not sync by the server. Declaration object TagObject { get; set; } Property Value Type Description object Remarks Example: Set a player's character as Tag by assigning its Entity or EntityPath. Events OnCustomPropertiesChanged Event raised when the server updates custom properties. Declaration event EventHandler OnCustomPropertiesChanged Event Type Type Description EventHandler OnNicknameChanged Event raised when the server updates the player nickname. Declaration event EventHandler OnNicknameChanged Event Type Type Description EventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.RoomOptions.html": {
    "href": "api/Evergine.Networking.RoomOptions.html",
    "title": "Class RoomOptions | Evergine Doc",
    "keywords": "Class RoomOptions This class describes the options for a new room. Inheritance object RoomOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking Assembly: Evergine.Networking.dll Syntax public class RoomOptions Constructors RoomOptions() Initializes a new instance of the RoomOptions class. Declaration public RoomOptions() Properties IsVisible Gets or sets a value indicating whether this room will be in the list of visible rooms that can be seen from the lobby (i.e. players that are connected to the server, but do not reside in a room). Important is that these rooms can still be joined, as long as the client knows the exact name of the room. Declaration public bool IsVisible { get; set; } Property Value Type Description bool MaxPlayers Gets or sets a value that determines the maximum amount of players in this room. If set to 0 (by default) the number is unlimited. Declaration public byte MaxPlayers { get; set; } Property Value Type Description byte PropertiesListedInLobby Gets or sets a set of string properties that are in the RoomInfo of the Lobby. This list is defined when creating the room and can't be changed afterwards. Declaration public HashSet<string> PropertiesListedInLobby { get; set; } Property Value Type Description HashSet<string> Remarks You could name properties that are not set from the beginning. Those will be synchronized with the lobby when added later on. RoomName Gets or sets the name to create a room with. Must be unique and not in use or can't be created. If null, the server will assign a GUID as name. Declaration public string RoomName { get; set; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Rooms.BaseNetworkRoom.html": {
    "href": "api/Evergine.Networking.Rooms.BaseNetworkRoom.html",
    "title": "Class BaseNetworkRoom | Evergine Doc",
    "keywords": "Class BaseNetworkRoom This class represents the network room. Inheritance object BaseNetworkRoom LocalNetworkRoom Implements INetworkRoom IRoomInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Rooms Assembly: Evergine.Networking.dll Syntax public abstract class BaseNetworkRoom : INetworkRoom, IRoomInfo Constructors BaseNetworkRoom() Initializes a new instance of the BaseNetworkRoom class. Declaration protected BaseNetworkRoom() BaseNetworkRoom(RoomOptions) Initializes a new instance of the BaseNetworkRoom class. Declaration protected BaseNetworkRoom(RoomOptions options) Parameters Type Name Description RoomOptions options The room options for the new room. Fields FirstPlayerId Constant that defines the player id that will be assigned to the first player that enters the room. Declaration protected const int FirstPlayerId = 0 Field Value Type Description int internalRoomInfo Internal room info. Declaration protected RoomInfo internalRoomInfo Field Value Type Description RoomInfo Properties AllPlayers Gets the \"list\" of all the players who are in that room (including the local player). Only updated while inside a Room. Declaration public IEnumerable<INetworkPlayer> AllPlayers { get; } Property Value Type Description IEnumerable<INetworkPlayer> CustomProperties Gets the custom properties of the room. Those properties are synchronized by the server automatically. Declaration public NetworkPropertiesTable CustomProperties { get; } Property Value Type Description NetworkPropertiesTable Remarks All players inside the room can change these properties. Setting properties in this table updates the server and other players. Keys in the table are bytes to reduce network traffic. It is recommended to use a custom enumerator for better clarity. Examples var matchmakingClient = Evergine.GetService<MatchmakingClientService>(); var roomProperties = matchmakingClient.CurrentRoom.CustomProperties; roomProperties.Set((byte)CustomEnum.MapLevel, \"cs_italy\"); var mapLevel = roomProperties.GetString((byte)CustomEnum.MapLevel); IsFull Gets a value indicating whether the room is full and therefore, no more players can join it. Declaration public bool IsFull { get; } Property Value Type Description bool IsVisible Gets a value indicating whether the room is listed in its lobby. Declaration public virtual bool IsVisible { get; set; } Property Value Type Description bool Remarks Rooms can be created invisible, or changed to invisible. MasterClientId Gets the Id of the player who's the master of this Room. Note: This changes when the current master leaves the room. Declaration public int MasterClientId { get; protected set; } Property Value Type Description int MaxPlayers Gets the limit of players for this room. This property is shown in lobby, too. If the room is full (players count == maxplayers), joining this room will fail. Declaration public virtual byte MaxPlayers { get; set; } Property Value Type Description byte Remarks If the player has joined the room, the setter will update the server and all clients. Name Gets the name of a room. Unique identifier for a room/match (per AppId + game-Version). Declaration public string Name { get; } Property Value Type Description string Remarks The name can't be changed once it's set by the matchmaking server. PlayerCount Gets the count of players currently in room. Declaration public byte PlayerCount { get; } Property Value Type Description byte PropertiesListedInLobby Gets a set of string properties that are in the RoomInfo of the Lobby. This list is defined when creating the room and can't be changed afterwards. Declaration public HashSet<string> PropertiesListedInLobby { get; } Property Value Type Description HashSet<string> Remarks You could name properties that are not set from the beginning. Those will be synchronized with the lobby when added later on. Methods GetPlayer(int) Tries to find the player with given player id. Only useful when in a Room, as Ids are only valid per Room. Declaration public INetworkPlayer GetPlayer(int playerId) Parameters Type Name Description int playerId Player id of a player in this room. Returns Type Description INetworkPlayer Player or null. InternalAddPlayer(BaseNetworkPlayer) Internal method to add a player in the players list. Declaration protected void InternalAddPlayer(BaseNetworkPlayer player) Parameters Type Name Description BaseNetworkPlayer player The player to add. InternalAddPlayer(BaseNetworkPlayer, int) Internal method to add a player in the players list. Declaration protected void InternalAddPlayer(BaseNetworkPlayer player, int playerId) Parameters Type Name Description BaseNetworkPlayer player The player to add. int playerId The assigned player id. InternalRemovePlayer(int) Internal method to remove a player from the players list. Declaration protected void InternalRemovePlayer(int playerId) Parameters Type Name Description int playerId The player id of the player to remove. OnChange(RoomFieldsFlags) Called when one or more properties are refreshed. Declaration protected virtual void OnChange(BaseNetworkRoom.RoomFieldsFlags changedFields) Parameters Type Name Description BaseNetworkRoom.RoomFieldsFlags changedFields Flag indicating what fields have been changed. WriteToMessage(OutgoingMessage, RoomFieldsFlags) Writes the specified fields to an outgoing message. Declaration protected void WriteToMessage(OutgoingMessage message, BaseNetworkRoom.RoomFieldsFlags includedFields) Parameters Type Name Description OutgoingMessage message The outgoing message. BaseNetworkRoom.RoomFieldsFlags includedFields Indicates the fields that must synchronized. Events MasterClientIdChanged Occurs when the master client id changes Declaration public event EventHandler MasterClientIdChanged Event Type Type Description EventHandler Implements INetworkRoom IRoomInfo Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Rooms.BaseNetworkRoom.RoomFieldsFlags.html": {
    "href": "api/Evergine.Networking.Rooms.BaseNetworkRoom.RoomFieldsFlags.html",
    "title": "Enum BaseNetworkRoom.RoomFieldsFlags | Evergine Doc",
    "keywords": "Enum BaseNetworkRoom.RoomFieldsFlags Room field flags used for sync. Namespace: Evergine.Networking.Rooms Assembly: Evergine.Networking.dll Syntax [Flags] protected enum BaseNetworkRoom.RoomFieldsFlags : byte Fields Name Description All All fields flag CustomProperties Custom properties field flag IsVisible Is visible field flag MaxPlayers Maximum players field flag None No field flag Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Rooms.html": {
    "href": "api/Evergine.Networking.Rooms.html",
    "title": "Namespace Evergine.Networking.Rooms | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Rooms Classes BaseNetworkRoom This class represents the network room. LocalNetworkRoom This class represents the room where the player has joined. RoomInfo This class represents the info of a room in the lobby. Interfaces INetworkRoom This interface represents a network room. IRoomInfo Defines the basic information of a network room. Enums BaseNetworkRoom.RoomFieldsFlags Room field flags used for sync. RoomInfo.RoomInfoFieldsFlags RoomInfo field flags used for sync."
  },
  "api/Evergine.Networking.Rooms.INetworkRoom.html": {
    "href": "api/Evergine.Networking.Rooms.INetworkRoom.html",
    "title": "Interface INetworkRoom | Evergine Doc",
    "keywords": "Interface INetworkRoom This interface represents a network room. Inherited Members IRoomInfo.Name IRoomInfo.PlayerCount IRoomInfo.IsFull IRoomInfo.PropertiesListedInLobby IRoomInfo.MaxPlayers Namespace: Evergine.Networking.Rooms Assembly: Evergine.Networking.dll Syntax public interface INetworkRoom : IRoomInfo Properties AllPlayers Gets the \"list\" of all the players who are in that room (including the local player). Only updated while inside a Room. Declaration IEnumerable<INetworkPlayer> AllPlayers { get; } Property Value Type Description IEnumerable<INetworkPlayer> CustomProperties Gets the custom properties of the room. Those properties are synchronized by the server automatically. Declaration NetworkPropertiesTable CustomProperties { get; } Property Value Type Description NetworkPropertiesTable Remarks All players inside the room can change these properties. Setting properties in this table updates the server and other players. Keys in the table are bytes to reduce network traffic. It is recommended to use a custom enumerator for better clarity. Examples var matchmakingClient = Evergine.GetService<MatchmakingClientService>(); var roomProperties = matchmakingClient.CurrentRoom.CustomProperties; roomProperties.Set((byte)CustomEnum.MapLevel, \"cs_italy\"); var mapLevel = roomProperties.GetString((byte)CustomEnum.MapLevel); IsVisible Gets a value indicating whether the room is listed in its lobby. Declaration bool IsVisible { get; } Property Value Type Description bool Remarks Rooms can be created invisible, or changed to invisible. MasterClientId Gets the Id of the player who's the master of this Room. Note: This changes when the current master leaves the room. Declaration int MasterClientId { get; } Property Value Type Description int Events MasterClientIdChanged Occurs when the master client id changes Declaration event EventHandler MasterClientIdChanged Event Type Type Description EventHandler Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Rooms.IRoomInfo.html": {
    "href": "api/Evergine.Networking.Rooms.IRoomInfo.html",
    "title": "Interface IRoomInfo | Evergine Doc",
    "keywords": "Interface IRoomInfo Defines the basic information of a network room. Namespace: Evergine.Networking.Rooms Assembly: Evergine.Networking.dll Syntax public interface IRoomInfo Properties IsFull Gets a value indicating whether the room is full and therefore, no more players can join it. Declaration bool IsFull { get; } Property Value Type Description bool MaxPlayers Gets the limit of players for this room. This property is shown in lobby, too. If the room is full (players count == maxplayers), joining this room will fail. Declaration byte MaxPlayers { get; } Property Value Type Description byte Remarks If the player has joined the room, the setter will update the server and all clients. Name Gets the name of a room. Unique identifier for a room/match (per AppId + game-Version). Declaration string Name { get; } Property Value Type Description string Remarks The name can't be changed once it's set by the matchmaking server. PlayerCount Gets the count of players currently in room. Declaration byte PlayerCount { get; } Property Value Type Description byte PropertiesListedInLobby Gets a set of string properties that are in the RoomInfo of the Lobby. This list is defined when creating the room and can't be changed afterwards. Declaration HashSet<string> PropertiesListedInLobby { get; } Property Value Type Description HashSet<string> Remarks You could name properties that are not set from the beginning. Those will be synchronized with the lobby when added later on. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Rooms.LocalNetworkRoom.html": {
    "href": "api/Evergine.Networking.Rooms.LocalNetworkRoom.html",
    "title": "Class LocalNetworkRoom | Evergine Doc",
    "keywords": "Class LocalNetworkRoom This class represents the room where the player has joined. Inheritance object BaseNetworkRoom LocalNetworkRoom ServerRoom Implements INetworkRoom IRoomInfo Inherited Members BaseNetworkRoom.FirstPlayerId BaseNetworkRoom.internalRoomInfo BaseNetworkRoom.MasterClientId BaseNetworkRoom.CustomProperties BaseNetworkRoom.AllPlayers BaseNetworkRoom.Name BaseNetworkRoom.PlayerCount BaseNetworkRoom.IsFull BaseNetworkRoom.PropertiesListedInLobby BaseNetworkRoom.MasterClientIdChanged BaseNetworkRoom.GetPlayer(int) BaseNetworkRoom.WriteToMessage(OutgoingMessage, BaseNetworkRoom.RoomFieldsFlags) BaseNetworkRoom.InternalAddPlayer(BaseNetworkPlayer) BaseNetworkRoom.InternalAddPlayer(BaseNetworkPlayer, int) BaseNetworkRoom.InternalRemovePlayer(int) BaseNetworkRoom.OnChange(BaseNetworkRoom.RoomFieldsFlags) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Rooms Assembly: Evergine.Networking.dll Syntax public class LocalNetworkRoom : BaseNetworkRoom, INetworkRoom, IRoomInfo Constructors LocalNetworkRoom(RoomOptions) Initializes a new instance of the LocalNetworkRoom class. Used by FromJoinMessage(IncomingMessage, LocalNetworkPlayer, RoomOptions) method only. Declaration protected LocalNetworkRoom(RoomOptions roomOptions) Parameters Type Name Description RoomOptions roomOptions The room options for the new room. LocalNetworkRoom(RoomOptions, LocalNetworkPlayer) Initializes a new instance of the LocalNetworkRoom class. Declaration public LocalNetworkRoom(RoomOptions roomOptions, LocalNetworkPlayer localPlayer) Parameters Type Name Description RoomOptions roomOptions The room options for the new room. LocalNetworkPlayer localPlayer The client local player. Properties IsVisible Gets a value indicating whether the room is listed in its lobby. Declaration public override bool IsVisible { get; set; } Property Value Type Description bool Overrides BaseNetworkRoom.IsVisible Remarks Rooms can be created invisible, or changed to invisible. MaxPlayers Gets the limit of players for this room. This property is shown in lobby, too. If the room is full (players count == maxplayers), joining this room will fail. Declaration public override byte MaxPlayers { get; set; } Property Value Type Description byte Overrides BaseNetworkRoom.MaxPlayers Remarks If the player has joined the room, the setter will update the server and all clients. RemotePlayers Gets the \"list\" of remote players who are also in that room. Only updated while inside a Room. Declaration public IEnumerable<RemoteNetworkPlayer> RemotePlayers { get; } Property Value Type Description IEnumerable<RemoteNetworkPlayer> Events PlayerJoined Occurs when a remote player joined the room Declaration public event EventHandler<RemoteNetworkPlayer> PlayerJoined Event Type Type Description EventHandler<RemoteNetworkPlayer> PlayerJoining Occurs when a remote player is joining the room Declaration public event EventHandler<RemoteNetworkPlayer> PlayerJoining Event Type Type Description EventHandler<RemoteNetworkPlayer> PlayerLeaving Occurs when a remote player is leaving the room Declaration public event EventHandler<RemoteNetworkPlayer> PlayerLeaving Event Type Type Description EventHandler<RemoteNetworkPlayer> PlayerLeft Occurs when a remote player left the room Declaration public event EventHandler<RemoteNetworkPlayer> PlayerLeft Event Type Type Description EventHandler<RemoteNetworkPlayer> Implements INetworkRoom IRoomInfo Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Rooms.RoomInfo.html": {
    "href": "api/Evergine.Networking.Rooms.RoomInfo.html",
    "title": "Class RoomInfo | Evergine Doc",
    "keywords": "Class RoomInfo This class represents the info of a room in the lobby. Inheritance object RoomInfo Implements IRoomInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Rooms Assembly: Evergine.Networking.dll Syntax public class RoomInfo : IRoomInfo Properties IsFull Gets a value indicating whether the room is full and therefore, no more players can join it. Declaration public bool IsFull { get; } Property Value Type Description bool MaxPlayers Gets the limit of players for this room. This property is shown in lobby, too. If the room is full (players count == maxplayers), joining this room will fail. Declaration public byte MaxPlayers { get; } Property Value Type Description byte Remarks If the player has joined the room, the setter will update the server and all clients. Name Gets the name of a room. Unique identifier for a room/match (per AppId + game-Version). Declaration public string Name { get; } Property Value Type Description string Remarks The name can't be changed once it's set by the matchmaking server. PlayerCount Gets the count of players currently in room. Declaration public byte PlayerCount { get; } Property Value Type Description byte PropertiesListedInLobby Gets a set of string properties that are in the RoomInfo of the Lobby. This list is defined when creating the room and can't be changed afterwards. Declaration public HashSet<string> PropertiesListedInLobby { get; } Property Value Type Description HashSet<string> Remarks You could name properties that are not set from the beginning. Those will be synchronized with the lobby when added later on. Methods WriteSyncMessage(OutgoingMessage, RoomInfoFieldsFlags) Writes the properties to be sync on an outgoing message. Declaration protected void WriteSyncMessage(OutgoingMessage message, RoomInfo.RoomInfoFieldsFlags includedFields) Parameters Type Name Description OutgoingMessage message The outgoing message. RoomInfo.RoomInfoFieldsFlags includedFields Indicates the fields that must synchronized. Implements IRoomInfo Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Rooms.RoomInfo.RoomInfoFieldsFlags.html": {
    "href": "api/Evergine.Networking.Rooms.RoomInfo.RoomInfoFieldsFlags.html",
    "title": "Enum RoomInfo.RoomInfoFieldsFlags | Evergine Doc",
    "keywords": "Enum RoomInfo.RoomInfoFieldsFlags RoomInfo field flags used for sync. Namespace: Evergine.Networking.Rooms Assembly: Evergine.Networking.dll Syntax [Flags] protected enum RoomInfo.RoomInfoFieldsFlags : byte Fields Name Description All All fields flag MaxPlayers Maximum players field flag Name Name field flag None No field flag PlayerCount Player count field flag PropertiesListedInLobby Lobby properties field flag Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Server.html": {
    "href": "api/Evergine.Networking.Server.html",
    "title": "Namespace Evergine.Networking.Server | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Server Classes MatchmakingServerService The server service for matchmaking. PlayerJoiningEventArgs Represents the arguments of the message received when a player is joining to a room."
  },
  "api/Evergine.Networking.Server.MatchmakingServerService.html": {
    "href": "api/Evergine.Networking.Server.MatchmakingServerService.html",
    "title": "Class MatchmakingServerService | Evergine Doc",
    "keywords": "Class MatchmakingServerService The server service for matchmaking. Inheritance object IdentifiableObject DependencyObject AttachableObject Service UpdatableService MatchmakingServerService Implements IDependencyObject Inherited Members Service.OnLoaded() Service.OnAttached() Service.OnActivated() Service.Start() Service.OnDeactivated() Service.OnDetach() Service.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Server Assembly: Evergine.Networking.dll Syntax public class MatchmakingServerService : UpdatableService, IDependencyObject Constructors MatchmakingServerService() Initializes a new instance of the MatchmakingServerService class. Declaration public MatchmakingServerService() Properties AllConnectedPlayers Gets all the players connected to the matchmaking service. Declaration public IEnumerable<ServerPlayer> AllConnectedPlayers { get; } Property Value Type Description IEnumerable<ServerPlayer> AllRooms Gets all the players that are in the lobby. Declaration public IEnumerable<ServerRoom> AllRooms { get; } Property Value Type Description IEnumerable<ServerRoom> ApplicationIdentifier Gets or sets the application Identifier. Used by the matchmaking server to separate players by different game. Declaration public string ApplicationIdentifier { get; set; } Property Value Type Description string ClientApplicationVersion Gets or sets the version of your client. A new version also creates a new \"virtual app\" to separate players from older client versions. Declaration public string ClientApplicationVersion { get; set; } Property Value Type Description string ConnectionTimeout Gets or sets the connection timeout. Default value is 25 seconds. Declaration public TimeSpan ConnectionTimeout { get; set; } Property Value Type Description TimeSpan NetworkFactory Gets or sets the factory used to create the INetworkServer peer. Declaration public INetworkFactory NetworkFactory { get; set; } Property Value Type Description INetworkFactory PingInterval Gets or sets the ping interval. Default value is 4 seconds. Declaration public TimeSpan PingInterval { get; set; } Property Value Type Description TimeSpan PlayersInLobby Gets all the players that are in the lobby. Declaration public IEnumerable<ServerPlayer> PlayersInLobby { get; } Property Value Type Description IEnumerable<ServerPlayer> ServerName Gets or sets the server name. It is sent in every discovery response. Declaration public string ServerName { get; set; } Property Value Type Description string Methods CreateMessage() Creates a new outgoing message. Declaration public OutgoingMessage CreateMessage() Returns Type Description OutgoingMessage The create outgoing message. FindPlayer(NetworkEndpoint) Looks for a player with the specified endpoint. Declaration public ServerPlayer FindPlayer(NetworkEndpoint playerEndpoint) Parameters Type Name Description NetworkEndpoint playerEndpoint The player endpoint. Returns Type Description ServerPlayer The ServerPlayer if the player can be found; otherwise, null. SendToClient(OutgoingMessage, NetworkEndpoint, DeliveryMethod) Sends a user data message to the matchmaking server. Declaration public void SendToClient(OutgoingMessage messageToSend, NetworkEndpoint destinationClient, DeliveryMethod deliveryMethod) Parameters Type Name Description OutgoingMessage messageToSend The message to be sent. NetworkEndpoint destinationClient The destination client endpoint. DeliveryMethod deliveryMethod The delivery method. ShutdownAsync() Shutdowns the matchmaking server on the specified port. Declaration public Task ShutdownAsync() Returns Type Description Task A Task representing the asynchronous operation. StartAsync(int) Starts the matchmaking server on the specified port. Declaration public Task StartAsync(int port) Parameters Type Name Description int port The port to bind to. Returns Type Description Task A Task representing the asynchronous operation. Exceptions Type Condition ArgumentException Application identifier parameter can't be null or empty. InvalidOperationException ApplicationIdentifier must have a valid value before initialize. or You can't call multiple times to Start method. Update(TimeSpan) Updates this instance. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed game time since the last update. Overrides UpdatableService.Update(TimeSpan) Events MessageReceivedFromClient Occurs when a user data message from a client is received by the host Declaration public event EventHandler<MessageReceivedEventArgs> MessageReceivedFromClient Event Type Type Description EventHandler<MessageReceivedEventArgs> PlayerConnected Occurs when a new player connects with the server Declaration public event EventHandler<ServerPlayer> PlayerConnected Event Type Type Description EventHandler<ServerPlayer> PlayerDisconnected Occurs when a player disconnects from the server Declaration public event EventHandler<ServerPlayer> PlayerDisconnected Event Type Type Description EventHandler<ServerPlayer> PlayerJoined Occurs when a connected player joins in an existing room Declaration public event EventHandler<ServerPlayer> PlayerJoined Event Type Type Description EventHandler<ServerPlayer> PlayerJoining Occurs when a connected player is joining to an existing room. This event is not fired when the first player creates the room. Declaration public event EventHandler<PlayerJoiningEventArgs> PlayerJoining Event Type Type Description EventHandler<PlayerJoiningEventArgs> PlayerLeaving Occurs when a connected player is leaving an existing room Declaration public event EventHandler<ServerPlayer> PlayerLeaving Event Type Type Description EventHandler<ServerPlayer> PlayerLeft Occurs when a connected player left an existing room Declaration public event EventHandler<ServerPlayer> PlayerLeft Event Type Type Description EventHandler<ServerPlayer> PlayerSynchronized Occurs when the server receives changes of the properties of a player Declaration public event EventHandler<ServerPlayer> PlayerSynchronized Event Type Type Description EventHandler<ServerPlayer> RoomCreated Occurs when the server creates a new room in the lobby Declaration public event EventHandler<ServerRoom> RoomCreated Event Type Type Description EventHandler<ServerRoom> RoomDestroyed Occurs when the server destroys an existing room in the lobby Declaration public event EventHandler<ServerRoom> RoomDestroyed Event Type Type Description EventHandler<ServerRoom> RoomSynchronized Occurs when the server receives changes of the properties of a room Declaration public event EventHandler<ServerRoom> RoomSynchronized Event Type Type Description EventHandler<ServerRoom> Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Server.PlayerJoiningEventArgs.html": {
    "href": "api/Evergine.Networking.Server.PlayerJoiningEventArgs.html",
    "title": "Class PlayerJoiningEventArgs | Evergine Doc",
    "keywords": "Class PlayerJoiningEventArgs Represents the arguments of the message received when a player is joining to a room. Inheritance object EventArgs PlayerJoiningEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Server Assembly: Evergine.Networking.dll Syntax public class PlayerJoiningEventArgs : EventArgs Constructors PlayerJoiningEventArgs(ServerRoom, ServerPlayer) Initializes a new instance of the PlayerJoiningEventArgs class. Declaration public PlayerJoiningEventArgs(ServerRoom room, ServerPlayer player) Parameters Type Name Description ServerRoom room The room that player is trying to join. ServerPlayer player tThe player that is joining. Properties IsRejected Gets a value indicating whether the joining request has been rejected. Declaration public bool IsRejected { get; } Property Value Type Description bool Player Gets the player that is joining. Declaration public ServerPlayer Player { get; } Property Value Type Description ServerPlayer Room Gets the room that player is trying to join. Declaration public ServerRoom Room { get; } Property Value Type Description ServerRoom Methods Reject() Mark the joining request as rejected. Declaration public void Reject() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Server.Players.html": {
    "href": "api/Evergine.Networking.Server.Players.html",
    "title": "Namespace Evergine.Networking.Server.Players | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Server.Players Classes ServerPlayer This class represents a player from the server."
  },
  "api/Evergine.Networking.Server.Players.ServerPlayer.html": {
    "href": "api/Evergine.Networking.Server.Players.ServerPlayer.html",
    "title": "Class ServerPlayer | Evergine Doc",
    "keywords": "Class ServerPlayer This class represents a player from the server. Inheritance object BaseNetworkPlayer BaseSyncNetworkPlayer ServerPlayer Implements INetworkPlayer Inherited Members BaseSyncNetworkPlayer.Nickname BaseNetworkPlayer.Id BaseNetworkPlayer.CustomProperties BaseNetworkPlayer.TagObject BaseNetworkPlayer.IsMasterClient BaseNetworkPlayer.IsInLobby BaseNetworkPlayer.IsLocalPlayer BaseNetworkPlayer.OnNicknameChanged BaseNetworkPlayer.OnCustomPropertiesChanged BaseNetworkPlayer.WriteToMessage(OutgoingMessage, BaseNetworkPlayer.PlayerFliedsFlags) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Server.Players Assembly: Evergine.Networking.dll Syntax public class ServerPlayer : BaseSyncNetworkPlayer, INetworkPlayer Constructors ServerPlayer(int, NetworkEndpoint) Initializes a new instance of the ServerPlayer class. Declaration public ServerPlayer(int key, NetworkEndpoint endpoint) Parameters Type Name Description int key Internal unique key generated by the server to identify players. NetworkEndpoint endpoint The network endpoint of the player. Properties Endpoint Gets the network endpoint of the player. Declaration public NetworkEndpoint Endpoint { get; } Property Value Type Description NetworkEndpoint Room Gets the server room where is the player. It is null if the player is in the lobby. Declaration public ServerRoom Room { get; } Property Value Type Description ServerRoom Implements INetworkPlayer Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Networking.Server.Rooms.html": {
    "href": "api/Evergine.Networking.Server.Rooms.html",
    "title": "Namespace Evergine.Networking.Server.Rooms | Evergine Doc",
    "keywords": "Namespace Evergine.Networking.Server.Rooms Classes ServerRoom This class represents a room from the server."
  },
  "api/Evergine.Networking.Server.Rooms.ServerRoom.html": {
    "href": "api/Evergine.Networking.Server.Rooms.ServerRoom.html",
    "title": "Class ServerRoom | Evergine Doc",
    "keywords": "Class ServerRoom This class represents a room from the server. Inheritance object BaseNetworkRoom LocalNetworkRoom ServerRoom Implements INetworkRoom IRoomInfo Inherited Members LocalNetworkRoom.IsVisible LocalNetworkRoom.MaxPlayers LocalNetworkRoom.RemotePlayers LocalNetworkRoom.PlayerJoining LocalNetworkRoom.PlayerJoined LocalNetworkRoom.PlayerLeaving LocalNetworkRoom.PlayerLeft BaseNetworkRoom.FirstPlayerId BaseNetworkRoom.internalRoomInfo BaseNetworkRoom.MasterClientId BaseNetworkRoom.CustomProperties BaseNetworkRoom.Name BaseNetworkRoom.PlayerCount BaseNetworkRoom.IsFull BaseNetworkRoom.PropertiesListedInLobby BaseNetworkRoom.MasterClientIdChanged BaseNetworkRoom.GetPlayer(int) BaseNetworkRoom.WriteToMessage(OutgoingMessage, BaseNetworkRoom.RoomFieldsFlags) BaseNetworkRoom.InternalAddPlayer(BaseNetworkPlayer) BaseNetworkRoom.InternalAddPlayer(BaseNetworkPlayer, int) BaseNetworkRoom.InternalRemovePlayer(int) BaseNetworkRoom.OnChange(BaseNetworkRoom.RoomFieldsFlags) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Networking.Server.Rooms Assembly: Evergine.Networking.dll Syntax public class ServerRoom : LocalNetworkRoom, INetworkRoom, IRoomInfo Constructors ServerRoom(RoomOptions) Initializes a new instance of the ServerRoom class. Declaration public ServerRoom(RoomOptions roomOptions) Parameters Type Name Description RoomOptions roomOptions The room options for the new room. Properties AllPlayers Gets the \"list\" of all the players who are in that room. Only updated while inside a Room. Declaration public IEnumerable<ServerPlayer> AllPlayers { get; } Property Value Type Description IEnumerable<ServerPlayer> Implements INetworkRoom IRoomInfo Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenAL.ALAudioBuffer.html": {
    "href": "api/Evergine.OpenAL.ALAudioBuffer.html",
    "title": "Class ALAudioBuffer | Evergine Doc",
    "keywords": "Class ALAudioBuffer The Audio Buffer class. Inheritance object AudioBuffer ALAudioBuffer Implements ILoadable IDependencyObject IDisposable Inherited Members AudioBuffer.Id AudioBuffer.ReaderVersion AudioBuffer.Invalidated AudioBuffer.Dependencies AudioBuffer.State AudioBuffer.Length AudioBuffer.Format AudioBuffer.Duration AudioBuffer.SampleCount AudioBuffer.FillAsync(Stream, int, WaveFormat) AudioBuffer.Fill(Stream, int, WaveFormat) AudioBuffer.Fill<TBuffer>(TBuffer[], int, int, WaveFormat) AudioBuffer.Invalidate(ILoadable) AudioBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.OpenAL Assembly: Evergine.OpenAL.dll Syntax public class ALAudioBuffer : AudioBuffer, ILoadable, IDependencyObject, IDisposable Constructors ALAudioBuffer() Initializes a new instance of the ALAudioBuffer class. Declaration public ALAudioBuffer() Properties BufferId Gets the id of the OpenAL audio buffer. Declaration public int BufferId { get; } Property Value Type Description int Methods Dispose() Declaration public override void Dispose() Overrides AudioBuffer.Dispose() InternalFill(Stream, int) Fills the audio buffer with a specific stream. Declaration protected override void InternalFill(Stream stream, int bufferSize) Parameters Type Name Description Stream stream The source stream. int bufferSize The buffer size. Overrides AudioBuffer.InternalFill(Stream, int) InternalFillAsync(Stream, int) Fills the audio buffer with a specific stream. Declaration protected override Task InternalFillAsync(Stream stream, int bufferSize) Parameters Type Name Description Stream stream The source stream. int bufferSize The buffer size. Returns Type Description Task Awaitable task of the operation. Overrides AudioBuffer.InternalFillAsync(Stream, int) InternalFill<TBuffer>(TBuffer[], int, int) Fills the audio buffer with a specific buffer. Declaration protected override void InternalFill<TBuffer>(TBuffer[] buffer, int offset, int count) where TBuffer : struct Parameters Type Name Description TBuffer[] buffer The source buffer. int offset The source offset. int count The number of elements to be copied. Type Parameters Name Description TBuffer The type of the buffer data. Overrides AudioBuffer.InternalFill<TBuffer>(TBuffer[], int, int) ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements ILoadable IDependencyObject IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenAL.ALAudioDevice.html": {
    "href": "api/Evergine.OpenAL.ALAudioDevice.html",
    "title": "Class ALAudioDevice | Evergine Doc",
    "keywords": "Class ALAudioDevice Represents a audio output device. Inheritance object AudioDevice ALAudioDevice Implements IDisposable Inherited Members AudioDevice.MasterVolume object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenAL Assembly: Evergine.OpenAL.dll Syntax public class ALAudioDevice : AudioDevice, IDisposable Constructors ALAudioDevice() Initializes a new instance of the ALAudioDevice class. Declaration public ALAudioDevice() Properties ContextHandle Gets the context handler of the device. Declaration public ContextHandle ContextHandle { get; } Property Value Type Description ContextHandle DefaultListener Gets the default listener used by Apply3D(AudioEmitter). Declaration public override AudioListener DefaultListener { get; } Property Value Type Description AudioListener Overrides AudioDevice.DefaultListener NativePointer Gets the native pointer of the device. Declaration public IntPtr NativePointer { get; } Property Value Type Description IntPtr Renderer Gets information about the specific renderer. Declaration public string Renderer { get; } Property Value Type Description string Vendor Gets the name of the vendor. Declaration public string Vendor { get; } Property Value Type Description string Version Gets the OpenAL version. Declaration public string Version { get; } Property Value Type Description string Methods CreateAudioBuffer() Creates an audio buffer. Declaration public override AudioBuffer CreateAudioBuffer() Returns Type Description AudioBuffer The result AudioBuffer object. Overrides AudioDevice.CreateAudioBuffer() CreateAudioSource(WaveFormat) Create a new AudioSource. Declaration public override AudioSource CreateAudioSource(WaveFormat format) Parameters Type Name Description WaveFormat format The format of the audio source. Returns Type Description AudioSource A new AudioSource instance. Overrides AudioDevice.CreateAudioSource(WaveFormat) Dispose() Declaration public override void Dispose() Overrides AudioDevice.Dispose() SetMasterVolume(float) Sets the master volume of the device. Declaration protected override void SetMasterVolume(float volume) Parameters Type Name Description float volume The new volume. Overrides AudioDevice.SetMasterVolume(float) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenAL.ALAudioListener.html": {
    "href": "api/Evergine.OpenAL.ALAudioListener.html",
    "title": "Class ALAudioListener | Evergine Doc",
    "keywords": "Class ALAudioListener Class representing an audio listener. Inheritance object AudioListener ALAudioListener Inherited Members AudioListener.WorldTransform AudioListener.Velocity AudioListener.DopplerFactor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenAL Assembly: Evergine.OpenAL.dll Syntax public class ALAudioListener : AudioListener Constructors ALAudioListener() Initializes a new instance of the ALAudioListener class. Declaration public ALAudioListener() Methods UpdateDopplerFactor(float) Updates the Doppler factor of this listener. Declaration protected override void UpdateDopplerFactor(float dopplerFactor) Parameters Type Name Description float dopplerFactor The new Doppler factor. Overrides AudioListener.UpdateDopplerFactor(float) UpdateVelocity(ref Vector3) Updates the velocity of this listener. Declaration protected override void UpdateVelocity(ref Vector3 velocity) Parameters Type Name Description Vector3 velocity The new velocity. Overrides AudioListener.UpdateVelocity(ref Vector3) UpdateWorldTransform(ref Matrix4x4) Updates the world transform of this listener. Declaration protected override void UpdateWorldTransform(ref Matrix4x4 worldTransform) Parameters Type Name Description Matrix4x4 worldTransform The new world transform matrix. Overrides AudioListener.UpdateWorldTransform(ref Matrix4x4) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenAL.ALAudioSource.html": {
    "href": "api/Evergine.OpenAL.ALAudioSource.html",
    "title": "Class ALAudioSource | Evergine Doc",
    "keywords": "Class ALAudioSource The audio source class. Inheritance object AudioSource ALAudioSource Implements IDisposable Inherited Members AudioSource.Format AudioSource.Volume AudioSource.Pan AudioSource.Pitch AudioSource.IsLooped AudioSource.State AudioSource.PlayPosition AudioSource.QueuePlayPosition AudioSource.QueueDuration AudioSource.CurrentBuffer AudioSource.PendingBuffers AudioSource.PendingBuffersCount AudioSource.BufferStarted AudioSource.BufferEnded AudioSource.EnqueueBuffer(AudioBuffer) AudioSource.Play() AudioSource.Pause() AudioSource.Stop() AudioSource.OnBufferStart() AudioSource.OnBufferProccessed(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenAL Assembly: Evergine.OpenAL.dll Syntax public class ALAudioSource : AudioSource, IDisposable Constructors ALAudioSource(WaveFormat) Initializes a new instance of the ALAudioSource class. Declaration public ALAudioSource(WaveFormat format) Parameters Type Name Description WaveFormat format The format of the audio data. Properties SourceId Gets the AL source native identifier. Declaration public int SourceId { get; } Property Value Type Description int Methods Apply3D(AudioEmitter) Sets the ·D properties of the Audio Source according to an audio emitter. Declaration public override void Apply3D(AudioEmitter emitter) Parameters Type Name Description AudioEmitter emitter The audio emitter. Overrides AudioSource.Apply3D(AudioEmitter) Dispose() Declaration public override void Dispose() Overrides AudioSource.Dispose() FlushBuffers() Flush all the audio buffers. Declaration public override void FlushBuffers() Overrides AudioSource.FlushBuffers() GetPlayPosition() Gets the play TimeSpan position of the audio. Declaration protected override TimeSpan GetPlayPosition() Returns Type Description TimeSpan A TimeSpan with the current play position. Overrides AudioSource.GetPlayPosition() GetQueuePlayPosition() Gets the Queue Play TimeSpan Position. Declaration protected override TimeSpan GetQueuePlayPosition() Returns Type Description TimeSpan A TimeSpan with the Queue Play Position. Overrides AudioSource.GetQueuePlayPosition() InternalEnqueueBuffer(AudioBuffer, out int?) Enqueues an audio buffer into the source. Declaration protected override void InternalEnqueueBuffer(AudioBuffer buffer, out int? index) Parameters Type Name Description AudioBuffer buffer The buffer to be enqueued. int? index Output variable containing the buffer index. Overrides AudioSource.InternalEnqueueBuffer(AudioBuffer, out int?) InternalPause() Pauses the audio source. Declaration protected override void InternalPause() Overrides AudioSource.InternalPause() InternalPlay() Plays the audio source. Declaration protected override void InternalPlay() Overrides AudioSource.InternalPlay() InternalStop() Stops the audio source. Declaration protected override void InternalStop() Overrides AudioSource.InternalStop() IsPaused() Checks if this audio source is paused. Declaration protected override bool IsPaused() Returns Type Description bool True if this audio source is pause. False otherwise. Overrides AudioSource.IsPaused() IsPlaying() Checks if the source is playing. Declaration protected override bool IsPlaying() Returns Type Description bool True if the audio source is playing. False otherwise. Overrides AudioSource.IsPlaying() SetLoop(bool) Sets a new value to indicate if the source is looped. Declaration protected override void SetLoop(bool isLooped) Parameters Type Name Description bool isLooped If the source must loop the sound. Overrides AudioSource.SetLoop(bool) SetPan(float) Sets the pan of this audio source. Declaration protected override void SetPan(float pan) Parameters Type Name Description float pan The new pan. Overrides AudioSource.SetPan(float) SetPitch(float) Sets the new pitch of this source. Declaration protected override void SetPitch(float pitch) Parameters Type Name Description float pitch The new pitch. Overrides AudioSource.SetPitch(float) SetQueuePlayPosition(TimeSpan) Sets the queue play TimeSpan position. Declaration protected override void SetQueuePlayPosition(TimeSpan position) Parameters Type Name Description TimeSpan position The new TimeSpan position. Overrides AudioSource.SetQueuePlayPosition(TimeSpan) SetVolume(float) Sets the volume of this source. Declaration protected override void SetVolume(float volume) Parameters Type Name Description float volume The new volume. Overrides AudioSource.SetVolume(float) Events Destroyed Occurs when the AL source is destroyed Declaration public event EventHandler Destroyed Event Type Type Description EventHandler Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenAL.html": {
    "href": "api/Evergine.OpenAL.html",
    "title": "Namespace Evergine.OpenAL | Evergine Doc",
    "keywords": "Namespace Evergine.OpenAL Classes ALAudioBuffer The Audio Buffer class. ALAudioDevice Represents a audio output device. ALAudioListener Class representing an audio listener. ALAudioSource The audio source class."
  },
  "api/Evergine.OpenAL.Native.ALWeb.html": {
    "href": "api/Evergine.OpenAL.Native.ALWeb.html",
    "title": "Class ALWeb | Evergine Doc",
    "keywords": "Class ALWeb Provides access to the OpenAL 1.1 flat API. Inheritance object ALWeb Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenAL.Native Assembly: Evergine.OpenAL.dll Syntax public static class ALWeb Methods alGetProcAddress(string) Declaration public static extern IntPtr alGetProcAddress(string fname) Parameters Type Name Description string fname Returns Type Description IntPtr"
  },
  "api/Evergine.OpenAL.Native.html": {
    "href": "api/Evergine.OpenAL.Native.html",
    "title": "Namespace Evergine.OpenAL.Native | Evergine Doc",
    "keywords": "Namespace Evergine.OpenAL.Native Classes ALWeb Provides access to the OpenAL 1.1 flat API."
  },
  "api/Evergine.OpenAL.Native.Wasm.AlcWasm.html": {
    "href": "api/Evergine.OpenAL.Native.Wasm.AlcWasm.html",
    "title": "Class AlcWasm | Evergine Doc",
    "keywords": "Class AlcWasm PInvokes of ALc for WebAssembly. Inheritance object AlcWasm Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenAL.Native.Wasm Assembly: Evergine.OpenAL.dll Syntax public static class AlcWasm"
  },
  "api/Evergine.OpenAL.Native.Wasm.AlWasm.html": {
    "href": "api/Evergine.OpenAL.Native.Wasm.AlWasm.html",
    "title": "Class AlWasm | Evergine Doc",
    "keywords": "Class AlWasm PInvokes of AL for WebAssembly. Inheritance object AlWasm Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenAL.Native.Wasm Assembly: Evergine.OpenAL.dll Syntax public static class AlWasm"
  },
  "api/Evergine.OpenAL.Native.Wasm.html": {
    "href": "api/Evergine.OpenAL.Native.Wasm.html",
    "title": "Namespace Evergine.OpenAL.Native.Wasm | Evergine Doc",
    "keywords": "Namespace Evergine.OpenAL.Native.Wasm Classes AlWasm PInvokes of AL for WebAssembly. AlcWasm PInvokes of ALc for WebAssembly."
  },
  "api/Evergine.OpenGL.DepthStencilBPP.html": {
    "href": "api/Evergine.OpenGL.DepthStencilBPP.html",
    "title": "Struct DepthStencilBPP | Evergine Doc",
    "keywords": "Struct DepthStencilBPP Depth and stencil bytes per pixel. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public struct DepthStencilBPP Constructors DepthStencilBPP(int, int) Initializes a new instance of the DepthStencilBPP struct. Declaration public DepthStencilBPP(int depth, int stencil) Parameters Type Name Description int depth The depth value. int stencil The stencil value. Fields Depth Depth value. Declaration public int Depth Field Value Type Description int Stencil Stencil value. Declaration public int Stencil Field Value Type Description int Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLBaseTexture.html": {
    "href": "api/Evergine.OpenGL.GLBaseTexture.html",
    "title": "Class GLBaseTexture | Evergine Doc",
    "keywords": "Class GLBaseTexture The OpenGL implementation of a Texture object. Inheritance object GraphicsResource Texture GLBaseTexture GLPlaceHolderTexture GLTexture Implements ILoadable IDisposable IDependencyObject Inherited Members Texture.Id Texture.Description Texture.ReaderVersion Texture.Invalidated Texture.Dependencies Texture.Sampler Texture.CouldBeAttachedToFramebuffer Texture.Dispose() Texture.Invalidate(ILoadable) Texture.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public abstract class GLBaseTexture : Texture, ILoadable, IDisposable, IDependencyObject Constructors GLBaseTexture(GraphicsContext, ref TextureDescription) Initializes a new instance of the GLBaseTexture class. Declaration public GLBaseTexture(GraphicsContext context, ref TextureDescription description) Parameters Type Name Description GraphicsContext context The graphics context. TextureDescription description The texture description. Fields Format The GL Format for this texture, GLPixelFormat. Declaration public GLPixelFormat Format Field Value Type Description GLPixelFormat TextureTarget The GL Texture Target for this texture. Declaration public TextureTarget TextureTarget Field Value Type Description TextureTarget Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Texture.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods HasStencil() Whether the texture format has stencil. Declaration public bool HasStencil() Returns Type Description bool Return if the texture has stencil. Implements ILoadable IDisposable IDependencyObject Extension Methods TextureExtension.SafeToStream(Texture, GraphicsContext) TextureExtension.SaveToFile(Texture, GraphicsContext, string) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLBlendState.html": {
    "href": "api/Evergine.OpenGL.GLBlendState.html",
    "title": "Class GLBlendState | Evergine Doc",
    "keywords": "Class GLBlendState This struct represent all parameters supported in OpenGL for BlendState. Inheritance object GLBlendState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLBlendState Constructors GLBlendState() Initializes a new instance of the GLBlendState class. Declaration public GLBlendState() Methods Apply(GLGraphicsContext, ref GLGraphicsPipelineState, ref GLBlendStateDescription) Apply all BlendState values. Declaration public void Apply(GLGraphicsContext context, ref GLGraphicsPipelineState previous, ref GLBlendStateDescription description) Parameters Type Name Description GLGraphicsContext context The OpenGL graphicscontext. GLGraphicsPipelineState previous Previous pipeline state. GLBlendStateDescription description New BlendState description. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLBlendStateDescription.html": {
    "href": "api/Evergine.OpenGL.GLBlendStateDescription.html",
    "title": "Struct GLBlendStateDescription | Evergine Doc",
    "keywords": "Struct GLBlendStateDescription This struct represent all parameters supported in OpenGL for BlendStateDescription. Implements IEquatable<GLBlendStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public struct GLBlendStateDescription : IEquatable<GLBlendStateDescription> Constructors GLBlendStateDescription(ref BlendStateDescription) Initializes a new instance of the GLBlendStateDescription struct. Declaration public GLBlendStateDescription(ref BlendStateDescription description) Parameters Type Name Description BlendStateDescription description Evergine RasterizerStateDescription instance. Fields BlendEnable Enable (or disable) blending. Declaration public bool BlendEnable Field Value Type Description bool BlendOperationAlpha This blend operation defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Declaration public BlendEquationModeEXT BlendOperationAlpha Field Value Type Description BlendEquationModeEXT BlendOperationColor This blend operation defines how to combine the SrcBlend and DestBlend operations. Declaration public BlendEquationModeEXT BlendOperationColor Field Value Type Description BlendEquationModeEXT ColorWriteChannels A write mask. Declaration public ColorWriteChannels ColorWriteChannels Field Value Type Description ColorWriteChannels DestinationBlendAlpha This blend option specifies the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Declaration public BlendingFactor DestinationBlendAlpha Field Value Type Description BlendingFactor DestintantionBlendColor This blend option specifies the operation to perform on the current RGB value in the render target. The BlendOp member defines how to combine the SrcBlend and DestBlend operations. Declaration public BlendingFactor DestintantionBlendColor Field Value Type Description BlendingFactor SourceBlendAlpha This blend option specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Declaration public BlendingFactor SourceBlendAlpha Field Value Type Description BlendingFactor SourceBlendColor This blend option specifies the operation to perform on the RGB value that the pixel shader outputs. The BlendOp member defines how to combine the SrcBlend and DestBlend operations. Declaration public BlendingFactor SourceBlendColor Field Value Type Description BlendingFactor Methods Equals(GLBlendStateDescription) Returns a hash code for this instance. Declaration public bool Equals(GLBlendStateDescription other) Parameters Type Name Description GLBlendStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(GLBlendStateDescription, GLBlendStateDescription) Implements the operator ==. Declaration public static bool operator ==(GLBlendStateDescription value1, GLBlendStateDescription value2) Parameters Type Name Description GLBlendStateDescription value1 The value1. GLBlendStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(GLBlendStateDescription, GLBlendStateDescription) Implements the operator ==. Declaration public static bool operator !=(GLBlendStateDescription value1, GLBlendStateDescription value2) Parameters Type Name Description GLBlendStateDescription value1 The value1. GLBlendStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLBuffer.html": {
    "href": "api/Evergine.OpenGL.GLBuffer.html",
    "title": "Class GLBuffer | Evergine Doc",
    "keywords": "Class GLBuffer Represents a OpenGL buffer object. Inheritance object GraphicsResource Buffer GLBuffer Implements IDisposable Inherited Members Buffer.Description Buffer.UpdateCounter GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLBuffer : Buffer, IDisposable Constructors GLBuffer(GLGraphicsContext, IntPtr, ref BufferDescription) Initializes a new instance of the GLBuffer class. Declaration public GLBuffer(GLGraphicsContext context, IntPtr data, ref BufferDescription description) Parameters Type Name Description GLGraphicsContext context Graphics Context. IntPtr data Data pointer. BufferDescription description Buffer description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Buffer.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods CopyTo(Buffer, uint, uint, uint) Copy between buffers. Declaration public void CopyTo(Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer destination Buffer destination. uint sizeInBytes Destination size in bytes. uint sourceOffset Source offset. uint destinationOffset Destination offset. Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() SetData(IntPtr, uint, uint, BufferTargetARB) Set buffer Data. Declaration public void SetData(IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0, BufferTargetARB bufferTarget = BufferTargetARB.CopyWriteBuffer) Parameters Type Name Description IntPtr source Source pointer. uint sourceSizeInBytes Source size in bytes. uint destinationOffsetInBytes Destination offset in bytes. BufferTargetARB bufferTarget The buffer target. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLCapabilities.html": {
    "href": "api/Evergine.OpenGL.GLCapabilities.html",
    "title": "Class GLCapabilities | Evergine Doc",
    "keywords": "Class GLCapabilities The OpenGL capabilities. Inheritance object GraphicsContextCapabilities GLCapabilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLCapabilities : GraphicsContextCapabilities Constructors GLCapabilities(GLGraphicsContext) Initializes a new instance of the GLCapabilities class. Declaration public GLCapabilities(GLGraphicsContext context) Parameters Type Name Description GLGraphicsContext context The current graphics context. Properties ClipDepth Gets the depth range in clip space. Declaration public override ClipDepth ClipDepth { get; } Property Value Type Description ClipDepth Overrides GraphicsContextCapabilities.ClipDepth FlipProjectionRequired Gets a value indicating whether we need to flip projection matrix on Render Target. Declaration public override bool FlipProjectionRequired { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.FlipProjectionRequired IsComputeShaderSupported Gets a value indicating whether this graphics context support compute shaders. Declaration public override bool IsComputeShaderSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsComputeShaderSupported IsMRTSupported Gets a value indicating whether this graphics context supports Multi Render Target (MRT). Declaration public override bool IsMRTSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsMRTSupported IsRaytracingSupported Gets a value indicating whether this graphics context supports Raytracing. Declaration public override bool IsRaytracingSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsRaytracingSupported IsShadowMapSupported Gets a value indicating whether this graphics context supports Shadow Maps. Declaration public override bool IsShadowMapSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsShadowMapSupported MatrixMajorness Gets a value indicating whether this graphics context uses row major matrices by default. Declaration public override MatrixMajorness MatrixMajorness { get; } Property Value Type Description MatrixMajorness Overrides GraphicsContextCapabilities.MatrixMajorness MultiviewStrategy Gets the multiview strategy supported by this graphic context. Declaration public override MultiviewStrategy MultiviewStrategy { get; } Property Value Type Description MultiviewStrategy Overrides GraphicsContextCapabilities.MultiviewStrategy Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLCombineTextureSampler.html": {
    "href": "api/Evergine.OpenGL.GLCombineTextureSampler.html",
    "title": "Class GLCombineTextureSampler | Evergine Doc",
    "keywords": "Class GLCombineTextureSampler This struct represent all parameters supported in OpenGL for SamplerStateDescription. Inheritance object GLCombineTextureSampler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLCombineTextureSampler Fields SamplerState Method to use for resolving a v texture coordinate that is outside the 0 to 1 range. Declaration public GLSamplerState SamplerState Field Value Type Description GLSamplerState Texture Method to use for resolving a u texture coordinate that is outside the 0 to 1 range. Declaration public GLTexture Texture Field Value Type Description GLTexture Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLCommandBuffer.html": {
    "href": "api/Evergine.OpenGL.GLCommandBuffer.html",
    "title": "Class GLCommandBuffer | Evergine Doc",
    "keywords": "Class GLCommandBuffer Command Buffer implemented on OpenGL. Inheritance object CommandBuffer GLCommandBuffer Implements IDisposable IGetNativePointers Inherited Members CommandBuffer.State CommandBuffer.AvailablePointerKeys CommandBuffer.InRenderPass CommandBuffer.End() CommandBuffer.SetVertexBuffers(Buffer[]) CommandBuffer.SetVertexBuffer(uint, Buffer, uint) CommandBuffer.SetVertexBuffers(Buffer[], int[]) CommandBuffer.SetIndexBuffer(Buffer, IndexFormat, uint) CommandBuffer.SetGraphicsPipelineState(GraphicsPipelineState) CommandBuffer.SetComputePipelineState(ComputePipelineState) CommandBuffer.SetRaytracingPipelineState(RaytracingPipelineState) CommandBuffer.SetResourceSet(ResourceSet, uint, uint[]) CommandBuffer.BeginRenderPass(ref RenderPassDescription) CommandBuffer.EndRenderPass() CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint) CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint, uint) CommandBuffer.UpdateBufferData<T>(Buffer, ref T, uint) CommandBuffer.UpdateBufferData(Buffer, IntPtr, uint, uint) CommandBuffer.CopyBufferDataTo(Buffer, Buffer, uint, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, Texture) CommandBuffer.CopyTextureDataTo(Texture, Texture, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) CommandBuffer.Blit(Texture, Texture) CommandBuffer.Dispatch1D(uint, uint) CommandBuffer.Dispatch2D(uint, uint, uint, uint) CommandBuffer.Dispatch3D(uint, uint, uint, uint, uint, uint) CommandBuffer.GetNativePointer(string, out IntPtr) CommandBuffer.ClearCache() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLCommandBuffer : CommandBuffer, IDisposable, IGetNativePointers Constructors GLCommandBuffer(GLCommandQueue) Initializes a new instance of the GLCommandBuffer class. Declaration public GLCommandBuffer(GLCommandQueue queue) Parameters Type Name Description GLCommandQueue queue The commandqueue for this commandbuffer. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides CommandBuffer.GraphicsContext Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandBuffer.Name Methods Begin() Set the initialize state for this commandbuffer. This function must be called before other graphics commands ca be issued. Declaration public override void Begin() Overrides CommandBuffer.Begin() BeginDebugMarker(string) Marks the beginning of a section of event code. This allows subsequent commands to be categorized and filtered when viewed in external debugging tools. Declaration public override void BeginDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.BeginDebugMarker(string) Remarks You call the EndDebugMarker method to mark the end of the section of event code. BeginDebugMarker has no effect if the calling application is not running under an enabled profiling tool. BeginQuery(QueryHeap, uint) Begins a GPU query. Declaration public override void BeginQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.BeginQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. BeginRenderPassInternal(ref RenderPassDescription) Begin a render pass. Declaration protected override void BeginRenderPassInternal(ref RenderPassDescription description) Parameters Type Name Description RenderPassDescription description The renderPass description RenderPassDescription. Overrides CommandBuffer.BeginRenderPassInternal(ref RenderPassDescription) Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain. Declaration protected override void Blit(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint layerCount The number of array layers to copy. Overrides CommandBuffer.Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) BuildRaytracingAccelerationStructure(BottomLevelASDescription) Perform an bottom level acceleration structure build on the GPU. Declaration public override BottomLevelAS BuildRaytracingAccelerationStructure(BottomLevelASDescription description) Parameters Type Name Description BottomLevelASDescription description Returns Type Description BottomLevelAS Bottom Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(BottomLevelASDescription) BuildRaytracingAccelerationStructure(TopLevelASDescription) Perform an top level acceleration structure build on the GPU. Declaration public override TopLevelAS BuildRaytracingAccelerationStructure(TopLevelASDescription description) Parameters Type Name Description TopLevelASDescription description Returns Type Description TopLevelAS Top Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(TopLevelASDescription) Commit() Commits this command buffer to the command queue waiting to be execute on GPU after Submit(). Declaration public override void Commit() Overrides CommandBuffer.Commit() CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration protected override void CopyBufferDataToInternal(Buffer origin, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer origin the origin buffer. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Overrides CommandBuffer.CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copies a region from this texture in other texture. Declaration protected override void CopyTextureDataToInternal(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint width The width in texels of the copy region. uint height The height in texels of the copy region. uint depth The depth in texels of the copy region. uint layerCount The number of array layers to copy. Overrides CommandBuffer.CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Dispatch(uint, uint, uint) Execute commands in a compute shader from a thread group. Declaration public override void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) Parameters Type Name Description uint threadGroupCountX uint threadGroupCountY uint threadGroupCountZ Overrides CommandBuffer.Dispatch(uint, uint, uint) Remarks You call the Dispatch method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z). DispatchIndirect(Buffer, uint) Execute a command list over one or more thread groups. Declaration public override void DispatchIndirect(Buffer buffer, uint offset) Parameters Type Name Description Buffer buffer uint offset A byte-aligned offset between the start of the buffer and the arguments. Overrides CommandBuffer.DispatchIndirect(Buffer, uint) DispatchRays(DispatchRaysDescription) Launch threads of a ray generation shader. See Initiating raytracing for an overview. Can be called from graphics or compute command lists and bundles. Declaration public override void DispatchRays(DispatchRaysDescription description) Parameters Type Name Description DispatchRaysDescription description Dispatch rays description. Overrides CommandBuffer.DispatchRays(DispatchRaysDescription) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandBuffer.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Draw(uint, uint) Draw non-indexed, non-instanced primitives. Declaration public override void Draw(uint vertexCount, uint startVertexLocation = 0) Parameters Type Name Description uint vertexCount Number of vertices to draw. uint startVertexLocation Index of the first vertex, which is usually an offset in a vertex buffer. Overrides CommandBuffer.Draw(uint, uint) DrawIndexed(uint, uint, uint) Draw indexed, non-instanced primitives. Declaration public override void DrawIndexed(uint indexCount, uint startIndexLocation = 0, uint baseVertexLocation = 0) Parameters Type Name Description uint indexCount Number of indices to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. Overrides CommandBuffer.DrawIndexed(uint, uint, uint) DrawIndexedInstanced(uint, uint, uint, uint, uint) Draw indexed, instanced primitives. Declaration public override void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation = 0, uint baseVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint indexCountPerInstance Number of indices read from the index buffer for each instance. uint instanceCount Number of instances to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawIndexedInstanced(uint, uint, uint, uint, uint) DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) Draw indexed, instanced, GPU-generated primitives. Declaration public override void DrawIndexedInstancedIndirect(Buffer buffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer buffer uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) DrawInstanced(uint, uint, uint, uint) Draw non-indexed, instanced primitives. Declaration public override void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint vertexCountPerInstance Number of vertices to draw. uint instanceCount Number of instances to draw. uint startVertexLocation Index of the first vertex. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawInstanced(uint, uint, uint, uint) DrawInstancedIndirect(Buffer, uint, uint, uint) Draw instanced, GPU-generated primitives. Declaration public override void DrawInstancedIndirect(Buffer buffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer buffer uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawInstancedIndirect(Buffer, uint, uint, uint) EndDebugMarker() Marks the end of a section of event code. Declaration public override void EndDebugMarker() Overrides CommandBuffer.EndDebugMarker() Remarks EndDebugMarker has no effect if the calling application is not running under an enabled profiling tool. EndInternal() Completes the command buffer. Declaration protected override void EndInternal() Overrides CommandBuffer.EndInternal() EndQuery(QueryHeap, uint) Ends a GPU query. Declaration public override void EndQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.EndQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. EndRenderPassInternal() End a render pass. Declaration protected override void EndRenderPassInternal() Overrides CommandBuffer.EndRenderPassInternal() GenerateMipmaps(Texture) Generates mipmaps for the given Texture. The largest mipmap is used to generate all of the lower mipmap levels contained in the Texture. Declaration public override void GenerateMipmaps(Texture texture) Parameters Type Name Description Texture texture The Texture to generate mipmaps for. This Texture must have been created with TextureFlags.GenerateMipmaps. Overrides CommandBuffer.GenerateMipmaps(Texture) InsertDebugMarker(string) Marks a single point of execution in code. This is used by graphics debuggers to identify points of interest in a command stream. Declaration public override void InsertDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.InsertDebugMarker(string) Remarks InsertDebugMarker has no effect if the calling application is not running under an enabled profiling tool. Reset() Reset the command buffer to the initial state. Declaration public override void Reset() Overrides CommandBuffer.Reset() ResourceBarrierUnorderedAccessView(Buffer) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Buffer buffer) Parameters Type Name Description Buffer buffer The buffer. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Buffer) ResourceBarrierUnorderedAccessView(Texture) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Texture texture) Parameters Type Name Description Texture texture The texture. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Texture) SetComputePipelineStateInternal(ComputePipelineState) Sets the compute pipeline state object for this commandbuffer. Declaration protected override void SetComputePipelineStateInternal(ComputePipelineState pipeline) Parameters Type Name Description ComputePipelineState pipeline The compute pipeline state description. Overrides CommandBuffer.SetComputePipelineStateInternal(ComputePipelineState) SetGraphicsPipelineStateInternal(GraphicsPipelineState) Sets the graphics pipeline state object for this commandbuffer. Declaration protected override void SetGraphicsPipelineStateInternal(GraphicsPipelineState pipeline) Parameters Type Name Description GraphicsPipelineState pipeline The graphics pipeline state description. Overrides CommandBuffer.SetGraphicsPipelineStateInternal(GraphicsPipelineState) SetIndexBufferInternal(Buffer, IndexFormat, uint) Set an array of index buffers to the input-assembler stage. Declaration protected override void SetIndexBufferInternal(Buffer buffer, IndexFormat format, uint offset) Parameters Type Name Description Buffer buffer The buffer being bound. IndexFormat format Indices Data Type (Default UInt16). uint offset Offset (in bytes) from the start of the index buffer to the first index to use. Overrides CommandBuffer.SetIndexBufferInternal(Buffer, IndexFormat, uint) SetRaytracingPipelineStateInternal(RaytracingPipelineState) Sets the raytracing pipeline state object for this commandbuffer. Declaration protected override void SetRaytracingPipelineStateInternal(RaytracingPipelineState pipeline) Parameters Type Name Description RaytracingPipelineState pipeline The raytracing pipeline state description. Overrides CommandBuffer.SetRaytracingPipelineStateInternal(RaytracingPipelineState) SetResourceSetInternal(ResourceSet, uint, uint[]) Set the active ResourceSet for the given index. Declaration protected override void SetResourceSetInternal(ResourceSet resourceSet, uint index, uint[] offsets) Parameters Type Name Description ResourceSet resourceSet The new ResourceSet. uint index The resourceSet index. uint[] offsets Overrides CommandBuffer.SetResourceSetInternal(ResourceSet, uint, uint[]) SetScissorRectangles(Rectangle[]) Set an scissor rectangle in a specific slot. Declaration public override void SetScissorRectangles(Rectangle[] rectangles) Parameters Type Name Description Rectangle[] rectangles The array of the scissor rectangles. Overrides CommandBuffer.SetScissorRectangles(Rectangle[]) SetVertexBufferInternal(uint, Buffer, uint) Set an buffers to the input-assembler stage. Declaration protected override void SetVertexBufferInternal(uint slot, Buffer buffer, uint offset = 0) Parameters Type Name Description uint slot The buffer slot. Buffer buffer The buffer being bound. uint offset Offset (in bytes) from the start of buffer to the first vertex to use. Overrides CommandBuffer.SetVertexBufferInternal(uint, Buffer, uint) SetVertexBuffersInternal(Buffer[], int[]) Set an array of buffers to the input-assembler stage. Declaration protected override void SetVertexBuffersInternal(Buffer[] buffers, int[] offsets) Parameters Type Name Description Buffer[] buffers The array of the vertex buffers being bound. int[] offsets Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use. Overrides CommandBuffer.SetVertexBuffersInternal(Buffer[], int[]) SetViewports(Viewport[]) Set a viewport in a specific slot. Declaration public override void SetViewports(Viewport[] viewports) Parameters Type Name Description Viewport[] viewports The array of the viewports. Overrides CommandBuffer.SetViewports(Viewport[]) UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void UpdateBufferDataInternal(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides CommandBuffer.UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) Refit an top level accelerations structure build on the GPU. Declaration public override void UpdateRaytracingAccelerationStructure(ref TopLevelAS tlas, TopLevelASDescription newDescription) Parameters Type Name Description TopLevelAS tlas Top level acceleration structure. TopLevelASDescription newDescription New top level description. Overrides CommandBuffer.UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) WriteTimestamp(QueryHeap, uint) Write a device timestamp into a query heap. Declaration public override void WriteTimestamp(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap. uint index The query index. Overrides CommandBuffer.WriteTimestamp(QueryHeap, uint) Remarks This method works only with timestamp queryheap type. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLCommandQueue.html": {
    "href": "api/Evergine.OpenGL.GLCommandQueue.html",
    "title": "Class GLCommandQueue | Evergine Doc",
    "keywords": "Class GLCommandQueue CPU implementation of a CommandQueue for OpenGL. Inheritance object CommandQueue GLCommandQueue Implements IDisposable Inherited Members CommandQueue.CommandBufferArraySize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLCommandQueue : CommandQueue, IDisposable Constructors GLCommandQueue(GLGraphicsContext) Initializes a new instance of the GLCommandQueue class. Declaration public GLCommandQueue(GLGraphicsContext graphicsContext) Parameters Type Name Description GLGraphicsContext graphicsContext Graphics Context. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandQueue.Name Methods CommandBuffer() Gets the next CommandBuffer(). Declaration public override CommandBuffer CommandBuffer() Returns Type Description CommandBuffer The CommandBuffer. Overrides CommandQueue.CommandBuffer() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandQueue.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Submit() Submits a CommandBuffer list to be executed by the GPU. Declaration public override void Submit() Overrides CommandQueue.Submit() WaitIdle() Wait for all command buffers are executed. Declaration public override void WaitIdle() Overrides CommandQueue.WaitIdle() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLComputePipelineState.html": {
    "href": "api/Evergine.OpenGL.GLComputePipelineState.html",
    "title": "Class GLComputePipelineState | Evergine Doc",
    "keywords": "Class GLComputePipelineState The OpenGL version of PipelineState. Inheritance object PipelineState ComputePipelineState GLComputePipelineState Implements IDisposable Inherited Members ComputePipelineState.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLComputePipelineState : ComputePipelineState, IDisposable Constructors GLComputePipelineState(GLGraphicsContext, ref ComputePipelineDescription) Initializes a new instance of the GLComputePipelineState class. Declaration public GLComputePipelineState(GLGraphicsContext graphicsContext, ref ComputePipelineDescription description) Parameters Type Name Description GLGraphicsContext graphicsContext Graphics Context. ComputePipelineDescription description The compute pipeline state description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ComputePipelineState.Name Methods Apply() Apply only changes compare with the previous pipelineState. Declaration public void Apply() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLComputePipelineStateCache.html": {
    "href": "api/Evergine.OpenGL.GLComputePipelineStateCache.html",
    "title": "Class GLComputePipelineStateCache | Evergine Doc",
    "keywords": "Class GLComputePipelineStateCache OpenGL cache implementation for ComputePipeline. Inheritance object GLComputePipelineStateCache Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLComputePipelineStateCache : IDisposable Constructors GLComputePipelineStateCache(GLGraphicsContext) Initializes a new instance of the GLComputePipelineStateCache class. Declaration public GLComputePipelineStateCache(GLGraphicsContext graphicsContext) Parameters Type Name Description GLGraphicsContext graphicsContext Graphics Context. Fields glGraphicsContext OpenGL Graphics Context. Declaration protected GLGraphicsContext glGraphicsContext Field Value Type Description GLGraphicsContext Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. GetNativeProgram(ComputeShaderStateDescription) Gets a native GLProgram from cache. Declaration public GLProgram GetNativeProgram(ComputeShaderStateDescription computeShaderStateDescription) Parameters Type Name Description ComputeShaderStateDescription computeShaderStateDescription The shader description. Returns Type Description GLProgram Return OpenGL program. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLDepthStencilState.html": {
    "href": "api/Evergine.OpenGL.GLDepthStencilState.html",
    "title": "Class GLDepthStencilState | Evergine Doc",
    "keywords": "Class GLDepthStencilState This struct represent all parameters supported in OpenGL for DepthStencilState. Inheritance object GLDepthStencilState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLDepthStencilState Constructors GLDepthStencilState() Initializes a new instance of the GLDepthStencilState class. Declaration public GLDepthStencilState() Methods Apply(GLGraphicsContext, ref GLGraphicsPipelineState, ref GLDepthStencilStateDescription, int) Apply all BlendState values. Declaration public void Apply(GLGraphicsContext context, ref GLGraphicsPipelineState previous, ref GLDepthStencilStateDescription descriptionGL, int stencilReference) Parameters Type Name Description GLGraphicsContext context The opengl graphicscontext. GLGraphicsPipelineState previous Previous Pipeline State. GLDepthStencilStateDescription descriptionGL New DepthStencilState description. int stencilReference New Stencil reference. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLDepthStencilStateDescription.html": {
    "href": "api/Evergine.OpenGL.GLDepthStencilStateDescription.html",
    "title": "Struct GLDepthStencilStateDescription | Evergine Doc",
    "keywords": "Struct GLDepthStencilStateDescription This struct represent all parameters supported in OpenGL for DepthStencilStateDescription. Implements IEquatable<GLDepthStencilStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public struct GLDepthStencilStateDescription : IEquatable<GLDepthStencilStateDescription> Constructors GLDepthStencilStateDescription(ref DepthStencilStateDescription) Initializes a new instance of the GLDepthStencilStateDescription struct. Declaration public GLDepthStencilStateDescription(ref DepthStencilStateDescription description) Parameters Type Name Description DepthStencilStateDescription description Evergine RasterizerStateDescription instance. Fields BackStencilDepthFailOperation The stencil operation to perform when stencil testing passes and depth testing fails. Declaration public StencilOp BackStencilDepthFailOperation Field Value Type Description StencilOp BackStencilFailOperation The stencil operation to perform when stencil testing fails. Declaration public StencilOp BackStencilFailOperation Field Value Type Description StencilOp BackStencilFunction A function that compares stencil data against existing stencil data. Declaration public StencilFunction BackStencilFunction Field Value Type Description StencilFunction BackStencilPassOperation The stencil operation to perform when stencil testing and depth testing both pass. Declaration public StencilOp BackStencilPassOperation Field Value Type Description StencilOp DepthEnable Enabled depth testing. Declaration public bool DepthEnable Field Value Type Description bool DepthFunction A function that compares depth data against existing depth data. Declaration public DepthFunction DepthFunction Field Value Type Description DepthFunction DepthWriteMask Indentify a portion of the depth-stencil buffer that can be modified by depth data. Declaration public bool DepthWriteMask Field Value Type Description bool FrontStencilDepthFailOperation The stencil operation to perform when stencil testing passes and depth testing fails. Declaration public StencilOp FrontStencilDepthFailOperation Field Value Type Description StencilOp FrontStencilFailOperation The stencil operation to perform when stencil testing fails. Declaration public StencilOp FrontStencilFailOperation Field Value Type Description StencilOp FrontStencilFunction A function that compares stencil data against existing stencil data. Declaration public StencilFunction FrontStencilFunction Field Value Type Description StencilFunction FrontStencilPassOperation The stencil operation to perform when stencil testing and depth testing both pass. Declaration public StencilOp FrontStencilPassOperation Field Value Type Description StencilOp StencilEnable Enable stencil testing. Declaration public bool StencilEnable Field Value Type Description bool StencilReadMask Identify a portion of the depth-stencil buffer for reading stencil data. Declaration public byte StencilReadMask Field Value Type Description byte StencilWriteMask Identify a portion of the depth-stencil buffer for writing stencil data. Declaration public byte StencilWriteMask Field Value Type Description byte Methods Equals(GLDepthStencilStateDescription) Returns a hash code for this instance. Declaration public bool Equals(GLDepthStencilStateDescription other) Parameters Type Name Description GLDepthStencilStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(GLDepthStencilStateDescription, GLDepthStencilStateDescription) Implements the operator ==. Declaration public static bool operator ==(GLDepthStencilStateDescription value1, GLDepthStencilStateDescription value2) Parameters Type Name Description GLDepthStencilStateDescription value1 The value1. GLDepthStencilStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(GLDepthStencilStateDescription, GLDepthStencilStateDescription) Implements the operator ==. Declaration public static bool operator !=(GLDepthStencilStateDescription value1, GLDepthStencilStateDescription value2) Parameters Type Name Description GLDepthStencilStateDescription value1 The value1. GLDepthStencilStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLExtensions.html": {
    "href": "api/Evergine.OpenGL.GLExtensions.html",
    "title": "Class GLExtensions | Evergine Doc",
    "keywords": "Class GLExtensions This class contains information about all the supported extensions in a device. Inheritance object GLExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLExtensions Constructors GLExtensions(GLGraphicsContext) Initializes a new instance of the GLExtensions class. Declaration public GLExtensions(GLGraphicsContext context) Parameters Type Name Description GLGraphicsContext context The opengl graphicscontext. Fields ARB_ComputeShader Whether GL_ARB_compute_shader is supported. Declaration public bool ARB_ComputeShader Field Value Type Description bool ARB_CopyImage Whether GL_ARB_copy_image is supported. Declaration public bool ARB_CopyImage Field Value Type Description bool ARB_Depth_Clamp Whether GL_ARB_Depth_Clamp is supported. Declaration public bool ARB_Depth_Clamp Field Value Type Description bool ARB_DirectStateAccess Whether GL_ARB_direct_state_access is supported. Declaration public bool ARB_DirectStateAccess Field Value Type Description bool ARB_Framebuffer_Object Whether GL_ARB_framebuffer_object is supported. Declaration public bool ARB_Framebuffer_Object Field Value Type Description bool ARB_Get_Texture_Sub_Image Whether GL_ARB_get_texture_sub_image is supported. Declaration public bool ARB_Get_Texture_Sub_Image Field Value Type Description bool ARB_Program_Interface_Query Whether GL_ARB_Program_Interface_Query is supported. Declaration public bool ARB_Program_Interface_Query Field Value Type Description bool ARB_TextureStorage Wheter GL_ARB_texture_storage is supported. Declaration public bool ARB_TextureStorage Field Value Type Description bool ARB_Texture_Non_Power_Of_Two Whether GL_ARB_texture_non_power_of_two is supported. Declaration public bool ARB_Texture_Non_Power_Of_Two Field Value Type Description bool ARB_Uniform_Buffer_Object Whether GL_ARB_Uniform_Buffer_Object is supported. Declaration public bool ARB_Uniform_Buffer_Object Field Value Type Description bool ARB_Viewport_Array Whether GL_ARB_Viewport_Array is supported. Declaration public bool ARB_Viewport_Array Field Value Type Description bool ARB_draw_indirect Whether GL_ARB_draw_indirect is supported. Declaration public bool ARB_draw_indirect Field Value Type Description bool ARB_multi_draw_indirect Whether GL_ARB_multi_draw_indirect is supported. Declaration public bool ARB_multi_draw_indirect Field Value Type Description bool ARB_shader_image_load_store Whether GL_ARB_shader_image_load_store is supported. Declaration public bool ARB_shader_image_load_store Field Value Type Description bool CurrentVersion Cached current version. Declaration public int CurrentVersion Field Value Type Description int EXT_Texture_Compression_S3TC Whether GL_EXT_texture_compression_s3tc is supported. Declaration public bool EXT_Texture_Compression_S3TC Field Value Type Description bool EXT_Texture_Filter_Anisotropic Whether GL_EXT_texture_filter_anisotropic is supported. Declaration public bool EXT_Texture_Filter_Anisotropic Field Value Type Description bool KHR_DEBUG Whether KHR_DEBUG is supported. Declaration public bool KHR_DEBUG Field Value Type Description bool Methods CheckGLExtension(string, int) Returns a value indicating whether the given extension is supported. Declaration public bool CheckGLExtension(string extension, int version) Parameters Type Name Description string extension The name of the extensions.\". int version OpenGL version where this extensions was included (Only ARB extensions). Returns Type Description bool True if the given extension is supported, false otherwise. CheckGLThirdPartiesExtension(string) Returns a value indicating whether the given extension is supported. Declaration public bool CheckGLThirdPartiesExtension(string extension) Parameters Type Name Description string extension The name of the extensions.\". Returns Type Description bool True if the given extension is supported, false otherwise. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLExtensionsMethods.html": {
    "href": "api/Evergine.OpenGL.GLExtensionsMethods.html",
    "title": "Class GLExtensionsMethods | Evergine Doc",
    "keywords": "Class GLExtensionsMethods Extensions methods used to convert valuesfrom Evergineto OpenGL. Inheritance object GLExtensionsMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public static class GLExtensionsMethods Methods ToOpenGL(SamplerBorderColor) Converts to OpenGL sampler borderColor. Declaration public static float[] ToOpenGL(this SamplerBorderColor borderColor) Parameters Type Name Description SamplerBorderColor borderColor The value to convert. Returns Type Description float[] The native array. ToOpenGL(TextureSampleCount) Converts from TextureSampleCount to OpenGL sample count. Declaration public static int ToOpenGL(this TextureSampleCount sampleCount) Parameters Type Name Description TextureSampleCount sampleCount The sample count to convert. Returns Type Description int The numeric sampler count."
  },
  "api/Evergine.OpenGL.GLFrameBuffer.html": {
    "href": "api/Evergine.OpenGL.GLFrameBuffer.html",
    "title": "Class GLFrameBuffer | Evergine Doc",
    "keywords": "Class GLFrameBuffer The OpenGL implementation of a Framebuffer object. Inheritance object FrameBuffer GLFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLFrameBuffer : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors GLFrameBuffer(GLGraphicsContext, FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the GLFrameBuffer class. Declaration public GLFrameBuffer(GLGraphicsContext context, FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description GLGraphicsContext context The OpenGL GraphicsContext. FrameBufferAttachment? depthTarget The depth texture which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color textures, all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Fields GLColorTargets The ColorTarget OpenGL texture array of this GLTexture. Declaration public GLBaseTexture[] GLColorTargets Field Value Type Description GLBaseTexture[] GLDepthStencilTarget The DepthStencil OpenGL texture of this GLTexture. Declaration public GLBaseTexture GLDepthStencilTarget Field Value Type Description GLBaseTexture Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name Methods Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLGraphicsContext.html": {
    "href": "api/Evergine.OpenGL.GLGraphicsContext.html",
    "title": "Class GLGraphicsContext | Evergine Doc",
    "keywords": "Class GLGraphicsContext Manages all graphical functionality. Inheritance object GraphicsContext GLGraphicsContext Implements IDisposable IGetNativePointers Inherited Members GraphicsContext.TimestampFrequency GraphicsContext.DefaultSampler GraphicsContext.ValidationLayer GraphicsContext.IsValidationLayerEnabled GraphicsContext.Factory GraphicsContext.AvailablePointerKeys GraphicsContext.DefaultTextureUploaderSize GraphicsContext.DefaultBufferUploaderSize GraphicsContext.CreateDevice(ValidationLayer) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint, uint) GraphicsContext.UpdateBufferData<T>(Buffer, ref T, uint) GraphicsContext.UpdateBufferData(Buffer, IntPtr, uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, ref T, uint) GraphicsContext.ShaderCompile(string, string, ShaderStages) GraphicsContext.SyncUpcopyQueue() GraphicsContext.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLGraphicsContext : GraphicsContext, IDisposable, IGetNativePointers Constructors GLGraphicsContext() Initializes a new instance of the GLGraphicsContext class. Declaration public GLGraphicsContext() GLGraphicsContext(GraphicsBackend?) Initializes a new instance of the GLGraphicsContext class. Declaration public GLGraphicsContext(GraphicsBackend? targetGraphicsBackend) Parameters Type Name Description GraphicsBackend? targetGraphicsBackend The target graphics backend with this graphic context. Fields ComputePipelineStateCache Compute pipeline state cache. Declaration protected GLComputePipelineStateCache ComputePipelineStateCache Field Value Type Description GLComputePipelineStateCache Extensions OpenGL extensions. Declaration public GLExtensions Extensions Field Value Type Description GLExtensions GraphicsContext Graphics context. Declaration protected IOpenGLContext GraphicsContext Field Value Type Description IOpenGLContext GraphicsPipelineStateCache Graphics pipeline state cache. Declaration protected GLGraphicsPipelineStateCache GraphicsPipelineStateCache Field Value Type Description GLGraphicsPipelineStateCache Properties BackendType Gets the backend type (DirectX, OpenGL ...) Declaration public override GraphicsBackend BackendType { get; } Property Value Type Description GraphicsBackend Overrides GraphicsContext.BackendType Capabilities Gets the capabilities of this graphics context. Declaration public override GraphicsContextCapabilities Capabilities { get; } Property Value Type Description GraphicsContextCapabilities Overrides GraphicsContext.Capabilities NativeDevicePointer Gets the native device pointer. Declaration public override IntPtr NativeDevicePointer { get; } Property Value Type Description IntPtr Overrides GraphicsContext.NativeDevicePointer Methods CreateDefaultSampler() Create the default sampler. Declaration protected override void CreateDefaultSampler() Overrides GraphicsContext.CreateDefaultSampler() CreateDeviceInternal() Initialize the graphics context to be used in a compute shader. Declaration public override void CreateDeviceInternal() Overrides GraphicsContext.CreateDeviceInternal() CreateSwapChain(SwapChainDescription) Initialize the swapchain. Declaration public override SwapChain CreateSwapChain(SwapChainDescription description) Parameters Type Name Description SwapChainDescription description The swapchain descriptor. Returns Type Description SwapChain Created Swapchain. Overrides GraphicsContext.CreateSwapChain(SwapChainDescription) Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides GraphicsContext.Dispose(bool) GenerateTextureMipmapping(Texture) Generate mipmapping texture levels. Declaration public override bool GenerateTextureMipmapping(Texture texture) Parameters Type Name Description Texture texture The texture to generate mipmapping. Returns Type Description bool True if the mipmapping has been generated. Overrides GraphicsContext.GenerateTextureMipmapping(Texture) GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration public override bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. Overrides GraphicsContext.GetNativePointer(string, out IntPtr) InternalUpdateBufferData(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void InternalUpdateBufferData(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides GraphicsContext.InternalUpdateBufferData(Buffer, IntPtr, uint, uint) MapMemory(GraphicsResource, MapMode, uint) Maps a Buffer or Texture into a CPU-accessible data region. Declaration public override MappedResource MapMemory(GraphicsResource resource, MapMode mode, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. MapMode mode The MapMode used to map the resource. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Returns Type Description MappedResource A MappedResource structure describing the mapped data region. Overrides GraphicsContext.MapMemory(GraphicsResource, MapMode, uint) ShaderCompile(string, string, ShaderStages, CompilerParameters) Converts the shader source into bytecode. Declaration public override CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader bytecodes. Overrides GraphicsContext.ShaderCompile(string, string, ShaderStages, CompilerParameters) ToOpenGL(ElementFormat, out int, out bool) Converts from ElementFormat to VertexAttribPointerType. Declaration protected VertexAttribPointerType ToOpenGL(ElementFormat format, out int size, out bool normalized) Parameters Type Name Description ElementFormat format The element format. int size The number of components per generic vertex attribute. Must be 1, 2, 3, 4. bool normalized If this is a normalized format. Returns Type Description VertexAttribPointerType The VertexAttribPointerType. UnmapMemory(GraphicsResource, uint) Invalidates a previously-mapped data region for the given Buffer or Texture. Declaration public override void UnmapMemory(GraphicsResource resource, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Overrides GraphicsContext.UnmapMemory(GraphicsResource, uint) UpdateTextureData(Texture, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public override void UpdateTextureData(Texture texture, IntPtr source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description Texture texture Texture instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subResource index. Overrides GraphicsContext.UpdateTextureData(Texture, IntPtr, uint, uint) Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLGraphicsPipelineState.html": {
    "href": "api/Evergine.OpenGL.GLGraphicsPipelineState.html",
    "title": "Class GLGraphicsPipelineState | Evergine Doc",
    "keywords": "Class GLGraphicsPipelineState The OpenGL version of PipelineState. Inheritance object PipelineState GraphicsPipelineState GLGraphicsPipelineState Implements IDisposable Inherited Members GraphicsPipelineState.Description GraphicsPipelineState.InvalidatedViewport object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLGraphicsPipelineState : GraphicsPipelineState, IDisposable Constructors GLGraphicsPipelineState(GLGraphicsContext, ref GraphicsPipelineDescription) Initializes a new instance of the GLGraphicsPipelineState class. Declaration public GLGraphicsPipelineState(GLGraphicsContext graphicsContext, ref GraphicsPipelineDescription description) Parameters Type Name Description GLGraphicsContext graphicsContext Graphics Context. GraphicsPipelineDescription description The graphics pipeline state description. Fields blendState OpenGL blend state. Declaration protected GLBlendState blendState Field Value Type Description GLBlendState depthStencilState OpenGL Depth Stencil state. Declaration protected GLDepthStencilState depthStencilState Field Value Type Description GLDepthStencilState rasterizerState OpenGL Rasterizer state. Declaration protected GLRasterizerState rasterizerState Field Value Type Description GLRasterizerState Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides GraphicsPipelineState.Name Methods Apply() Apply only changes compare with the previous pipelineState. Declaration public void Apply() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLGraphicsPipelineStateCache.html": {
    "href": "api/Evergine.OpenGL.GLGraphicsPipelineStateCache.html",
    "title": "Class GLGraphicsPipelineStateCache | Evergine Doc",
    "keywords": "Class GLGraphicsPipelineStateCache The OpenGL cache implementation for graphics pipeline state. Inheritance object GLGraphicsPipelineStateCache Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLGraphicsPipelineStateCache : IDisposable Constructors GLGraphicsPipelineStateCache(GLGraphicsContext) Initializes a new instance of the GLGraphicsPipelineStateCache class. Declaration public GLGraphicsPipelineStateCache(GLGraphicsContext graphicsContext) Parameters Type Name Description GLGraphicsContext graphicsContext Graphics Context. Fields glGraphicsContext OpenGL Graphics Context. Declaration protected GLGraphicsContext glGraphicsContext Field Value Type Description GLGraphicsContext Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. GetNativeBlendState(ref BlendStateDescription) Gets a native blendState from cache. Declaration public GLBlendStateDescription GetNativeBlendState(ref BlendStateDescription description) Parameters Type Name Description BlendStateDescription description The blendState description. Returns Type Description GLBlendStateDescription The native blendState. GetNativeDepthStencilState(ref DepthStencilStateDescription) Gets a native depthStencilState from cache. Declaration public GLDepthStencilStateDescription GetNativeDepthStencilState(ref DepthStencilStateDescription description) Parameters Type Name Description DepthStencilStateDescription description The depthStencil description. Returns Type Description GLDepthStencilStateDescription the native depthStencilState. GetNativeProgram(GraphicsShaderStateDescription) Gets a native GLProgram from cache. Declaration public GLProgram GetNativeProgram(GraphicsShaderStateDescription shaderDescription) Parameters Type Name Description GraphicsShaderStateDescription shaderDescription The shader description. Returns Type Description GLProgram Return OpenGL program. GetNativeRasterizerState(ref RasterizerStateDescription) Gets a native rasterizerState from cache. Declaration public GLRasterizerStateDescription GetNativeRasterizerState(ref RasterizerStateDescription description) Parameters Type Name Description RasterizerStateDescription description The rasterizerState description. Returns Type Description GLRasterizerStateDescription The native rasterizerState. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLHelpers.html": {
    "href": "api/Evergine.OpenGL.GLHelpers.html",
    "title": "Class GLHelpers | Evergine Doc",
    "keywords": "Class GLHelpers Helper OpenGL functions. Inheritance object GLHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLHelpers Properties GLGetError Gets or sets the call to \"glGetError\". Declaration public static Func<uint> GLGetError { get; set; } Property Value Type Description Func<uint> GetGLVersion Gets or sets the function to retrieve the OpenGL version encoded as: major * 100 + minor * 10. Declaration public static Func<int> GetGLVersion { get; set; } Property Value Type Description Func<int> Instance Gets the singleton instance. Declaration public static GLHelpers Instance { get; } Property Value Type Description GLHelpers Methods CheckError(GraphicsContext) Checks the error. Declaration public void CheckError(GraphicsContext context) Parameters Type Name Description GraphicsContext context The graphics context. GetCurrentPlatfom() Get the current Platform. Declaration public GLHelpers.OS GetCurrentPlatfom() Returns Type Description GLHelpers.OS The platform. GetDepthBits(ValidationLayer, PixelFormat, out int, out int) Get the depth size on stencil size from pixel format. Declaration public void GetDepthBits(ValidationLayer validationLayer, PixelFormat value, out int depthSize, out int stencilSize) Parameters Type Name Description ValidationLayer validationLayer The validation layer. PixelFormat value The pixel format. int depthSize Output depth size. int stencilSize Output stencil size. IsIntegerFormat(PixelFormat) Indicats if the specified format is associated to an integer format. Declaration public bool IsIntegerFormat(PixelFormat format) Parameters Type Name Description PixelFormat format The format. Returns Type Description bool True if the format is integer. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLHelpers.OS.html": {
    "href": "api/Evergine.OpenGL.GLHelpers.OS.html",
    "title": "Enum GLHelpers.OS | Evergine Doc",
    "keywords": "Enum GLHelpers.OS Operating system enum. Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public enum GLHelpers.OS Fields Name Description Android Android platform. Linux OSX platform. MacOS MacOS platform. Web Web platform. Windows Windows platform. iOS iOS platform. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLPixelFormat.html": {
    "href": "api/Evergine.OpenGL.GLPixelFormat.html",
    "title": "Struct GLPixelFormat | Evergine Doc",
    "keywords": "Struct GLPixelFormat Represents all information about a OpenGL Pixel format. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public struct GLPixelFormat Fields Compressed Whether this format is compressed. Declaration public bool Compressed Field Value Type Description bool Format The OpenGL PixelFormat value. Declaration public PixelFormat Format Field Value Type Description PixelFormat InternalFormat The OpenGL InternaFormat value. Declaration public InternalFormat InternalFormat Field Value Type Description InternalFormat PixelSize The OpenGL pixelsize value. Declaration public int PixelSize Field Value Type Description int PixelType The OpenGL pixeltype value. Declaration public uint PixelType Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLPlaceHolderTexture.html": {
    "href": "api/Evergine.OpenGL.GLPlaceHolderTexture.html",
    "title": "Class GLPlaceHolderTexture | Evergine Doc",
    "keywords": "Class GLPlaceHolderTexture The placeholder texture used for swapchain. Inheritance object GraphicsResource Texture GLBaseTexture GLPlaceHolderTexture Implements ILoadable IDisposable IDependencyObject Inherited Members GLBaseTexture.TextureTarget GLBaseTexture.Format GLBaseTexture.Name GLBaseTexture.NativePointer GLBaseTexture.HasStencil() Texture.Id Texture.Description Texture.ReaderVersion Texture.Invalidated Texture.Dependencies Texture.Sampler Texture.Dispose() Texture.Invalidate(ILoadable) Texture.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLPlaceHolderTexture : GLBaseTexture, ILoadable, IDisposable, IDependencyObject Constructors GLPlaceHolderTexture(GraphicsContext, TextureDescription) Initializes a new instance of the GLPlaceHolderTexture class. Declaration public GLPlaceHolderTexture(GraphicsContext context, TextureDescription description) Parameters Type Name Description GraphicsContext context The graphics context. TextureDescription description The texture description. Properties CouldBeAttachedToFramebuffer Gets a value indicating whether this texture could be attached to a framebuffer. Declaration public override bool CouldBeAttachedToFramebuffer { get; } Property Value Type Description bool Overrides Texture.CouldBeAttachedToFramebuffer Implements ILoadable IDisposable IDependencyObject Extension Methods TextureExtension.SafeToStream(Texture, GraphicsContext) TextureExtension.SaveToFile(Texture, GraphicsContext, string) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLProgram.html": {
    "href": "api/Evergine.OpenGL.GLProgram.html",
    "title": "Class GLProgram | Evergine Doc",
    "keywords": "Class GLProgram A set of shaders used to draw something. Inheritance object GLProgram Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLProgram : IDisposable Constructors GLProgram(GLGraphicsContext, ComputeShaderStateDescription) Initializes a new instance of the GLProgram class. Declaration public GLProgram(GLGraphicsContext context, ComputeShaderStateDescription shaderDescription) Parameters Type Name Description GLGraphicsContext context Graphics Context. ComputeShaderStateDescription shaderDescription The current shader descriptor. GLProgram(GLGraphicsContext, GraphicsShaderStateDescription) Initializes a new instance of the GLProgram class. Declaration public GLProgram(GLGraphicsContext context, GraphicsShaderStateDescription shaderDescription) Parameters Type Name Description GLGraphicsContext context Graphics Context. GraphicsShaderStateDescription shaderDescription The current shader descriptor. Fields Hash The GetHashCode that represent this program. Declaration public int Hash Field Value Type Description int disposed Holds if the instance has been disposed. Declaration protected bool disposed Field Value Type Description bool uniformBlockBindings The uniform block bindings index. Declaration protected List<uint> uniformBlockBindings Field Value Type Description List<uint> uniformSlots The uniform slots. Declaration protected Dictionary<int, int> uniformSlots Field Value Type Description Dictionary<int, int> Methods Apply() Install a program object as part of the current graphics state. Declaration public void Apply() Dispose() Dispose this instance. Declaration public void Dispose() ExistsBufferBinding(uint) Get slot binding to buffer element index. Declaration public bool ExistsBufferBinding(uint binding) Parameters Type Name Description uint binding slot index. Returns Type Description bool if exists a buffer binding in this slot. GetAttribLocation(ElementSemanticType, uint, out int) Gets the attribute location from the semantic type and index. Declaration public bool GetAttribLocation(ElementSemanticType semanticType, uint semanticIndex, out int location) Parameters Type Name Description ElementSemanticType semanticType The semantic type. uint semanticIndex The semantic index. int location The attribute location. -1 if is not available. Returns Type Description bool If this attribute location is available. GetUniformInfo(int) Get uniformInfo binding to uniform element index. Declaration public int GetUniformInfo(int slot) Parameters Type Name Description int slot Slot index. Returns Type Description int Uniform information. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLQueryHeap.html": {
    "href": "api/Evergine.OpenGL.GLQueryHeap.html",
    "title": "Class GLQueryHeap | Evergine Doc",
    "keywords": "Class GLQueryHeap Represents a DirectX queryheap object. Inheritance object GraphicsResource QueryHeap GLQueryHeap Implements IDisposable Inherited Members QueryHeap.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLQueryHeap : QueryHeap, IDisposable Constructors GLQueryHeap(GLGraphicsContext, ref QueryHeapDescription) Initializes a new instance of the GLQueryHeap class. Declaration public GLQueryHeap(GLGraphicsContext context, ref QueryHeapDescription description) Parameters Type Name Description GLGraphicsContext context The graphics context. QueryHeapDescription description The queryheap description. Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ReadData(uint, uint, ulong[]) Extract data from one or more queries. Declaration public override bool ReadData(uint startIndex, uint count, ulong[] results) Parameters Type Name Description uint startIndex Specifies the index of the fist query to read. uint count Specifies the number of queries to read. ulong[] results ulong buffer with the extracted queries data. Returns Type Description bool Return true if all queries to read are available and false if not. Overrides QueryHeap.ReadData(uint, uint, ulong[]) Remarks If the result is false, the results will conttains the latest available results. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLRasterizerState.html": {
    "href": "api/Evergine.OpenGL.GLRasterizerState.html",
    "title": "Class GLRasterizerState | Evergine Doc",
    "keywords": "Class GLRasterizerState This class represent all parameters supported in OpenGL for RasterizerState. Inheritance object GLRasterizerState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLRasterizerState Constructors GLRasterizerState() Initializes a new instance of the GLRasterizerState class. Declaration public GLRasterizerState() Methods Apply(GLGraphicsContext, GLGraphicsPipelineState, ref GLRasterizerStateDescription, bool) Apply all rasterizerState values. Declaration public void Apply(GLGraphicsContext context, GLGraphicsPipelineState previous, ref GLRasterizerStateDescription description, bool invertFrontFaceChanged) Parameters Type Name Description GLGraphicsContext context The opengl graphicscontext. GLGraphicsPipelineState previous Previous pipeline state. GLRasterizerStateDescription description New RasterizerState description. bool invertFrontFaceChanged The front face direction flip has changed. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLRasterizerStateDescription.html": {
    "href": "api/Evergine.OpenGL.GLRasterizerStateDescription.html",
    "title": "Struct GLRasterizerStateDescription | Evergine Doc",
    "keywords": "Struct GLRasterizerStateDescription This struct represent all parameters supported in OpenGL for RasterizerStateDescription. Implements IEquatable<GLRasterizerStateDescription> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public struct GLRasterizerStateDescription : IEquatable<GLRasterizerStateDescription> Constructors GLRasterizerStateDescription(ref RasterizerStateDescription) Initializes a new instance of the GLRasterizerStateDescription struct. Declaration public GLRasterizerStateDescription(ref RasterizerStateDescription description) Parameters Type Name Description RasterizerStateDescription description Evergine RasterizerStateDescription instance. Fields CullMode The CullMode. Declaration public CullFaceMode CullMode Field Value Type Description CullFaceMode DepthBias The depth bias. Declaration public int DepthBias Field Value Type Description int DepthClipEnable The DepthClipEnable. Declaration public bool DepthClipEnable Field Value Type Description bool EnableCulling The culling flag. Declaration public bool EnableCulling Field Value Type Description bool FillMode The FillMode. Declaration public PolygonMode FillMode Field Value Type Description PolygonMode FrontFaceDirection The FrontFaceDirection. Declaration public FrontFaceDirection FrontFaceDirection Field Value Type Description FrontFaceDirection IsScissorEnabled The IsScirssorEnable. Declaration public bool IsScissorEnabled Field Value Type Description bool SlopeScaleDepthBias The SlopeSacaleDepthBias. Declaration public float SlopeScaleDepthBias Field Value Type Description float Methods Equals(GLRasterizerStateDescription) Returns a hash code for this instance. Declaration public bool Equals(GLRasterizerStateDescription other) Parameters Type Name Description GLRasterizerStateDescription other Other used to compare. Returns Type Description bool A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators operator ==(GLRasterizerStateDescription, GLRasterizerStateDescription) Implements the operator ==. Declaration public static bool operator ==(GLRasterizerStateDescription value1, GLRasterizerStateDescription value2) Parameters Type Name Description GLRasterizerStateDescription value1 The value1. GLRasterizerStateDescription value2 The value2. Returns Type Description bool The result of the operator. operator !=(GLRasterizerStateDescription, GLRasterizerStateDescription) Implements the operator ==. Declaration public static bool operator !=(GLRasterizerStateDescription value1, GLRasterizerStateDescription value2) Parameters Type Name Description GLRasterizerStateDescription value1 The value1. GLRasterizerStateDescription value2 The value2. Returns Type Description bool The result of the operator. Implements IEquatable<T> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLResourceFactory.html": {
    "href": "api/Evergine.OpenGL.GLResourceFactory.html",
    "title": "Class GLResourceFactory | Evergine Doc",
    "keywords": "Class GLResourceFactory The OpenGL version of the resource factory. Inheritance object ResourceFactory GLResourceFactory Inherited Members ResourceFactory.CreateCommandQueue(CommandQueueType) ResourceFactory.CreateGraphicsPipeline(ref GraphicsPipelineDescription) ResourceFactory.CreateComputePipeline(ref ComputePipelineDescription) ResourceFactory.CreateRaytracingPipeline(ref RaytracingPipelineDescription) ResourceFactory.CreateTexture(ref TextureDescription, string) ResourceFactory.GetTextureFromNativePointer(IntPtr, ref TextureDescription) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, string) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, ref SamplerStateDescription, string) ResourceFactory.CreateBuffer(ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(T[], ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(ref T, ref BufferDescription, string) ResourceFactory.CreateBuffer(IntPtr, ref BufferDescription, string) ResourceFactory.CreateShader(ref ShaderDescription) ResourceFactory.CreateSamplerState(ref SamplerStateDescription) ResourceFactory.CreateFrameBuffer(uint, uint, PixelFormat, PixelFormat, string) ResourceFactory.CreateFrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) ResourceFactory.CreateResourceLayout(ref ResourceLayoutDescription) ResourceFactory.CreateResourceSet(ref ResourceSetDescription) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLResourceFactory : ResourceFactory Constructors GLResourceFactory(GLGraphicsContext) Initializes a new instance of the GLResourceFactory class. Declaration public GLResourceFactory(GLGraphicsContext graphicsContext) Parameters Type Name Description GLGraphicsContext graphicsContext OpenGL Graphics Context. Fields context OpenGL Graphics Context. Declaration protected GLGraphicsContext context Field Value Type Description GLGraphicsContext Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides ResourceFactory.GraphicsContext Methods CreateBufferInternal(IntPtr, ref BufferDescription) Creates a Buffer instance. Declaration protected override Buffer CreateBufferInternal(IntPtr data, ref BufferDescription description) Parameters Type Name Description IntPtr data Data pointer. BufferDescription description The index buffer description. Returns Type Description Buffer The new buffer. Overrides ResourceFactory.CreateBufferInternal(IntPtr, ref BufferDescription) CreateCommandQueueInternal(CommandQueueType) Creates a CommandQueue instance. Declaration protected override CommandQueue CreateCommandQueueInternal(CommandQueueType queueType) Parameters Type Name Description CommandQueueType queueType The commandQueue type, CommandQueueType. Returns Type Description CommandQueue The new commandQueue. Overrides ResourceFactory.CreateCommandQueueInternal(CommandQueueType) CreateComputePipelineInternal(ref ComputePipelineDescription) Creates a ComputePipelineState instance. Declaration protected override ComputePipelineState CreateComputePipelineInternal(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipelinestate description. Returns Type Description ComputePipelineState The new pipelinestate. Overrides ResourceFactory.CreateComputePipelineInternal(ref ComputePipelineDescription) CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) Create a FrameBuffer instance. Declaration protected override FrameBuffer CreateFrameBufferInternal(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth FrameBufferAttachment which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color FrameBufferAttachment , all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Returns Type Description FrameBuffer The new framebuffer. Overrides ResourceFactory.CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) Creates a GraphicsPipelineState instance. Declaration protected override GraphicsPipelineState CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphics pipelinestate description. Returns Type Description GraphicsPipelineState The new pipelinestate. Overrides ResourceFactory.CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) CreateQueryHeap(ref QueryHeapDescription) Create a QueryHeap instance. Declaration public override QueryHeap CreateQueryHeap(ref QueryHeapDescription description) Parameters Type Name Description QueryHeapDescription description The queryheap description. Returns Type Description QueryHeap The new queryheap. Overrides ResourceFactory.CreateQueryHeap(ref QueryHeapDescription) CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) Creates a RaytracingPipelineState instance. Declaration protected override RaytracingPipelineState CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipelinestate description. Returns Type Description RaytracingPipelineState The new pipelinestate. Overrides ResourceFactory.CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) CreateResourceLayoutInternal(ref ResourceLayoutDescription) Create a new ResourceLayout. Declaration protected override ResourceLayout CreateResourceLayoutInternal(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The descriptions for all elements in this new resourceLayout. Returns Type Description ResourceLayout A new resourceLayout object. Overrides ResourceFactory.CreateResourceLayoutInternal(ref ResourceLayoutDescription) CreateResourceSetInternal(ref ResourceSetDescription) Create a new ResourceSet. Declaration protected override ResourceSet CreateResourceSetInternal(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The descriptions for all elements in this new resourceSet. Returns Type Description ResourceSet A new resourceSet object. Overrides ResourceFactory.CreateResourceSetInternal(ref ResourceSetDescription) CreateSamplerStateInternal(ref SamplerStateDescription) Creates a SamplerState instance. Declaration protected override SamplerState CreateSamplerStateInternal(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. Returns Type Description SamplerState The new samplerstate. Overrides ResourceFactory.CreateSamplerStateInternal(ref SamplerStateDescription) CreateShaderInternal(ref ShaderDescription) Create a Shader instance. Declaration protected override Shader CreateShaderInternal(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. Returns Type Description Shader The new shader. Overrides ResourceFactory.CreateShaderInternal(ref ShaderDescription) CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) Creates a Texture instance. Declaration protected override Texture CreateTextureInternal(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The sampler state description SamplerStateDescription struct. Returns Type Description Texture The new texture. Overrides ResourceFactory.CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Gets a Texture instance from an existing texture using the specified native pointer. Declaration protected override Texture GetTextureFromNativePointerInternal(IntPtr texturePointer, ref TextureDescription textureDescription) Parameters Type Name Description IntPtr texturePointer The pointer of the texture. TextureDescription textureDescription The texture description of the already created texture. Returns Type Description Texture The texture instance. Overrides ResourceFactory.GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLResourceLayout.html": {
    "href": "api/Evergine.OpenGL.GLResourceLayout.html",
    "title": "Class GLResourceLayout | Evergine Doc",
    "keywords": "Class GLResourceLayout The OpenGL implementation of a ResourceLayout object. Inheritance object ResourceLayout GLResourceLayout Implements IDisposable Inherited Members ResourceLayout.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLResourceLayout : ResourceLayout, IDisposable Constructors GLResourceLayout(ref ResourceLayoutDescription) Initializes a new instance of the GLResourceLayout class. Declaration public GLResourceLayout(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description ResourceLayout description. Fields Elements List of layout elements. Declaration public LayoutElementDescription[] Elements Field Value Type Description LayoutElementDescription[] Properties ConstantBufferCount Gets ConstantBuffers defined. Declaration public uint ConstantBufferCount { get; } Property Value Type Description uint Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceLayout.Name SamplerCount Gets Sampler defined. Declaration public uint SamplerCount { get; } Property Value Type Description uint StorageBufferCount Gets StorageBuffer defined. Declaration public uint StorageBufferCount { get; } Property Value Type Description uint TextureCount Gets Textures defined. Declaration public uint TextureCount { get; } Property Value Type Description uint Methods Dispose() Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceLayout.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLResourceSet.html": {
    "href": "api/Evergine.OpenGL.GLResourceSet.html",
    "title": "Class GLResourceSet | Evergine Doc",
    "keywords": "Class GLResourceSet The OpenGL implementation of a ResourceSet object. Inheritance object ResourceSet GLResourceSet Implements IDisposable Inherited Members ResourceSet.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLResourceSet : ResourceSet, IDisposable Constructors GLResourceSet(GLGraphicsContext, ref ResourceSetDescription) Initializes a new instance of the GLResourceSet class. Declaration public GLResourceSet(GLGraphicsContext context, ref ResourceSetDescription description) Parameters Type Name Description GLGraphicsContext context The graphics context. ResourceSetDescription description The resourceSet description. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceSet.Name Methods Dispose() /// Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceSet.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLSamplerState.html": {
    "href": "api/Evergine.OpenGL.GLSamplerState.html",
    "title": "Class GLSamplerState | Evergine Doc",
    "keywords": "Class GLSamplerState This struct represent all parameters supported in OpenGL for BlendState. Inheritance object GraphicsResource SamplerState GLSamplerState Implements ILoadable IDisposable IDependencyObject Inherited Members SamplerState.Id SamplerState.ReaderVersion SamplerState.Invalidated SamplerState.Dependencies SamplerState.Description SamplerState.Invalidate(ILoadable) SamplerState.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLSamplerState : SamplerState, ILoadable, IDisposable, IDependencyObject Constructors GLSamplerState(GraphicsContext, ref SamplerStateDescription) Initializes a new instance of the GLSamplerState class. Declaration public GLSamplerState(GraphicsContext context, ref SamplerStateDescription description) Parameters Type Name Description GraphicsContext context The graphics context. GraphicsContext. SamplerStateDescription description The sampler state description. SamplerStateDescription. Fields StateCache Current SamplerStateDescriptionGL applicated. Declaration public Dictionary<int, GLSamplerStateDescription> StateCache Field Value Type Description Dictionary<int, GLSamplerStateDescription> Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SamplerState.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Apply(GLTexture) Apply all BlendState values. Declaration public void Apply(GLTexture texture) Parameters Type Name Description GLTexture texture The texture where we want to apply an specific sampler state. Dispose() Dispose this instance. Declaration public override void Dispose() Overrides SamplerState.Dispose() Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLSamplerStateDescription.html": {
    "href": "api/Evergine.OpenGL.GLSamplerStateDescription.html",
    "title": "Struct GLSamplerStateDescription | Evergine Doc",
    "keywords": "Struct GLSamplerStateDescription This struct represent all parameters supported in OpenGL for SamplerStateDescription. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public struct GLSamplerStateDescription Constructors GLSamplerStateDescription(ref SamplerStateDescription, bool, GraphicsBackend) Initializes a new instance of the GLSamplerStateDescription struct. Declaration public GLSamplerStateDescription(ref SamplerStateDescription description, bool hasMipmapping, GraphicsBackend graphicsBackend) Parameters Type Name Description SamplerStateDescription description Evergine RasterizerStateDescription instance. bool hasMipmapping Texture has mipmapping. GraphicsBackend graphicsBackend Type of graphics backend: openGL, webGL, ... Fields BorderColor Border color to use if D3D11_TEXTURE_ADDRESS_BORDER is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive. Declaration public float[] BorderColor Field Value Type Description float[] CompareMode The compare mode. Declaration public uint CompareMode Field Value Type Description uint ComparisonFunc A function that compares sampled data against existing sampled data. Declaration public DepthFunction ComparisonFunc Field Value Type Description DepthFunction MagFilter The magFilter. Declaration public uint MagFilter Field Value Type Description uint MaxAnisotropy Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is specified in Filter. Valid values are between 1 and 16. Declaration public int MaxAnisotropy Field Value Type Description int MaxLod Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. Declaration public float MaxLod Field Value Type Description float MinFilter THe minFilter. Declaration public uint MinFilter Field Value Type Description uint MinLod Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5. Declaration public float MinLod Field Value Type Description float TextureWrapR Method to use for resolving a w texture coordinate that is outside the 0 to 1 range. Declaration public TextureWrapMode TextureWrapR Field Value Type Description TextureWrapMode TextureWrapS Method to use for resolving a u texture coordinate that is outside the 0 to 1 range. Declaration public TextureWrapMode TextureWrapS Field Value Type Description TextureWrapMode TextureWrapT Method to use for resolving a v texture coordinate that is outside the 0 to 1 range. Declaration public TextureWrapMode TextureWrapT Field Value Type Description TextureWrapMode Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLShader.html": {
    "href": "api/Evergine.OpenGL.GLShader.html",
    "title": "Class GLShader | Evergine Doc",
    "keywords": "Class GLShader The OpenGL implementation of a shader object. Inheritance object GraphicsResource Shader GLShader Implements IDisposable Inherited Members Shader.Description Shader.GetHashCode() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLShader : Shader, IDisposable Constructors GLShader(GraphicsContext, ref ShaderDescription) Initializes a new instance of the GLShader class. Declaration public GLShader(GraphicsContext context, ref ShaderDescription description) Parameters Type Name Description GraphicsContext context The graphics context. ShaderDescription description The shader description. Fields isCreated Whether the native shader is already created. Declaration protected bool isCreated Field Value Type Description bool Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Shader.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods CreateNativeResource() Initialize native GLResource. Declaration public void CreateNativeResource() DeleteNativeResource() Delete native GLResource. Declaration public void DeleteNativeResource() Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ShaderCompile(string) By pass GLSL string to byte array. Declaration public static CompilationResult ShaderCompile(string shaderSource) Parameters Type Name Description string shaderSource The GLSL source code. Returns Type Description CompilationResult A byte array of the GLSL code. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLSwapChain.html": {
    "href": "api/Evergine.OpenGL.GLSwapChain.html",
    "title": "Class GLSwapChain | Evergine Doc",
    "keywords": "Class GLSwapChain The OpenGL implementation of a Swapchain object. Inheritance object SwapChain GLSwapChain Implements IDisposable Inherited Members SwapChain.disposed SwapChain.GraphicsContext SwapChain.NativeSwapChainPointer SwapChain.SwapChainDescription SwapChain.FrameBuffer SwapChain.VerticalSync SwapChain.InitFrame() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLSwapChain : SwapChain, IDisposable Constructors GLSwapChain(GraphicsContext, SwapChainDescription) Initializes a new instance of the GLSwapChain class. Declaration public GLSwapChain(GraphicsContext context, SwapChainDescription description) Parameters Type Name Description GraphicsContext context The graphics context. SwapChainDescription description The swapchain description. Fields ColorTarget The color target. Declaration protected GLPlaceHolderTexture ColorTarget Field Value Type Description GLPlaceHolderTexture DepthTarget The depth target. Declaration protected GLPlaceHolderTexture DepthTarget Field Value Type Description GLPlaceHolderTexture Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SwapChain.Name Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides SwapChain.Dispose() GetCurrentFramebufferTexture() Gets the current Framebuffer Texture. Declaration public override Texture GetCurrentFramebufferTexture() Returns Type Description Texture Framebuffer texture. Overrides SwapChain.GetCurrentFramebufferTexture() Present() Presents a rendered image to the user. Declaration public override void Present() Overrides SwapChain.Present() RefreshSurfaceInfo(SurfaceInfo) The swapchain surface info has changed. Declaration public override void RefreshSurfaceInfo(SurfaceInfo surfaceInfo) Parameters Type Name Description SurfaceInfo surfaceInfo The surface info. Overrides SwapChain.RefreshSurfaceInfo(SurfaceInfo) ResizeSwapChain(uint, uint) Resize SwapChain. Declaration public override void ResizeSwapChain(uint width, uint height) Parameters Type Name Description uint width New width. uint height New height. Overrides SwapChain.ResizeSwapChain(uint, uint) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLSwapChainFrameBuffer.html": {
    "href": "api/Evergine.OpenGL.GLSwapChainFrameBuffer.html",
    "title": "Class GLSwapChainFrameBuffer | Evergine Doc",
    "keywords": "Class GLSwapChainFrameBuffer The OpenGL implementation of a swapchain framebuffer object. Inheritance object FrameBuffer GLSwapChainFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Dispose(bool) FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLSwapChainFrameBuffer : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors GLSwapChainFrameBuffer(GraphicsContext, FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the GLSwapChainFrameBuffer class. Declaration public GLSwapChainFrameBuffer(GraphicsContext context, FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description GraphicsContext context The GL graphic context. FrameBufferAttachment? depthTarget The depth texture which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color textures, all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Properties GLColorTargets Gets the ColorTarget OpenGL texture array. Declaration public GLPlaceHolderTexture[] GLColorTargets { get; } Property Value Type Description GLPlaceHolderTexture[] GLDepthStencilTarget Gets the DepthStencil OpenGL texture. Declaration public GLPlaceHolderTexture GLDepthStencilTarget { get; } Property Value Type Description GLPlaceHolderTexture Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name RequireFlipProjection Gets or sets a value indicating whether this FrameBuffer requires the projection matrix to be flipped. By default they will indicate the default flip behavior, but the user can change it. Declaration public override bool RequireFlipProjection { get; } Property Value Type Description bool Overrides FrameBuffer.RequireFlipProjection Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLTexture.html": {
    "href": "api/Evergine.OpenGL.GLTexture.html",
    "title": "Class GLTexture | Evergine Doc",
    "keywords": "Class GLTexture The OpenGL implementation of a Texture object. Inheritance object GraphicsResource Texture GLBaseTexture GLTexture Implements ILoadable IDisposable IDependencyObject Inherited Members GLBaseTexture.TextureTarget GLBaseTexture.Format GLBaseTexture.Name GLBaseTexture.HasStencil() Texture.Id Texture.Description Texture.ReaderVersion Texture.Invalidated Texture.Dependencies Texture.Sampler Texture.CouldBeAttachedToFramebuffer Texture.Invalidate(ILoadable) Texture.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLTexture : GLBaseTexture, ILoadable, IDisposable, IDependencyObject Constructors GLTexture(GLGraphicsContext, DataBox[], ref TextureDescription) Initializes a new instance of the GLTexture class. Declaration public GLTexture(GLGraphicsContext context, DataBox[] data, ref TextureDescription description) Parameters Type Name Description GLGraphicsContext context The graphics context. DataBox[] data The data pointer. TextureDescription description The texture description. Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GLBaseTexture.NativePointer Methods CopyTo(uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copy a pixel region from source to destination texture. Declaration public void CopyTo(uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description uint sourceX U coord source texture. uint sourceY V coord source texture. uint sourceZ W coord source texture. uint sourceMipLevel Source mip level. uint sourceBasedArrayLayer Source array index. Texture destination Destination texture. uint destinationX U coord destination texture. uint destinationY V coord destination texture. uint destinationZ W coord destination texture. uint destinationMipLevel Destination mip level. uint destinationBasedArrayLayer Destination array index. uint width Destination width. uint height Destination heigh. uint depth Destination depth. uint layerCount Destination layer count. Dispose() Dispose this instance. Declaration public override void Dispose() Overrides Texture.Dispose() FromNativeOpenGLTexture(GLGraphicsContext, uint, ref TextureDescription) Create a GL wrapped texture from a native texture. Declaration public static GLTexture FromNativeOpenGLTexture(GLGraphicsContext context, uint textureID, ref TextureDescription description) Parameters Type Name Description GLGraphicsContext context The opengl graphics context. uint textureID The OpenGL texture ID. TextureDescription description The structure with the texture description parameters. Returns Type Description GLTexture The wrapped texture. SetData(IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(IntPtr source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subresource index. Implements ILoadable IDisposable IDependencyObject Extension Methods TextureExtension.SafeToStream(Texture, GraphicsContext) TextureExtension.SaveToFile(Texture, GraphicsContext, string) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLUniformBinding.html": {
    "href": "api/Evergine.OpenGL.GLUniformBinding.html",
    "title": "Struct GLUniformBinding | Evergine Doc",
    "keywords": "Struct GLUniformBinding Uniform updater helper class. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public struct GLUniformBinding Fields ArrayCount The array count. Declaration public int ArrayCount Field Value Type Description int CBufferSlot The Constant buffer slot. Declaration public int CBufferSlot Field Value Type Description int Location The uniform location. Declaration public int Location Field Value Type Description int Offset The parameter offset. Declaration public int Offset Field Value Type Description int Updater The Uniform updater. Declaration public GLUniformUpdaterDelegate Updater Field Value Type Description GLUniformUpdaterDelegate Methods SetUniform(long) Set the uniform data. Declaration public void SetUniform(long dataPtr) Parameters Type Name Description long dataPtr The data ptr. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLUniformBufferEmulation.html": {
    "href": "api/Evergine.OpenGL.GLUniformBufferEmulation.html",
    "title": "Class GLUniformBufferEmulation | Evergine Doc",
    "keywords": "Class GLUniformBufferEmulation UBO emulation structure. Inheritance object GLUniformBufferEmulation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public class GLUniformBufferEmulation Fields Slot The buffer slot. Declaration public int Slot Field Value Type Description int Uniforms The uniforms array. Declaration public FastList<GLUniformBinding> Uniforms Field Value Type Description FastList<GLUniformBinding> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.GLUniformUpdater.html": {
    "href": "api/Evergine.OpenGL.GLUniformUpdater.html",
    "title": "Class GLUniformUpdater | Evergine Doc",
    "keywords": "Class GLUniformUpdater Uniform updater helper class. Inheritance object GLUniformUpdater Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public static class GLUniformUpdater Fields Updaters The Updater delegates. Declaration public static GLUniformUpdaterDelegate[] Updaters Field Value Type Description GLUniformUpdaterDelegate[]"
  },
  "api/Evergine.OpenGL.GLUniformUpdaterDelegate.html": {
    "href": "api/Evergine.OpenGL.GLUniformUpdaterDelegate.html",
    "title": "Delegate GLUniformUpdaterDelegate | Evergine Doc",
    "keywords": "Delegate GLUniformUpdaterDelegate Specify the value of a uniform variable for the current program object. Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public delegate void GLUniformUpdaterDelegate(int location, int count, void* data) Parameters Type Name Description int location Specifies the location of the uniform variable to be modified. int count specifies the number of elements that are to be modified. void* data The pointer of the data. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenGL.html": {
    "href": "api/Evergine.OpenGL.html",
    "title": "Namespace Evergine.OpenGL | Evergine Doc",
    "keywords": "Namespace Evergine.OpenGL Classes GLBaseTexture The OpenGL implementation of a Texture object. GLBlendState This struct represent all parameters supported in OpenGL for BlendState. GLBuffer Represents a OpenGL buffer object. GLCapabilities The OpenGL capabilities. GLCombineTextureSampler This struct represent all parameters supported in OpenGL for SamplerStateDescription. GLCommandBuffer Command Buffer implemented on OpenGL. GLCommandQueue CPU implementation of a CommandQueue for OpenGL. GLComputePipelineState The OpenGL version of PipelineState. GLComputePipelineStateCache OpenGL cache implementation for ComputePipeline. GLDepthStencilState This struct represent all parameters supported in OpenGL for DepthStencilState. GLExtensions This class contains information about all the supported extensions in a device. GLExtensionsMethods Extensions methods used to convert valuesfrom Evergineto OpenGL. GLFrameBuffer The OpenGL implementation of a Framebuffer object. GLGraphicsContext Manages all graphical functionality. GLGraphicsPipelineState The OpenGL version of PipelineState. GLGraphicsPipelineStateCache The OpenGL cache implementation for graphics pipeline state. GLHelpers Helper OpenGL functions. GLPlaceHolderTexture The placeholder texture used for swapchain. GLProgram A set of shaders used to draw something. GLQueryHeap Represents a DirectX queryheap object. GLRasterizerState This class represent all parameters supported in OpenGL for RasterizerState. GLResourceFactory The OpenGL version of the resource factory. GLResourceLayout The OpenGL implementation of a ResourceLayout object. GLResourceSet The OpenGL implementation of a ResourceSet object. GLSamplerState This struct represent all parameters supported in OpenGL for BlendState. GLShader The OpenGL implementation of a shader object. GLSwapChain The OpenGL implementation of a Swapchain object. GLSwapChainFrameBuffer The OpenGL implementation of a swapchain framebuffer object. GLTexture The OpenGL implementation of a Texture object. GLUniformBufferEmulation UBO emulation structure. GLUniformUpdater Uniform updater helper class. Structs DepthStencilBPP Depth and stencil bytes per pixel. GLBlendStateDescription This struct represent all parameters supported in OpenGL for BlendStateDescription. GLDepthStencilStateDescription This struct represent all parameters supported in OpenGL for DepthStencilStateDescription. GLPixelFormat Represents all information about a OpenGL Pixel format. GLRasterizerStateDescription This struct represent all parameters supported in OpenGL for RasterizerStateDescription. GLSamplerStateDescription This struct represent all parameters supported in OpenGL for SamplerStateDescription. GLUniformBinding Uniform updater helper class. Interfaces IOpenGLContext OpenGL interface used to create the native context on every supported platform. Enums GLHelpers.OS Operating system enum. Delegates GLUniformUpdaterDelegate Specify the value of a uniform variable for the current program object."
  },
  "api/Evergine.OpenGL.IOpenGLContext.html": {
    "href": "api/Evergine.OpenGL.IOpenGLContext.html",
    "title": "Interface IOpenGLContext | Evergine Doc",
    "keywords": "Interface IOpenGLContext OpenGL interface used to create the native context on every supported platform. Namespace: Evergine.OpenGL Assembly: Evergine.OpenGL.dll Syntax public interface IOpenGLContext Properties ContextHandle Gets the native OpenGL context handle. Declaration IntPtr ContextHandle { get; } Property Value Type Description IntPtr DeviceHandle Gets the native device handle. Declaration IntPtr DeviceHandle { get; } Property Value Type Description IntPtr SwapInterval Gets or sets the vertical sync interval. Declaration int SwapInterval { get; set; } Property Value Type Description int WindowHandle Gets the native window (surface) handle. Declaration IntPtr WindowHandle { get; } Property Value Type Description IntPtr Methods DestroyContext() Destroy the current context and window. Declaration void DestroyContext() LoadFunctions() Load all openGL delegate functions. Declaration void LoadFunctions() MakeCurrent() Set the context created. Declaration void MakeCurrent() SwapBuffers() Exchanges the front and back buffers. Declaration void SwapBuffers() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.Helpers.ButtonMask.html": {
    "href": "api/Evergine.OpenVR.Helpers.ButtonMask.html",
    "title": "Class ButtonMask | Evergine Doc",
    "keywords": "Class ButtonMask Button mask. Inheritance object ButtonMask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR.Helpers Assembly: Evergine.OpenVR.dll Syntax public class ButtonMask Fields ApplicationMenu Application menu mask. Declaration public const ulong ApplicationMenu = 2 Field Value Type Description ulong Axis0 Axis0 mask. Declaration public const ulong Axis0 = 4294967296 Field Value Type Description ulong Axis1 Axis1 mask. Declaration public const ulong Axis1 = 8589934592 Field Value Type Description ulong Axis2 Axis2 mask. Declaration public const ulong Axis2 = 17179869184 Field Value Type Description ulong Axis3 Axis3 mask. Declaration public const ulong Axis3 = 34359738368 Field Value Type Description ulong Axis4 Axis4 mask. Declaration public const ulong Axis4 = 68719476736 Field Value Type Description ulong Grip Grip mask. Declaration public const ulong Grip = 4 Field Value Type Description ulong System System mask. Declaration public const ulong System = 1 Field Value Type Description ulong Touchpad Touchpad mask. Declaration public const ulong Touchpad = 4294967296 Field Value Type Description ulong Trigger Trigger mask. Declaration public const ulong Trigger = 8589934592 Field Value Type Description ulong Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.Helpers.DeviceEventArgs.html": {
    "href": "api/Evergine.OpenVR.Helpers.DeviceEventArgs.html",
    "title": "Class DeviceEventArgs | Evergine Doc",
    "keywords": "Class DeviceEventArgs Device Event argument. Inheritance object EventArgs DeviceEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR.Helpers Assembly: Evergine.OpenVR.dll Syntax public class DeviceEventArgs : EventArgs Constructors DeviceEventArgs(uint, bool) Initializes a new instance of the DeviceEventArgs class. Declaration public DeviceEventArgs(uint index, bool connected) Parameters Type Name Description uint index The index. bool connected Is connected value. Fields Connected Connected attribute. Declaration public bool Connected Field Value Type Description bool Index The Index. Declaration public uint Index Field Value Type Description uint Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.Helpers.html": {
    "href": "api/Evergine.OpenVR.Helpers.html",
    "title": "Namespace Evergine.OpenVR.Helpers | Evergine Doc",
    "keywords": "Namespace Evergine.OpenVR.Helpers Classes ButtonMask Button mask. DeviceEventArgs Device Event argument. OpenVRHelper OpenVR Helper class."
  },
  "api/Evergine.OpenVR.Helpers.OpenVRHelper.html": {
    "href": "api/Evergine.OpenVR.Helpers.OpenVRHelper.html",
    "title": "Class OpenVRHelper | Evergine Doc",
    "keywords": "Class OpenVRHelper OpenVR Helper class. Inheritance object OpenVRHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR.Helpers Assembly: Evergine.OpenVR.dll Syntax public static class OpenVRHelper Methods GetButtonPressed(VRControllerState_t, EVRButtonId) Gets the press state of a button. Declaration public static bool GetButtonPressed(this VRControllerState_t state, EVRButtonId buttonId) Parameters Type Name Description VRControllerState_t state Current controller state. EVRButtonId buttonId Button id. Returns Type Description bool True if button pressed. GetButtonState(ref VRControllerState_t, ref VRControllerState_t, EVRButtonId) Gets the press state of a button. Declaration public static ButtonState GetButtonState(ref VRControllerState_t lastState, ref VRControllerState_t state, EVRButtonId buttonId) Parameters Type Name Description VRControllerState_t lastState Current controller state of the previous frame. VRControllerState_t state Current controller state. EVRButtonId buttonId Button id. Returns Type Description ButtonState Pressed state on true value. Release otherwise. GetButtonTouched(VRControllerState_t, EVRButtonId) Gets the touch state of a button. Declaration public static bool GetButtonTouched(this VRControllerState_t state, EVRButtonId buttonId) Parameters Type Name Description VRControllerState_t state Current controller state. EVRButtonId buttonId Button id. Returns Type Description bool True if button touched. ReportCompositeError(EVRCompositorError) Reports compositor error. Declaration public static void ReportCompositeError(EVRCompositorError error) Parameters Type Name Description EVRCompositorError error Compositor error enumerator. ReportInitError(EVRInitError) Reports any error. Declaration public static void ReportInitError(EVRInitError error) Parameters Type Name Description EVRInitError error Error enumerator. ReportRenderModelError(EVRRenderModelError) Reports render model error. Declaration public static void ReportRenderModelError(EVRRenderModelError error) Parameters Type Name Description EVRRenderModelError error Render model error enumerator. ToButtonState(bool) Converts boolean to button state. Declaration public static ButtonState ToButtonState(this bool b) Parameters Type Name Description bool b Current value. Returns Type Description ButtonState Pressed state on true value. Release otherwise. ToDeviceType(ETrackedDeviceClass) Converts OpenVR device class to OpenXR Device Type. Declaration public static XRTrackedDeviceType ToDeviceType(this ETrackedDeviceClass deviceClass) Parameters Type Name Description ETrackedDeviceClass deviceClass The openVR device class. Returns Type Description XRTrackedDeviceType XR tracking state enum. ToEvergine(HmdVector3_t, out Vector3) Converts a HmwVector3 to Wave Vector3. Declaration public static void ToEvergine(this HmdVector3_t hmdVector3, out Vector3 result) Parameters Type Name Description HmdVector3_t hmdVector3 The hmwVector3. Vector3 result Evergine Vector3. ToEvergine(ref HmdVector3_t, out Vector3) Converts a HmwVector3 to Wave Vector3. Declaration public static void ToEvergine(ref HmdVector3_t hmdVector3, out Vector3 result) Parameters Type Name Description HmdVector3_t hmdVector3 The hmwVector3. Vector3 result Evergine Vector3. ToGenericController(ref VRControllerState_t, ref VRControllerState_t, out XRControllerGenericState) Converts VR controller state to generic controller. Declaration public static void ToGenericController(ref VRControllerState_t lastState, ref VRControllerState_t state, out XRControllerGenericState controllerState) Parameters Type Name Description VRControllerState_t lastState VR controller state of the last frame. VRControllerState_t state VR controller state. XRControllerGenericState controllerState Generic controller state output parameter. ToMatrix(HmdMatrix34_t, out Matrix4x4) Convert an ovrMatrix44f to a Wave Matrix. Declaration public static void ToMatrix(this HmdMatrix34_t ovrMatrix34f, out Matrix4x4 matrix) Parameters Type Name Description HmdMatrix34_t ovrMatrix34f ovrMatrix44f to convert to a Wave Matrix. Matrix4x4 matrix Wave Matrix, based on the ovrMatrix4f. ToMatrix(ref HmdMatrix34_t, out Matrix4x4) Convert an ovrMatrix34f to a Wave Matrix. Declaration public static void ToMatrix(ref HmdMatrix34_t ovrMatrix34f, out Matrix4x4 matrix) Parameters Type Name Description HmdMatrix34_t ovrMatrix34f ovrMatrix34f to convert to a Wave Matrix. Matrix4x4 matrix Wave Matrix, based on the ovrMatrix4f. ToMatrix(HmdMatrix44_t, out Matrix4x4) Convert an ovrMatrix44f to a Wave Matrix. Declaration public static void ToMatrix(this HmdMatrix44_t ovrMatrix44f, out Matrix4x4 matrix) Parameters Type Name Description HmdMatrix44_t ovrMatrix44f ovrMatrix44f to convert to a Wave Matrix. Matrix4x4 matrix Wave Matrix, based on the ovrMatrix4f. ToMatrix(ref HmdMatrix44_t, out Matrix4x4) Convert an ovrMatrix44f to a Wave Matrix. Declaration public static void ToMatrix(ref HmdMatrix44_t ovrMatrix34f, out Matrix4x4 matrix) Parameters Type Name Description HmdMatrix44_t ovrMatrix34f ovrMatrix44f to convert to a Wave Matrix. Matrix4x4 matrix Wave Matrix, based on the ovrMatrix4f. ToMatrix(TrackedDevicePose_t, out Matrix4x4) Converts Pose to Matrix. Declaration public static void ToMatrix(this TrackedDevicePose_t trackedPose, out Matrix4x4 matrix) Parameters Type Name Description TrackedDevicePose_t trackedPose The trackable pose. Matrix4x4 matrix Matrix output parameter. ToTextureType(GraphicsBackend) Converts graphics backend to Texture type. Declaration public static ETextureType ToTextureType(this GraphicsBackend backend) Parameters Type Name Description GraphicsBackend backend Graphics backend. Returns Type Description ETextureType Texture Type enum. ToTrackingState(ETrackingResult) Converts tracking result to tracking state. Declaration public static XRTrackingState ToTrackingState(this ETrackingResult trackingResult) Parameters Type Name Description ETrackingResult trackingResult The tracking result. Returns Type Description XRTrackingState XR tracking state enum. ToTrackingState(ref TrackedDevicePose_t, out XRTrackedDeviceState) Converts device pose to Tracking State. Declaration public static void ToTrackingState(ref TrackedDevicePose_t trackedPose, out XRTrackedDeviceState state) Parameters Type Name Description TrackedDevicePose_t trackedPose Device pose. XRTrackedDeviceState state Device state. ToUInt(TextureSampleCount) Converts the sample count to integer value. Declaration public static uint ToUInt(this TextureSampleCount sampleCount) Parameters Type Name Description TextureSampleCount sampleCount The sample count enumerate. Returns Type Description uint The sample count as integer. ToVRPose(TrackedDevicePose_t, out Matrix4x4) Converts TrackedDevicePose to Wave Matrix4x4. Declaration public static void ToVRPose(this TrackedDevicePose_t trackedPose, out Matrix4x4 pose) Parameters Type Name Description TrackedDevicePose_t trackedPose The pose. Matrix4x4 pose Matrix output parameter. ToVulkan(PixelFormat) Converts the pixel format to Vulkan pixel format. Declaration public static uint ToVulkan(this PixelFormat pixelFormat) Parameters Type Name Description PixelFormat pixelFormat The pixel format. Returns Type Description uint The vulkan pixel format. ToXRPose(Matrix4x4, out ViewPose) Converts matrix to XR Pose. Declaration public static void ToXRPose(this Matrix4x4 matrix, out ViewPose pose) Parameters Type Name Description Matrix4x4 matrix The matrix. ViewPose pose Pose output parameter. ToXRPose(ref Matrix4x4, out ViewPose) Converts matrix to XR Pose. Declaration public static void ToXRPose(ref Matrix4x4 matrix, out ViewPose pose) Parameters Type Name Description Matrix4x4 matrix The matrix. ViewPose pose Pose output parameter."
  },
  "api/Evergine.OpenVR.html": {
    "href": "api/Evergine.OpenVR.html",
    "title": "Namespace Evergine.OpenVR | Evergine Doc",
    "keywords": "Namespace Evergine.OpenVR Classes OpenVRDisplay OpenVR display. OpenVRPlatform OpenVR service."
  },
  "api/Evergine.OpenVR.InputTracking.html": {
    "href": "api/Evergine.OpenVR.InputTracking.html",
    "title": "Namespace Evergine.OpenVR.InputTracking | Evergine Doc",
    "keywords": "Namespace Evergine.OpenVR.InputTracking Classes OpenVRInputTracking OpenVR service. OpenVRRenderableModels OpenVR service. OpenVRTrackedDevice OpenVR service."
  },
  "api/Evergine.OpenVR.InputTracking.OpenVRInputTracking.html": {
    "href": "api/Evergine.OpenVR.InputTracking.OpenVRInputTracking.html",
    "title": "Class OpenVRInputTracking | Evergine Doc",
    "keywords": "Class OpenVRInputTracking OpenVR service. Inheritance object DisposableObject XRInputTracking OpenVRInputTracking Implements IDisposable Inherited Members XRInputTracking.OnDeviceAdded XRInputTracking.OnDeviceRemoved XRInputTracking.Destroy() XRInputTracking.FireOnDeviceAdded(XRTrackedDevice) XRInputTracking.FireOnDeviceRemoved(XRTrackedDevice) DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR.InputTracking Assembly: Evergine.OpenVR.dll Syntax public class OpenVRInputTracking : XRInputTracking, IDisposable Constructors OpenVRInputTracking(OpenVRPlatform) Initializes a new instance of the OpenVRInputTracking class. Declaration public OpenVRInputTracking(OpenVRPlatform xrPlatform) Parameters Type Name Description OpenVRPlatform xrPlatform XR Platform. Fields RenderPoses Render Pose array. Declaration public TrackedDevicePose_t[] RenderPoses Field Value Type Description TrackedDevicePose_t[] TrackedDevices Traceked devices array. Declaration public OpenVRTrackedDevice[] TrackedDevices Field Value Type Description OpenVRTrackedDevice[] Methods GetDeviceByHandedness(XRHandedness, uint) Gets device by handedness. Declaration public override XRTrackedDevice GetDeviceByHandedness(XRHandedness controllerHandeness, uint count = 0) Parameters Type Name Description XRHandedness controllerHandeness uint count Device count. Returns Type Description XRTrackedDevice Tracked device. Overrides XRInputTracking.GetDeviceByHandedness(XRHandedness, uint) GetDeviceByIndex(uint) Gets device by index. Declaration public override XRTrackedDevice GetDeviceByIndex(uint deviceIndex) Parameters Type Name Description uint deviceIndex Device index. Returns Type Description XRTrackedDevice Tracked device. Overrides XRInputTracking.GetDeviceByIndex(uint) GetDeviceByType(XRTrackedDeviceType, uint) Gets device by type. Declaration public override XRTrackedDevice GetDeviceByType(XRTrackedDeviceType type, uint count) Parameters Type Name Description XRTrackedDeviceType type Device type. uint count Device count. Returns Type Description XRTrackedDevice Tacked device. Overrides XRInputTracking.GetDeviceByType(XRTrackedDeviceType, uint) GetDeviceByTypeAndHandedness(XRTrackedDeviceType, XRHandedness, uint) Gets device specifying its type and handedness. Declaration public override XRTrackedDevice GetDeviceByTypeAndHandedness(XRTrackedDeviceType type, XRHandedness controllerHandeness, uint count = 0) Parameters Type Name Description XRTrackedDeviceType type Device type. XRHandedness controllerHandeness uint count Device count. Returns Type Description XRTrackedDevice Tracked device. Overrides XRInputTracking.GetDeviceByTypeAndHandedness(XRTrackedDeviceType, XRHandedness, uint) Initialize() Initialize this instance. Declaration public override void Initialize() Overrides Evergine.Framework.XR.TrackedDevices.XRInputTracking.Initialize() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.InputTracking.OpenVRRenderableModels.html": {
    "href": "api/Evergine.OpenVR.InputTracking.OpenVRRenderableModels.html",
    "title": "Class OpenVRRenderableModels | Evergine Doc",
    "keywords": "Class OpenVRRenderableModels OpenVR service. Inheritance object DisposableObject XRRenderableModels OpenVRRenderableModels Implements IDisposable Inherited Members XRRenderableModels.OnNewModelAvailable XRRenderableModels.FireOnNewModelAvailable(string) XRRenderableModels.Destroy() DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR.InputTracking Assembly: Evergine.OpenVR.dll Syntax public class OpenVRRenderableModels : XRRenderableModels, IDisposable Constructors OpenVRRenderableModels(OpenVRPlatform) Initializes a new instance of the OpenVRRenderableModels class. Declaration public OpenVRRenderableModels(OpenVRPlatform xrPlatform) Parameters Type Name Description OpenVRPlatform xrPlatform XR platform. Properties AvailableModels Gets the available models to download. Declaration public override IEnumerable<string> AvailableModels { get; } Property Value Type Description IEnumerable<string> Overrides Evergine.Framework.XR.RenderableModels.XRRenderableModels.AvailableModels Methods TryGetRenderableModelAsync(string) Gets a renderable model for this tracked device. Declaration public override Task<Model> TryGetRenderableModelAsync(string modelName) Parameters Type Name Description string modelName The model name. Returns Type Description Task<Model> An awaitable task that returns the device model. Overrides XRRenderableModels.TryGetRenderableModelAsync(string) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.InputTracking.OpenVRTrackedDevice.html": {
    "href": "api/Evergine.OpenVR.InputTracking.OpenVRTrackedDevice.html",
    "title": "Class OpenVRTrackedDevice | Evergine Doc",
    "keywords": "Class OpenVRTrackedDevice OpenVR service. Inheritance object DisposableObject XRTrackedDevice OpenVRTrackedDevice Implements IDisposable Inherited Members XRTrackedDevice.handedness XRTrackedDevice.ID XRTrackedDevice.Handedness XRTrackedDevice.SupportedHandJointKind XRTrackedDevice.OnConnectionChanged XRTrackedDevice.OnPoseStatusChanged XRTrackedDevice.PoseIsValid XRTrackedDevice.IsConnected XRTrackedDevice.TryGetArticulatedHandJoint(XRHandJointKind, out XRHandJoint) XRTrackedDevice.Destroy() XRTrackedDevice.FireOnConnectionChanged(bool) XRTrackedDevice.FireOnPoseStatusChanged(bool) DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR.InputTracking Assembly: Evergine.OpenVR.dll Syntax public class OpenVRTrackedDevice : XRTrackedDevice, IDisposable Properties DeviceType Gets the device type. Declaration public override XRTrackedDeviceType DeviceType { get; } Property Value Type Description XRTrackedDeviceType Overrides Evergine.Framework.XR.TrackedDevices.XRTrackedDevice.DeviceType Name Gets the device name. Declaration public override string Name { get; } Property Value Type Description string Overrides Evergine.Framework.XR.TrackedDevices.XRTrackedDevice.Name Methods GetControllerState(out XRControllerGenericState) Gets the controller state if this device is a controller. Declaration public override bool GetControllerState(out XRControllerGenericState controllerState) Parameters Type Name Description XRControllerGenericState controllerState The controller state. Returns Type Description bool False if this device is not a controller. Overrides Evergine.Framework.XR.TrackedDevices.XRTrackedDevice.GetControllerState(out Evergine.Framework.XR.XRControllerGenericState) GetTrackingState(out XRTrackedDeviceState) Gets the tracking state of this device. Declaration public override bool GetTrackingState(out XRTrackedDeviceState trackingState) Parameters Type Name Description XRTrackedDeviceState trackingState Returns Type Description bool False if the device is not connected. Overrides Evergine.Framework.XR.TrackedDevices.XRTrackedDevice.GetTrackingState(out Evergine.Framework.XR.TrackedDevices.XRTrackedDeviceState) TryGetRenderableModelAsync() Gets a renderable model for this tracked device. Declaration public override Task<XRRenderableModelInfo> TryGetRenderableModelAsync() Returns Type Description Task<XRRenderableModelInfo> An awaitable task that returns the entity that contains the renderable model. Overrides Evergine.Framework.XR.TrackedDevices.XRTrackedDevice.TryGetRenderableModelAsync() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.MirrorRenderer.html": {
    "href": "api/Evergine.OpenVR.MirrorRenderer.html",
    "title": "Namespace Evergine.OpenVR.MirrorRenderer | Evergine Doc",
    "keywords": "Namespace Evergine.OpenVR.MirrorRenderer Classes OpenVRMirrorTextureRenderer OpenVR service."
  },
  "api/Evergine.OpenVR.MirrorRenderer.OpenVRMirrorTextureRenderer.html": {
    "href": "api/Evergine.OpenVR.MirrorRenderer.OpenVRMirrorTextureRenderer.html",
    "title": "Class OpenVRMirrorTextureRenderer | Evergine Doc",
    "keywords": "Class OpenVRMirrorTextureRenderer OpenVR service. Inheritance object DisposableObject OpenVRMirrorTextureRenderer Implements IDisposable Inherited Members DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR.MirrorRenderer Assembly: Evergine.OpenVR.dll Syntax public class OpenVRMirrorTextureRenderer : DisposableObject, IDisposable Constructors OpenVRMirrorTextureRenderer(GraphicsContext) Initializes a new instance of the OpenVRMirrorTextureRenderer class. Declaration public OpenVRMirrorTextureRenderer(GraphicsContext graphicsContext) Parameters Type Name Description GraphicsContext graphicsContext The graphics context. Properties MirrorFramebuffer Gets or sets the mirror frame buffer. Declaration public FrameBuffer MirrorFramebuffer { get; set; } Property Value Type Description FrameBuffer Methods Destroy() Destroy all resources of this instance. Declaration protected override void Destroy() Overrides Evergine.Framework.DisposableObject.Destroy() Render(CommandBuffer) Renders a command buffer method. Declaration public void Render(CommandBuffer commandBuffer) Parameters Type Name Description CommandBuffer commandBuffer Command buffer to render. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.OpenVRDisplay.html": {
    "href": "api/Evergine.OpenVR.OpenVRDisplay.html",
    "title": "Class OpenVRDisplay | Evergine Doc",
    "keywords": "Class OpenVRDisplay OpenVR display. Inheritance object Display OpenVRDisplay Implements IDisposable Inherited Members Display.SwapChain Display.FrameBuffer Display.isStereo Display.Surface Display.IsStereo Display.HasFocus Display.Width Display.Height Display.DisplaySizeChanged Display.SurfaceInfoChanged Display.DisplayFrameBufferChanged Display.IsVisible Display.KeyboardDispatcher Display.MouseDispatcher Display.TouchDispatcher Display.UpdateFrameBuffer(FrameBuffer) Display.InitFrame() Display.Prepare() Display.BeforePresent() Display.Dispose() Display.DispatchInputEvents() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR Assembly: Evergine.OpenVR.dll Syntax public class OpenVRDisplay : Display, IDisposable Methods Present() Presents a rendered image to the user. Declaration public override void Present() Overrides Evergine.Framework.Graphics.Display.Present() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.OpenVR.OpenVRPlatform.html": {
    "href": "api/Evergine.OpenVR.OpenVRPlatform.html",
    "title": "Class OpenVRPlatform | Evergine Doc",
    "keywords": "Class OpenVRPlatform OpenVR service. Inheritance object IdentifiableObject DependencyObject AttachableObject Service XRPlatform OpenVRPlatform Implements IDependencyObject IGetNativePointers Inherited Members XRPlatform.screenContextManager XRPlatform.AssetsService XRPlatform.eyeProperties XRPlatform.headGaze XRPlatform.eyeGaze XRPlatform.trackingState XRPlatform.mirrorDisplay XRPlatform.msaaSampleCount XRPlatform.AvailablePointerKeys XRPlatform.MSAASampleCount XRPlatform.MirrorDisplay XRPlatform.NearClipDistance XRPlatform.FarClipDistance XRPlatform.MirrorHMDTexture XRPlatform.EyeCount XRPlatform.HeadGaze XRPlatform.EyeGaze XRPlatform.IsEyeGazeValid XRPlatform.TrackingState XRPlatform.SpatialAnchorStore XRPlatform.SpatialInputManager XRPlatform.RenderMirrorTexture XRPlatform.LightEstimation XRPlatform.FeaturePoints XRPlatform.TrackableItems XRPlatform.Passthrough XRPlatform.CreateSpatialMappingObserver() XRPlatform.Update() XRPlatform.RequestEyeGazePermission() XRPlatform.GetNativePointer(string, out IntPtr) Service.OnActivated() Service.Start() Service.OnDeactivated() Service.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.OpenVR Assembly: Evergine.OpenVR.dll Syntax public class OpenVRPlatform : XRPlatform, IDependencyObject, IGetNativePointers Constructors OpenVRPlatform() Initializes a new instance of the OpenVRPlatform class. Declaration public OpenVRPlatform() Fields OpenVRApplicationType OpenVR application type. Declaration public EVRApplicationType OpenVRApplicationType Field Value Type Description EVRApplicationType SkipHMD Indicates if the OpenVR application must skip the HMD. Declaration public bool SkipHMD Field Value Type Description bool Properties Display Gets the display provided by this XR device. Declaration public override Display Display { get; } Property Value Type Description Display Overrides Evergine.Framework.Services.XRPlatform.Display InputTracking Gets the input tracking. Declaration public override XRInputTracking InputTracking { get; } Property Value Type Description XRInputTracking Overrides Evergine.Framework.Services.XRPlatform.InputTracking RenderableModels Gets the renderable models. Declaration public override XRRenderableModels RenderableModels { get; } Property Value Type Description XRRenderableModels Overrides Evergine.Framework.Services.XRPlatform.RenderableModels Methods InternalUpdate() Update the XR device and all properties. Declaration protected override void InternalUpdate() Overrides Evergine.Framework.Services.XRPlatform.InternalUpdate() MirrorDisplayUpdated() Update the mirror display. Declaration protected override void MirrorDisplayUpdated() Overrides Evergine.Framework.Services.XRPlatform.MirrorDisplayUpdated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Services.Service.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Services.Service.OnDetach() OnLoaded() Invoked when the object is loaded. Declaration protected override void OnLoaded() Overrides Evergine.Framework.Services.Service.OnLoaded() RefreshMSAA() Refresh the MSAA Sample Count. Declaration protected override void RefreshMSAA() Overrides Evergine.Framework.Services.XRPlatform.RefreshMSAA() UpdateCameras() Update camera properties of all application to render in XR. Declaration protected override void UpdateCameras() Overrides Evergine.Framework.Services.XRPlatform.UpdateCameras() Implements IDependencyObject IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.Accelerometer.html": {
    "href": "api/Evergine.Platform.Accelerometer.html",
    "title": "Class Accelerometer | Evergine Doc",
    "keywords": "Class Accelerometer Accelerometer data of the acceleration of the device in three dimensional space. Inheritance object Accelerometer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class Accelerometer : IDisposable Properties Acceleration Gets the acceleration vector in G's (gravitational force). Declaration public Vector3 Acceleration { get; } Property Value Type Description Vector3 Remarks The coordinate-system is defined relative to the screen of the device in its default orientation. The axes are not swapped when the device's screen orientation changes. The X axis is horizontal and points to the left, the Y axis is vertical and points up and the Z axis points towards the outside of the back face of the screen. In this system, coordinates behind the screen have positive Z values. IsStarted Gets a value indicating whether the accelerometer sensor has been started. Declaration public bool IsStarted { get; } Property Value Type Description bool Methods Dispose() Declaration public void Dispose() Start() Start monitoring for changes to accelerometer. Declaration public void Start() Stop() Stop monitoring for changes to accelerometer. Declaration public void Stop() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.AssetsDirectory.html": {
    "href": "api/Evergine.Platform.AssetsDirectory.html",
    "title": "Class AssetsDirectory | Evergine Doc",
    "keywords": "Class AssetsDirectory Base class containing method for accessing assets in a directory. Inheritance object AssetsDirectoryBase AssetsDirectory Inherited Members AssetsDirectoryBase.DefaultFolderName AssetsDirectoryBase.RootPath AssetsDirectoryBase.UpdateRootPath(string) AssetsDirectoryBase.EnumerateDirectories(string) AssetsDirectoryBase.EnumerateDirectories(string, string) AssetsDirectoryBase.EnumerateFiles(string) AssetsDirectoryBase.EnumerateFiles(string, string) AssetsDirectoryBase.ReadAsStringAsync(string) AssetsDirectoryBase.GetFullPath(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class AssetsDirectory : AssetsDirectoryBase Constructors AssetsDirectory() Initializes a new instance of the AssetsDirectory class. Declaration public AssetsDirectory() AssetsDirectory(string) Initializes a new instance of the AssetsDirectory class. Declaration public AssetsDirectory(string rootPath) Parameters Type Name Description string rootPath The root path of the assets directory. Methods EnumerateDirectories(string, string, SearchOption) Returns an enumerable collection of subdirectories that match the specified search pattern in the specified relative path in the assets directory, and optionally searches subdirectories. Declaration public override IEnumerable<string> EnumerateDirectories(string path, string searchPattern, SearchOption option) Parameters Type Name Description string path The relative path in the assets directory. string searchPattern The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. SearchOption option Returns Type Description IEnumerable<string> An enumerable collection of subdirectories the specified relative path in the assets directory that match the specified criteria, or an empty enumerable collection if no directories are found. Overrides AssetsDirectoryBase.EnumerateDirectories(string, string, SearchOption) Remarks If an existing directory is empty, it will be discarded in the enumerable collection. EnumerateFiles(string, string, SearchOption) Returns the names of files that match the specified search pattern in the specified relative path in the assets directory, and optionally searches subdirectories. Declaration public override IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption option) Parameters Type Name Description string path The relative path in the assets directory. string searchPattern The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. SearchOption option Returns Type Description IEnumerable<string> An enumerable collection of names for the files in the specified relative path in the assets directory that match the specified criteria, or an empty enumerable collection if no directories are found. Overrides AssetsDirectoryBase.EnumerateFiles(string, string, SearchOption) Exists(string) Determines whether the specified asset file exists. Declaration public override bool Exists(string path) Parameters Type Name Description string path The asset file path to check. Returns Type Description bool true if the assets directory contains the specified file name; otherwise, false. Overrides AssetsDirectoryBase.Exists(string) Open(string) Opens the specified asset file. Declaration public override AssetStream Open(string path) Parameters Type Name Description string path The relative path to the asset file. Returns Type Description AssetStream The result. Overrides AssetsDirectoryBase.Open(string) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.Battery.html": {
    "href": "api/Evergine.Platform.Battery.html",
    "title": "Class Battery | Evergine Doc",
    "keywords": "Class Battery Battery and charging information of the device. Inheritance object Battery Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class Battery : IDisposable Remarks Needs BATTERY_STATS permission set in manifest for Android. Constructors Battery() Initializes a new instance of the Battery class. Declaration public Battery() Properties ChargeLevel Gets the current charge level of the device from 0.0 to 1.0. Declaration public float ChargeLevel { get; } Property Value Type Description float Remarks Needs BATTERY_STATS permission set in manifest for Android. EnergySaverStatus Gets the current energy saver status of the device. Declaration public EnergySaverStates EnergySaverStatus { get; } Property Value Type Description EnergySaverStates Remarks Needs BATTERY_STATS permission set in manifest for Android. IsSupported Gets a value indicating whether the battery tracker is supported on the current platform. Declaration public bool IsSupported { get; } Property Value Type Description bool PowerSource Gets the current power source for the device. Declaration public BatteryPowerSources PowerSource { get; } Property Value Type Description BatteryPowerSources Remarks Needs BATTERY_STATS permission set in manifest for Android. State Gets the charging state of the device if it can be determined. Declaration public BatteryStates State { get; } Property Value Type Description BatteryStates Remarks Needs BATTERY_STATS permission set in manifest for Android. Methods Dispose() Declaration public void Dispose() Events BatteryInfoChanged Occurs when battery properties have changed. Declaration public event EventHandler BatteryInfoChanged Event Type Type Description EventHandler EnergySaverStatusChanged Occurs when energy saver status have changed. Declaration public event EventHandler EnergySaverStatusChanged Event Type Type Description EventHandler Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.BatteryPowerSources.html": {
    "href": "api/Evergine.Platform.BatteryPowerSources.html",
    "title": "Enum BatteryPowerSources | Evergine Doc",
    "keywords": "Enum BatteryPowerSources How the device and battery are currently being powered or charged. Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public enum BatteryPowerSources Fields Name Description AC Power source is an AC Charger. Battery Power source is the battery and not being charge. Unknown Power source can not be determined. Usb Power source is a USB port. Wireless Power source is wireless. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.BatteryStates.html": {
    "href": "api/Evergine.Platform.BatteryStates.html",
    "title": "Enum BatteryStates | Evergine Doc",
    "keywords": "Enum BatteryStates The current state of the battery and if it is being charged or full. Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public enum BatteryStates Fields Name Description Charging Battery is acively being charged by a power source. Discharging Battery is not plugged in and discharging. Full Battery is full. NotCharging Battery is not charging or discharging, but in an inbetween state. NotPresent Battery does not exist on the device. Unknown Battery state could not be determined. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.Compass.html": {
    "href": "api/Evergine.Platform.Compass.html",
    "title": "Class Compass | Evergine Doc",
    "keywords": "Class Compass Compass data of the device's orientation relative to Earth's magnetic field. Inheritance object Compass Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class Compass : IDisposable Properties HeadingMagneticNorth Gets the heading (measured in radians) relative to magnetic north. Declaration public float HeadingMagneticNorth { get; } Property Value Type Description float IsStarted Gets a value indicating whether the compass sensor has been started. Declaration public bool IsStarted { get; } Property Value Type Description bool Methods Dispose() Declaration public void Dispose() Start() Start monitoring for changes to compass. Declaration public void Start() Stop() Stop monitoring for changes to compass. Declaration public void Stop() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.ConnectionProfiles.html": {
    "href": "api/Evergine.Platform.ConnectionProfiles.html",
    "title": "Enum ConnectionProfiles | Evergine Doc",
    "keywords": "Enum ConnectionProfiles Describes the type of connection the device is using. Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public enum ConnectionProfiles Fields Name Description Bluetooth Bluetooth connection. Cellular The mobile/cellular data connection. Ethernet The ethernet data connection. Unknown Other unknown type of connection. WiFi The WiFi data connection. Wimax The Wimax data connection. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.Connectivity.html": {
    "href": "api/Evergine.Platform.Connectivity.html",
    "title": "Class Connectivity | Evergine Doc",
    "keywords": "Class Connectivity Connectivity and networking information of the device. Inheritance object Connectivity Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class Connectivity : IDisposable Remarks Needs ACCESS_NETWORK_STATE permission set in manifest for Android. Constructors Connectivity() Initializes a new instance of the Connectivity class. Declaration public Connectivity() Properties ConnectionProfiles Gets the active connectivity types for the device. Declaration public IEnumerable<ConnectionProfiles> ConnectionProfiles { get; } Property Value Type Description IEnumerable<ConnectionProfiles> Remarks Needs ACCESS_NETWORK_STATE permission set in manifest for Android. IsSupported Gets a value indicating whether the connectivity tracker is supported on the current platform. Declaration public bool IsSupported { get; } Property Value Type Description bool NetworkAccess Gets the current state of network access. Does not guarantee full access to the internet. Declaration public NetworkAccess NetworkAccess { get; } Property Value Type Description NetworkAccess Remarks Needs ACCESS_NETWORK_STATE permission set in manifest for Android. Methods Dispose() Declaration public void Dispose() Events ConnectivityChanged Occurs when a network access or profile has changed. Declaration public event EventHandler ConnectivityChanged Event Type Type Description EventHandler Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.DeviceInfo.html": {
    "href": "api/Evergine.Platform.DeviceInfo.html",
    "title": "Class DeviceInfo | Evergine Doc",
    "keywords": "Class DeviceInfo Represents information about the device. Inheritance object DeviceInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public static class DeviceInfo Properties DisplayOrientation Gets the display orientation of the device. Declaration public static DisplayOrientation DisplayOrientation { get; } Property Value Type Description DisplayOrientation IsPhysical Gets a value indicating whether the application is running on a physical or virtual device. A virtual device is a simulator or emulator. Declaration public static bool IsPhysical { get; } Property Value Type Description bool Manufacturer Gets the manufacturer of the device. Declaration public static string Manufacturer { get; } Property Value Type Description string Model Gets the model of the device. Declaration public static string Model { get; } Property Value Type Description string Name Gets the name of the device. Declaration public static string Name { get; } Property Value Type Description string PlatformFamily Gets the idiom of the device. Declaration public static PlatformFamily PlatformFamily { get; } Property Value Type Description PlatformFamily PlatformType Gets the platform or operating system of the device. Declaration public static PlatformType PlatformType { get; } Property Value Type Description PlatformType VersionString Gets the version of the operating system. Declaration public static string VersionString { get; } Property Value Type Description string"
  },
  "api/Evergine.Platform.DeviceVibration.html": {
    "href": "api/Evergine.Platform.DeviceVibration.html",
    "title": "Class DeviceVibration | Evergine Doc",
    "keywords": "Class DeviceVibration Provides an easy way to make the device vibrate. Inheritance object DeviceVibration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class DeviceVibration Methods Cancel() Cancel any current vibrations. Declaration public void Cancel() Remarks Needs VIBRATE permission set in manifest for Android. Vibrate() Vibrate the device fo 500ms. Declaration public void Vibrate() Remarks Needs VIBRATE permission set in manifest for Android. Vibrate(TimeSpan) Vibrate the device for the specified time in the range [0, 5000]ms. Declaration public void Vibrate(TimeSpan duration) Parameters Type Name Description TimeSpan duration The time to vibrate for. Remarks On iOS, the device will only vibrate for 500ms, regardless of the value specified. Needs VIBRATE permission set in manifest for Android. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.DllRegister.html": {
    "href": "api/Evergine.Platform.DllRegister.html",
    "title": "Class DllRegister | Evergine Doc",
    "keywords": "Class DllRegister Helpers to load native libraries. Inheritance object DllRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public static class DllRegister Methods Register(Assembly) Register the given assembly native libraries to be loaded. Declaration public static void Register(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly to be registered. Register(Assembly, INativeLibraryRegisterMapping) Register the given assembly native libraries to be loaded. Declaration public static void Register(Assembly assembly, INativeLibraryRegisterMapping mapping) Parameters Type Name Description Assembly assembly The assembly to be registered. INativeLibraryRegisterMapping mapping The mapping."
  },
  "api/Evergine.Platform.EnergySaverStates.html": {
    "href": "api/Evergine.Platform.EnergySaverStates.html",
    "title": "Enum EnergySaverStates | Evergine Doc",
    "keywords": "Enum EnergySaverStates States of energy saver on the device. Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public enum EnergySaverStates Fields Name Description Off Energy save is off. On Energy saver is on. Unknown Status of energy saver is unknown. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.Gyroscope.html": {
    "href": "api/Evergine.Platform.Gyroscope.html",
    "title": "Class Gyroscope | Evergine Doc",
    "keywords": "Class Gyroscope Gyroscope data of the rotation around the device's three primary axis. Inheritance object Gyroscope Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class Gyroscope : IDisposable Properties AngularVelocity Gets the angular velocity vector in radians per second. Declaration public Vector3 AngularVelocity { get; } Property Value Type Description Vector3 Remarks The coordinate-system is defined relative to the screen of the device in its default orientation. The axes are not swapped when the device's screen orientation changes. The X axis represents the pitch, the Y axis is vertical and represents the yaw and the Z axis represents the roll. IsStarted Gets a value indicating whether the gyroscope sensor has been started. Declaration public bool IsStarted { get; } Property Value Type Description bool Methods Dispose() Declaration public void Dispose() Start() Start monitoring for changes to gyroscope. Declaration public void Start() Stop() Stop monitoring for changes to gyroscope. Declaration public void Stop() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.html": {
    "href": "api/Evergine.Platform.html",
    "title": "Namespace Evergine.Platform | Evergine Doc",
    "keywords": "Namespace Evergine.Platform Classes Accelerometer Accelerometer data of the acceleration of the device in three dimensional space. AssetsDirectory Base class containing method for accessing assets in a directory. Battery Battery and charging information of the device. Compass Compass data of the device's orientation relative to Earth's magnetic field. Connectivity Connectivity and networking information of the device. DeviceInfo Represents information about the device. DeviceVibration Provides an easy way to make the device vibrate. DllRegister Helpers to load native libraries. Gyroscope Gyroscope data of the rotation around the device's three primary axis. Magnometer Magnometer data of the device's orientation relative to Earth's magnetic field. OrientationSensor Orientation sensor data of the orientation of a device in three dimensional space. Interfaces INativeLibraryRegisterMapping Registration for native library mappings, for .NET5 and above. Enums BatteryPowerSources How the device and battery are currently being powered or charged. BatteryStates The current state of the battery and if it is being charged or full. ConnectionProfiles Describes the type of connection the device is using. EnergySaverStates States of energy saver on the device. NetworkAccess Various states of the connection to the internet."
  },
  "api/Evergine.Platform.INativeLibraryRegisterMapping.html": {
    "href": "api/Evergine.Platform.INativeLibraryRegisterMapping.html",
    "title": "Interface INativeLibraryRegisterMapping | Evergine Doc",
    "keywords": "Interface INativeLibraryRegisterMapping Registration for native library mappings, for .NET5 and above. Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public interface INativeLibraryRegisterMapping Methods TryGetLibraryNameFor(string, PlatformType, out string) Determines if a platform has a explicit library name for a given platform. Declaration bool TryGetLibraryNameFor(string libraryName, PlatformType platform, out string platformLibraryName) Parameters Type Name Description string libraryName Library name. PlatformType platform Target platform. string platformLibraryName Platform specific library name. Returns Type Description bool True if there is an explicit mapping; false otherwise. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.Magnometer.html": {
    "href": "api/Evergine.Platform.Magnometer.html",
    "title": "Class Magnometer | Evergine Doc",
    "keywords": "Class Magnometer Magnometer data of the device's orientation relative to Earth's magnetic field. Inheritance object Magnometer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class Magnometer : IDisposable Properties IsStarted Gets a value indicating whether the magnometer sensor has been started. Declaration public bool IsStarted { get; } Property Value Type Description bool MagneticField Gets the magnetic field vector in microteslas (µ). Declaration public Vector3 MagneticField { get; } Property Value Type Description Vector3 Methods Dispose() Declaration public void Dispose() Start() Start monitoring for changes to magnometer. Declaration public void Start() Stop() Stop monitoring for changes to magnometer. Declaration public void Stop() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.NetworkAccess.html": {
    "href": "api/Evergine.Platform.NetworkAccess.html",
    "title": "Enum NetworkAccess | Evergine Doc",
    "keywords": "Enum NetworkAccess Various states of the connection to the internet. Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public enum NetworkAccess Fields Name Description ConstrainedInternet Limited internet access. Internet Local and Internet access. Local Local network access only. None No connectivity. Unknown The state of the connectivity is not known. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Platform.OrientationSensor.html": {
    "href": "api/Evergine.Platform.OrientationSensor.html",
    "title": "Class OrientationSensor | Evergine Doc",
    "keywords": "Class OrientationSensor Orientation sensor data of the orientation of a device in three dimensional space. Inheritance object OrientationSensor Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Platform Assembly: Evergine.Platform.dll Syntax public class OrientationSensor : IDisposable Properties IsStarted Gets a value indicating whether the orientation sensor has been started. Declaration public bool IsStarted { get; } Property Value Type Description bool Orientation Gets the current orientation that represents a Quaternion. Declaration public Quaternion Orientation { get; } Property Value Type Description Quaternion Methods Dispose() Declaration public void Dispose() Start() Start monitoring for changes to orientation sensor. Declaration public void Start() Stop() Stop monitoring for changes to orientation sensor. Declaration public void Stop() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.SDL.html": {
    "href": "api/Evergine.SDL.html",
    "title": "Namespace Evergine.SDL | Evergine Doc",
    "keywords": "Namespace Evergine.SDL Classes SDLKeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. SDLMouseDispatcher Dispatch mouse events associated to a Surface or a Window. SDLTouchDispatcher Dispatch pointer events associated to a Surface or a Window. SDLWindow Represent a SDL window implementation on WindowSystem. SDLWindowsSystem SDL2 Windows system. Structs SDLTouchDispatcher.SDL_TouchFingerEvent A structure that contains finger touch event information."
  },
  "api/Evergine.SDL.SDLKeyboardDispatcher.html": {
    "href": "api/Evergine.SDL.SDLKeyboardDispatcher.html",
    "title": "Class SDLKeyboardDispatcher | Evergine Doc",
    "keywords": "Class SDLKeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. Inheritance object KeyboardDispatcher SDLKeyboardDispatcher Inherited Members KeyboardDispatcher.KeyDown KeyboardDispatcher.KeyUp KeyboardDispatcher.KeyChar KeyboardDispatcher.ReadKeyState(Keys) KeyboardDispatcher.IsKeyDown(Keys) KeyboardDispatcher.DispatchEvents() KeyboardDispatcher.HandleKeyDown(Keys) KeyboardDispatcher.HandleKeyUp(Keys) KeyboardDispatcher.HandleKeyChar(char) KeyboardDispatcher.HandleKeyChar(string) KeyboardDispatcher.ResetKeyboardStatus() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.SDL Assembly: Evergine.SDL.dll Syntax public class SDLKeyboardDispatcher : KeyboardDispatcher Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.SDL.SDLMouseDispatcher.html": {
    "href": "api/Evergine.SDL.SDLMouseDispatcher.html",
    "title": "Class SDLMouseDispatcher | Evergine Doc",
    "keywords": "Class SDLMouseDispatcher Dispatch mouse events associated to a Surface or a Window. Inheritance object PointerDispatcher MouseDispatcher SDLMouseDispatcher Inherited Members MouseDispatcher.IsMouseOver MouseDispatcher.Position MouseDispatcher.PositionDelta MouseDispatcher.ScrollDelta MouseDispatcher.State MouseDispatcher.MouseEnter MouseDispatcher.MouseLeave MouseDispatcher.MouseButtonDown MouseDispatcher.MouseButtonUp MouseDispatcher.MouseMove MouseDispatcher.MouseScroll MouseDispatcher.ReadButtonState(MouseButtons) MouseDispatcher.IsButtonDown(MouseButtons) MouseDispatcher.TrySetCursorPosition(Point) MouseDispatcher.DispatchEvents() MouseDispatcher.HandleMouseEnter(Point) MouseDispatcher.HandleMouseLeave(Point) MouseDispatcher.HandleMouseMove(Point) MouseDispatcher.HandleMouseButtonDown(MouseButtons) MouseDispatcher.HandleMouseButtonUp(MouseButtons) MouseDispatcher.HandleMouseScroll(MouseScrollDirections) PointerDispatcher.Points PointerDispatcher.PointerDown PointerDispatcher.PointerUp PointerDispatcher.PointerMove PointerDispatcher.HandlePointerDown(long, Point) PointerDispatcher.HandlePointerUp(long, Point) PointerDispatcher.HandlePointerMove(long, Point) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.SDL Assembly: Evergine.SDL.dll Syntax public class SDLMouseDispatcher : MouseDispatcher Constructors SDLMouseDispatcher(SDL_Window) Initializes a new instance of the SDLMouseDispatcher class. Declaration public SDLMouseDispatcher(SDL_Window window) Parameters Type Name Description SDL_Window window The SDL_Window associated with this dispatcher. Properties CursorType Gets the active cursor type. It can be changed calling the method TrySetCursorType(CursorTypes). Declaration public override CursorTypes CursorType { get; } Property Value Type Description CursorTypes Overrides MouseDispatcher.CursorType Methods NativeSetCursorPosition(Point) Sets natively the cursor position. Declaration protected override bool NativeSetCursorPosition(Point position) Parameters Type Name Description Point position The new position. Returns Type Description bool True if the operation was successful. False otherwise. Overrides MouseDispatcher.NativeSetCursorPosition(Point) TrySetCursorType(CursorTypes) Tries to change the mouse cursor type. Declaration public override bool TrySetCursorType(CursorTypes cursorType) Parameters Type Name Description CursorTypes cursorType The new cursor type. Returns Type Description bool true if successful; otherwise, false. Overrides MouseDispatcher.TrySetCursorType(CursorTypes) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.SDL.SDLTouchDispatcher.html": {
    "href": "api/Evergine.SDL.SDLTouchDispatcher.html",
    "title": "Class SDLTouchDispatcher | Evergine Doc",
    "keywords": "Class SDLTouchDispatcher Dispatch pointer events associated to a Surface or a Window. Inheritance object PointerDispatcher SDLTouchDispatcher Inherited Members PointerDispatcher.Points PointerDispatcher.PointerDown PointerDispatcher.PointerUp PointerDispatcher.PointerMove PointerDispatcher.DispatchEvents() PointerDispatcher.HandlePointerDown(long, Point) PointerDispatcher.HandlePointerUp(long, Point) PointerDispatcher.HandlePointerMove(long, Point) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.SDL Assembly: Evergine.SDL.dll Syntax public class SDLTouchDispatcher : PointerDispatcher Constructors SDLTouchDispatcher(SDLWindow) Initializes a new instance of the SDLTouchDispatcher class. Declaration public SDLTouchDispatcher(SDLWindow window) Parameters Type Name Description SDLWindow window The SDLWindow associated with this dispatcher. Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.SDL.SDLTouchDispatcher.SDL_TouchFingerEvent.html": {
    "href": "api/Evergine.SDL.SDLTouchDispatcher.SDL_TouchFingerEvent.html",
    "title": "Struct SDLTouchDispatcher.SDL_TouchFingerEvent | Evergine Doc",
    "keywords": "Struct SDLTouchDispatcher.SDL_TouchFingerEvent A structure that contains finger touch event information. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.SDL Assembly: Evergine.SDL.dll Syntax public struct SDLTouchDispatcher.SDL_TouchFingerEvent Fields dx The distance moved in the x-axis, normalized (-1...1). Declaration public float dx Field Value Type Description float dy The distance moved in the y-axis, normalized (-1...1). Declaration public float dy Field Value Type Description float fingerId The finger id. Declaration public long fingerId Field Value Type Description long pressure The quantity of pressure applied, normalized (0...1). Declaration public float pressure Field Value Type Description float timestamp timestamp of the event. Declaration public uint timestamp Field Value Type Description uint touchId The touch device id. Declaration public long touchId Field Value Type Description long type SDL_FINGERMOTION, SDL_FINGERDOWN, or SDL_FINGERUP. Declaration public SDL_EventType type Field Value Type Description SDL_EventType x The x-axis location of the touch event, normalized (0...1). Declaration public float x Field Value Type Description float y The y-axis location of the touch event, normalized (0...1). Declaration public float y Field Value Type Description float Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.SDL.SDLWindow.html": {
    "href": "api/Evergine.SDL.SDLWindow.html",
    "title": "Class SDLWindow | Evergine Doc",
    "keywords": "Class SDLWindow Represent a SDL window implementation on WindowSystem. Inheritance object Surface Window SDLWindow Implements IDisposable Inherited Members Surface.SurfaceInfo Surface.Width Surface.Height Surface.DPIDensity Surface.OnScreenSizeChanged Surface.OnSurfaceInfoChanged Surface.Closing Surface.GotFocus Surface.LostFocus Surface.Dispose() Surface.OnClosing() Surface.OnGotFocus() Surface.OnLostFocus() Surface.OnSizeChanged() Surface.OnInfoChanged() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.SDL Assembly: Evergine.SDL.dll Syntax public class SDLWindow : Window, IDisposable Constructors SDLWindow(string, uint, uint, bool) Initializes a new instance of the SDLWindow class. Declaration public SDLWindow(string title, uint width, uint height, bool visible = true) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. bool visible Window visibility. Properties KeyboardDispatcher Gets the keyboard events dispatcher associated to this surface. Declaration public override KeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description KeyboardDispatcher Overrides Surface.KeyboardDispatcher MouseDispatcher Gets the mouse events dispatcher associated to this surface. Declaration public override MouseDispatcher MouseDispatcher { get; } Property Value Type Description MouseDispatcher Overrides Surface.MouseDispatcher NativeWindow Gets or sets sDL2 Window instance. Declaration public IntPtr NativeWindow { get; protected set; } Property Value Type Description IntPtr Title Gets or sets window title. Declaration public override string Title { get; set; } Property Value Type Description string Overrides Window.Title TouchDispatcher Gets the touch events dispatcher associated to this surface. Declaration public override PointerDispatcher TouchDispatcher { get; } Property Value Type Description PointerDispatcher Overrides Surface.TouchDispatcher Visible Gets or sets a value indicating whether the window is visible. Declaration public override bool Visible { get; set; } Property Value Type Description bool Overrides Window.Visible Methods Destroy() Remove managed resources. Declaration protected override void Destroy() Overrides Surface.Destroy() OnEvent(SDL_Event) SDL Event manager method. Declaration public void OnEvent(SDL_Event ev) Parameters Type Name Description SDL_Event ev SDL event. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.SDL.SDLWindowsSystem.html": {
    "href": "api/Evergine.SDL.SDLWindowsSystem.html",
    "title": "Class SDLWindowsSystem | Evergine Doc",
    "keywords": "Class SDLWindowsSystem SDL2 Windows system. Inheritance object WindowsSystem SDLWindowsSystem Implements IDisposable IGetNativePointers Inherited Members WindowsSystem.AvailablePointerKeys WindowsSystem.Run(Action, Action) WindowsSystem.Dispose() WindowsSystem.Destroy() WindowsSystem.GetNativePointer(string, out IntPtr) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.SDL Assembly: Evergine.SDL.dll Syntax public class SDLWindowsSystem : WindowsSystem, IDisposable, IGetNativePointers Constructors SDLWindowsSystem() Initializes a new instance of the SDLWindowsSystem class. Declaration public SDLWindowsSystem() Methods CreateLoopThread(Action, Action) Creates a loop thread. Declaration protected override void CreateLoopThread(Action loadAction, Action renderCallback) Parameters Type Name Description Action loadAction The load action. Action renderCallback The render callback action. Overrides WindowsSystem.CreateLoopThread(Action, Action) CreateSurface(object) Create a surface. Declaration public override Surface CreateSurface(object nativeSurface) Parameters Type Name Description object nativeSurface The native surface control. Returns Type Description Surface Surface instance. Overrides WindowsSystem.CreateSurface(object) CreateSurface(uint, uint) Create a surface. Declaration public override Surface CreateSurface(uint width, uint height) Parameters Type Name Description uint width Surface width. uint height Surface height. Returns Type Description Surface Surface instance. Overrides WindowsSystem.CreateSurface(uint, uint) CreateWindow(string, uint, uint, bool) Create a Window. Declaration public override Window CreateWindow(string title, uint width, uint height, bool visible = true) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. bool visible Window visibility. Returns Type Description Window Window instance. Overrides WindowsSystem.CreateWindow(string, uint, uint, bool) Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.html": {
    "href": "api/Evergine.Vuforia.html",
    "title": "Namespace Evergine.Vuforia | Evergine Doc",
    "keywords": "Namespace Evergine.Vuforia Classes ImageTarget A flat natural feature target. ImageTargetBehavior A component that binds an Vuforia Image target with an entity. ImageTargetResult Result for a VuMarkTarget. The same VuMarkTarget can have multiple physical instances on screen simultaneously. In this case each appearance has its own VuMarkTargetResult, pointing to the same VuMarkTarget with the same instance ID. ObjectTarget A flat natural feature target. ObjectTargetBehavior A component that binds an Vuforia Object target with an entity. ObjectTargetResult Result for a VuMarkTarget. The same VuMarkTarget can have multiple physical instances on screen simultaneously. In this case each appearance has its own VuMarkTargetResult, pointing to the same VuMarkTarget with the same instance ID. Trackable Base class for all objects that can be tracked. TrackableResult A TrackableResult is an object that represents the state of a Trackable which was found in a given frame. Every TrackableResult has a corresponding Trackable, a type, a 6DOF pose and a status(e.g.tracked). TrackableResult<T> A TrackableResult is an object that represents the state of a Trackable which was found in a given frame. Every TrackableResult has a corresponding Trackable, a type, a 6DOF pose and a status(e.g.tracked). Trackable<T> Base class for all objects that can be tracked. VuMarkTarget The VuMarkTarget contains all static data of a VuMark which is available from the dataset. VuMarkTargetBehavior A component that binds an Vuforia VuMark target with an entity. VuMarkTargetResult Result for a VuMarkTarget. The same VuMarkTarget can have multiple physical instances on screen simultaneously. In this case each appearance has its own VuMarkTargetResult, pointing to the same VuMarkTarget with the same instance ID. VuforiaBehavior A component that binds a generic Vuforia target with an entity. VuforiaDataSet Vuforia data set. VuforiaService Vuforia service implementation. VuforiaTargetBehavior A component that binds a generic Vuforia target with an entity. Enums ImageTargetType The type of an ImageTarget. An ImageTarget can be predefined in a dataset, created at runtime as a user defined target, or fetched at runtime via cloud recognition. TargetTypes Types of Vuforia targets supported by the engine. TrackableStatus States of a TrackableResult. VuMarkDataTypes The type of VuMark data encoded in this ID. VuforiaCameraDeviceMode This changes the camera image resolution used for tracking and rendering in the background. VuforiaDeviceType Vuforia Device Type enumeration. VuforiaState Vuforia State enumerator. WorldCenterMode The world center mode defines how the relative coordinates between Trackables and camera are translated into Evergine world coordinates. If a world center is present, the ARCamera in the scene is transformed with respect to that."
  },
  "api/Evergine.Vuforia.ImageTarget.html": {
    "href": "api/Evergine.Vuforia.ImageTarget.html",
    "title": "Class ImageTarget | Evergine Doc",
    "keywords": "Class ImageTarget A flat natural feature target. Inheritance object Trackable Trackable<ImageTarget> ImageTarget Inherited Members Trackable<ImageTarget>.GetHashCode() Trackable.Id Trackable.Name Trackable.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class ImageTarget : Trackable<ImageTarget> Fields MetaData Metadata string. Declaration public readonly string MetaData Field Value Type Description string UniqueTargetId The target id. Declaration public readonly Guid UniqueTargetId Field Value Type Description Guid size The size of the image. Declaration public Vector3 size Field Value Type Description Vector3 Properties ImageTargetType Gets the type of this ImageTarget (Predefined, User Defined, Cloud Reco). Declaration public ImageTargetType ImageTargetType { get; } Property Value Type Description ImageTargetType Size Gets or sets the Trackable size. Declaration public Vector3 Size { get; set; } Property Value Type Description Vector3 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.ImageTargetBehavior.html": {
    "href": "api/Evergine.Vuforia.ImageTargetBehavior.html",
    "title": "Class ImageTargetBehavior | Evergine Doc",
    "keywords": "Class ImageTargetBehavior A component that binds an Vuforia Image target with an entity. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior VuforiaTargetBehavior ImageTargetBehavior Implements IDependencyObject Inherited Members VuforiaTargetBehavior.vuforiaService VuforiaTargetBehavior.TargetName VuforiaTargetBehavior.IsStatic VuforiaTargetBehavior.TrackableResult VuforiaTargetBehavior.TrackableStatus VuforiaTargetBehavior.OnAttached() VuforiaTargetBehavior.Update(TimeSpan) VuforiaTargetBehavior.OnDetach() Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class ImageTargetBehavior : VuforiaTargetBehavior, IDependencyObject Properties AvailableTrackables Gets enumerable that contains the names of the Image trackables described by the dataset. Declaration public override IEnumerable<string> AvailableTrackables { get; } Property Value Type Description IEnumerable<string> Overrides VuforiaTargetBehavior.AvailableTrackables Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.ImageTargetResult.html": {
    "href": "api/Evergine.Vuforia.ImageTargetResult.html",
    "title": "Class ImageTargetResult | Evergine Doc",
    "keywords": "Class ImageTargetResult Result for a VuMarkTarget. The same VuMarkTarget can have multiple physical instances on screen simultaneously. In this case each appearance has its own VuMarkTargetResult, pointing to the same VuMarkTarget with the same instance ID. Inheritance object TrackableResult TrackableResult<ImageTarget> ImageTargetResult Inherited Members TrackableResult<ImageTarget>.SpecificTrackable TrackableResult<ImageTarget>.Trackable TrackableResult.Id TrackableResult.Status TrackableResult.Pose TrackableResult.Equals(object) TrackableResult.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class ImageTargetResult : TrackableResult<ImageTarget> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.ImageTargetType.html": {
    "href": "api/Evergine.Vuforia.ImageTargetType.html",
    "title": "Enum ImageTargetType | Evergine Doc",
    "keywords": "Enum ImageTargetType The type of an ImageTarget. An ImageTarget can be predefined in a dataset, created at runtime as a user defined target, or fetched at runtime via cloud recognition. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum ImageTargetType Fields Name Description CLOUD_RECO The ImageTarget is fetched at runtime via cloud recognition. PREDEFINED The ImageTarget is predefined in a dataset. USER_DEFINED The ImageTarget is defined by user at runtime. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.ObjectTarget.html": {
    "href": "api/Evergine.Vuforia.ObjectTarget.html",
    "title": "Class ObjectTarget | Evergine Doc",
    "keywords": "Class ObjectTarget A flat natural feature target. Inheritance object Trackable Trackable<ObjectTarget> ObjectTarget Inherited Members Trackable<ObjectTarget>.GetHashCode() Trackable.Id Trackable.Name Trackable.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class ObjectTarget : Trackable<ObjectTarget> Fields UniqueTargetId The target Id. Declaration public readonly Guid UniqueTargetId Field Value Type Description Guid size Trackable size. Declaration public Vector3 size Field Value Type Description Vector3 Properties Size Gets or sets the trackable size. Declaration public Vector3 Size { get; set; } Property Value Type Description Vector3 Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.ObjectTargetBehavior.html": {
    "href": "api/Evergine.Vuforia.ObjectTargetBehavior.html",
    "title": "Class ObjectTargetBehavior | Evergine Doc",
    "keywords": "Class ObjectTargetBehavior A component that binds an Vuforia Object target with an entity. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior VuforiaTargetBehavior ObjectTargetBehavior Implements IDependencyObject Inherited Members VuforiaTargetBehavior.vuforiaService VuforiaTargetBehavior.TargetName VuforiaTargetBehavior.IsStatic VuforiaTargetBehavior.TrackableResult VuforiaTargetBehavior.TrackableStatus VuforiaTargetBehavior.OnAttached() VuforiaTargetBehavior.Update(TimeSpan) VuforiaTargetBehavior.OnDetach() Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class ObjectTargetBehavior : VuforiaTargetBehavior, IDependencyObject Properties AvailableTrackables Gets enumerable that contains the names of the Image trackables described by the dataset. Declaration public override IEnumerable<string> AvailableTrackables { get; } Property Value Type Description IEnumerable<string> Overrides VuforiaTargetBehavior.AvailableTrackables Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.ObjectTargetResult.html": {
    "href": "api/Evergine.Vuforia.ObjectTargetResult.html",
    "title": "Class ObjectTargetResult | Evergine Doc",
    "keywords": "Class ObjectTargetResult Result for a VuMarkTarget. The same VuMarkTarget can have multiple physical instances on screen simultaneously. In this case each appearance has its own VuMarkTargetResult, pointing to the same VuMarkTarget with the same instance ID. Inheritance object TrackableResult TrackableResult<ObjectTarget> ObjectTargetResult Inherited Members TrackableResult<ObjectTarget>.SpecificTrackable TrackableResult<ObjectTarget>.Trackable TrackableResult.Id TrackableResult.Status TrackableResult.Pose TrackableResult.Equals(object) TrackableResult.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class ObjectTargetResult : TrackableResult<ObjectTarget> Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.TargetTypes.html": {
    "href": "api/Evergine.Vuforia.TargetTypes.html",
    "title": "Enum TargetTypes | Evergine Doc",
    "keywords": "Enum TargetTypes Types of Vuforia targets supported by the engine. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum TargetTypes Fields Name Description ImageTarget Image target VuMark VuMark target Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.Trackable-1.html": {
    "href": "api/Evergine.Vuforia.Trackable-1.html",
    "title": "Class Trackable<T> | Evergine Doc",
    "keywords": "Class Trackable<T> Base class for all objects that can be tracked. Inheritance object Trackable Trackable<T> ImageTarget ObjectTarget VuMarkTarget Inherited Members Trackable.Id Trackable.Name Trackable.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public abstract class Trackable<T> : Trackable where T : Trackable Type Parameters Name Description T The trackable type. Methods GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides Trackable.GetHashCode() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.Trackable.html": {
    "href": "api/Evergine.Vuforia.Trackable.html",
    "title": "Class Trackable | Evergine Doc",
    "keywords": "Class Trackable Base class for all objects that can be tracked. Inheritance object Trackable Trackable<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public abstract class Trackable Fields Id Gets or sets the runtime Id of the Trackable. Declaration public readonly int Id Field Value Type Description int Name Gets or sets the name of the Trackable. Declaration public readonly string Name Field Value Type Description string Methods Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.TrackableResult-1.html": {
    "href": "api/Evergine.Vuforia.TrackableResult-1.html",
    "title": "Class TrackableResult<T> | Evergine Doc",
    "keywords": "Class TrackableResult<T> A TrackableResult is an object that represents the state of a Trackable which was found in a given frame. Every TrackableResult has a corresponding Trackable, a type, a 6DOF pose and a status(e.g.tracked). Inheritance object TrackableResult TrackableResult<T> ImageTargetResult ObjectTargetResult VuMarkTargetResult Inherited Members TrackableResult.Id TrackableResult.Status TrackableResult.Pose TrackableResult.Equals(object) TrackableResult.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class TrackableResult<T> : TrackableResult where T : Trackable Type Parameters Name Description T The trackable type. Fields SpecificTrackable Specific Trackable. Declaration public T SpecificTrackable Field Value Type Description T Properties Trackable Gets the corresponding Trackable that this result represents. Declaration public override Trackable Trackable { get; } Property Value Type Description Trackable Overrides TrackableResult.Trackable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.TrackableResult.html": {
    "href": "api/Evergine.Vuforia.TrackableResult.html",
    "title": "Class TrackableResult | Evergine Doc",
    "keywords": "Class TrackableResult A TrackableResult is an object that represents the state of a Trackable which was found in a given frame. Every TrackableResult has a corresponding Trackable, a type, a 6DOF pose and a status(e.g.tracked). Inheritance object TrackableResult TrackableResult<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public abstract class TrackableResult Properties Id Gets the runtime Id of the Trackable. Declaration public int Id { get; } Property Value Type Description int Pose Gets the current pose Matrix4x4. Declaration public Matrix4x4 Pose { get; } Property Value Type Description Matrix4x4 Status Gets the trackable status. Declaration public TrackableStatus Status { get; } Property Value Type Description TrackableStatus Trackable Gets the corresponding Trackable that this result represents. Declaration public abstract Trackable Trackable { get; } Property Value Type Description Trackable Methods Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.TrackableStatus.html": {
    "href": "api/Evergine.Vuforia.TrackableStatus.html",
    "title": "Enum TrackableStatus | Evergine Doc",
    "keywords": "Enum TrackableStatus States of a TrackableResult. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum TrackableStatus Fields Name Description Detected The Trackable was detected ExtendedTracked The Trackable was extended tracked Limited The trackable was tracked with some problems NoPose The trackable is not tracked Tracked The Trackable was tracked Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuforiaBehavior.html": {
    "href": "api/Evergine.Vuforia.VuforiaBehavior.html",
    "title": "Class VuforiaBehavior | Evergine Doc",
    "keywords": "Class VuforiaBehavior A component that binds a generic Vuforia target with an entity. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior VuforiaBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.Start() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class VuforiaBehavior : Behavior, IDependencyObject Fields Camera3D The camera 3D. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Camera3D Camera3D Field Value Type Description Camera3D Transform The camera 3D. Declaration [BindComponent(true, true, BindComponentSource.Owner, null, true)] protected Transform3D Transform Field Value Type Description Transform3D WorldCenterMode The world center mode. Declaration public WorldCenterMode WorldCenterMode Field Value Type Description WorldCenterMode graphicsContext The vuforia service. Declaration [BindService(true)] protected GraphicsContext graphicsContext Field Value Type Description GraphicsContext vuforiaService The vuforia service. Declaration [BindService(true)] protected VuforiaService vuforiaService Field Value Type Description VuforiaService Properties Target Gets or sets the Vuforia Target Behavior. Declaration public VuforiaTargetBehavior Target { get; set; } Property Value Type Description VuforiaTargetBehavior TrackableStatus Gets the trackable status. Declaration public TrackableStatus TrackableStatus { get; } Property Value Type Description TrackableStatus Methods OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Component.OnActivated() OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Component.OnDeactivated() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() Update(TimeSpan) Updates this instance. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This is only executed if the instance is active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuforiaCameraDeviceMode.html": {
    "href": "api/Evergine.Vuforia.VuforiaCameraDeviceMode.html",
    "title": "Enum VuforiaCameraDeviceMode | Evergine Doc",
    "keywords": "Enum VuforiaCameraDeviceMode This changes the camera image resolution used for tracking and rendering in the background. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum VuforiaCameraDeviceMode Fields Name Description Default Default camera mode OptimizeQuality High-quality camera mode OptimizeSpeed Fast camera mode Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuforiaDataSet.html": {
    "href": "api/Evergine.Vuforia.VuforiaDataSet.html",
    "title": "Class VuforiaDataSet | Evergine Doc",
    "keywords": "Class VuforiaDataSet Vuforia data set. Inheritance object DisposableObject VuforiaDataSet Implements IDisposable Inherited Members DisposableObject.Disposed DisposableObject.Dispose() DisposableObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class VuforiaDataSet : DisposableObject, IDisposable Constructors VuforiaDataSet(string) Initializes a new instance of the VuforiaDataSet class. Declaration public VuforiaDataSet(string path) Parameters Type Name Description string path The dataset's path. Fields Trackables Gets the trackable collection. Declaration public List<Trackable> Trackables Field Value Type Description List<Trackable> path DataSet path. Declaration public string path Field Value Type Description string Properties DataSet Gets the vuforia dataset. Declaration public DataSet DataSet { get; } Property Value Type Description DataSet IsEnabled Gets or sets a value indicating whether Enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description bool Loaded Gets a value indicating whether loaded. Declaration public bool Loaded { get; } Property Value Type Description bool Path Gets or sets the dataset's path. Declaration public string Path { get; set; } Property Value Type Description string Methods Destroy() Destroy all resources of this instance. Declaration protected override void Destroy() Overrides Evergine.Framework.DisposableObject.Destroy() RefreshDataSetActivation() Starts or stops the dataset refreshing using the IsEnabled property. Declaration public void RefreshDataSetActivation() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuforiaDeviceType.html": {
    "href": "api/Evergine.Vuforia.VuforiaDeviceType.html",
    "title": "Enum VuforiaDeviceType | Evergine Doc",
    "keywords": "Enum VuforiaDeviceType Vuforia Device Type enumeration. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum VuforiaDeviceType Fields Name Description DigitalEyewear Digital eye-wear device. Handheld Hand-held device Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuforiaService.html": {
    "href": "api/Evergine.Vuforia.VuforiaService.html",
    "title": "Class VuforiaService | Evergine Doc",
    "keywords": "Class VuforiaService Vuforia service implementation. Inheritance object IdentifiableObject DependencyObject AttachableObject Service UpdatableService VuforiaService Implements IDependencyObject Inherited Members Service.OnLoaded() Service.OnAttached() Service.Start() Service.OnDetach() Service.OnDestroy() AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.ShouldBeActivated AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class VuforiaService : UpdatableService, IDependencyObject Properties DataSets Gets the dataset collection. Declaration public IEnumerable<VuforiaDataSet> DataSets { get; } Property Value Type Description IEnumerable<VuforiaDataSet> DeviceIsOpticalSeeThrough Gets or sets a value indicating whether the device is an optical see-through device, such as the HoloLens is attached. Declaration public bool DeviceIsOpticalSeeThrough { get; set; } Property Value Type Description bool EnableVideoBackground Gets or sets a value indicating whether is video background enabled. Declaration public bool EnableVideoBackground { get; set; } Property Value Type Description bool IsSupported Gets a value indicating whether Vuforia is Supported. Declaration public bool IsSupported { get; } Property Value Type Description bool LicenseKey Gets or sets the Vuforia license key that is used for this app. Declaration [RenderProperty(CustomPropertyName = \"License Key\", Tooltip = \"The Vuforia license key that is used for this app\")] public string LicenseKey { get; set; } Property Value Type Description string Exceptions Type Condition InvalidOperationException License key cannot be changed while Vuforia tracking is active. MaxSimultaneousTrackedImages Gets or sets how many image targets to detect and track at the same time. Declaration public int MaxSimultaneousTrackedImages { get; set; } Property Value Type Description int Remarks Tells the tracker how many image shall be processed at most at the same time.E.g. if an app will never require tracking more than two targets, this value should be set to 2. Default is: 1. MaxSimultaneousTrackedObjects Gets or sets how many object targets to detect and track at the same time. Declaration public int MaxSimultaneousTrackedObjects { get; set; } Property Value Type Description int Remarks Tells the tracker how many 3D objects shall be processed at most at the same time.E.g. if an app will never require tracking more than 1 target, this value should be set to 1. Default is: 1. StartTrackingAutomatically Gets or sets a value indicating whether the target tracking will be started automatically when the service is attached. Declaration public bool StartTrackingAutomatically { get; set; } Property Value Type Description bool TrackDevicePose Gets or sets a value indicating whether exists a track device pose. Declaration public bool TrackDevicePose { get; set; } Property Value Type Description bool TrackableResults Gets the Trackable objects currently being tracked. Declaration public IEnumerable<TrackableResult> TrackableResults { get; } Property Value Type Description IEnumerable<TrackableResult> TrackingState Gets the Vuforia service tracking state. Declaration public VuforiaState TrackingState { get; } Property Value Type Description VuforiaState VideoBackgroundMesh Gets the video background mesh. Declaration public Mesh VideoBackgroundMesh { get; } Property Value Type Description Mesh VideoBackgroundTexture Gets the video background texture. Declaration public Texture VideoBackgroundTexture { get; } Property Value Type Description Texture VuforiaDeviceType Gets the current Vuforia device type. Declaration public VuforiaDeviceType VuforiaDeviceType { get; } Property Value Type Description VuforiaDeviceType WorldCenterMode Gets the Vuforia world center mode. Declaration public WorldCenterMode WorldCenterMode { get; } Property Value Type Description WorldCenterMode Methods AddDataSet(VuforiaDataSet) Adds a dataset to collection. Declaration public void AddDataSet(VuforiaDataSet dataSet) Parameters Type Name Description VuforiaDataSet dataSet The new dataset. OnActivated() Invoked when the object is activated once is attached. Declaration protected override void OnActivated() Overrides Evergine.Framework.Services.Service.OnActivated() OnDeactivated() Invoked when the object is deactivated. Declaration protected override void OnDeactivated() Overrides Evergine.Framework.Services.Service.OnDeactivated() StartTrackingAsync() Starts the Vuforia target tracking. Declaration public Task<bool> StartTrackingAsync() Returns Type Description Task<bool> true, if tracking was started, false otherwise. StopTrackingAsync() Stops the Vuforia target tracking. Declaration public Task<bool> StopTrackingAsync() Returns Type Description Task<bool> true, if tracking was stopped, false otherwise. Update(TimeSpan) Updates this instance. Declaration public override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The elapsed game time since the last update. Overrides UpdatableService.Update(TimeSpan) Events OnTrackingStateChanged Event raised on tracking state changed. Declaration public event EventHandler<VuforiaState> OnTrackingStateChanged Event Type Type Description EventHandler<VuforiaState> Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuforiaState.html": {
    "href": "api/Evergine.Vuforia.VuforiaState.html",
    "title": "Enum VuforiaState | Evergine Doc",
    "keywords": "Enum VuforiaState Vuforia State enumerator. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum VuforiaState Fields Name Description Initialized Vuforia is initialized but not tracking. Stopped Vuforia has not been initialized. Tracking Vuforia is initialized and tracking. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuforiaTargetBehavior.html": {
    "href": "api/Evergine.Vuforia.VuforiaTargetBehavior.html",
    "title": "Class VuforiaTargetBehavior | Evergine Doc",
    "keywords": "Class VuforiaTargetBehavior A component that binds a generic Vuforia target with an entity. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior VuforiaTargetBehavior ImageTargetBehavior ObjectTargetBehavior VuMarkTargetBehavior Implements IDependencyObject Inherited Members Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public abstract class VuforiaTargetBehavior : Behavior, IDependencyObject Constructors VuforiaTargetBehavior() Initializes a new instance of the VuforiaTargetBehavior class. Declaration public VuforiaTargetBehavior() Fields vuforiaService The vuforia service. Declaration [BindService(true)] protected VuforiaService vuforiaService Field Value Type Description VuforiaService Properties AvailableTrackables Gets enumerable that contains the names of the trackables described by the dataset. Declaration public abstract IEnumerable<string> AvailableTrackables { get; } Property Value Type Description IEnumerable<string> IsStatic Gets or sets a value indicating whether the entity pose will only be set the first time the target is tracked. This is only used when Device tracking mode is active.\"/>. Declaration [RenderProperty(CustomPropertyName = \"Is Static\", Tooltip = \"Indicates whether the entity pose will only be set the first time the target is tracked. This is only used when 'WorldCenterMode.Camera' tracking mode is active\")] public bool IsStatic { get; set; } Property Value Type Description bool true if the entity pose will only be set the first time the target is tracked; otherwise, false. TargetName Gets or sets the trackable name that match with this entity. Declaration public string TargetName { get; set; } Property Value Type Description string TrackableResult Gets the current trackable result. Declaration public TrackableResult TrackableResult { get; } Property Value Type Description TrackableResult TrackableStatus Gets the trackable status. Declaration public TrackableStatus TrackableStatus { get; } Property Value Type Description TrackableStatus Methods OnAttached() Invoked when the object is attached to the system. Declaration protected override bool OnAttached() Returns Type Description bool True if all is OK. Overrides Evergine.Framework.Behavior.OnAttached() OnDetach() Invoked when the object is detached. Declaration protected override void OnDetach() Overrides Evergine.Framework.Behavior.OnDetach() Update(TimeSpan) Updates this instance. Declaration protected override void Update(TimeSpan gameTime) Parameters Type Name Description TimeSpan gameTime The game time. Overrides Behavior.Update(TimeSpan) Remarks This is only executed if the instance is active. Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuMarkDataTypes.html": {
    "href": "api/Evergine.Vuforia.VuMarkDataTypes.html",
    "title": "Enum VuMarkDataTypes | Evergine Doc",
    "keywords": "Enum VuMarkDataTypes The type of VuMark data encoded in this ID. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum VuMarkDataTypes Fields Name Description Bytes Generic byte data, stored in little-endian order in the buffer. For example, and ID of 0x123456 would appear as { 0x56, 0x34, 0x12 } Numeric Numeric data, not larger than a 64 bit unsigned long long. String Printable string data in ASCII. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuMarkTarget.html": {
    "href": "api/Evergine.Vuforia.VuMarkTarget.html",
    "title": "Class VuMarkTarget | Evergine Doc",
    "keywords": "Class VuMarkTarget The VuMarkTarget contains all static data of a VuMark which is available from the dataset. Inheritance object Trackable Trackable<VuMarkTarget> VuMarkTarget Inherited Members Trackable<VuMarkTarget>.GetHashCode() Trackable.Id Trackable.Name Trackable.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class VuMarkTarget : Trackable<VuMarkTarget> Fields InstanceId Instance id. Declaration public InstanceId InstanceId Field Value Type Description InstanceId IsTemplate Indicate if target is template. Declaration public readonly bool IsTemplate Field Value Type Description bool TemplateID Template id. Declaration public int TemplateID Field Value Type Description int UniqueTargetId Target id. Declaration public readonly Guid UniqueTargetId Field Value Type Description Guid Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuMarkTargetBehavior.html": {
    "href": "api/Evergine.Vuforia.VuMarkTargetBehavior.html",
    "title": "Class VuMarkTargetBehavior | Evergine Doc",
    "keywords": "Class VuMarkTargetBehavior A component that binds an Vuforia VuMark target with an entity. Inheritance object IdentifiableObject DependencyObject AttachableObject PrefabInstanceObject Component Behavior VuforiaTargetBehavior VuMarkTargetBehavior Implements IDependencyObject Inherited Members VuforiaTargetBehavior.vuforiaService VuforiaTargetBehavior.TargetName VuforiaTargetBehavior.IsStatic VuforiaTargetBehavior.TrackableResult VuforiaTargetBehavior.TrackableStatus VuforiaTargetBehavior.OnAttached() VuforiaTargetBehavior.Update(TimeSpan) VuforiaTargetBehavior.OnDetach() Behavior.Family Behavior.UpdateOrder Component.Owner Component.Managers Component.ShouldBeActivated Component.Clone() Component.Attach(Entity) Component.OnLoaded() Component.OnActivated() Component.Start() Component.OnDeactivated() Component.OnDestroy() PrefabInstanceObject.PrefabSource PrefabInstanceObject.PrefabElementId PrefabInstanceObject.IsPrefabInstance PrefabInstanceObject.IsMissingPrefabSource AttachableObject.AttachableStateChanged AttachableObject.IsEnabled AttachableObject.State AttachableObject.IsLoaded AttachableObject.IsAttached AttachableObject.IsActivated AttachableObject.IsStarted AttachableObject.IsDestroyed AttachableObject.Destroy() AttachableObject.DependencyBroken() DependencyObject.Dependencies DependencyObject.OnDependencyRemoved IdentifiableObject.Id IdentifiableObject.IdHasChanged(Guid) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class VuMarkTargetBehavior : VuforiaTargetBehavior, IDependencyObject Properties AvailableTrackables Gets enumerable that contains the names of the VuMark trackables described by the dataset. Declaration public override IEnumerable<string> AvailableTrackables { get; } Property Value Type Description IEnumerable<string> Overrides VuforiaTargetBehavior.AvailableTrackables DataType Gets the data type that this entity should match. Declaration [RenderProperty(Tag = 1, Tooltip = \"The data type that this entity should match\")] public VuMarkDataTypes DataType { get; } Property Value Type Description VuMarkDataTypes NumericValue Gets the numeric ID value that match with this entity if the datatype is marked as a Numeric. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = VuMarkDataTypes.Numeric, CustomPropertyName = \"Numeric Value\", Tooltip = \"The numeric value that match with this entity if the datatype is marked as a 'Numeric'\")] public ulong NumericValue { get; } Property Value Type Description ulong StringValue Gets the string ID value that match with this entity if the datatype is marked as a String. Declaration [RenderProperty(AttachToTag = 1, AttachToValue = VuMarkDataTypes.String, CustomPropertyName = \"String ID\", Tooltip = \"The string ID value that match with this entity if the datatype is marked as a 'String'\")] public string StringValue { get; } Property Value Type Description string Implements IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.VuMarkTargetResult.html": {
    "href": "api/Evergine.Vuforia.VuMarkTargetResult.html",
    "title": "Class VuMarkTargetResult | Evergine Doc",
    "keywords": "Class VuMarkTargetResult Result for a VuMarkTarget. The same VuMarkTarget can have multiple physical instances on screen simultaneously. In this case each appearance has its own VuMarkTargetResult, pointing to the same VuMarkTarget with the same instance ID. Inheritance object TrackableResult TrackableResult<VuMarkTarget> VuMarkTargetResult Inherited Members TrackableResult<VuMarkTarget>.SpecificTrackable TrackableResult<VuMarkTarget>.Trackable TrackableResult.Status TrackableResult.Pose TrackableResult.Equals(object) TrackableResult.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public class VuMarkTargetResult : TrackableResult<VuMarkTarget> Properties DataType Gets the type of data the VuMarkResult contains. Declaration public VuMarkDataTypes DataType { get; } Property Value Type Description VuMarkDataTypes Id Gets a unique id for a particular VuMark result, which is consistent frame-to-frame, while being tracked. Note that this id is separate from the trackable id. Declaration public int Id { get; } Property Value Type Description int NumericValue Gets the byte buffer as a 64bit unsigned long if the data type is marked as a Numeric. 0 is returned otherwise. Declaration public ulong NumericValue { get; } Property Value Type Description ulong RawValue Gets the raw byte data. Declaration public byte[] RawValue { get; } Property Value Type Description byte[] StringValue Gets the byte buffer as a 64bit unsigned long if the data type is marked as a String. 0 is returned otherwise. Declaration public string StringValue { get; } Property Value Type Description string Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vuforia.WorldCenterMode.html": {
    "href": "api/Evergine.Vuforia.WorldCenterMode.html",
    "title": "Enum WorldCenterMode | Evergine Doc",
    "keywords": "Enum WorldCenterMode The world center mode defines how the relative coordinates between Trackables and camera are translated into Evergine world coordinates. If a world center is present, the ARCamera in the scene is transformed with respect to that. Namespace: Evergine.Vuforia Assembly: Evergine.Vuforia.dll Syntax public enum WorldCenterMode Fields Name Description Device Do not define a world center but only move Trackables with respect to a fixed ARCamera. FirstTarget The camera uses the first Trackable that comes into view as the world center (world center changes during runtime). SpecificTarget User defines a single Trackable that defines the world center. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.html": {
    "href": "api/Evergine.Vulkan.html",
    "title": "Namespace Evergine.Vulkan | Evergine Doc",
    "keywords": "Namespace Evergine.Vulkan Classes VKBottomLevelAS Vulkan Bottom Level Acceleration Structure implementation. VKBuffer Represents a Vulkan buffer object. VKCapabilities The OpenGL capabilities. VKCommandBuffer The Vulkan implementation of a command buffer object. VKCommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. VKComputePipelineState This class represents a native pipelineState on Vulkan. VKExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. VKFrameBuffer This class represents a native FrameBuffer object on Vulkan. VKFrameBufferBase Abstract class used to have the same interface for swapchainframebuffer and framebuffer objects. VKGraphicsContext Graphics context on Vulkan. VKGraphicsPipelineState This class represents a native pipelineState on Vulkan. VKHelpers Set of Vulkan helpers. VKQueryHeap Represents a Vulkan queryheap object. VKRaytracingHelpers Raytracing helpers. VKRaytracingPipelineState Vulkan Raytracing pipeline state. VKResourceFactory The Vulkan version of the resource factory. VKResourceLayout The Vulkan implementation of a ResourceLayout object. VKResourceSet The Vulkan implementation of a ResourceSet object. VKSamplerState This class represents the a Vulkan samplerState object. VKShader This class represents a native shader object on Metal. VKShaderTable Vulkan Shader binding table. VKSwapChain This class represents a native swapchain object on Vulkan. VKSwapChainFrameBuffer This class represent the swapchain FrameBuffer on Vulkan. VKTexture This class represents a native texture object on Metal. VKTopLevelAS Vulkan Top Level Acceleration Structure implementation. Structs VKDescriptorAllocationToken This struct represent a helper to allocate new descriptors. VKRaytracingHelpers.BufferData Buffer data. VKShaderTable.ShaderTableRecord Shader Table Entry. Enums VKShaderTable.ShaderTableRecord.RecordType Record type."
  },
  "api/Evergine.Vulkan.VKBottomLevelAS.html": {
    "href": "api/Evergine.Vulkan.VKBottomLevelAS.html",
    "title": "Class VKBottomLevelAS | Evergine Doc",
    "keywords": "Class VKBottomLevelAS Vulkan Bottom Level Acceleration Structure implementation. Inheritance object GraphicsResource BottomLevelAS VKBottomLevelAS Implements IDisposable Inherited Members BottomLevelAS.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKBottomLevelAS : BottomLevelAS, IDisposable Constructors VKBottomLevelAS(VKGraphicsContext, VkCommandBuffer, ref BottomLevelASDescription) Initializes a new instance of the VKBottomLevelAS class. Declaration public VKBottomLevelAS(VKGraphicsContext context, VkCommandBuffer commandBuffer, ref BottomLevelASDescription description) Parameters Type Name Description VKGraphicsContext context Graphics Context. VkCommandBuffer commandBuffer Command buffer. BottomLevelASDescription description Bottom Level Description. Fields BottomLevelAS The bottom level acceleration structure instance. Declaration public VkAccelerationStructureKHR BottomLevelAS Field Value Type Description VkAccelerationStructureKHR Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKBuffer.html": {
    "href": "api/Evergine.Vulkan.VKBuffer.html",
    "title": "Class VKBuffer | Evergine Doc",
    "keywords": "Class VKBuffer Represents a Vulkan buffer object. Inheritance object GraphicsResource Buffer VKBuffer Implements IDisposable Inherited Members Buffer.Description Buffer.UpdateCounter GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKBuffer : Buffer, IDisposable Constructors VKBuffer(VKGraphicsContext, IntPtr, ref BufferDescription) Initializes a new instance of the VKBuffer class. Declaration public VKBuffer(VKGraphicsContext context, IntPtr data, ref BufferDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. IntPtr data The data pointer. BufferDescription description A buffer description. Fields BufferMemory The Vulkan buffer memory. Declaration public VkDeviceMemory BufferMemory Field Value Type Description VkDeviceMemory NativeBuffer The Vulkan buffer object. Declaration public VkBuffer NativeBuffer Field Value Type Description VkBuffer Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Buffer.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods CopyTo(VkCommandBuffer, CommandQueueType, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration public void CopyTo(VkCommandBuffer commandBuffer, CommandQueueType queueType, Buffer destination, uint sizeInBytes, uint sourceOffset, uint destinationOffset) Parameters Type Name Description VkCommandBuffer commandBuffer The commandbuffer. CommandQueueType queueType The commandqueue type of the commandBuffer. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() SetData(VkCommandBuffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(VkCommandBuffer commandBuffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description VkCommandBuffer commandBuffer The commandbuffer. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKCapabilities.html": {
    "href": "api/Evergine.Vulkan.VKCapabilities.html",
    "title": "Class VKCapabilities | Evergine Doc",
    "keywords": "Class VKCapabilities The OpenGL capabilities. Inheritance object GraphicsContextCapabilities VKCapabilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKCapabilities : GraphicsContextCapabilities Constructors VKCapabilities(VKGraphicsContext) Initializes a new instance of the VKCapabilities class. Declaration public VKCapabilities(VKGraphicsContext vkGraphicsContext) Parameters Type Name Description VKGraphicsContext vkGraphicsContext The Vulkan Graphic context. Properties ClipDepth Gets the depth range in clip space. Declaration public override ClipDepth ClipDepth { get; } Property Value Type Description ClipDepth Overrides GraphicsContextCapabilities.ClipDepth FlipProjectionRequired Gets a value indicating whether we need to flip projection matrix on Render Target. Declaration public override bool FlipProjectionRequired { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.FlipProjectionRequired IsComputeShaderSupported Gets a value indicating whether this graphics context support compute shaders. Declaration public override bool IsComputeShaderSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsComputeShaderSupported IsMRTSupported Gets a value indicating whether this graphics context supports Multi Render Target (MRT). Declaration public override bool IsMRTSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsMRTSupported IsRaytracingSupported Gets a value indicating whether this graphics context supports Raytracing. Declaration public override bool IsRaytracingSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsRaytracingSupported IsShadowMapSupported Gets a value indicating whether this graphics context supports Shadow Maps. Declaration public override bool IsShadowMapSupported { get; } Property Value Type Description bool Overrides GraphicsContextCapabilities.IsShadowMapSupported MatrixMajorness Gets a value indicating whether this graphics context uses row major matrices by default. Declaration public override MatrixMajorness MatrixMajorness { get; } Property Value Type Description MatrixMajorness Overrides GraphicsContextCapabilities.MatrixMajorness MultiviewStrategy Gets the multiview strategy supported by this graphic context. Declaration public override MultiviewStrategy MultiviewStrategy { get; } Property Value Type Description MultiviewStrategy Overrides GraphicsContextCapabilities.MultiviewStrategy Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKCommandBuffer.html": {
    "href": "api/Evergine.Vulkan.VKCommandBuffer.html",
    "title": "Class VKCommandBuffer | Evergine Doc",
    "keywords": "Class VKCommandBuffer The Vulkan implementation of a command buffer object. Inheritance object CommandBuffer VKCommandBuffer Implements IDisposable IGetNativePointers Inherited Members CommandBuffer.State CommandBuffer.AvailablePointerKeys CommandBuffer.InRenderPass CommandBuffer.End() CommandBuffer.SetVertexBuffers(Buffer[]) CommandBuffer.SetVertexBuffer(uint, Buffer, uint) CommandBuffer.SetVertexBuffers(Buffer[], int[]) CommandBuffer.SetIndexBuffer(Buffer, IndexFormat, uint) CommandBuffer.SetGraphicsPipelineState(GraphicsPipelineState) CommandBuffer.SetComputePipelineState(ComputePipelineState) CommandBuffer.SetRaytracingPipelineState(RaytracingPipelineState) CommandBuffer.SetResourceSet(ResourceSet, uint, uint[]) CommandBuffer.BeginRenderPass(ref RenderPassDescription) CommandBuffer.EndRenderPass() CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint) CommandBuffer.UpdateBufferData<T>(Buffer, T[], uint, uint) CommandBuffer.UpdateBufferData<T>(Buffer, ref T, uint) CommandBuffer.UpdateBufferData(Buffer, IntPtr, uint, uint) CommandBuffer.CopyBufferDataTo(Buffer, Buffer, uint, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, Texture) CommandBuffer.CopyTextureDataTo(Texture, Texture, uint, uint) CommandBuffer.CopyTextureDataTo(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) CommandBuffer.Blit(Texture, Texture) CommandBuffer.Dispatch1D(uint, uint) CommandBuffer.Dispatch2D(uint, uint, uint, uint) CommandBuffer.Dispatch3D(uint, uint, uint, uint, uint, uint) CommandBuffer.GetNativePointer(string, out IntPtr) CommandBuffer.ClearCache() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKCommandBuffer : CommandBuffer, IDisposable, IGetNativePointers Constructors VKCommandBuffer(VKGraphicsContext, VKCommandQueue) Initializes a new instance of the VKCommandBuffer class. Declaration public VKCommandBuffer(VKGraphicsContext context, VKCommandQueue queue) Parameters Type Name Description VKGraphicsContext context Graphics Context. VKCommandQueue queue The commandqueue for this commandbuffer. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides CommandBuffer.GraphicsContext Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandBuffer.Name Methods Begin() Set the initialize state for this commandbuffer. This function must be called before other graphics commands ca be issued. Declaration public override void Begin() Overrides CommandBuffer.Begin() BeginDebugMarker(string) Marks the beginning of a section of event code. This allows subsequent commands to be categorized and filtered when viewed in external debugging tools. Declaration public override void BeginDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.BeginDebugMarker(string) Remarks You call the EndDebugMarker method to mark the end of the section of event code. BeginDebugMarker has no effect if the calling application is not running under an enabled profiling tool. BeginQuery(QueryHeap, uint) Begins a GPU query. Declaration public override void BeginQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.BeginQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. BeginRenderPassInternal(ref RenderPassDescription) Begin a render pass. Declaration protected override void BeginRenderPassInternal(ref RenderPassDescription description) Parameters Type Name Description RenderPassDescription description The renderPass description RenderPassDescription. Overrides CommandBuffer.BeginRenderPassInternal(ref RenderPassDescription) Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain. Declaration protected override void Blit(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint layerCount The number of array layers to copy. Overrides CommandBuffer.Blit(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) BuildRaytracingAccelerationStructure(BottomLevelASDescription) Perform an bottom level acceleration structure build on the GPU. Declaration public override BottomLevelAS BuildRaytracingAccelerationStructure(BottomLevelASDescription description) Parameters Type Name Description BottomLevelASDescription description Returns Type Description BottomLevelAS Bottom Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(BottomLevelASDescription) BuildRaytracingAccelerationStructure(TopLevelASDescription) Perform an top level acceleration structure build on the GPU. Declaration public override TopLevelAS BuildRaytracingAccelerationStructure(TopLevelASDescription description) Parameters Type Name Description TopLevelASDescription description Returns Type Description TopLevelAS Top Level Acceleration Structure. Overrides CommandBuffer.BuildRaytracingAccelerationStructure(TopLevelASDescription) Commit() Commits this command buffer to the command queue waiting to be execute on GPU after Submit(). Declaration public override void Commit() Overrides CommandBuffer.Commit() CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) Copy this buffer in the destination buffer. Declaration protected override void CopyBufferDataToInternal(Buffer origin, Buffer destination, uint sizeInBytes, uint sourceOffset = 0, uint destinationOffset = 0) Parameters Type Name Description Buffer origin the origin buffer. Buffer destination The destination buffer. uint sizeInBytes The data size in bytes to copy. uint sourceOffset The source buffer offset in bytes. uint destinationOffset The destination buffer offset in bytes. Overrides CommandBuffer.CopyBufferDataToInternal(Buffer, Buffer, uint, uint, uint) CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copies a region from this texture in other texture. Declaration protected override void CopyTextureDataToInternal(Texture source, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBasedArrayLayer, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArrayLayer, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description Texture source The source Texture. uint sourceX The x-coordinate of the upper left corner of the source region. uint sourceY The y-coordinate of the upper left corner of the source region. uint sourceZ The z-coordinate of the upper left corner of the source region. uint sourceMipLevel The mip level to copy from the source texture. uint sourceBasedArrayLayer The starting array layer to copy from the source texture. Texture destination The destination Texture into which data is copied./>. uint destinationX The x-coordinate of the upper left corner of the destination region. uint destinationY The y-coordinate of the upper left corner of the destination region. uint destinationZ The z-coordinate of the upper left corner of the destination region. uint destinationMipLevel The mip level to copy the data into. uint destinationBasedArrayLayer The starting array layer to copy data into. uint width The width in texels of the copy region. uint height The height in texels of the copy region. uint depth The depth in texels of the copy region. uint layerCount The number of array layers to copy. Overrides CommandBuffer.CopyTextureDataToInternal(Texture, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Dispatch(uint, uint, uint) Execute commands in a compute shader from a thread group. Declaration public override void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) Parameters Type Name Description uint threadGroupCountX uint threadGroupCountY uint threadGroupCountZ Overrides CommandBuffer.Dispatch(uint, uint, uint) Remarks You call the Dispatch method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z). DispatchIndirect(Buffer, uint) Execute a command list over one or more thread groups. Declaration public override void DispatchIndirect(Buffer argBuffer, uint offset) Parameters Type Name Description Buffer argBuffer A buffer which must be loaded with data that matches the argument list for Dispatch(uint, uint, uint). uint offset A byte-aligned offset between the start of the buffer and the arguments. Overrides CommandBuffer.DispatchIndirect(Buffer, uint) DispatchRays(DispatchRaysDescription) Launch threads of a ray generation shader. See Initiating raytracing for an overview. Can be called from graphics or compute command lists and bundles. Declaration public override void DispatchRays(DispatchRaysDescription description) Parameters Type Name Description DispatchRaysDescription description Dispatch rays description. Overrides CommandBuffer.DispatchRays(DispatchRaysDescription) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandBuffer.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Draw(uint, uint) Draw non-indexed, non-instanced primitives. Declaration public override void Draw(uint vertexCount, uint startVertexLocation = 0) Parameters Type Name Description uint vertexCount Number of vertices to draw. uint startVertexLocation Index of the first vertex, which is usually an offset in a vertex buffer. Overrides CommandBuffer.Draw(uint, uint) DrawIndexed(uint, uint, uint) Draw indexed, non-instanced primitives. Declaration public override void DrawIndexed(uint indexCount, uint startIndexLocation = 0, uint baseVertexLocation = 0) Parameters Type Name Description uint indexCount Number of indices to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. Overrides CommandBuffer.DrawIndexed(uint, uint, uint) DrawIndexedInstanced(uint, uint, uint, uint, uint) Draw indexed, instanced primitives. Declaration public override void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation = 0, uint baseVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint indexCountPerInstance Number of indices read from the index buffer for each instance. uint instanceCount Number of instances to draw. uint startIndexLocation The location of the first index read by the GPU from the index buffer. uint baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawIndexedInstanced(uint, uint, uint, uint, uint) DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) Draw indexed, instanced, GPU-generated primitives. Declaration public override void DrawIndexedInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawIndexedInstancedIndirect(Buffer, uint, uint, uint) DrawInstanced(uint, uint, uint, uint) Draw non-indexed, instanced primitives. Declaration public override void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation = 0, uint startInstanceLocation = 0) Parameters Type Name Description uint vertexCountPerInstance Number of vertices to draw. uint instanceCount Number of instances to draw. uint startVertexLocation Index of the first vertex. uint startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. Overrides CommandBuffer.DrawInstanced(uint, uint, uint, uint) DrawInstancedIndirect(Buffer, uint, uint, uint) Draw instanced, GPU-generated primitives. Declaration public override void DrawInstancedIndirect(Buffer argBuffer, uint offset, uint drawCount, uint stride) Parameters Type Name Description Buffer argBuffer A buffer containing the GPU generated primitives. uint offset Offset to the start of the GPU generated primitives. uint drawCount It is the number of draws to execute, and can be zero. uint stride It is the byte stride between succesive sets of draw parameters. Overrides CommandBuffer.DrawInstancedIndirect(Buffer, uint, uint, uint) EndDebugMarker() Marks the end of a section of event code. Declaration public override void EndDebugMarker() Overrides CommandBuffer.EndDebugMarker() Remarks EndDebugMarker has no effect if the calling application is not running under an enabled profiling tool. EndInternal() Completes the command buffer. Declaration protected override void EndInternal() Overrides CommandBuffer.EndInternal() EndQuery(QueryHeap, uint) Ends a GPU query. Declaration public override void EndQuery(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap containing the query. uint index The query index. Overrides CommandBuffer.EndQuery(QueryHeap, uint) Remarks This method works only with occusion and binaryOcclusion queryheap types. EndRenderPassInternal() End a render pass. Declaration protected override void EndRenderPassInternal() Overrides CommandBuffer.EndRenderPassInternal() GenerateMipmaps(Texture) Generates mipmaps for the given Texture. The largest mipmap is used to generate all of the lower mipmap levels contained in the Texture. Declaration public override void GenerateMipmaps(Texture texture) Parameters Type Name Description Texture texture The Texture to generate mipmaps for. This Texture must have been created with TextureFlags.GenerateMipmaps. Overrides CommandBuffer.GenerateMipmaps(Texture) InsertDebugMarker(string) Marks a single point of execution in code. This is used by graphics debuggers to identify points of interest in a command stream. Declaration public override void InsertDebugMarker(string label) Parameters Type Name Description string label String that contains the name of the event. Overrides CommandBuffer.InsertDebugMarker(string) Remarks InsertDebugMarker has no effect if the calling application is not running under an enabled profiling tool. Reset() Reset the command buffer to the initial state. Declaration public override void Reset() Overrides CommandBuffer.Reset() ResourceBarrierUnorderedAccessView(Buffer) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Buffer buffer) Parameters Type Name Description Buffer buffer The buffer. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Buffer) ResourceBarrierUnorderedAccessView(Texture) Sets a resource barrier for a texture. Declaration public override void ResourceBarrierUnorderedAccessView(Texture texture) Parameters Type Name Description Texture texture The texture. Overrides CommandBuffer.ResourceBarrierUnorderedAccessView(Texture) SetComputePipelineStateInternal(ComputePipelineState) Sets the compute pipeline state object for this commandbuffer. Declaration protected override void SetComputePipelineStateInternal(ComputePipelineState pipeline) Parameters Type Name Description ComputePipelineState pipeline The compute pipeline state description. Overrides CommandBuffer.SetComputePipelineStateInternal(ComputePipelineState) SetGraphicsPipelineStateInternal(GraphicsPipelineState) Sets the graphics pipeline state object for this commandbuffer. Declaration protected override void SetGraphicsPipelineStateInternal(GraphicsPipelineState pipeline) Parameters Type Name Description GraphicsPipelineState pipeline The graphics pipeline state description. Overrides CommandBuffer.SetGraphicsPipelineStateInternal(GraphicsPipelineState) SetIndexBufferInternal(Buffer, IndexFormat, uint) Set an array of index buffers to the input-assembler stage. Declaration protected override void SetIndexBufferInternal(Buffer buffer, IndexFormat format = IndexFormat.UInt16, uint offset = 0) Parameters Type Name Description Buffer buffer The buffer being bound. IndexFormat format Indices Data Type (Default UInt16). uint offset Offset (in bytes) from the start of the index buffer to the first index to use. Overrides CommandBuffer.SetIndexBufferInternal(Buffer, IndexFormat, uint) SetRaytracingPipelineStateInternal(RaytracingPipelineState) Sets the raytracing pipeline state object for this commandbuffer. Declaration protected override void SetRaytracingPipelineStateInternal(RaytracingPipelineState pipeline) Parameters Type Name Description RaytracingPipelineState pipeline The raytracing pipeline state description. Overrides CommandBuffer.SetRaytracingPipelineStateInternal(RaytracingPipelineState) SetResourceSetInternal(ResourceSet, uint, uint[]) Set the active ResourceSet for the given index. Declaration protected override void SetResourceSetInternal(ResourceSet resourceSet, uint index, uint[] offsets) Parameters Type Name Description ResourceSet resourceSet The new ResourceSet. uint index The resourceSet index. uint[] offsets Overrides CommandBuffer.SetResourceSetInternal(ResourceSet, uint, uint[]) SetScissorRectangles(Rectangle[]) Set an scissor rectangle in a specific slot. Declaration public override void SetScissorRectangles(Rectangle[] rectangles) Parameters Type Name Description Rectangle[] rectangles The array of the scissor rectangles. Overrides CommandBuffer.SetScissorRectangles(Rectangle[]) SetVertexBufferInternal(uint, Buffer, uint) Set an buffers to the input-assembler stage. Declaration protected override void SetVertexBufferInternal(uint slot, Buffer buffer, uint offset = 0) Parameters Type Name Description uint slot The buffer slot. Buffer buffer The buffer being bound. uint offset Offset (in bytes) from the start of buffer to the first vertex to use. Overrides CommandBuffer.SetVertexBufferInternal(uint, Buffer, uint) SetVertexBuffersInternal(Buffer[], int[]) Set an array of buffers to the input-assembler stage. Declaration protected override void SetVertexBuffersInternal(Buffer[] buffers, int[] offsets) Parameters Type Name Description Buffer[] buffers The array of the vertex buffers being bound. int[] offsets Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use. Overrides CommandBuffer.SetVertexBuffersInternal(Buffer[], int[]) SetViewports(Viewport[]) Set a viewport in a specific slot. Declaration public override void SetViewports(Viewport[] viewports) Parameters Type Name Description Viewport[] viewports The array of the viewports. Overrides CommandBuffer.SetViewports(Viewport[]) UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void UpdateBufferDataInternal(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides CommandBuffer.UpdateBufferDataInternal(Buffer, IntPtr, uint, uint) UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) Refit an top level accelerations structure build on the GPU. Declaration public override void UpdateRaytracingAccelerationStructure(ref TopLevelAS tlas, TopLevelASDescription newDescription) Parameters Type Name Description TopLevelAS tlas Top level acceleration structure. TopLevelASDescription newDescription New top level description. Overrides CommandBuffer.UpdateRaytracingAccelerationStructure(ref TopLevelAS, TopLevelASDescription) WriteTimestamp(QueryHeap, uint) Write a device timestamp into a query heap. Declaration public override void WriteTimestamp(QueryHeap heap, uint index) Parameters Type Name Description QueryHeap heap Specifies the queryheap. uint index The query index. Overrides CommandBuffer.WriteTimestamp(QueryHeap, uint) Remarks This method works only with timestamp queryheap type. Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKCommandQueue.html": {
    "href": "api/Evergine.Vulkan.VKCommandQueue.html",
    "title": "Class VKCommandQueue | Evergine Doc",
    "keywords": "Class VKCommandQueue This class represent a queue where commandbuffers waits to be executing by the GPU. Inheritance object CommandQueue VKCommandQueue Implements IDisposable Inherited Members CommandQueue.CommandBufferArraySize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKCommandQueue : CommandQueue, IDisposable Constructors VKCommandQueue(VKGraphicsContext, CommandQueueType) Initializes a new instance of the VKCommandQueue class. Declaration public VKCommandQueue(VKGraphicsContext context, CommandQueueType queueType) Parameters Type Name Description VKGraphicsContext context The graphics context instance. CommandQueueType queueType The commandqueue elements type. Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides CommandQueue.Name Methods CommandBuffer() Gets the next CommandBuffer(). Declaration public override CommandBuffer CommandBuffer() Returns Type Description CommandBuffer The CommandBuffer. Overrides CommandQueue.CommandBuffer() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CommandQueue.Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Submit() Submits a CommandBuffer list to be executed by the GPU. Declaration public override void Submit() Overrides CommandQueue.Submit() WaitIdle() Wait for all command buffers are executed. Declaration public override void WaitIdle() Overrides CommandQueue.WaitIdle() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKComputePipelineState.html": {
    "href": "api/Evergine.Vulkan.VKComputePipelineState.html",
    "title": "Class VKComputePipelineState | Evergine Doc",
    "keywords": "Class VKComputePipelineState This class represents a native pipelineState on Vulkan. Inheritance object PipelineState ComputePipelineState VKComputePipelineState Implements IDisposable Inherited Members ComputePipelineState.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKComputePipelineState : ComputePipelineState, IDisposable Constructors VKComputePipelineState(VKGraphicsContext, ref ComputePipelineDescription) Initializes a new instance of the VKComputePipelineState class. Declaration public VKComputePipelineState(VKGraphicsContext context, ref ComputePipelineDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. ComputePipelineDescription description The compute pipeline state description. Fields NativePipeline The Vulkan native pipeline struct. Declaration public VkPipeline NativePipeline Field Value Type Description VkPipeline NativePipelineLayout The Vulkan native pipeline layout struct. Declaration public VkPipelineLayout NativePipelineLayout Field Value Type Description VkPipelineLayout Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ComputePipelineState.Name Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKDescriptorAllocationToken.html": {
    "href": "api/Evergine.Vulkan.VKDescriptorAllocationToken.html",
    "title": "Struct VKDescriptorAllocationToken | Evergine Doc",
    "keywords": "Struct VKDescriptorAllocationToken This struct represent a helper to allocate new descriptors. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public struct VKDescriptorAllocationToken Constructors VKDescriptorAllocationToken(VkDescriptorPool, VkDescriptorSet) Initializes a new instance of the VKDescriptorAllocationToken struct. Declaration public VKDescriptorAllocationToken(VkDescriptorPool pool, VkDescriptorSet set) Parameters Type Name Description VkDescriptorPool pool The descriptor pool. VkDescriptorSet set The descriptor set type. Fields DescriptorPool The descriptor set pool. Declaration public readonly VkDescriptorPool DescriptorPool Field Value Type Description VkDescriptorPool DescriptorSet The descriptor set type. Declaration public readonly VkDescriptorSet DescriptorSet Field Value Type Description VkDescriptorSet Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKExtensionsMethods.html": {
    "href": "api/Evergine.Vulkan.VKExtensionsMethods.html",
    "title": "Class VKExtensionsMethods | Evergine Doc",
    "keywords": "Class VKExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. Inheritance object VKExtensionsMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public static class VKExtensionsMethods Methods FromVulkan(VkFormat) Converts to Evergine pixel format. Declaration public static PixelFormat FromVulkan(this VkFormat format) Parameters Type Name Description VkFormat format The format to convert. Returns Type Description PixelFormat The Evergine format. GetAccelerationStructureAddress(VkAccelerationStructureKHR, VkDevice) Get address from native vulkan acceleration structure. Declaration public static ulong GetAccelerationStructureAddress(this VkAccelerationStructureKHR accelerationStructure, VkDevice device) Parameters Type Name Description VkAccelerationStructureKHR accelerationStructure Native acceleration structure. VkDevice device Vulkan Device. Returns Type Description ulong Acceleration Structure address. GetBufferAddress(VkBuffer, VkDevice) Get address from native vulkan buffer. Declaration public static ulong GetBufferAddress(this VkBuffer buffer, VkDevice device) Parameters Type Name Description VkBuffer buffer Native buffer. VkDevice device Vulkan device. Returns Type Description ulong Buffer address. ToVulkan(Blend) Converts to Vulkan blendfactor. Declaration public static VkBlendFactor ToVulkan(this Blend blend) Parameters Type Name Description Blend blend The value to convert. Returns Type Description VkBlendFactor The native value. ToVulkan(BlendOperation) Converts to Vulkan blend operation. Declaration public static VkBlendOp ToVulkan(this BlendOperation operation) Parameters Type Name Description BlendOperation operation The value to convert. Returns Type Description VkBlendOp The native value. ToVulkan(ColorWriteChannels) Converts to Vulkan ColorComponentFlags. Declaration public static VkColorComponentFlags ToVulkan(this ColorWriteChannels channels) Parameters Type Name Description ColorWriteChannels channels The value to convert. Returns Type Description VkColorComponentFlags The native value. ToVulkan(ComparisonFunction) Converts to Vulkan compareFunction. Declaration public static VkCompareOp ToVulkan(this ComparisonFunction function) Parameters Type Name Description ComparisonFunction function The value to convert. Returns Type Description VkCompareOp The native value. ToVulkan(CullMode) Converts to native CullMode. Declaration public static VkCullModeFlags ToVulkan(this CullMode cullMode) Parameters Type Name Description CullMode cullMode The value to convert. Returns Type Description VkCullModeFlags The native value. ToVulkan(ElementFormat) Converts to Vulkan vertexformat. Declaration public static VkFormat ToVulkan(this ElementFormat format) Parameters Type Name Description ElementFormat format The value to convert. Returns Type Description VkFormat The native value. ToVulkan(FillMode) Converts to native PolygonMode. Declaration public static VkPolygonMode ToVulkan(this FillMode fillMode) Parameters Type Name Description FillMode fillMode The value to convert. Returns Type Description VkPolygonMode The native value. ToVulkan(IndexFormat) To convert from indexformat to vulkan format. Declaration public static VkIndexType ToVulkan(this IndexFormat format) Parameters Type Name Description IndexFormat format The indexformat to convert. Returns Type Description VkIndexType The result Vulkan format. ToVulkan(PixelFormat, bool) Converts to native pixel format. Declaration public static VkFormat ToVulkan(this PixelFormat format, bool depthFormat) Parameters Type Name Description PixelFormat format The format to convert. bool depthFormat Whether is a depth texture. Returns Type Description VkFormat The native vulkan format. ToVulkan(PrimitiveTopology) Converts to Vulkan primitive topology. Declaration public static VkPrimitiveTopology ToVulkan(this PrimitiveTopology topology) Parameters Type Name Description PrimitiveTopology topology The value to converts. Returns Type Description VkPrimitiveTopology The native value. ToVulkan(AccelerationStructureFlags) To convert from AcelerationStructureFlags to Vulkan VkBuildAccelerationStructureFlagsKHR. Declaration public static VkBuildAccelerationStructureFlagsKHR ToVulkan(this AccelerationStructureFlags flags) Parameters Type Name Description AccelerationStructureFlags flags The flags to convert. Returns Type Description VkBuildAccelerationStructureFlagsKHR The converted flags. ToVulkan(AccelerationStructureInstanceFlags) To convert from instanceflags to Vulkan instance flags. Declaration public static VkGeometryInstanceFlagsKHR ToVulkan(this AccelerationStructureInstanceFlags flags) Parameters Type Name Description AccelerationStructureInstanceFlags flags The flags to convert. Returns Type Description VkGeometryInstanceFlagsKHR The Vulkan flags. ToVulkan(ResourceType, bool) Converts to native DescriptorType. Declaration public static VkDescriptorType ToVulkan(this ResourceType type, bool allowDynamicOffset = false) Parameters Type Name Description ResourceType type The resource type value. bool allowDynamicOffset Allow dynamic offset. Returns Type Description VkDescriptorType The native resourceType. ToVulkan(SamplerBorderColor) Converts to native bordercolor. Declaration public static VkBorderColor ToVulkan(this SamplerBorderColor borderColor) Parameters Type Name Description SamplerBorderColor borderColor The value to convert. Returns Type Description VkBorderColor The MTLSamplerBorderColor value. ToVulkan(ShaderStages) Converts to native shaderStage. Declaration public static VkShaderStageFlags ToVulkan(this ShaderStages stage) Parameters Type Name Description ShaderStages stage The stage value to convert. Returns Type Description VkShaderStageFlags The native shaderStage. ToVulkan(StencilOperation) Converts to Vulkan stencil operation. Declaration public static VkStencilOp ToVulkan(this StencilOperation operation) Parameters Type Name Description StencilOperation operation The value to convert. Returns Type Description VkStencilOp The native value. ToVulkan(TextureAddressMode) Converts to Vulkan sampler address mode. Declaration public static VkSamplerAddressMode ToVulkan(this TextureAddressMode addressMode) Parameters Type Name Description TextureAddressMode addressMode The address mode to convert. Returns Type Description VkSamplerAddressMode The native addressMode. ToVulkan(TextureFilter, out VkFilter, out VkFilter, out VkSamplerMipmapMode) Converts to native Vulkan minFilter, MagFilter and SamplerMipmapMode. Declaration public static void ToVulkan(this TextureFilter filter, out VkFilter minFilter, out VkFilter magFilter, out VkSamplerMipmapMode mipmapMode) Parameters Type Name Description TextureFilter filter The texture filter to convert. VkFilter minFilter The native minFilter. VkFilter magFilter The native magFilter. VkSamplerMipmapMode mipmapMode The native mipmapMode. ToVulkan(TextureSampleCount) Converts to native Samplecount. Declaration public static VkSampleCountFlags ToVulkan(this TextureSampleCount sampleCount) Parameters Type Name Description TextureSampleCount sampleCount The samplecount value to convert. Returns Type Description VkSampleCountFlags The native samplecount."
  },
  "api/Evergine.Vulkan.VKFrameBuffer.html": {
    "href": "api/Evergine.Vulkan.VKFrameBuffer.html",
    "title": "Class VKFrameBuffer | Evergine Doc",
    "keywords": "Class VKFrameBuffer This class represents a native FrameBuffer object on Vulkan. Inheritance object FrameBuffer VKFrameBufferBase VKFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKFrameBuffer : VKFrameBufferBase, ILoadable, IDisposable, IDependencyObject Constructors VKFrameBuffer(VKGraphicsContext, FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the VKFrameBuffer class. Declaration public VKFrameBuffer(VKGraphicsContext context, FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description VKGraphicsContext context The graphics context. FrameBufferAttachment? depthTarget The depth texture which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color textures, all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Fields NativeFrameBuffer The Vulkan frameBuffer struct. Declaration public VkFramebuffer NativeFrameBuffer Field Value Type Description VkFramebuffer defaultRenderPasses Default Render Passes. Declaration public VkRenderPass[] defaultRenderPasses Field Value Type Description VkRenderPass[] Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name Methods CreateImageView(VKTexture, uint, uint, VkImageAspectFlags, bool) Generate a VKImageView from FrameBufferAttachment. Declaration protected VkImageView CreateImageView(VKTexture vkTexture, uint mipSlice, uint firstSlice, VkImageAspectFlags flags = VkImageAspectFlags.VK_IMAGE_ASPECT_COLOR_BIT, bool depthTexture = false) Parameters Type Name Description VKTexture vkTexture Texture instance. uint mipSlice Miplevel slice. uint firstSlice First slice. VkImageAspectFlags flags Aspect flags. bool depthTexture This image view is a depth texture. Returns Type Description VkImageView VkImageView instance. Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) TransitionToFinalLayout(VkCommandBuffer) Transition to ready to use layout. Declaration public override void TransitionToFinalLayout(VkCommandBuffer cb) Parameters Type Name Description VkCommandBuffer cb The command buffer to execute this change. Overrides VKFrameBufferBase.TransitionToFinalLayout(VkCommandBuffer) TransitionToIntermedialLayout(VkCommandBuffer) Transition framebuffer to intermediate layout. Declaration public override void TransitionToIntermedialLayout(VkCommandBuffer cb) Parameters Type Name Description VkCommandBuffer cb The command buffer to execute this change. Overrides VKFrameBufferBase.TransitionToIntermedialLayout(VkCommandBuffer) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKFrameBufferBase.html": {
    "href": "api/Evergine.Vulkan.VKFrameBufferBase.html",
    "title": "Class VKFrameBufferBase | Evergine Doc",
    "keywords": "Class VKFrameBufferBase Abstract class used to have the same interface for swapchainframebuffer and framebuffer objects. Inheritance object FrameBuffer VKFrameBufferBase VKFrameBuffer VKSwapChainFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Name FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.ColorTargets FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Dispose(bool) FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public abstract class VKFrameBufferBase : FrameBuffer, ILoadable, IDisposable, IDependencyObject Constructors VKFrameBufferBase() Initializes a new instance of the VKFrameBufferBase class. Declaration public VKFrameBufferBase() VKFrameBufferBase(FrameBufferAttachment?, FrameBufferAttachment[], bool) Initializes a new instance of the VKFrameBufferBase class. Declaration public VKFrameBufferBase(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depthtarget attachment. FrameBufferAttachment[] colorTargets The colortarget attachment. bool disposeAttachments Whether the attachment texture should be destroy with this object or not. Methods TransitionToFinalLayout(VkCommandBuffer) Transition to ready to use layout. Declaration public abstract void TransitionToFinalLayout(VkCommandBuffer cb) Parameters Type Name Description VkCommandBuffer cb The command buffer to execute this change. TransitionToIntermedialLayout(VkCommandBuffer) Transition framebuffer to intermediate layout. Declaration public abstract void TransitionToIntermedialLayout(VkCommandBuffer cb) Parameters Type Name Description VkCommandBuffer cb The command buffer to execute this change. Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKGraphicsContext.html": {
    "href": "api/Evergine.Vulkan.VKGraphicsContext.html",
    "title": "Class VKGraphicsContext | Evergine Doc",
    "keywords": "Class VKGraphicsContext Graphics context on Vulkan. Inheritance object GraphicsContext VKGraphicsContext Implements IDisposable IGetNativePointers Inherited Members GraphicsContext.TimestampFrequency GraphicsContext.DefaultSampler GraphicsContext.ValidationLayer GraphicsContext.IsValidationLayerEnabled GraphicsContext.Factory GraphicsContext.AvailablePointerKeys GraphicsContext.DefaultTextureUploaderSize GraphicsContext.DefaultBufferUploaderSize GraphicsContext.CreateDevice(ValidationLayer) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint) GraphicsContext.UpdateBufferData<T>(Buffer, T[], uint, uint) GraphicsContext.UpdateBufferData<T>(Buffer, ref T, uint) GraphicsContext.UpdateBufferData(Buffer, IntPtr, uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint) GraphicsContext.UpdateTextureData<T>(Texture, T[], uint, uint) GraphicsContext.UpdateTextureData<T>(Texture, ref T, uint) GraphicsContext.ShaderCompile(string, string, ShaderStages) GraphicsContext.Dispose() GraphicsContext.CreateDefaultSampler() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKGraphicsContext : GraphicsContext, IDisposable, IGetNativePointers Constructors VKGraphicsContext() Initializes a new instance of the VKGraphicsContext class. Declaration public VKGraphicsContext() VKGraphicsContext(IEnumerable<string>, IEnumerable<string>) Initializes a new instance of the VKGraphicsContext class. Declaration public VKGraphicsContext(IEnumerable<string> deviceExtensionsToEnable, IEnumerable<string> instanceExtensionsToEnable) Parameters Type Name Description IEnumerable<string> deviceExtensionsToEnable Set of device extensions to be enabled for this application. IEnumerable<string> instanceExtensionsToEnable Set of device instance extensions to be enabled for this application. Fields CopyCommandBuffer The vulkan command buffer used to copy commands. Declaration public VkCommandBuffer CopyCommandBuffer Field Value Type Description VkCommandBuffer DeviceExtensionsToEnable Set of device extensions to be enabled for this application. Declaration public readonly List<string> DeviceExtensionsToEnable Field Value Type Description List<string> Remarks Must be set before create device. InstanceExtensionsToEnable Set of device instance extensions to be enabled for this application. Declaration public readonly List<string> InstanceExtensionsToEnable Field Value Type Description List<string> Remarks Must be set before create device. VkDevice Vulkan device object. Declaration public VkDevice VkDevice Field Value Type Description VkDevice VkInstance Vulkan instance object. Declaration public VkInstance VkInstance Field Value Type Description VkInstance VkPhysicalDevice Vulkan physical device object. Declaration public VkPhysicalDevice VkPhysicalDevice Field Value Type Description VkPhysicalDevice VkPhysicalDeviceMemoryProperties Vulkan physical device memory properties. Declaration public VkPhysicalDeviceMemoryProperties VkPhysicalDeviceMemoryProperties Field Value Type Description VkPhysicalDeviceMemoryProperties disposed Whether the object is disposed. Declaration protected bool disposed Field Value Type Description bool Properties BackendType Gets the backend type (DirectX, OpenGL ...) Declaration public override GraphicsBackend BackendType { get; } Property Value Type Description GraphicsBackend Overrides GraphicsContext.BackendType Capabilities Gets the capabilities of this graphics context. Declaration public override GraphicsContextCapabilities Capabilities { get; } Property Value Type Description GraphicsContextCapabilities Overrides GraphicsContext.Capabilities NativeDevicePointer Gets the native device pointer. Declaration public override IntPtr NativeDevicePointer { get; } Property Value Type Description IntPtr Overrides GraphicsContext.NativeDevicePointer Methods CreateDeviceInternal() Initialize the graphics context to be used in a compute shader. Declaration public override void CreateDeviceInternal() Overrides GraphicsContext.CreateDeviceInternal() CreateSwapChain(SwapChainDescription) Initialize the swapchain. Declaration public override SwapChain CreateSwapChain(SwapChainDescription description) Parameters Type Name Description SwapChainDescription description The swapchain descriptor. Returns Type Description SwapChain Created Swapchain. Overrides GraphicsContext.CreateSwapChain(SwapChainDescription) Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides GraphicsContext.Dispose(bool) GenerateTextureMipmapping(Texture) Generate mipmapping texture levels. Declaration public override bool GenerateTextureMipmapping(Texture texture) Parameters Type Name Description Texture texture The texture to generate mipmapping. Returns Type Description bool True if the mipmapping has been generated. Overrides GraphicsContext.GenerateTextureMipmapping(Texture) GetNativePointer(string, out IntPtr) Obtain a native pointer of this graphics context using the given key. Declaration public override bool GetNativePointer(string pointerKey, out IntPtr nativePointer) Parameters Type Name Description string pointerKey The pointer key. IntPtr nativePointer The native pointer. Returns Type Description bool True if there are an available pointer with this key. Overrides GraphicsContext.GetNativePointer(string, out IntPtr) InternalUpdateBufferData(Buffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration protected override void InternalUpdateBufferData(Buffer buffer, IntPtr source, uint sourceSizeInBytes, uint destinationOffsetInBytes = 0) Parameters Type Name Description Buffer buffer Buffer instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint destinationOffsetInBytes The offset in bytes. Overrides GraphicsContext.InternalUpdateBufferData(Buffer, IntPtr, uint, uint) MapMemory(GraphicsResource, MapMode, uint) Maps a Buffer or Texture into a CPU-accessible data region. Declaration public override MappedResource MapMemory(GraphicsResource resource, MapMode mode, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. MapMode mode The MapMode used to map the resource. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Returns Type Description MappedResource A MappedResource structure describing the mapped data region. Overrides GraphicsContext.MapMemory(GraphicsResource, MapMode, uint) ShaderCompile(string, string, ShaderStages, CompilerParameters) Converts the shader source into bytecode. Declaration public override CompilationResult ShaderCompile(string shaderSource, string entryPoint, ShaderStages stage, CompilerParameters parameters) Parameters Type Name Description string shaderSource The shader source text. string entryPoint The entrypoint function name. ShaderStages stage The shader stage, ShaderStages. CompilerParameters parameters The compiler parameters. Returns Type Description CompilationResult The shader bytecodes. Overrides GraphicsContext.ShaderCompile(string, string, ShaderStages, CompilerParameters) SyncUpcopyQueue() Sync the current buffer data in the copyQueue. Internal function used in the uploadbuffer strategy. Declaration public override void SyncUpcopyQueue() Overrides GraphicsContext.SyncUpcopyQueue() UnmapMemory(GraphicsResource, uint) Invalidates a previously-mapped data region for the given Buffer or Texture. Declaration public override void UnmapMemory(GraphicsResource resource, uint subResource = 0) Parameters Type Name Description GraphicsResource resource The graphics resource to map. uint subResource The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures. Overrides GraphicsContext.UnmapMemory(GraphicsResource, uint) UpdateTextureData(Texture, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public override void UpdateTextureData(Texture texture, IntPtr source, uint sourceSizeInBytes, uint subResource) Parameters Type Name Description Texture texture Texture instance. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subResource index. Overrides GraphicsContext.UpdateTextureData(Texture, IntPtr, uint, uint) Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKGraphicsPipelineState.html": {
    "href": "api/Evergine.Vulkan.VKGraphicsPipelineState.html",
    "title": "Class VKGraphicsPipelineState | Evergine Doc",
    "keywords": "Class VKGraphicsPipelineState This class represents a native pipelineState on Vulkan. Inheritance object PipelineState GraphicsPipelineState VKGraphicsPipelineState Implements IDisposable Inherited Members GraphicsPipelineState.Description GraphicsPipelineState.InvalidatedViewport object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKGraphicsPipelineState : GraphicsPipelineState, IDisposable Constructors VKGraphicsPipelineState(VKGraphicsContext, ref GraphicsPipelineDescription) Initializes a new instance of the VKGraphicsPipelineState class. Declaration public VKGraphicsPipelineState(VKGraphicsContext context, ref GraphicsPipelineDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. GraphicsPipelineDescription description The graphics pipeline state description. Fields NativePipeline The Vulkan native pipeline struct. Declaration public VkPipeline NativePipeline Field Value Type Description VkPipeline NativePipelineLayout The Vulkan native pipeline layout struct. Declaration public VkPipelineLayout NativePipelineLayout Field Value Type Description VkPipelineLayout Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides GraphicsPipelineState.Name Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKHelpers.html": {
    "href": "api/Evergine.Vulkan.VKHelpers.html",
    "title": "Class VKHelpers | Evergine Doc",
    "keywords": "Class VKHelpers Set of Vulkan helpers. Inheritance object VKHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public static class VKHelpers Methods CheckErrors(GraphicsContext, VkResult) Check errors. Declaration [Conditional(\"DEBUG\")] public static void CheckErrors(GraphicsContext context, VkResult result) Parameters Type Name Description GraphicsContext context The graphics context. VkResult result The result of last operation. EnumerateInstanceExtensions(GraphicsContext) Returns up to requested number of global extension properties. Declaration public static string[] EnumerateInstanceExtensions(GraphicsContext context) Parameters Type Name Description GraphicsContext context The graphics context. Returns Type Description string[] A string array of supported extensions. EnumerateInstanceLayers(GraphicsContext) Returns up to requested number of global layer properties. Declaration public static string[] EnumerateInstanceLayers(GraphicsContext context) Parameters Type Name Description GraphicsContext context The graphics context. Returns Type Description string[] The string array of supported layers. FindMemoryType(VKGraphicsContext, uint, VkMemoryPropertyFlags) Find a memory type. Declaration public static int FindMemoryType(VKGraphicsContext context, uint typeFilter, VkMemoryPropertyFlags properties) Parameters Type Name Description VKGraphicsContext context The graphics context. uint typeFilter The filter type. VkMemoryPropertyFlags properties The memory properties. Returns Type Description int A value > 0 if everything was ok. GetBinding(LayoutElementDescription) Gets the bindings offset to avoid overlap. Declaration public static uint GetBinding(LayoutElementDescription element) Parameters Type Name Description LayoutElementDescription element The layout element description. Returns Type Description uint The first slop available. GetMemoryType(VkPhysicalDeviceMemoryProperties, uint) Gets the memory type. Declaration public static VkMemoryType GetMemoryType(this VkPhysicalDeviceMemoryProperties memoryProperties, uint index) Parameters Type Name Description VkPhysicalDeviceMemoryProperties memoryProperties The device memory properties. uint index The memory index. Returns Type Description VkMemoryType The result memory type. ToPointer(string) Helper to convert a string to a byte* pointer. Declaration public static byte* ToPointer(this string text) Parameters Type Name Description string text The string. Returns Type Description byte* The byte* pointer in unmanaged memory. ToTransformMatrix(Matrix4x4) Convert a Matrix4x4 in a Vulkan transform matrix 3x4. Declaration public static VkTransformMatrixKHR ToTransformMatrix(this Matrix4x4 m) Parameters Type Name Description Matrix4x4 m The matrix to convert. Returns Type Description VkTransformMatrixKHR The Vulkan transform matrix. Version(uint, uint, uint) Create a valide Api version uint. Declaration public static uint Version(uint major, uint minor, uint patch) Parameters Type Name Description uint major The major. uint minor The minor. uint patch The patch. Returns Type Description uint Vulkan api version."
  },
  "api/Evergine.Vulkan.VKQueryHeap.html": {
    "href": "api/Evergine.Vulkan.VKQueryHeap.html",
    "title": "Class VKQueryHeap | Evergine Doc",
    "keywords": "Class VKQueryHeap Represents a Vulkan queryheap object. Inheritance object GraphicsResource QueryHeap VKQueryHeap Implements IDisposable Inherited Members QueryHeap.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKQueryHeap : QueryHeap, IDisposable Constructors VKQueryHeap(VKGraphicsContext, ref QueryHeapDescription) Initializes a new instance of the VKQueryHeap class. Declaration public VKQueryHeap(VKGraphicsContext context, ref QueryHeapDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. QueryHeapDescription description The queryheap description. Fields nativeQueryHeap The vulkan native object. Declaration public VkQueryPool nativeQueryHeap Field Value Type Description VkQueryPool Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() ReadData(uint, uint, ulong[]) Extract data from one or more queries. Declaration public override bool ReadData(uint startIndex, uint count, ulong[] results) Parameters Type Name Description uint startIndex Specifies the index of the fist query to read. uint count Specifies the number of queries to read. ulong[] results ulong buffer with the extracted queries data. Returns Type Description bool Return true if all queries to read are available and false if not. Overrides QueryHeap.ReadData(uint, uint, ulong[]) Remarks If the result is false, the results will conttains the latest available results. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKRaytracingHelpers.BufferData.html": {
    "href": "api/Evergine.Vulkan.VKRaytracingHelpers.BufferData.html",
    "title": "Struct VKRaytracingHelpers.BufferData | Evergine Doc",
    "keywords": "Struct VKRaytracingHelpers.BufferData Buffer data. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public struct VKRaytracingHelpers.BufferData Fields Buffer Buffer vulkan resource. Declaration public VkBuffer Buffer Field Value Type Description VkBuffer Memory Device memory resource. Declaration public VkDeviceMemory Memory Field Value Type Description VkDeviceMemory Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKRaytracingHelpers.html": {
    "href": "api/Evergine.Vulkan.VKRaytracingHelpers.html",
    "title": "Class VKRaytracingHelpers | Evergine Doc",
    "keywords": "Class VKRaytracingHelpers Raytracing helpers. Inheritance object VKRaytracingHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public static class VKRaytracingHelpers Methods CreateBuffer(VKGraphicsContext, ulong, VkBufferUsageFlags) Create Acceleration Structure buffer. Declaration public static VKRaytracingHelpers.BufferData CreateBuffer(VKGraphicsContext context, ulong bufferSize, VkBufferUsageFlags usage) Parameters Type Name Description VKGraphicsContext context The vulkan context. ulong bufferSize The buffer size. VkBufferUsageFlags usage The buffer usage. Returns Type Description VKRaytracingHelpers.BufferData The buffer memory address. CreateMappedBuffer(VKGraphicsContext, IntPtr, ulong, VkBufferUsageFlags) Create a stagging buffer from data. Declaration public static VKRaytracingHelpers.BufferData CreateMappedBuffer(VKGraphicsContext context, IntPtr data, ulong bufferSize, VkBufferUsageFlags usage) Parameters Type Name Description VKGraphicsContext context The vulkan context. IntPtr data The source data pointer. ulong bufferSize The buffer size. VkBufferUsageFlags usage The buffer usage. Returns Type Description VKRaytracingHelpers.BufferData The buffer memory address."
  },
  "api/Evergine.Vulkan.VKRaytracingPipelineState.html": {
    "href": "api/Evergine.Vulkan.VKRaytracingPipelineState.html",
    "title": "Class VKRaytracingPipelineState | Evergine Doc",
    "keywords": "Class VKRaytracingPipelineState Vulkan Raytracing pipeline state. Inheritance object PipelineState RaytracingPipelineState VKRaytracingPipelineState Implements IDisposable Inherited Members RaytracingPipelineState.disposed RaytracingPipelineState.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKRaytracingPipelineState : RaytracingPipelineState, IDisposable Constructors VKRaytracingPipelineState(VKGraphicsContext, ref RaytracingPipelineDescription) Initializes a new instance of the VKRaytracingPipelineState class. Declaration public VKRaytracingPipelineState(VKGraphicsContext context, ref RaytracingPipelineDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. RaytracingPipelineDescription description The raytracing pipeline state description. Fields NativePipeline The Vulkan native pipeline struct. Declaration public VkPipeline NativePipeline Field Value Type Description VkPipeline NativePipelineLayout The Vulkan native pipeline layout struct. Declaration public VkPipelineLayout NativePipelineLayout Field Value Type Description VkPipelineLayout shaderBindingTable Generated shader binding table. Declaration public VKShaderTable shaderBindingTable Field Value Type Description VKShaderTable Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides PipelineState.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKResourceFactory.html": {
    "href": "api/Evergine.Vulkan.VKResourceFactory.html",
    "title": "Class VKResourceFactory | Evergine Doc",
    "keywords": "Class VKResourceFactory The Vulkan version of the resource factory. Inheritance object ResourceFactory VKResourceFactory Inherited Members ResourceFactory.CreateCommandQueue(CommandQueueType) ResourceFactory.CreateGraphicsPipeline(ref GraphicsPipelineDescription) ResourceFactory.CreateComputePipeline(ref ComputePipelineDescription) ResourceFactory.CreateRaytracingPipeline(ref RaytracingPipelineDescription) ResourceFactory.CreateTexture(ref TextureDescription, string) ResourceFactory.GetTextureFromNativePointer(IntPtr, ref TextureDescription) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, string) ResourceFactory.CreateTexture(DataBox[], ref TextureDescription, ref SamplerStateDescription, string) ResourceFactory.CreateBuffer(ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(T[], ref BufferDescription, string) ResourceFactory.CreateBuffer<T>(ref T, ref BufferDescription, string) ResourceFactory.CreateBuffer(IntPtr, ref BufferDescription, string) ResourceFactory.CreateShader(ref ShaderDescription) ResourceFactory.CreateSamplerState(ref SamplerStateDescription) ResourceFactory.CreateFrameBuffer(uint, uint, PixelFormat, PixelFormat, string) ResourceFactory.CreateFrameBuffer(FrameBufferAttachment?, FrameBufferAttachment[], bool) ResourceFactory.CreateResourceLayout(ref ResourceLayoutDescription) ResourceFactory.CreateResourceSet(ref ResourceSetDescription) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKResourceFactory : ResourceFactory Constructors VKResourceFactory(VKGraphicsContext) Initializes a new instance of the VKResourceFactory class. Declaration public VKResourceFactory(VKGraphicsContext graphicsContext) Parameters Type Name Description VKGraphicsContext graphicsContext The Graphics Context. Properties GraphicsContext Gets the generic graphicsContext. Declaration protected override GraphicsContext GraphicsContext { get; } Property Value Type Description GraphicsContext Overrides ResourceFactory.GraphicsContext Methods CreateBufferInternal(IntPtr, ref BufferDescription) Creates a Buffer instance. Declaration protected override Buffer CreateBufferInternal(IntPtr data, ref BufferDescription description) Parameters Type Name Description IntPtr data Data pointer. BufferDescription description The index buffer description. Returns Type Description Buffer The new buffer. Overrides ResourceFactory.CreateBufferInternal(IntPtr, ref BufferDescription) CreateCommandQueueInternal(CommandQueueType) Creates a CommandQueue instance. Declaration protected override CommandQueue CreateCommandQueueInternal(CommandQueueType queueType) Parameters Type Name Description CommandQueueType queueType The commandQueue type, CommandQueueType. Returns Type Description CommandQueue The new commandQueue. Overrides ResourceFactory.CreateCommandQueueInternal(CommandQueueType) CreateComputePipelineInternal(ref ComputePipelineDescription) Creates a ComputePipelineState instance. Declaration protected override ComputePipelineState CreateComputePipelineInternal(ref ComputePipelineDescription description) Parameters Type Name Description ComputePipelineDescription description The compute pipelinestate description. Returns Type Description ComputePipelineState The new pipelinestate. Overrides ResourceFactory.CreateComputePipelineInternal(ref ComputePipelineDescription) CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) Create a FrameBuffer instance. Declaration protected override FrameBuffer CreateFrameBufferInternal(FrameBufferAttachment? depthTarget, FrameBufferAttachment[] colorTargets, bool disposeAttachments) Parameters Type Name Description FrameBufferAttachment? depthTarget The depth FrameBufferAttachment which must have been created with DepthStencil flag. FrameBufferAttachment[] colorTargets The array of color FrameBufferAttachment , all of which must have been created with RenderTarget flags. bool disposeAttachments When this framebuffer is disposed, dispose the attachment textures too. Returns Type Description FrameBuffer The new framebuffer. Overrides ResourceFactory.CreateFrameBufferInternal(FrameBufferAttachment?, FrameBufferAttachment[], bool) CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) Creates a GraphicsPipelineState instance. Declaration protected override GraphicsPipelineState CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription description) Parameters Type Name Description GraphicsPipelineDescription description The graphics pipelinestate description. Returns Type Description GraphicsPipelineState The new pipelinestate. Overrides ResourceFactory.CreateGraphicsPipelineInternal(ref GraphicsPipelineDescription) CreateQueryHeap(ref QueryHeapDescription) Create a QueryHeap instance. Declaration public override QueryHeap CreateQueryHeap(ref QueryHeapDescription description) Parameters Type Name Description QueryHeapDescription description The queryheap description. Returns Type Description QueryHeap The new queryheap. Overrides ResourceFactory.CreateQueryHeap(ref QueryHeapDescription) CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) Creates a RaytracingPipelineState instance. Declaration protected override RaytracingPipelineState CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription description) Parameters Type Name Description RaytracingPipelineDescription description The raytracing pipelinestate description. Returns Type Description RaytracingPipelineState The new pipelinestate. Overrides ResourceFactory.CreateRaytracingPipelineInternal(ref RaytracingPipelineDescription) CreateResourceLayoutInternal(ref ResourceLayoutDescription) Create a new ResourceLayout. Declaration protected override ResourceLayout CreateResourceLayoutInternal(ref ResourceLayoutDescription description) Parameters Type Name Description ResourceLayoutDescription description The descriptions for all elements in this new resourceLayout. Returns Type Description ResourceLayout A new resourceLayout object. Overrides ResourceFactory.CreateResourceLayoutInternal(ref ResourceLayoutDescription) CreateResourceSetInternal(ref ResourceSetDescription) Create a new ResourceSet. Declaration protected override ResourceSet CreateResourceSetInternal(ref ResourceSetDescription description) Parameters Type Name Description ResourceSetDescription description The descriptions for all elements in this new resourceSet. Returns Type Description ResourceSet A new resourceSet object. Overrides ResourceFactory.CreateResourceSetInternal(ref ResourceSetDescription) CreateSamplerStateInternal(ref SamplerStateDescription) Creates a SamplerState instance. Declaration protected override SamplerState CreateSamplerStateInternal(ref SamplerStateDescription description) Parameters Type Name Description SamplerStateDescription description The sampler state description. Returns Type Description SamplerState The new samplerstate. Overrides ResourceFactory.CreateSamplerStateInternal(ref SamplerStateDescription) CreateShaderInternal(ref ShaderDescription) Create a Shader instance. Declaration protected override Shader CreateShaderInternal(ref ShaderDescription description) Parameters Type Name Description ShaderDescription description The shader description. Returns Type Description Shader The new shader. Overrides ResourceFactory.CreateShaderInternal(ref ShaderDescription) CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) Creates a Texture instance. Declaration protected override Texture CreateTextureInternal(DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description DataBox[] data The texture data. TextureDescription description The texture description. SamplerStateDescription samplerState The sampler state description SamplerStateDescription struct. Returns Type Description Texture The new texture. Overrides ResourceFactory.CreateTextureInternal(DataBox[], ref TextureDescription, ref SamplerStateDescription) GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Gets a Texture instance from an existing texture using the specified native pointer. Declaration protected override Texture GetTextureFromNativePointerInternal(IntPtr texturePointer, ref TextureDescription textureDescription) Parameters Type Name Description IntPtr texturePointer The pointer of the texture. TextureDescription textureDescription The texture description of the already created texture. Returns Type Description Texture The texture instance. Overrides ResourceFactory.GetTextureFromNativePointerInternal(IntPtr, ref TextureDescription) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKResourceLayout.html": {
    "href": "api/Evergine.Vulkan.VKResourceLayout.html",
    "title": "Class VKResourceLayout | Evergine Doc",
    "keywords": "Class VKResourceLayout The Vulkan implementation of a ResourceLayout object. Inheritance object ResourceLayout VKResourceLayout Implements IDisposable Inherited Members ResourceLayout.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKResourceLayout : ResourceLayout, IDisposable Constructors VKResourceLayout(VKGraphicsContext, ref ResourceLayoutDescription) Initializes a new instance of the VKResourceLayout class. Declaration public VKResourceLayout(VKGraphicsContext context, ref ResourceLayoutDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. ResourceLayoutDescription description The layout description. Fields DescriptorSetLayout The Vulkan desriptorset layout struct. Declaration public readonly VkDescriptorSetLayout DescriptorSetLayout Field Value Type Description VkDescriptorSetLayout Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceLayout.Name Methods Dispose() Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceLayout.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKResourceSet.html": {
    "href": "api/Evergine.Vulkan.VKResourceSet.html",
    "title": "Class VKResourceSet | Evergine Doc",
    "keywords": "Class VKResourceSet The Vulkan implementation of a ResourceSet object. Inheritance object ResourceSet VKResourceSet Implements IDisposable Inherited Members ResourceSet.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKResourceSet : ResourceSet, IDisposable Constructors VKResourceSet(VKGraphicsContext, ref ResourceSetDescription) Initializes a new instance of the VKResourceSet class. Declaration public VKResourceSet(VKGraphicsContext context, ref ResourceSetDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. ResourceSetDescription description The resourceSet description. Fields DescriptorAllocationToken The Vulkan descriptor allocation token. Declaration public readonly VKDescriptorAllocationToken DescriptorAllocationToken Field Value Type Description VKDescriptorAllocationToken DynamicBufferCount The number of dynamic buffers. Declaration public readonly uint DynamicBufferCount Field Value Type Description uint Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides ResourceSet.Name Methods Dispose() /// Frees managed and unmanaged resources. Declaration public override void Dispose() Overrides ResourceSet.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKSamplerState.html": {
    "href": "api/Evergine.Vulkan.VKSamplerState.html",
    "title": "Class VKSamplerState | Evergine Doc",
    "keywords": "Class VKSamplerState This class represents the a Vulkan samplerState object. Inheritance object GraphicsResource SamplerState VKSamplerState Implements ILoadable IDisposable IDependencyObject Inherited Members SamplerState.Id SamplerState.ReaderVersion SamplerState.Invalidated SamplerState.Dependencies SamplerState.Description SamplerState.Invalidate(ILoadable) SamplerState.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKSamplerState : SamplerState, ILoadable, IDisposable, IDependencyObject Constructors VKSamplerState(GraphicsContext, ref SamplerStateDescription) Initializes a new instance of the VKSamplerState class. Declaration public VKSamplerState(GraphicsContext context, ref SamplerStateDescription description) Parameters Type Name Description GraphicsContext context The graphics context. GraphicsContext. SamplerStateDescription description The sampler state description. SamplerStateDescription. Fields NativeSampler The native sampler state. Declaration public readonly VkSampler NativeSampler Field Value Type Description VkSampler Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SamplerState.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides SamplerState.Dispose() Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKShader.html": {
    "href": "api/Evergine.Vulkan.VKShader.html",
    "title": "Class VKShader | Evergine Doc",
    "keywords": "Class VKShader This class represents a native shader object on Metal. Inheritance object GraphicsResource Shader VKShader Implements IDisposable Inherited Members Shader.Description Shader.GetHashCode() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKShader : Shader, IDisposable Constructors VKShader(GraphicsContext, ref ShaderDescription) Initializes a new instance of the VKShader class. Declaration public VKShader(GraphicsContext context, ref ShaderDescription description) Parameters Type Name Description GraphicsContext context The graphics context. ShaderDescription description The shader description. Fields ShaderModule The native vulkan shader object. Declaration public readonly VkShaderModule ShaderModule Field Value Type Description VkShaderModule Properties Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Shader.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer ShaderStateInfo Gets the ShaderStateInfo using in the pipelinestate. Declaration public VkPipelineShaderStageCreateInfo ShaderStateInfo { get; } Property Value Type Description VkPipelineShaderStageCreateInfo Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKShaderTable.html": {
    "href": "api/Evergine.Vulkan.VKShaderTable.html",
    "title": "Class VKShaderTable | Evergine Doc",
    "keywords": "Class VKShaderTable Vulkan Shader binding table. Inheritance object VKShaderTable Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKShaderTable : IDisposable Constructors VKShaderTable(VKGraphicsContext) Initializes a new instance of the VKShaderTable class. Declaration public VKShaderTable(VKGraphicsContext graphicsContext) Parameters Type Name Description VKGraphicsContext graphicsContext Vulkan Graphics Context. Fields disposed Holds if the instance has been disposed. Declaration protected bool disposed Field Value Type Description bool Properties Disposed Gets a value indicating whether the graphic resource has been disposed. Declaration public bool Disposed { get; } Property Value Type Description bool Methods AddHitGroupProgram(string) Add HitGroup Program. Declaration public void AddHitGroupProgram(string shaderIdentifier) Parameters Type Name Description string shaderIdentifier Shader identifier. AddMissProgram(string) Add Miss Program. Declaration public void AddMissProgram(string shaderIdentifier) Parameters Type Name Description string shaderIdentifier Shader identifier. AddRayGenProgram(string) Add Raygen Program. Declaration public void AddRayGenProgram(string shaderIdentifier) Parameters Type Name Description string shaderIdentifier Shader identifier. AlignTo(uint, uint) ShaderBindingTable alignment. Declaration public uint AlignTo(uint value, uint alignment) Parameters Type Name Description uint value Record size. uint alignment Record alignment. Returns Type Description uint Record size aligned. Dispose() Declaration public void Dispose() Generate(VkPipeline) Generate ShaderTable (filling buffer). Declaration public void Generate(VkPipeline pipeline) Parameters Type Name Description VkPipeline pipeline Raytracing pipeline. GetHitGroupSize() Gets Ray generation entry size. Declaration public ulong GetHitGroupSize() Returns Type Description ulong Entry size. GetHitGroupStartAddress() Get HitGroup start address. Declaration public ulong GetHitGroupStartAddress() Returns Type Description ulong buffer adress. GetHitGroupStride() Gets Miss stride. Declaration public ulong GetHitGroupStride() Returns Type Description ulong Entry stride. GetMissSize() Gets Ray generation entry size. Declaration public ulong GetMissSize() Returns Type Description ulong Entry size. GetMissStartAddress() Get Miss start address. Declaration public ulong GetMissStartAddress() Returns Type Description ulong buffer adress. GetMissStride() Gets Miss stride. Declaration public ulong GetMissStride() Returns Type Description ulong Entry stride. GetRayGenSize() Gets Ray generation entry size. Declaration public ulong GetRayGenSize() Returns Type Description ulong Entry size. GetRayGenStartAddress() Get Ray generation start address. Declaration public ulong GetRayGenStartAddress() Returns Type Description ulong buffer adress. GetRayGenStride() Gets Ray generation stride. Declaration public ulong GetRayGenStride() Returns Type Description ulong Entry stride. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKShaderTable.ShaderTableRecord.html": {
    "href": "api/Evergine.Vulkan.VKShaderTable.ShaderTableRecord.html",
    "title": "Struct VKShaderTable.ShaderTableRecord | Evergine Doc",
    "keywords": "Struct VKShaderTable.ShaderTableRecord Shader Table Entry. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public struct VKShaderTable.ShaderTableRecord Constructors ShaderTableRecord(string, RecordType) Initializes a new instance of the VKShaderTable.ShaderTableRecord struct. Declaration public ShaderTableRecord(string name, VKShaderTable.ShaderTableRecord.RecordType type) Parameters Type Name Description string name Pipeline shader identifier. VKShaderTable.ShaderTableRecord.RecordType type Record type. Fields name Pipeline shader identifier. Declaration public string name Field Value Type Description string type Record type. Declaration public VKShaderTable.ShaderTableRecord.RecordType type Field Value Type Description VKShaderTable.ShaderTableRecord.RecordType Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKShaderTable.ShaderTableRecord.RecordType.html": {
    "href": "api/Evergine.Vulkan.VKShaderTable.ShaderTableRecord.RecordType.html",
    "title": "Enum VKShaderTable.ShaderTableRecord.RecordType | Evergine Doc",
    "keywords": "Enum VKShaderTable.ShaderTableRecord.RecordType Record type. Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public enum VKShaderTable.ShaderTableRecord.RecordType Fields Name Description Hit Hit record. Miss Miss record. RayGen RayGen record. Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKSwapChain.html": {
    "href": "api/Evergine.Vulkan.VKSwapChain.html",
    "title": "Class VKSwapChain | Evergine Doc",
    "keywords": "Class VKSwapChain This class represents a native swapchain object on Vulkan. Inheritance object SwapChain VKSwapChain Implements IDisposable Inherited Members SwapChain.disposed SwapChain.GraphicsContext SwapChain.NativeSwapChainPointer SwapChain.SwapChainDescription SwapChain.FrameBuffer SwapChain.InitFrame() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKSwapChain : SwapChain, IDisposable Constructors VKSwapChain(GraphicsContext, SwapChainDescription) Initializes a new instance of the VKSwapChain class. Declaration public VKSwapChain(GraphicsContext context, SwapChainDescription description) Parameters Type Name Description GraphicsContext context Graphics Context. SwapChainDescription description SwapChain description. Properties CurrentBackBufferIndex Gets or sets the active backbuffer index. Declaration public int CurrentBackBufferIndex { get; set; } Property Value Type Description int Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides SwapChain.Name VerticalSync Gets or sets a value indicating whether vertical synchronization is enable or not. Declaration public override bool VerticalSync { get; set; } Property Value Type Description bool Overrides SwapChain.VerticalSync Methods ANativeWindow_fromSurface(IntPtr, IntPtr) Create a ANativeWindows surface. Declaration public static extern IntPtr ANativeWindow_fromSurface(IntPtr jniEnv, IntPtr surface) Parameters Type Name Description IntPtr jniEnv The jni environment pointer. IntPtr surface The native surface pointer. Returns Type Description IntPtr A new ANativeWindows surface. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides SwapChain.Dispose() GetCurrentFramebufferTexture() Gets the current Framebuffer Texture. Declaration public override Texture GetCurrentFramebufferTexture() Returns Type Description Texture Framebuffer texture. Overrides SwapChain.GetCurrentFramebufferTexture() Present() Presents a rendered image to the user. Declaration public override void Present() Overrides SwapChain.Present() RefreshSurfaceInfo(SurfaceInfo) The swapchain surface info has changed. Declaration public override void RefreshSurfaceInfo(SurfaceInfo surfaceInfo) Parameters Type Name Description SurfaceInfo surfaceInfo The surface info. Overrides SwapChain.RefreshSurfaceInfo(SurfaceInfo) ResizeSwapChain(uint, uint) Resize SwapChain. Declaration public override void ResizeSwapChain(uint width, uint height) Parameters Type Name Description uint width New width. uint height New height. Overrides SwapChain.ResizeSwapChain(uint, uint) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKSwapChainFrameBuffer.html": {
    "href": "api/Evergine.Vulkan.VKSwapChainFrameBuffer.html",
    "title": "Class VKSwapChainFrameBuffer | Evergine Doc",
    "keywords": "Class VKSwapChainFrameBuffer This class represent the swapchain FrameBuffer on Vulkan. Inheritance object FrameBuffer VKFrameBufferBase VKSwapChainFrameBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members FrameBuffer.Id FrameBuffer.ReaderVersion FrameBuffer.Invalidated FrameBuffer.Dependencies FrameBuffer.disposed FrameBuffer.requireFlipProjection FrameBuffer.Width FrameBuffer.Height FrameBuffer.ArraySize FrameBuffer.SampleCount FrameBuffer.RequireFlipProjection FrameBuffer.DepthStencilTarget FrameBuffer.OutputDescription FrameBuffer.IntermediateBufferAssociated FrameBuffer.disposeAttachments FrameBuffer.Dispose() FrameBuffer.Invalidate(ILoadable) FrameBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKSwapChainFrameBuffer : VKFrameBufferBase, ILoadable, IDisposable, IDependencyObject Constructors VKSwapChainFrameBuffer(VKGraphicsContext, VKSwapChain) Initializes a new instance of the VKSwapChainFrameBuffer class. Declaration public VKSwapChainFrameBuffer(VKGraphicsContext context, VKSwapChain swapchain) Parameters Type Name Description VKGraphicsContext context The graphics context. VKSwapChain swapchain The swapchain to create from. Fields BackBufferImages The colors texture array of this VKFrameBuffer. Declaration public VkImage[] BackBufferImages Field Value Type Description VkImage[] CurrentBackBufferIndex The active backBuffer index. Declaration public int CurrentBackBufferIndex Field Value Type Description int DepthTargetTexture The depth texture of this VKFrameBuffer. Declaration public VKTexture DepthTargetTexture Field Value Type Description VKTexture FrameBuffers The array of frambuffers linked to this swapchain. Declaration public VKFrameBuffer[] FrameBuffers Field Value Type Description VKFrameBuffer[] Properties ColorTargets Gets or sets the collection of colors targets textures associated with this FrameBuffer. Declaration public override FrameBufferAttachment[] ColorTargets { get; protected set; } Property Value Type Description FrameBufferAttachment[] Overrides FrameBuffer.ColorTargets CurrentBackBuffer Gets the current framebuffer based on CurrentBackBufferIndex. Declaration public VkFramebuffer CurrentBackBuffer { get; } Property Value Type Description VkFramebuffer Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides FrameBuffer.Name Methods Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides FrameBuffer.Dispose(bool) TransitionToFinalLayout(VkCommandBuffer) Transition to ready to use layout. Declaration public override void TransitionToFinalLayout(VkCommandBuffer cb) Parameters Type Name Description VkCommandBuffer cb The command buffer to execute this change. Overrides VKFrameBufferBase.TransitionToFinalLayout(VkCommandBuffer) TransitionToIntermedialLayout(VkCommandBuffer) Transition framebuffer to intermediate layout. Declaration public override void TransitionToIntermedialLayout(VkCommandBuffer cb) Parameters Type Name Description VkCommandBuffer cb The command buffer to execute this change. Overrides VKFrameBufferBase.TransitionToIntermedialLayout(VkCommandBuffer) Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKTexture.html": {
    "href": "api/Evergine.Vulkan.VKTexture.html",
    "title": "Class VKTexture | Evergine Doc",
    "keywords": "Class VKTexture This class represents a native texture object on Metal. Inheritance object GraphicsResource Texture VKTexture Implements ILoadable IDisposable IDependencyObject Inherited Members Texture.Id Texture.Description Texture.ReaderVersion Texture.Invalidated Texture.Dependencies Texture.Sampler Texture.CouldBeAttachedToFramebuffer Texture.Invalidate(ILoadable) Texture.ReleaseUnusedMemory() GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKTexture : Texture, ILoadable, IDisposable, IDependencyObject Constructors VKTexture(VKGraphicsContext, DataBox[], ref TextureDescription) Initializes a new instance of the VKTexture class. Declaration public VKTexture(VKGraphicsContext context, DataBox[] data, ref TextureDescription description) Parameters Type Name Description VKGraphicsContext context The graphics context. DataBox[] data The data pointer. TextureDescription description The texture description. VKTexture(VKGraphicsContext, DataBox[], ref TextureDescription, ref SamplerStateDescription) Initializes a new instance of the VKTexture class. Declaration public VKTexture(VKGraphicsContext context, DataBox[] data, ref TextureDescription description, ref SamplerStateDescription samplerState) Parameters Type Name Description VKGraphicsContext context The graphics context. DataBox[] data The data pointer. TextureDescription description The texture description. SamplerStateDescription samplerState the sampler state description for this texture. Fields BufferMemory The native buffer memory linked with native buffer. Declaration public VkDeviceMemory BufferMemory Field Value Type Description VkDeviceMemory Format The native pixel format for this texture. Declaration public VkFormat Format Field Value Type Description VkFormat ImageLayouts The native Image layouts for this texture. Declaration public VkImageLayout[] ImageLayouts Field Value Type Description VkImageLayout[] ImageMemory The native vulkan memory linked with native image. Declaration public VkDeviceMemory ImageMemory Field Value Type Description VkDeviceMemory MemoryRequirements The memory requirements for this texture. Declaration public VkMemoryRequirements MemoryRequirements Field Value Type Description VkMemoryRequirements NativeBuffer The native Vulkan buffer object used for staging textures. Declaration public VkBuffer NativeBuffer Field Value Type Description VkBuffer NativeImage The native Vulkan image object. Declaration public VkImage NativeImage Field Value Type Description VkImage Properties ImageView Gets the vulkan image view. Declaration public VkImageView ImageView { get; } Property Value Type Description VkImageView Name Gets or sets a string identifying this instance. Can be used in graphics debuggers tools. Declaration public override string Name { get; set; } Property Value Type Description string Overrides Texture.Name NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Blit(VkCommandBuffer, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint) Copy a pixel region from source to destination texture with format conversion and preparing to present in swapchain. Declaration public void Blit(VkCommandBuffer commandBuffer, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBaseArray, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArray, uint layerCount) Parameters Type Name Description VkCommandBuffer commandBuffer The commandbuffer where execute. uint sourceX U coord source texture. uint sourceY V coord source texture. uint sourceZ W coord source texture. uint sourceMipLevel Source mip level. uint sourceBaseArray Source array index. Texture destination Destination texture. uint destinationX U coord destination texture. uint destinationY V coord destination texture. uint destinationZ W coord destination texture. uint destinationMipLevel Destination mip level. uint destinationBasedArray Destination array index. uint layerCount Destination layer count. CopyTo(VkCommandBuffer, uint, uint, uint, uint, uint, Texture, uint, uint, uint, uint, uint, uint, uint, uint, uint) Copy a pixel region from source to destination texture. Declaration public void CopyTo(VkCommandBuffer commandBuffer, uint sourceX, uint sourceY, uint sourceZ, uint sourceMipLevel, uint sourceBaseArray, Texture destination, uint destinationX, uint destinationY, uint destinationZ, uint destinationMipLevel, uint destinationBasedArray, uint width, uint height, uint depth, uint layerCount) Parameters Type Name Description VkCommandBuffer commandBuffer The commandbuffer where execute. uint sourceX U coord source texture. uint sourceY V coord source texture. uint sourceZ W coord source texture. uint sourceMipLevel Source mip level. uint sourceBaseArray Source array index. Texture destination Destination texture. uint destinationX U coord destination texture. uint destinationY V coord destination texture. uint destinationZ W coord destination texture. uint destinationMipLevel Destination mip level. uint destinationBasedArray Destination array index. uint width Destination width. uint height Destination heigh. uint depth Destination depth. uint layerCount Destination layer count. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides Texture.Dispose() FromVulkanImage(VKGraphicsContext, ref TextureDescription, VkImage) Create a new texture from a VKImage. Declaration public static VKTexture FromVulkanImage(VKGraphicsContext context, ref TextureDescription description, VkImage image) Parameters Type Name Description VKGraphicsContext context The graphics context. TextureDescription description The texture description. VkImage image The vulkan image already created. Returns Type Description VKTexture A new VKTexture. SetData(VkCommandBuffer, IntPtr, uint, uint) Fill the buffer from a pointer. Declaration public void SetData(VkCommandBuffer commandBuffer, IntPtr source, uint sourceSizeInBytes, uint subResource = 0) Parameters Type Name Description VkCommandBuffer commandBuffer The commandbuffer. IntPtr source The data pointer. uint sourceSizeInBytes The size in bytes. uint subResource The subresource index. SetImageLayout(uint, VkImageLayout) The a new image layout based on subResource. Declaration public void SetImageLayout(uint subResource, VkImageLayout layout) Parameters Type Name Description uint subResource The subResource index. VkImageLayout layout The new layout state. SetImageLayout(uint, uint, VkImageLayout) The a new image layout. Declaration public void SetImageLayout(uint mipLevel, uint arrayLevel, VkImageLayout layout) Parameters Type Name Description uint mipLevel The mipLevel of this texture. uint arrayLevel The arraylelvel of this texture. VkImageLayout layout The new layout to set. TransitionImageLayout(VkCommandBuffer, VkImageLayout, uint, uint, uint, uint) Transition the images linked with this texture to a VKImageLayout state. Declaration public void TransitionImageLayout(VkCommandBuffer command, VkImageLayout newLayout, uint baseMiplevel, uint levelCount, uint baseArrayLayer, uint layerCount) Parameters Type Name Description VkCommandBuffer command The command buffer to execute. VkImageLayout newLayout The new state layout. uint baseMiplevel The start mip level. uint levelCount The number of mip levels. uint baseArrayLayer The start array layer. uint layerCount The number of array layers. Implements ILoadable IDisposable IDependencyObject Extension Methods TextureExtension.SafeToStream(Texture, GraphicsContext) TextureExtension.SaveToFile(Texture, GraphicsContext, string) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.Vulkan.VKTopLevelAS.html": {
    "href": "api/Evergine.Vulkan.VKTopLevelAS.html",
    "title": "Class VKTopLevelAS | Evergine Doc",
    "keywords": "Class VKTopLevelAS Vulkan Top Level Acceleration Structure implementation. Inheritance object GraphicsResource TopLevelAS VKTopLevelAS Implements IDisposable Inherited Members TopLevelAS.Description GraphicsResource.disposed GraphicsResource.Context GraphicsResource.Disposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.Vulkan Assembly: Evergine.Vulkan.dll Syntax public class VKTopLevelAS : TopLevelAS, IDisposable Constructors VKTopLevelAS(VKGraphicsContext, VkCommandBuffer, ref TopLevelASDescription) Initializes a new instance of the VKTopLevelAS class. Declaration public VKTopLevelAS(VKGraphicsContext context, VkCommandBuffer commandBuffer, ref TopLevelASDescription description) Parameters Type Name Description VKGraphicsContext context DirectX12 Context. VkCommandBuffer commandBuffer Command buffer. TopLevelASDescription description Top Level Description. Fields TopLevelAS The top level acceleration structure instance. Declaration public VkAccelerationStructureKHR TopLevelAS Field Value Type Description VkAccelerationStructureKHR Properties NativePointer Gets the native pointer. Declaration public override IntPtr NativePointer { get; } Property Value Type Description IntPtr Overrides GraphicsResource.NativePointer Methods Dispose() Dispose this instance. Declaration public override void Dispose() Overrides GraphicsResource.Dispose() UpdateAccelerationStructure(VkCommandBuffer, ref TopLevelASDescription) Initializes a new instance of the VKTopLevelAS class. Declaration public void UpdateAccelerationStructure(VkCommandBuffer commandBuffer, ref TopLevelASDescription description) Parameters Type Name Description VkCommandBuffer commandBuffer Command Buffer instance. TopLevelASDescription description New top level description. Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.WPF.html": {
    "href": "api/Evergine.WPF.html",
    "title": "Namespace Evergine.WPF | Evergine Doc",
    "keywords": "Namespace Evergine.WPF Classes WPFHelpers Helper methods collection. WPFKeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. WPFMouseDispatcher Dispatch mouse events associated to a Surface or a Window. WPFSurface Represent a control/widget on a WindowSystem. WPFTouchDispatcher Dispatch pointer events associated to a Surface or a Window. WPFWindow Represent a WPF Window on WindowSystem. WPFWindowsSystem WPF Windows system."
  },
  "api/Evergine.WPF.WPFHelpers.html": {
    "href": "api/Evergine.WPF.WPFHelpers.html",
    "title": "Class WPFHelpers | Evergine Doc",
    "keywords": "Class WPFHelpers Helper methods collection. Inheritance object WPFHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.WPF Assembly: Evergine.WPF.dll Syntax public static class WPFHelpers Methods GetDPI(Window) Gets the DPI density of the visual. Declaration public static float GetDPI(Window nativeWindow) Parameters Type Name Description Window nativeWindow Native Window. Returns Type Description float The DPI density."
  },
  "api/Evergine.WPF.WPFKeyboardDispatcher.html": {
    "href": "api/Evergine.WPF.WPFKeyboardDispatcher.html",
    "title": "Class WPFKeyboardDispatcher | Evergine Doc",
    "keywords": "Class WPFKeyboardDispatcher Dispatch keyboard events associated to a Surface or a Window. Inheritance object KeyboardDispatcher WPFKeyboardDispatcher Implements IDisposable Inherited Members KeyboardDispatcher.KeyDown KeyboardDispatcher.KeyUp KeyboardDispatcher.KeyChar KeyboardDispatcher.ReadKeyState(Keys) KeyboardDispatcher.IsKeyDown(Keys) KeyboardDispatcher.DispatchEvents() KeyboardDispatcher.HandleKeyDown(Keys) KeyboardDispatcher.HandleKeyUp(Keys) KeyboardDispatcher.HandleKeyChar(char) KeyboardDispatcher.HandleKeyChar(string) KeyboardDispatcher.ResetKeyboardStatus() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.WPF Assembly: Evergine.WPF.dll Syntax public class WPFKeyboardDispatcher : KeyboardDispatcher, IDisposable Constructors WPFKeyboardDispatcher(UIElement) Initializes a new instance of the WPFKeyboardDispatcher class. Declaration public WPFKeyboardDispatcher(UIElement uiElement) Parameters Type Name Description UIElement uiElement The UIElement associated with this dispatcher. Methods Dispose() Declaration public void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.WPF.WPFMouseDispatcher.html": {
    "href": "api/Evergine.WPF.WPFMouseDispatcher.html",
    "title": "Class WPFMouseDispatcher | Evergine Doc",
    "keywords": "Class WPFMouseDispatcher Dispatch mouse events associated to a Surface or a Window. Inheritance object PointerDispatcher MouseDispatcher WPFMouseDispatcher Implements IDisposable Inherited Members MouseDispatcher.IsMouseOver MouseDispatcher.Position MouseDispatcher.PositionDelta MouseDispatcher.ScrollDelta MouseDispatcher.State MouseDispatcher.MouseEnter MouseDispatcher.MouseLeave MouseDispatcher.MouseButtonDown MouseDispatcher.MouseButtonUp MouseDispatcher.MouseMove MouseDispatcher.MouseScroll MouseDispatcher.ReadButtonState(MouseButtons) MouseDispatcher.IsButtonDown(MouseButtons) MouseDispatcher.TrySetCursorPosition(Point) MouseDispatcher.DispatchEvents() MouseDispatcher.HandleMouseEnter(Point) MouseDispatcher.HandleMouseLeave(Point) MouseDispatcher.HandleMouseMove(Point) MouseDispatcher.HandleMouseButtonDown(MouseButtons) MouseDispatcher.HandleMouseButtonUp(MouseButtons) MouseDispatcher.HandleMouseScroll(MouseScrollDirections) PointerDispatcher.Points PointerDispatcher.PointerDown PointerDispatcher.PointerUp PointerDispatcher.PointerMove PointerDispatcher.HandlePointerDown(long, Point) PointerDispatcher.HandlePointerUp(long, Point) PointerDispatcher.HandlePointerMove(long, Point) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.WPF Assembly: Evergine.WPF.dll Syntax public class WPFMouseDispatcher : MouseDispatcher, IDisposable Constructors WPFMouseDispatcher(FrameworkElement, float) Initializes a new instance of the WPFMouseDispatcher class. Declaration public WPFMouseDispatcher(FrameworkElement frameworkElement, float dpiDensity = 1) Parameters Type Name Description FrameworkElement frameworkElement The FrameworkElement associated with this dispatcher. float dpiDensity The dpi densit of the element. Properties CursorType Gets the active cursor type. It can be changed calling the method TrySetCursorType(CursorTypes). Declaration public override CursorTypes CursorType { get; } Property Value Type Description CursorTypes Overrides MouseDispatcher.CursorType Methods Dispose() Declaration public void Dispose() NativeSetCursorPosition(Point) Sets natively the cursor position. Declaration protected override bool NativeSetCursorPosition(Point position) Parameters Type Name Description Point position The new position. Returns Type Description bool True if the operation was successful. False otherwise. Overrides MouseDispatcher.NativeSetCursorPosition(Point) TrySetCursorType(CursorTypes) Tries to change the mouse cursor type. Declaration public override bool TrySetCursorType(CursorTypes cursorType) Parameters Type Name Description CursorTypes cursorType The new cursor type. Returns Type Description bool true if successful; otherwise, false. Overrides MouseDispatcher.TrySetCursorType(CursorTypes) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.WPF.WPFSurface.html": {
    "href": "api/Evergine.WPF.WPFSurface.html",
    "title": "Class WPFSurface | Evergine Doc",
    "keywords": "Class WPFSurface Represent a control/widget on a WindowSystem. Inheritance object Surface WPFSurface Implements IDisposable Inherited Members Surface.SurfaceInfo Surface.Width Surface.Height Surface.DPIDensity Surface.OnScreenSizeChanged Surface.OnSurfaceInfoChanged Surface.Closing Surface.GotFocus Surface.LostFocus Surface.Dispose() Surface.OnClosing() Surface.OnGotFocus() Surface.OnLostFocus() Surface.OnSizeChanged() Surface.OnInfoChanged() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.WPF Assembly: Evergine.WPF.dll Syntax public class WPFSurface : Surface, IDisposable Constructors WPFSurface(uint, uint) Initializes a new instance of the WPFSurface class. Declaration public WPFSurface(uint width, uint height) Parameters Type Name Description uint width Window width. uint height Window height. Properties IsLoaded Gets a value indicating whether this surface is loaded. Declaration public bool IsLoaded { get; } Property Value Type Description bool KeyboardDispatcher Gets the keyboard events dispatcher associated to this surface. Declaration public override KeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description KeyboardDispatcher Overrides Surface.KeyboardDispatcher MouseDispatcher Gets the mouse events dispatcher associated to this surface. Declaration public override MouseDispatcher MouseDispatcher { get; } Property Value Type Description MouseDispatcher Overrides Surface.MouseDispatcher NativeControl Gets the native WPF framework element. Declaration public FrameworkElement NativeControl { get; } Property Value Type Description FrameworkElement NativeWindow Gets the native WPF Window. Declaration public Window NativeWindow { get; } Property Value Type Description Window OverrideFrontBufferAvailability Gets or sets a value indicating whether the Evergine app must keep rendering even if the front buffer is not available in EvergineD3D11Image. Declaration public bool OverrideFrontBufferAvailability { get; set; } Property Value Type Description bool SurfaceUpdatedAction Gets or sets Render action. Declaration public Action<IntPtr> SurfaceUpdatedAction { get; set; } Property Value Type Description Action<IntPtr> TouchDispatcher Gets the touch events dispatcher associated to this surface. Declaration public override PointerDispatcher TouchDispatcher { get; } Property Value Type Description PointerDispatcher Overrides Surface.TouchDispatcher Methods Destroy() Remove managed resources. Declaration protected override void Destroy() Overrides Surface.Destroy() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.WPF.WPFTouchDispatcher.html": {
    "href": "api/Evergine.WPF.WPFTouchDispatcher.html",
    "title": "Class WPFTouchDispatcher | Evergine Doc",
    "keywords": "Class WPFTouchDispatcher Dispatch pointer events associated to a Surface or a Window. Inheritance object PointerDispatcher WPFTouchDispatcher Implements IDisposable Inherited Members PointerDispatcher.Points PointerDispatcher.PointerDown PointerDispatcher.PointerUp PointerDispatcher.PointerMove PointerDispatcher.DispatchEvents() PointerDispatcher.HandlePointerDown(long, Point) PointerDispatcher.HandlePointerUp(long, Point) PointerDispatcher.HandlePointerMove(long, Point) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.WPF Assembly: Evergine.WPF.dll Syntax public class WPFTouchDispatcher : PointerDispatcher, IDisposable Constructors WPFTouchDispatcher(UIElement, float) Initializes a new instance of the WPFTouchDispatcher class. Declaration public WPFTouchDispatcher(UIElement uiElement, float dpiDensity = 1) Parameters Type Name Description UIElement uiElement The UIElement to handle the touches. float dpiDensity The dpi density of the uiElement. Methods Dispose() Declaration public void Dispose() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.WPF.WPFWindow.html": {
    "href": "api/Evergine.WPF.WPFWindow.html",
    "title": "Class WPFWindow | Evergine Doc",
    "keywords": "Class WPFWindow Represent a WPF Window on WindowSystem. Inheritance object Surface Window WPFWindow Implements IDisposable Inherited Members Surface.SurfaceInfo Surface.Width Surface.Height Surface.DPIDensity Surface.OnScreenSizeChanged Surface.OnSurfaceInfoChanged Surface.Closing Surface.GotFocus Surface.LostFocus Surface.Dispose() Surface.OnClosing() Surface.OnGotFocus() Surface.OnLostFocus() Surface.OnSizeChanged() Surface.OnInfoChanged() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.WPF Assembly: Evergine.WPF.dll Syntax public class WPFWindow : Window, IDisposable Constructors WPFWindow(string, uint, uint, bool) Initializes a new instance of the WPFWindow class. Declaration public WPFWindow(string title, uint width, uint height, bool visible) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. bool visible Window visibility. Properties KeyboardDispatcher Gets the keyboard events dispatcher associated to this surface. Declaration public override KeyboardDispatcher KeyboardDispatcher { get; } Property Value Type Description KeyboardDispatcher Overrides Surface.KeyboardDispatcher MouseDispatcher Gets the mouse events dispatcher associated to this surface. Declaration public override MouseDispatcher MouseDispatcher { get; } Property Value Type Description MouseDispatcher Overrides Surface.MouseDispatcher NativeWindow Gets or sets WPF Window instance. Declaration public Window NativeWindow { get; protected set; } Property Value Type Description Window Title Gets or sets window title. Declaration public override string Title { get; set; } Property Value Type Description string Overrides Window.Title TouchDispatcher Gets the touch events dispatcher associated to this surface. Declaration public override PointerDispatcher TouchDispatcher { get; } Property Value Type Description PointerDispatcher Overrides Surface.TouchDispatcher Visible Gets or sets a value indicating whether the window is visible. Declaration public override bool Visible { get; set; } Property Value Type Description bool Overrides Window.Visible Methods Destroy() Remove managed resources. Declaration protected override void Destroy() Overrides Surface.Destroy() Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.WPF.WPFWindowsSystem.html": {
    "href": "api/Evergine.WPF.WPFWindowsSystem.html",
    "title": "Class WPFWindowsSystem | Evergine Doc",
    "keywords": "Class WPFWindowsSystem WPF Windows system. Inheritance object WindowsSystem WPFWindowsSystem Implements IDisposable IGetNativePointers Inherited Members WindowsSystem.AvailablePointerKeys WindowsSystem.Run(Action, Action) WindowsSystem.Dispose() WindowsSystem.GetNativePointer(string, out IntPtr) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Evergine.WPF Assembly: Evergine.WPF.dll Syntax public class WPFWindowsSystem : WindowsSystem, IDisposable, IGetNativePointers Constructors WPFWindowsSystem() Initializes a new instance of the WPFWindowsSystem class. Declaration public WPFWindowsSystem() WPFWindowsSystem(Application) Initializes a new instance of the WPFWindowsSystem class. Declaration public WPFWindowsSystem(Application application) Parameters Type Name Description Application application The WPF application isntance. Methods CreateLoopThread(Action, Action) Creates a loop thread. Declaration protected override void CreateLoopThread(Action loadAction, Action renderCallback) Parameters Type Name Description Action loadAction The load action. Action renderCallback The render callback action. Overrides WindowsSystem.CreateLoopThread(Action, Action) CreateSurface(object) Create a surface. Declaration public override Surface CreateSurface(object nativeSurface) Parameters Type Name Description object nativeSurface The native surface control. Returns Type Description Surface Surface instance. Overrides WindowsSystem.CreateSurface(object) CreateSurface(uint, uint) Create a surface. Declaration public override Surface CreateSurface(uint width, uint height) Parameters Type Name Description uint width Surface width. uint height Surface height. Returns Type Description Surface Surface instance. Overrides WindowsSystem.CreateSurface(uint, uint) CreateWindow(string, uint, uint, bool) Create a Window. Declaration public override Window CreateWindow(string title, uint width, uint height, bool visible = true) Parameters Type Name Description string title Window title. uint width Window width. uint height Window height. bool visible Window visibility. Returns Type Description Window Window instance. Overrides WindowsSystem.CreateWindow(string, uint, uint, bool) Destroy() Destroy all resources. Declaration protected override void Destroy() Overrides WindowsSystem.Destroy() Implements IDisposable IGetNativePointers Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.XAudio2.DXExtensionsMethods.html": {
    "href": "api/Evergine.XAudio2.DXExtensionsMethods.html",
    "title": "Class DXExtensionsMethods | Evergine Doc",
    "keywords": "Class DXExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. Inheritance object DXExtensionsMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.XAudio2 Assembly: Evergine.XAudio2.dll Syntax public static class DXExtensionsMethods Methods ToDXWaveFormat(WaveFormat) Transform WaveFormat to DX WaveFormat. Declaration public static WaveFormat ToDXWaveFormat(this WaveFormat format) Parameters Type Name Description WaveFormat format Wave format. Returns Type Description WaveFormat DX format. ToSystemNumerics(Vector3, out Vector3) Transform Evergine Vector3 to System Numerics Vector3. Declaration public static void ToSystemNumerics(this Vector3 vector, out Vector3 systemNumericVector) Parameters Type Name Description Vector3 vector Wave vector. Vector3 systemNumericVector System numeric vector."
  },
  "api/Evergine.XAudio2.html": {
    "href": "api/Evergine.XAudio2.html",
    "title": "Namespace Evergine.XAudio2 | Evergine Doc",
    "keywords": "Namespace Evergine.XAudio2 Classes DXExtensionsMethods Extensions methods used to convert valuesfrom Evergineto DirectX. XAudioBuffer The Audio Buffer class. XAudioDevice Represents a audio output device. XAudioListener Class representing an audio listener. XAudioSource The audio source class."
  },
  "api/Evergine.XAudio2.XAudioBuffer.html": {
    "href": "api/Evergine.XAudio2.XAudioBuffer.html",
    "title": "Class XAudioBuffer | Evergine Doc",
    "keywords": "Class XAudioBuffer The Audio Buffer class. Inheritance object AudioBuffer XAudioBuffer Implements ILoadable IDisposable IDependencyObject Inherited Members AudioBuffer.Id AudioBuffer.ReaderVersion AudioBuffer.Invalidated AudioBuffer.Dependencies AudioBuffer.State AudioBuffer.Length AudioBuffer.Format AudioBuffer.Duration AudioBuffer.SampleCount AudioBuffer.FillAsync(Stream, int, WaveFormat) AudioBuffer.Fill(Stream, int, WaveFormat) AudioBuffer.Fill<TBuffer>(TBuffer[], int, int, WaveFormat) AudioBuffer.Invalidate(ILoadable) AudioBuffer.ReleaseUnusedMemory() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Evergine.XAudio2 Assembly: Evergine.XAudio2.dll Syntax public class XAudioBuffer : AudioBuffer, ILoadable, IDisposable, IDependencyObject Constructors XAudioBuffer() Initializes a new instance of the XAudioBuffer class. Declaration public XAudioBuffer() Properties Capacity Gets the buffer capacity. Declaration public int Capacity { get; } Property Value Type Description int Context Gets the context of the audio buffer. Declaration public IntPtr Context { get; } Property Value Type Description IntPtr DataPtr Gets the data pointer. Declaration public IntPtr DataPtr { get; } Property Value Type Description IntPtr Methods Dispose() Declaration public override void Dispose() Overrides AudioBuffer.Dispose() InternalFill(Stream, int) Fills the audio buffer with a specific stream. Declaration protected override void InternalFill(Stream stream, int bufferSize) Parameters Type Name Description Stream stream The source stream. int bufferSize The buffer size. Overrides AudioBuffer.InternalFill(Stream, int) InternalFillAsync(Stream, int) Fills the audio buffer with a specific stream. Declaration protected override Task InternalFillAsync(Stream stream, int bufferSize) Parameters Type Name Description Stream stream The source stream. int bufferSize The buffer size. Returns Type Description Task Awaitable task of the operation. Overrides AudioBuffer.InternalFillAsync(Stream, int) InternalFill<TBuffer>(TBuffer[], int, int) Fills the audio buffer with a specific buffer. Declaration protected override void InternalFill<TBuffer>(TBuffer[] buffer, int offset, int count) where TBuffer : struct Parameters Type Name Description TBuffer[] buffer The source buffer. int offset The source offset. int count The number of elements to be copied. Type Parameters Name Description TBuffer The type of the buffer data. Overrides AudioBuffer.InternalFill<TBuffer>(TBuffer[], int, int) ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements ILoadable IDisposable IDependencyObject Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.XAudio2.XAudioDevice.html": {
    "href": "api/Evergine.XAudio2.XAudioDevice.html",
    "title": "Class XAudioDevice | Evergine Doc",
    "keywords": "Class XAudioDevice Represents a audio output device. Inheritance object AudioDevice XAudioDevice Implements IDisposable Inherited Members AudioDevice.MasterVolume object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.XAudio2 Assembly: Evergine.XAudio2.dll Syntax public class XAudioDevice : AudioDevice, IDisposable Constructors XAudioDevice() Initializes a new instance of the XAudioDevice class. Declaration public XAudioDevice() Fields MasteringVoice XAudio2 mastering voice. Declaration public IXAudio2MasteringVoice MasteringVoice Field Value Type Description IXAudio2MasteringVoice X3dAudio X3DAudio object. Declaration public X3DAudio X3dAudio Field Value Type Description X3DAudio Xaudio2 XAudio2 object. Declaration public IXAudio2 Xaudio2 Field Value Type Description IXAudio2 Properties DefaultListener Gets the default listener used by Apply3D(AudioEmitter). Declaration public override AudioListener DefaultListener { get; } Property Value Type Description AudioListener Overrides AudioDevice.DefaultListener Methods CreateAudioBuffer() Creates an audio buffer. Declaration public override AudioBuffer CreateAudioBuffer() Returns Type Description AudioBuffer The result AudioBuffer object. Overrides AudioDevice.CreateAudioBuffer() CreateAudioSource(WaveFormat) Create a new AudioSource. Declaration public override AudioSource CreateAudioSource(WaveFormat format) Parameters Type Name Description WaveFormat format The format of the audio source. Returns Type Description AudioSource A new AudioSource instance. Overrides AudioDevice.CreateAudioSource(WaveFormat) Dispose() Declaration public override void Dispose() Overrides AudioDevice.Dispose() SetMasterVolume(float) Sets the master volume of the device. Declaration protected override void SetMasterVolume(float volume) Parameters Type Name Description float volume The new volume. Overrides AudioDevice.SetMasterVolume(float) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.XAudio2.XAudioListener.html": {
    "href": "api/Evergine.XAudio2.XAudioListener.html",
    "title": "Class XAudioListener | Evergine Doc",
    "keywords": "Class XAudioListener Class representing an audio listener. Inheritance object AudioListener XAudioListener Inherited Members AudioListener.WorldTransform AudioListener.Velocity AudioListener.DopplerFactor object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.XAudio2 Assembly: Evergine.XAudio2.dll Syntax public class XAudioListener : AudioListener Constructors XAudioListener() Initializes a new instance of the XAudioListener class. Declaration public XAudioListener() Properties Listener Gets the listener. Declaration public Listener Listener { get; } Property Value Type Description Listener Methods UpdateDopplerFactor(float) Updates the Doppler factor of this listener. Declaration protected override void UpdateDopplerFactor(float dopplerFactor) Parameters Type Name Description float dopplerFactor The new Doppler factor. Overrides AudioListener.UpdateDopplerFactor(float) UpdateVelocity(ref Vector3) Updates the velocity of this listener. Declaration protected override void UpdateVelocity(ref Vector3 velocity) Parameters Type Name Description Vector3 velocity The new velocity. Overrides AudioListener.UpdateVelocity(ref Vector3) UpdateWorldTransform(ref Matrix4x4) Updates the world transform of this listener. Declaration protected override void UpdateWorldTransform(ref Matrix4x4 worldTransform) Parameters Type Name Description Matrix4x4 worldTransform The new world transform matrix. Overrides AudioListener.UpdateWorldTransform(ref Matrix4x4) Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/Evergine.XAudio2.XAudioSource.html": {
    "href": "api/Evergine.XAudio2.XAudioSource.html",
    "title": "Class XAudioSource | Evergine Doc",
    "keywords": "Class XAudioSource The audio source class. Inheritance object AudioSource XAudioSource Implements IDisposable Inherited Members AudioSource.Format AudioSource.Volume AudioSource.Pan AudioSource.Pitch AudioSource.IsLooped AudioSource.State AudioSource.PlayPosition AudioSource.QueuePlayPosition AudioSource.QueueDuration AudioSource.CurrentBuffer AudioSource.PendingBuffers AudioSource.PendingBuffersCount AudioSource.BufferStarted AudioSource.BufferEnded AudioSource.EnqueueBuffer(AudioBuffer) AudioSource.Play() AudioSource.Pause() AudioSource.Stop() AudioSource.OnBufferStart() AudioSource.OnBufferProccessed(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Evergine.XAudio2 Assembly: Evergine.XAudio2.dll Syntax public class XAudioSource : AudioSource, IDisposable Constructors XAudioSource(XAudioDevice, WaveFormat) Initializes a new instance of the XAudioSource class. Declaration public XAudioSource(XAudioDevice device, WaveFormat format) Parameters Type Name Description XAudioDevice device The XAudio device. WaveFormat format The XAudios format. Fields Voice Gets the source voice. Declaration public readonly IXAudio2SourceVoice Voice Field Value Type Description IXAudio2SourceVoice Methods Apply3D(AudioEmitter) Sets the ·D properties of the Audio Source according to an audio emitter. Declaration public override void Apply3D(AudioEmitter emitter) Parameters Type Name Description AudioEmitter emitter The audio emitter. Overrides AudioSource.Apply3D(AudioEmitter) Dispose() Declaration public override void Dispose() Overrides AudioSource.Dispose() FlushBuffers() Flush all the audio buffers. Declaration public override void FlushBuffers() Overrides AudioSource.FlushBuffers() GetPlayPosition() Gets the play TimeSpan position of the audio. Declaration protected override TimeSpan GetPlayPosition() Returns Type Description TimeSpan A TimeSpan with the current play position. Overrides AudioSource.GetPlayPosition() GetQueuePlayPosition() Gets the Queue Play TimeSpan Position. Declaration protected override TimeSpan GetQueuePlayPosition() Returns Type Description TimeSpan A TimeSpan with the Queue Play Position. Overrides AudioSource.GetQueuePlayPosition() InternalEnqueueBuffer(AudioBuffer, out int?) Enqueues an audio buffer into the source. Declaration protected override void InternalEnqueueBuffer(AudioBuffer buffer, out int? index) Parameters Type Name Description AudioBuffer buffer The buffer to be enqueued. int? index Output variable containing the buffer index. Overrides AudioSource.InternalEnqueueBuffer(AudioBuffer, out int?) InternalPause() Pauses the audio source. Declaration protected override void InternalPause() Overrides AudioSource.InternalPause() InternalPlay() Plays the audio source. Declaration protected override void InternalPlay() Overrides AudioSource.InternalPlay() InternalStop() Stops the audio source. Declaration protected override void InternalStop() Overrides AudioSource.InternalStop() IsPaused() Checks if this audio source is paused. Declaration protected override bool IsPaused() Returns Type Description bool True if this audio source is pause. False otherwise. Overrides AudioSource.IsPaused() IsPlaying() Checks if the source is playing. Declaration protected override bool IsPlaying() Returns Type Description bool True if the audio source is playing. False otherwise. Overrides AudioSource.IsPlaying() SetLoop(bool) Sets a new value to indicate if the source is looped. Declaration protected override void SetLoop(bool isLooped) Parameters Type Name Description bool isLooped If the source must loop the sound. Overrides AudioSource.SetLoop(bool) SetPan(float) Sets the pan of this audio source. Declaration protected override void SetPan(float pan) Parameters Type Name Description float pan The new pan. Overrides AudioSource.SetPan(float) SetPitch(float) Sets the new pitch of this source. Declaration protected override void SetPitch(float pitch) Parameters Type Name Description float pitch The new pitch. Overrides AudioSource.SetPitch(float) SetQueuePlayPosition(TimeSpan) Sets the queue play TimeSpan position. Declaration protected override void SetQueuePlayPosition(TimeSpan position) Parameters Type Name Description TimeSpan position The new TimeSpan position. Overrides AudioSource.SetQueuePlayPosition(TimeSpan) SetVolume(float) Sets the volume of this source. Declaration protected override void SetVolume(float volume) Parameters Type Name Description float volume The new volume. Overrides AudioSource.SetVolume(float) Implements IDisposable Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.html": {
    "href": "api/glTFLoader.html",
    "title": "Namespace glTFLoader | Evergine Doc",
    "keywords": "Namespace glTFLoader Classes Interface"
  },
  "api/glTFLoader.Interface.html": {
    "href": "api/glTFLoader.Interface.html",
    "title": "Class Interface | Evergine Doc",
    "keywords": "Class Interface Inheritance object Interface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader Assembly: Evergine.Assets.dll Syntax public static class Interface Methods DeserializeModel(string) Parses a JSON formatted text content Declaration public static Gltf DeserializeModel(string fileData) Parameters Type Name Description string fileData JSON text content Returns Type Description Gltf Schema.Gltf model LoadBinaryBuffer(Stream) Reads the binary buffer chunk of a glb stream Declaration public static byte[] LoadBinaryBuffer(Stream stream) Parameters Type Name Description Stream stream Readable stream to a glb model Returns Type Description byte[] Byte array of the buffer LoadBinaryBuffer(string) Loads the binary buffer chunk of a glb file Declaration public static byte[] LoadBinaryBuffer(string filePath) Parameters Type Name Description string filePath Source file path to a glb model Returns Type Description byte[] Byte array of the buffer LoadBinaryBuffer(Gltf, int, Func<string, byte[]>) Gets a binary buffer referenced by a specific Schema.Buffer Declaration public static byte[] LoadBinaryBuffer(this Gltf model, int bufferIndex, Func<string, byte[]> externalReferenceSolver) Parameters Type Name Description Gltf model The Schema.Gltf model containing the Schema.Buffer int bufferIndex The index of the buffer Func<string, byte[]> externalReferenceSolver An user provided lambda function to resolve external assets Returns Type Description byte[] Byte array of the buffer Remarks Binary buffers can be stored in three different ways: As stand alone files. As a binary chunk within a glb file. Encoded to Base64 within the JSON. The external reference solver funcion is called when the buffer is stored in an external file, or when the buffer is in the glb binary chunk, in which case, the Argument of the function will be Null. The Lambda function must return the byte array of the requested file or buffer. LoadBinaryBuffer(Gltf, int, string) Gets a binary buffer referenced by a specific Schema.Buffer Declaration public static byte[] LoadBinaryBuffer(this Gltf model, int bufferIndex, string gltfFilePath) Parameters Type Name Description Gltf model The Schema.Gltf model containing the Schema.Buffer int bufferIndex The index of the buffer string gltfFilePath Source file path used to load the model Returns Type Description byte[] Byte array of the buffer LoadModel(Stream) Reads a Schema.Gltf model from a stream Declaration public static Gltf LoadModel(Stream stream) Parameters Type Name Description Stream stream Readable stream to a gltf/glb model Returns Type Description Gltf Schema.Gltf model LoadModel(string) Loads a Schema.Gltf model from a file Declaration public static Gltf LoadModel(string filePath) Parameters Type Name Description string filePath Source file path to a gltf/glb model Returns Type Description Gltf Schema.Gltf model OpenImageFile(Gltf, int, Func<string, byte[]>) Opens a stream to the image referenced by a specific Schema.Image Declaration public static Stream OpenImageFile(this Gltf model, int imageIndex, Func<string, byte[]> externalReferenceSolver) Parameters Type Name Description Gltf model The Schema.Gltf model containing the Schema.Image int imageIndex The index of the image Func<string, byte[]> externalReferenceSolver An user provided lambda function to resolve external assets Returns Type Description Stream An open stream to the image Remarks Images can be stored in three different ways: As stand alone files. As a part of binary buffer accessed via bufferView. Encoded to Base64 within the JSON. The external reference solver funcion is called when the image is stored in an external file, or when the image is in the glb binary chunk, in which case, the Argument of the function will be Null. The Lambda function must return the byte array of the requested file or buffer. OpenImageFile(Gltf, int, string) Opens a stream to the image referenced by a specific Schema.Image Declaration public static Stream OpenImageFile(this Gltf model, int imageIndex, string gltfFilePath) Parameters Type Name Description Gltf model The Schema.Gltf model containing the Schema.Buffer int imageIndex The index of the image string gltfFilePath Source file path used to load the model Returns Type Description Stream An open stream to the image Pack(string, string) Converts a glTF file and its associated resources to a packed GLB binary file Declaration public static void Pack(string inputGltfFilePath, string outputGlbFile) Parameters Type Name Description string inputGltfFilePath glTF file (.gltf) to pack string outputGlbFile Path where the GLB file should be generated SaveBinaryModel(Gltf, byte[], BinaryWriter) Writes a Schema.Gltf model to a writable binary writer Declaration public static void SaveBinaryModel(this Gltf model, byte[] buffer, BinaryWriter binaryWriter) Parameters Type Name Description Gltf model Schema.Gltf model byte[] buffer Binary buffer to embed in the file, or null BinaryWriter binaryWriter Binary Writer SaveBinaryModel(Gltf, byte[], Stream) Writes a Schema.Gltf model to a writable stream Declaration public static void SaveBinaryModel(this Gltf model, byte[] buffer, Stream stream) Parameters Type Name Description Gltf model Schema.Gltf model byte[] buffer Binary buffer to embed in the file, or null Stream stream Writable stream SaveBinaryModel(Gltf, byte[], string) Saves a Schema.Gltf model to a glb file Declaration public static void SaveBinaryModel(this Gltf model, byte[] buffer, string filePath) Parameters Type Name Description Gltf model Schema.Gltf model byte[] buffer Binary buffer to embed in the file, or null string filePath Destination file path SaveBinaryModelPacked(Gltf, BinaryWriter, string, byte[]) Writes a Schema.Gltf model to a writable binary writer and pack all data into the model Declaration public static void SaveBinaryModelPacked(this Gltf model, BinaryWriter binaryWriter, string gltfFilePath, byte[] glbBinChunck = null) Parameters Type Name Description Gltf model Schema.Gltf model BinaryWriter binaryWriter Binary Writer string gltfFilePath Source file path used to load the model byte[] glbBinChunck optional GLB-stored Buffer (BIN data file). If null, then the first buffer Uri must point to a BIN file. SaveBinaryModelPacked(Gltf, string, string, byte[]) Writes a Schema.Gltf model to a writable binary writer and pack all data into the model Declaration public static void SaveBinaryModelPacked(this Gltf model, string outputFile, string gltfFilePath, byte[] glbBinChunck = null) Parameters Type Name Description Gltf model Schema.Gltf model string outputFile GLB output file path string gltfFilePath Source file path used to load the model byte[] glbBinChunck optional GLB-stored Buffer (BIN data file). If null, then the first buffer Uri must point to a BIN file. SaveModel(Gltf, Stream) Writes a Schema.Gltf model to a writable stream Declaration public static void SaveModel(this Gltf model, Stream stream) Parameters Type Name Description Gltf model Schema.Gltf model Stream stream Writable stream SaveModel(Gltf, string) Saves a Schema.Gltf model to a gltf file Declaration public static void SaveModel(this Gltf model, string path) Parameters Type Name Description Gltf model Schema.Gltf model string path Destination file path SerializeModel(Gltf) Serializes a Schema.Gltf model to text Declaration public static string SerializeModel(this Gltf model) Parameters Type Name Description Gltf model Schema.Gltf model Returns Type Description string JSON formatted text Unpack(string, string) Converts self contained GLB to glTF file and associated textures and data Declaration public static void Unpack(string inputFilePath, string outputDirectoryPath) Parameters Type Name Description string inputFilePath glTF binary file (.glb) to unpack string outputDirectoryPath Directory where the files will be extracted"
  },
  "api/glTFLoader.Schema.Accessor.ComponentTypeEnum.html": {
    "href": "api/glTFLoader.Schema.Accessor.ComponentTypeEnum.html",
    "title": "Enum Accessor.ComponentTypeEnum | Evergine Doc",
    "keywords": "Enum Accessor.ComponentTypeEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Accessor.ComponentTypeEnum Fields Name Description BYTE FLOAT SHORT UNSIGNED_BYTE UNSIGNED_INT UNSIGNED_SHORT Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Accessor.html": {
    "href": "api/glTFLoader.Schema.Accessor.html",
    "title": "Class Accessor | Evergine Doc",
    "keywords": "Class Accessor Inheritance object Accessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Accessor Properties BufferView The index of the bufferView. Declaration [JsonProperty(\"bufferView\")] public int? BufferView { get; set; } Property Value Type Description int? ByteOffset The offset relative to the start of the bufferView in bytes. Declaration [JsonProperty(\"byteOffset\")] public int ByteOffset { get; set; } Property Value Type Description int ComponentType The datatype of components in the attribute. Declaration [JsonRequired] [JsonProperty(\"componentType\")] public Accessor.ComponentTypeEnum ComponentType { get; set; } Property Value Type Description Accessor.ComponentTypeEnum Count The number of attributes referenced by this accessor. Declaration [JsonRequired] [JsonProperty(\"count\")] public int Count { get; set; } Property Value Type Description int Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Max Maximum value of each component in this attribute. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"max\")] public float[] Max { get; set; } Property Value Type Description float[] Min Minimum value of each component in this attribute. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"min\")] public float[] Min { get; set; } Property Value Type Description float[] Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Normalized Specifies whether integer data values should be normalized. Declaration [JsonProperty(\"normalized\")] public bool Normalized { get; set; } Property Value Type Description bool Sparse Sparse storage of attributes that deviate from their initialization value. Declaration [JsonProperty(\"sparse\")] public AccessorSparse Sparse { get; set; } Property Value Type Description AccessorSparse Type Specifies if the attribute is a scalar, vector, or matrix. Declaration [JsonConverter(typeof(StringEnumConverter))] [JsonRequired] [JsonProperty(\"type\")] public Accessor.TypeEnum Type { get; set; } Property Value Type Description Accessor.TypeEnum Methods ShouldSerializeBufferView() Declaration public bool ShouldSerializeBufferView() Returns Type Description bool ShouldSerializeByteOffset() Declaration public bool ShouldSerializeByteOffset() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeMax() Declaration public bool ShouldSerializeMax() Returns Type Description bool ShouldSerializeMin() Declaration public bool ShouldSerializeMin() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeNormalized() Declaration public bool ShouldSerializeNormalized() Returns Type Description bool ShouldSerializeSparse() Declaration public bool ShouldSerializeSparse() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Accessor.TypeEnum.html": {
    "href": "api/glTFLoader.Schema.Accessor.TypeEnum.html",
    "title": "Enum Accessor.TypeEnum | Evergine Doc",
    "keywords": "Enum Accessor.TypeEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Accessor.TypeEnum Fields Name Description MAT2 MAT3 MAT4 SCALAR VEC2 VEC3 VEC4 Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AccessorSparse.html": {
    "href": "api/glTFLoader.Schema.AccessorSparse.html",
    "title": "Class AccessorSparse | Evergine Doc",
    "keywords": "Class AccessorSparse Inheritance object AccessorSparse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class AccessorSparse Properties Count Number of entries stored in the sparse array. Declaration [JsonRequired] [JsonProperty(\"count\")] public int Count { get; set; } Property Value Type Description int Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Indices Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase. Declaration [JsonRequired] [JsonProperty(\"indices\")] public AccessorSparseIndices Indices { get; set; } Property Value Type Description AccessorSparseIndices Values Array of size count times number of components, storing the displaced accessor attributes pointed by indices. Substituted values must have the same componentType and number of components as the base accessor. Declaration [JsonRequired] [JsonProperty(\"values\")] public AccessorSparseValues Values { get; set; } Property Value Type Description AccessorSparseValues Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeIndices() Declaration public bool ShouldSerializeIndices() Returns Type Description bool ShouldSerializeValues() Declaration public bool ShouldSerializeValues() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AccessorSparseIndices.ComponentTypeEnum.html": {
    "href": "api/glTFLoader.Schema.AccessorSparseIndices.ComponentTypeEnum.html",
    "title": "Enum AccessorSparseIndices.ComponentTypeEnum | Evergine Doc",
    "keywords": "Enum AccessorSparseIndices.ComponentTypeEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum AccessorSparseIndices.ComponentTypeEnum Fields Name Description UNSIGNED_BYTE UNSIGNED_INT UNSIGNED_SHORT Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AccessorSparseIndices.html": {
    "href": "api/glTFLoader.Schema.AccessorSparseIndices.html",
    "title": "Class AccessorSparseIndices | Evergine Doc",
    "keywords": "Class AccessorSparseIndices Inheritance object AccessorSparseIndices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class AccessorSparseIndices Properties BufferView The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target. Declaration [JsonRequired] [JsonProperty(\"bufferView\")] public int BufferView { get; set; } Property Value Type Description int ByteOffset The offset relative to the start of the bufferView in bytes. Must be aligned. Declaration [JsonProperty(\"byteOffset\")] public int ByteOffset { get; set; } Property Value Type Description int ComponentType The indices data type. Declaration [JsonRequired] [JsonProperty(\"componentType\")] public AccessorSparseIndices.ComponentTypeEnum ComponentType { get; set; } Property Value Type Description AccessorSparseIndices.ComponentTypeEnum Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Methods ShouldSerializeByteOffset() Declaration public bool ShouldSerializeByteOffset() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AccessorSparseValues.html": {
    "href": "api/glTFLoader.Schema.AccessorSparseValues.html",
    "title": "Class AccessorSparseValues | Evergine Doc",
    "keywords": "Class AccessorSparseValues Inheritance object AccessorSparseValues Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class AccessorSparseValues Properties BufferView The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target. Declaration [JsonRequired] [JsonProperty(\"bufferView\")] public int BufferView { get; set; } Property Value Type Description int ByteOffset The offset relative to the start of the bufferView in bytes. Must be aligned. Declaration [JsonProperty(\"byteOffset\")] public int ByteOffset { get; set; } Property Value Type Description int Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Methods ShouldSerializeByteOffset() Declaration public bool ShouldSerializeByteOffset() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Animation.html": {
    "href": "api/glTFLoader.Schema.Animation.html",
    "title": "Class Animation | Evergine Doc",
    "keywords": "Class Animation Inheritance object Animation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Animation Properties Channels An array of channels, each of which targets an animation's sampler at a node's property. Different channels of the same animation can't have equal targets. Declaration [JsonRequired] [JsonProperty(\"channels\")] public AnimationChannel[] Channels { get; set; } Property Value Type Description AnimationChannel[] Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Samplers An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target). Declaration [JsonRequired] [JsonProperty(\"samplers\")] public AnimationSampler[] Samplers { get; set; } Property Value Type Description AnimationSampler[] Methods ShouldSerializeChannels() Declaration public bool ShouldSerializeChannels() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeSamplers() Declaration public bool ShouldSerializeSamplers() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AnimationChannel.html": {
    "href": "api/glTFLoader.Schema.AnimationChannel.html",
    "title": "Class AnimationChannel | Evergine Doc",
    "keywords": "Class AnimationChannel Inheritance object AnimationChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class AnimationChannel Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Sampler The index of a sampler in this animation used to compute the value for the target. Declaration [JsonRequired] [JsonProperty(\"sampler\")] public int Sampler { get; set; } Property Value Type Description int Target The index of the node and TRS property to target. Declaration [JsonRequired] [JsonProperty(\"target\")] public AnimationChannelTarget Target { get; set; } Property Value Type Description AnimationChannelTarget Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeTarget() Declaration public bool ShouldSerializeTarget() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AnimationChannelTarget.html": {
    "href": "api/glTFLoader.Schema.AnimationChannelTarget.html",
    "title": "Class AnimationChannelTarget | Evergine Doc",
    "keywords": "Class AnimationChannelTarget Inheritance object AnimationChannelTarget Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class AnimationChannelTarget Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Node The index of the node to target. Declaration [JsonProperty(\"node\")] public int? Node { get; set; } Property Value Type Description int? Path The name of the node's TRS property to modify, or the \"weights\" of the Morph Targets it instantiates. For the \"translation\" property, the values that are provided by the sampler are the translation along the x, y, and z axes. For the \"rotation\" property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the \"scale\" property, the values are the scaling factors along the x, y, and z axes. Declaration [JsonConverter(typeof(StringEnumConverter))] [JsonRequired] [JsonProperty(\"path\")] public AnimationChannelTarget.PathEnum Path { get; set; } Property Value Type Description AnimationChannelTarget.PathEnum Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeNode() Declaration public bool ShouldSerializeNode() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AnimationChannelTarget.PathEnum.html": {
    "href": "api/glTFLoader.Schema.AnimationChannelTarget.PathEnum.html",
    "title": "Enum AnimationChannelTarget.PathEnum | Evergine Doc",
    "keywords": "Enum AnimationChannelTarget.PathEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum AnimationChannelTarget.PathEnum Fields Name Description rotation scale translation weights Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AnimationSampler.html": {
    "href": "api/glTFLoader.Schema.AnimationSampler.html",
    "title": "Class AnimationSampler | Evergine Doc",
    "keywords": "Class AnimationSampler Inheritance object AnimationSampler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class AnimationSampler Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Input The index of an accessor containing keyframe input values, e.g., time. Declaration [JsonRequired] [JsonProperty(\"input\")] public int Input { get; set; } Property Value Type Description int Interpolation Interpolation algorithm. Declaration [JsonConverter(typeof(StringEnumConverter))] [JsonProperty(\"interpolation\")] public AnimationSampler.InterpolationEnum Interpolation { get; set; } Property Value Type Description AnimationSampler.InterpolationEnum Output The index of an accessor, containing keyframe output values. Declaration [JsonRequired] [JsonProperty(\"output\")] public int Output { get; set; } Property Value Type Description int Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeInterpolation() Declaration public bool ShouldSerializeInterpolation() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.AnimationSampler.InterpolationEnum.html": {
    "href": "api/glTFLoader.Schema.AnimationSampler.InterpolationEnum.html",
    "title": "Enum AnimationSampler.InterpolationEnum | Evergine Doc",
    "keywords": "Enum AnimationSampler.InterpolationEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum AnimationSampler.InterpolationEnum Fields Name Description CUBICSPLINE LINEAR STEP Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Asset.html": {
    "href": "api/glTFLoader.Schema.Asset.html",
    "title": "Class Asset | Evergine Doc",
    "keywords": "Class Asset Inheritance object Asset Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Asset Properties Copyright A copyright message suitable for display to credit the content creator. Declaration [JsonProperty(\"copyright\")] public string Copyright { get; set; } Property Value Type Description string Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Generator Tool that generated this glTF model. Useful for debugging. Declaration [JsonProperty(\"generator\")] public string Generator { get; set; } Property Value Type Description string MinVersion The minimum glTF version that this asset targets. Declaration [JsonProperty(\"minVersion\")] public string MinVersion { get; set; } Property Value Type Description string Version The glTF version that this asset targets. Declaration [JsonRequired] [JsonProperty(\"version\")] public string Version { get; set; } Property Value Type Description string Methods ShouldSerializeCopyright() Declaration public bool ShouldSerializeCopyright() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeGenerator() Declaration public bool ShouldSerializeGenerator() Returns Type Description bool ShouldSerializeMinVersion() Declaration public bool ShouldSerializeMinVersion() Returns Type Description bool ShouldSerializeVersion() Declaration public bool ShouldSerializeVersion() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Buffer.html": {
    "href": "api/glTFLoader.Schema.Buffer.html",
    "title": "Class Buffer | Evergine Doc",
    "keywords": "Class Buffer Inheritance object Buffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Buffer Properties ByteLength The length of the buffer in bytes. Declaration [JsonRequired] [JsonProperty(\"byteLength\")] public int ByteLength { get; set; } Property Value Type Description int Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Uri The uri of the buffer. Declaration [JsonProperty(\"uri\")] public string Uri { get; set; } Property Value Type Description string Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeUri() Declaration public bool ShouldSerializeUri() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.BufferView.html": {
    "href": "api/glTFLoader.Schema.BufferView.html",
    "title": "Class BufferView | Evergine Doc",
    "keywords": "Class BufferView Inheritance object BufferView Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class BufferView Properties Buffer The index of the buffer. Declaration [JsonRequired] [JsonProperty(\"buffer\")] public int Buffer { get; set; } Property Value Type Description int ByteLength The total byte length of the buffer view. Declaration [JsonRequired] [JsonProperty(\"byteLength\")] public int ByteLength { get; set; } Property Value Type Description int ByteOffset The offset into the buffer in bytes. Declaration [JsonProperty(\"byteOffset\")] public int ByteOffset { get; set; } Property Value Type Description int ByteStride The stride, in bytes. Declaration [JsonProperty(\"byteStride\")] public int? ByteStride { get; set; } Property Value Type Description int? Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Target The target that the GPU buffer should be bound to. Declaration [JsonProperty(\"target\")] public BufferView.TargetEnum? Target { get; set; } Property Value Type Description BufferView.TargetEnum? Methods ShouldSerializeByteOffset() Declaration public bool ShouldSerializeByteOffset() Returns Type Description bool ShouldSerializeByteStride() Declaration public bool ShouldSerializeByteStride() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeTarget() Declaration public bool ShouldSerializeTarget() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.BufferView.TargetEnum.html": {
    "href": "api/glTFLoader.Schema.BufferView.TargetEnum.html",
    "title": "Enum BufferView.TargetEnum | Evergine Doc",
    "keywords": "Enum BufferView.TargetEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum BufferView.TargetEnum Fields Name Description ARRAY_BUFFER ELEMENT_ARRAY_BUFFER Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Camera.html": {
    "href": "api/glTFLoader.Schema.Camera.html",
    "title": "Class Camera | Evergine Doc",
    "keywords": "Class Camera Inheritance object Camera Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Camera Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Orthographic An orthographic camera containing properties to create an orthographic projection matrix. Declaration [JsonProperty(\"orthographic\")] public CameraOrthographic Orthographic { get; set; } Property Value Type Description CameraOrthographic Perspective A perspective camera containing properties to create a perspective projection matrix. Declaration [JsonProperty(\"perspective\")] public CameraPerspective Perspective { get; set; } Property Value Type Description CameraPerspective Type Specifies if the camera uses a perspective or orthographic projection. Declaration [JsonConverter(typeof(StringEnumConverter))] [JsonRequired] [JsonProperty(\"type\")] public Camera.TypeEnum Type { get; set; } Property Value Type Description Camera.TypeEnum Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeOrthographic() Declaration public bool ShouldSerializeOrthographic() Returns Type Description bool ShouldSerializePerspective() Declaration public bool ShouldSerializePerspective() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Camera.TypeEnum.html": {
    "href": "api/glTFLoader.Schema.Camera.TypeEnum.html",
    "title": "Enum Camera.TypeEnum | Evergine Doc",
    "keywords": "Enum Camera.TypeEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Camera.TypeEnum Fields Name Description orthographic perspective Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.CameraOrthographic.html": {
    "href": "api/glTFLoader.Schema.CameraOrthographic.html",
    "title": "Class CameraOrthographic | Evergine Doc",
    "keywords": "Class CameraOrthographic Inheritance object CameraOrthographic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class CameraOrthographic Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Xmag The floating-point horizontal magnification of the view. Must not be zero. Declaration [JsonRequired] [JsonProperty(\"xmag\")] public float Xmag { get; set; } Property Value Type Description float Ymag The floating-point vertical magnification of the view. Must not be zero. Declaration [JsonRequired] [JsonProperty(\"ymag\")] public float Ymag { get; set; } Property Value Type Description float Zfar The floating-point distance to the far clipping plane. zfar must be greater than znear. Declaration [JsonRequired] [JsonProperty(\"zfar\")] public float Zfar { get; set; } Property Value Type Description float Znear The floating-point distance to the near clipping plane. Declaration [JsonRequired] [JsonProperty(\"znear\")] public float Znear { get; set; } Property Value Type Description float Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.CameraPerspective.html": {
    "href": "api/glTFLoader.Schema.CameraPerspective.html",
    "title": "Class CameraPerspective | Evergine Doc",
    "keywords": "Class CameraPerspective Inheritance object CameraPerspective Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class CameraPerspective Properties AspectRatio The floating-point aspect ratio of the field of view. Declaration [JsonProperty(\"aspectRatio\")] public float? AspectRatio { get; set; } Property Value Type Description float? Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Yfov The floating-point vertical field of view in radians. Declaration [JsonRequired] [JsonProperty(\"yfov\")] public float Yfov { get; set; } Property Value Type Description float Zfar The floating-point distance to the far clipping plane. Declaration [JsonProperty(\"zfar\")] public float? Zfar { get; set; } Property Value Type Description float? Znear The floating-point distance to the near clipping plane. Declaration [JsonRequired] [JsonProperty(\"znear\")] public float Znear { get; set; } Property Value Type Description float Methods ShouldSerializeAspectRatio() Declaration public bool ShouldSerializeAspectRatio() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeZfar() Declaration public bool ShouldSerializeZfar() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Extension.html": {
    "href": "api/glTFLoader.Schema.Extension.html",
    "title": "Class Extension | Evergine Doc",
    "keywords": "Class Extension Inheritance object Extension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Extension Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Extras.html": {
    "href": "api/glTFLoader.Schema.Extras.html",
    "title": "Class Extras | Evergine Doc",
    "keywords": "Class Extras Inheritance object Extras Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Extras Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Gltf.html": {
    "href": "api/glTFLoader.Schema.Gltf.html",
    "title": "Class Gltf | Evergine Doc",
    "keywords": "Class Gltf Inheritance object Gltf Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Gltf Properties Accessors An array of accessors. Declaration [JsonProperty(\"accessors\")] public Accessor[] Accessors { get; set; } Property Value Type Description Accessor[] Animations An array of keyframe animations. Declaration [JsonProperty(\"animations\")] public Animation[] Animations { get; set; } Property Value Type Description Animation[] Asset Metadata about the glTF asset. Declaration [JsonRequired] [JsonProperty(\"asset\")] public Asset Asset { get; set; } Property Value Type Description Asset BufferViews An array of bufferViews. Declaration [JsonProperty(\"bufferViews\")] public BufferView[] BufferViews { get; set; } Property Value Type Description BufferView[] Buffers An array of buffers. Declaration [JsonProperty(\"buffers\")] public Buffer[] Buffers { get; set; } Property Value Type Description Buffer[] Cameras An array of cameras. Declaration [JsonProperty(\"cameras\")] public Camera[] Cameras { get; set; } Property Value Type Description Camera[] Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> ExtensionsRequired Names of glTF extensions required to properly load this asset. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"extensionsRequired\")] public string[] ExtensionsRequired { get; set; } Property Value Type Description string[] ExtensionsUsed Names of glTF extensions used somewhere in this asset. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"extensionsUsed\")] public string[] ExtensionsUsed { get; set; } Property Value Type Description string[] Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Images An array of images. Declaration [JsonProperty(\"images\")] public Image[] Images { get; set; } Property Value Type Description Image[] Materials An array of materials. Declaration [JsonProperty(\"materials\")] public Material[] Materials { get; set; } Property Value Type Description Material[] Meshes An array of meshes. Declaration [JsonProperty(\"meshes\")] public Mesh[] Meshes { get; set; } Property Value Type Description Mesh[] Nodes An array of nodes. Declaration [JsonProperty(\"nodes\")] public Node[] Nodes { get; set; } Property Value Type Description Node[] Samplers An array of samplers. Declaration [JsonProperty(\"samplers\")] public Sampler[] Samplers { get; set; } Property Value Type Description Sampler[] Scene The index of the default scene. Declaration [JsonProperty(\"scene\")] public int? Scene { get; set; } Property Value Type Description int? Scenes An array of scenes. Declaration [JsonProperty(\"scenes\")] public Scene[] Scenes { get; set; } Property Value Type Description Scene[] Skins An array of skins. Declaration [JsonProperty(\"skins\")] public Skin[] Skins { get; set; } Property Value Type Description Skin[] Textures An array of textures. Declaration [JsonProperty(\"textures\")] public Texture[] Textures { get; set; } Property Value Type Description Texture[] Methods ShouldSerializeAccessors() Declaration public bool ShouldSerializeAccessors() Returns Type Description bool ShouldSerializeAnimations() Declaration public bool ShouldSerializeAnimations() Returns Type Description bool ShouldSerializeAsset() Declaration public bool ShouldSerializeAsset() Returns Type Description bool ShouldSerializeBufferViews() Declaration public bool ShouldSerializeBufferViews() Returns Type Description bool ShouldSerializeBuffers() Declaration public bool ShouldSerializeBuffers() Returns Type Description bool ShouldSerializeCameras() Declaration public bool ShouldSerializeCameras() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtensionsRequired() Declaration public bool ShouldSerializeExtensionsRequired() Returns Type Description bool ShouldSerializeExtensionsUsed() Declaration public bool ShouldSerializeExtensionsUsed() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeImages() Declaration public bool ShouldSerializeImages() Returns Type Description bool ShouldSerializeMaterials() Declaration public bool ShouldSerializeMaterials() Returns Type Description bool ShouldSerializeMeshes() Declaration public bool ShouldSerializeMeshes() Returns Type Description bool ShouldSerializeNodes() Declaration public bool ShouldSerializeNodes() Returns Type Description bool ShouldSerializeSamplers() Declaration public bool ShouldSerializeSamplers() Returns Type Description bool ShouldSerializeScene() Declaration public bool ShouldSerializeScene() Returns Type Description bool ShouldSerializeScenes() Declaration public bool ShouldSerializeScenes() Returns Type Description bool ShouldSerializeSkins() Declaration public bool ShouldSerializeSkins() Returns Type Description bool ShouldSerializeTextures() Declaration public bool ShouldSerializeTextures() Returns Type Description bool Extension Methods Interface.LoadBinaryBuffer(Gltf, int, Func<string, byte[]>) Interface.LoadBinaryBuffer(Gltf, int, string) Interface.OpenImageFile(Gltf, int, Func<string, byte[]>) Interface.OpenImageFile(Gltf, int, string) Interface.SaveBinaryModel(Gltf, byte[], BinaryWriter) Interface.SaveBinaryModel(Gltf, byte[], Stream) Interface.SaveBinaryModel(Gltf, byte[], string) Interface.SaveBinaryModelPacked(Gltf, BinaryWriter, string, byte[]) Interface.SaveBinaryModelPacked(Gltf, string, string, byte[]) Interface.SaveModel(Gltf, Stream) Interface.SaveModel(Gltf, string) Interface.SerializeModel(Gltf) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.GltfChildOfRootProperty.html": {
    "href": "api/glTFLoader.Schema.GltfChildOfRootProperty.html",
    "title": "Class GltfChildOfRootProperty | Evergine Doc",
    "keywords": "Class GltfChildOfRootProperty Inheritance object GltfChildOfRootProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class GltfChildOfRootProperty Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.GltfProperty.html": {
    "href": "api/glTFLoader.Schema.GltfProperty.html",
    "title": "Class GltfProperty | Evergine Doc",
    "keywords": "Class GltfProperty Inheritance object GltfProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class GltfProperty Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.html": {
    "href": "api/glTFLoader.Schema.html",
    "title": "Namespace glTFLoader.Schema | Evergine Doc",
    "keywords": "Namespace glTFLoader.Schema Classes Accessor AccessorSparse AccessorSparseIndices AccessorSparseValues Animation AnimationChannel AnimationChannelTarget AnimationSampler Asset Buffer BufferView Camera CameraOrthographic CameraPerspective Extension Extras Gltf GltfChildOfRootProperty GltfProperty Image Material MaterialNormalTextureInfo MaterialOcclusionTextureInfo MaterialPbrMetallicRoughness Mesh MeshPrimitive Node Sampler Scene Skin Texture TextureInfo Enums Accessor.ComponentTypeEnum Accessor.TypeEnum AccessorSparseIndices.ComponentTypeEnum AnimationChannelTarget.PathEnum AnimationSampler.InterpolationEnum BufferView.TargetEnum Camera.TypeEnum Image.MimeTypeEnum Material.AlphaModeEnum MeshPrimitive.ModeEnum Sampler.MagFilterEnum Sampler.MinFilterEnum Sampler.WrapSEnum Sampler.WrapTEnum"
  },
  "api/glTFLoader.Schema.Image.html": {
    "href": "api/glTFLoader.Schema.Image.html",
    "title": "Class Image | Evergine Doc",
    "keywords": "Class Image Inheritance object Image Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Image Properties BufferView The index of the bufferView that contains the image. Use this instead of the image's uri property. Declaration [JsonProperty(\"bufferView\")] public int? BufferView { get; set; } Property Value Type Description int? Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras MimeType The image's MIME type. Required if bufferView is defined. Declaration [JsonConverter(typeof(StringEnumConverter))] [JsonProperty(\"mimeType\")] public Image.MimeTypeEnum? MimeType { get; set; } Property Value Type Description Image.MimeTypeEnum? Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Uri The uri of the image. Declaration [JsonProperty(\"uri\")] public string Uri { get; set; } Property Value Type Description string Methods ShouldSerializeBufferView() Declaration public bool ShouldSerializeBufferView() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeMimeType() Declaration public bool ShouldSerializeMimeType() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeUri() Declaration public bool ShouldSerializeUri() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Image.MimeTypeEnum.html": {
    "href": "api/glTFLoader.Schema.Image.MimeTypeEnum.html",
    "title": "Enum Image.MimeTypeEnum | Evergine Doc",
    "keywords": "Enum Image.MimeTypeEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Image.MimeTypeEnum Fields Name Description image_jpeg image_png Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Material.AlphaModeEnum.html": {
    "href": "api/glTFLoader.Schema.Material.AlphaModeEnum.html",
    "title": "Enum Material.AlphaModeEnum | Evergine Doc",
    "keywords": "Enum Material.AlphaModeEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Material.AlphaModeEnum Fields Name Description BLEND MASK OPAQUE Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Material.html": {
    "href": "api/glTFLoader.Schema.Material.html",
    "title": "Class Material | Evergine Doc",
    "keywords": "Class Material Inheritance object Material Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Material Properties AlphaCutoff The alpha cutoff value of the material. Declaration [JsonProperty(\"alphaCutoff\")] public float AlphaCutoff { get; set; } Property Value Type Description float AlphaMode The alpha rendering mode of the material. Declaration [JsonConverter(typeof(StringEnumConverter))] [JsonProperty(\"alphaMode\")] public Material.AlphaModeEnum AlphaMode { get; set; } Property Value Type Description Material.AlphaModeEnum DoubleSided Specifies whether the material is double sided. Declaration [JsonProperty(\"doubleSided\")] public bool DoubleSided { get; set; } Property Value Type Description bool EmissiveFactor The emissive color of the material. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"emissiveFactor\")] public float[] EmissiveFactor { get; set; } Property Value Type Description float[] EmissiveTexture The emissive map texture. Declaration [JsonProperty(\"emissiveTexture\")] public TextureInfo EmissiveTexture { get; set; } Property Value Type Description TextureInfo Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string NormalTexture The normal map texture. Declaration [JsonProperty(\"normalTexture\")] public MaterialNormalTextureInfo NormalTexture { get; set; } Property Value Type Description MaterialNormalTextureInfo OcclusionTexture The occlusion map texture. Declaration [JsonProperty(\"occlusionTexture\")] public MaterialOcclusionTextureInfo OcclusionTexture { get; set; } Property Value Type Description MaterialOcclusionTextureInfo PbrMetallicRoughness A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of pbrMetallicRoughness apply. Declaration [JsonProperty(\"pbrMetallicRoughness\")] public MaterialPbrMetallicRoughness PbrMetallicRoughness { get; set; } Property Value Type Description MaterialPbrMetallicRoughness Methods ShouldSerializeAlphaCutoff() Declaration public bool ShouldSerializeAlphaCutoff() Returns Type Description bool ShouldSerializeAlphaMode() Declaration public bool ShouldSerializeAlphaMode() Returns Type Description bool ShouldSerializeDoubleSided() Declaration public bool ShouldSerializeDoubleSided() Returns Type Description bool ShouldSerializeEmissiveFactor() Declaration public bool ShouldSerializeEmissiveFactor() Returns Type Description bool ShouldSerializeEmissiveTexture() Declaration public bool ShouldSerializeEmissiveTexture() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeNormalTexture() Declaration public bool ShouldSerializeNormalTexture() Returns Type Description bool ShouldSerializeOcclusionTexture() Declaration public bool ShouldSerializeOcclusionTexture() Returns Type Description bool ShouldSerializePbrMetallicRoughness() Declaration public bool ShouldSerializePbrMetallicRoughness() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.MaterialNormalTextureInfo.html": {
    "href": "api/glTFLoader.Schema.MaterialNormalTextureInfo.html",
    "title": "Class MaterialNormalTextureInfo | Evergine Doc",
    "keywords": "Class MaterialNormalTextureInfo Inheritance object MaterialNormalTextureInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class MaterialNormalTextureInfo Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Index The index of the texture. Declaration [JsonRequired] [JsonProperty(\"index\")] public int Index { get; set; } Property Value Type Description int Scale The scalar multiplier applied to each normal vector of the normal texture. Declaration [JsonProperty(\"scale\")] public float Scale { get; set; } Property Value Type Description float TexCoord The set index of texture's TEXCOORD attribute used for texture coordinate mapping. Declaration [JsonProperty(\"texCoord\")] public int TexCoord { get; set; } Property Value Type Description int Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeScale() Declaration public bool ShouldSerializeScale() Returns Type Description bool ShouldSerializeTexCoord() Declaration public bool ShouldSerializeTexCoord() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.MaterialOcclusionTextureInfo.html": {
    "href": "api/glTFLoader.Schema.MaterialOcclusionTextureInfo.html",
    "title": "Class MaterialOcclusionTextureInfo | Evergine Doc",
    "keywords": "Class MaterialOcclusionTextureInfo Inheritance object MaterialOcclusionTextureInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class MaterialOcclusionTextureInfo Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Index The index of the texture. Declaration [JsonRequired] [JsonProperty(\"index\")] public int Index { get; set; } Property Value Type Description int Strength A scalar multiplier controlling the amount of occlusion applied. Declaration [JsonProperty(\"strength\")] public float Strength { get; set; } Property Value Type Description float TexCoord The set index of texture's TEXCOORD attribute used for texture coordinate mapping. Declaration [JsonProperty(\"texCoord\")] public int TexCoord { get; set; } Property Value Type Description int Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeStrength() Declaration public bool ShouldSerializeStrength() Returns Type Description bool ShouldSerializeTexCoord() Declaration public bool ShouldSerializeTexCoord() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.MaterialPbrMetallicRoughness.html": {
    "href": "api/glTFLoader.Schema.MaterialPbrMetallicRoughness.html",
    "title": "Class MaterialPbrMetallicRoughness | Evergine Doc",
    "keywords": "Class MaterialPbrMetallicRoughness Inheritance object MaterialPbrMetallicRoughness Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class MaterialPbrMetallicRoughness Properties BaseColorFactor The material's base color factor. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"baseColorFactor\")] public float[] BaseColorFactor { get; set; } Property Value Type Description float[] BaseColorTexture The base color texture. Declaration [JsonProperty(\"baseColorTexture\")] public TextureInfo BaseColorTexture { get; set; } Property Value Type Description TextureInfo Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras MetallicFactor The metalness of the material. Declaration [JsonProperty(\"metallicFactor\")] public float MetallicFactor { get; set; } Property Value Type Description float MetallicRoughnessTexture The metallic-roughness texture. Declaration [JsonProperty(\"metallicRoughnessTexture\")] public TextureInfo MetallicRoughnessTexture { get; set; } Property Value Type Description TextureInfo RoughnessFactor The roughness of the material. Declaration [JsonProperty(\"roughnessFactor\")] public float RoughnessFactor { get; set; } Property Value Type Description float Methods ShouldSerializeBaseColorFactor() Declaration public bool ShouldSerializeBaseColorFactor() Returns Type Description bool ShouldSerializeBaseColorTexture() Declaration public bool ShouldSerializeBaseColorTexture() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeMetallicFactor() Declaration public bool ShouldSerializeMetallicFactor() Returns Type Description bool ShouldSerializeMetallicRoughnessTexture() Declaration public bool ShouldSerializeMetallicRoughnessTexture() Returns Type Description bool ShouldSerializeRoughnessFactor() Declaration public bool ShouldSerializeRoughnessFactor() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Mesh.html": {
    "href": "api/glTFLoader.Schema.Mesh.html",
    "title": "Class Mesh | Evergine Doc",
    "keywords": "Class Mesh Inheritance object Mesh Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Mesh Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Primitives An array of primitives, each defining geometry to be rendered with a material. Declaration [JsonRequired] [JsonProperty(\"primitives\")] public MeshPrimitive[] Primitives { get; set; } Property Value Type Description MeshPrimitive[] Weights Array of weights to be applied to the Morph Targets. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"weights\")] public float[] Weights { get; set; } Property Value Type Description float[] Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializePrimitives() Declaration public bool ShouldSerializePrimitives() Returns Type Description bool ShouldSerializeWeights() Declaration public bool ShouldSerializeWeights() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.MeshPrimitive.html": {
    "href": "api/glTFLoader.Schema.MeshPrimitive.html",
    "title": "Class MeshPrimitive | Evergine Doc",
    "keywords": "Class MeshPrimitive Inheritance object MeshPrimitive Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class MeshPrimitive Properties Attributes A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data. Declaration [JsonRequired] [JsonProperty(\"attributes\")] public Dictionary<string, int> Attributes { get; set; } Property Value Type Description Dictionary<string, int> Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Indices The index of the accessor that contains the indices. Declaration [JsonProperty(\"indices\")] public int? Indices { get; set; } Property Value Type Description int? Material The index of the material to apply to this primitive when rendering. Declaration [JsonProperty(\"material\")] public int? Material { get; set; } Property Value Type Description int? Mode The type of primitives to render. Declaration [JsonProperty(\"mode\")] public MeshPrimitive.ModeEnum Mode { get; set; } Property Value Type Description MeshPrimitive.ModeEnum Targets An array of Morph Targets, each Morph Target is a dictionary mapping attributes (only POSITION, NORMAL, and TANGENT supported) to their deviations in the Morph Target. Declaration [JsonProperty(\"targets\")] public Dictionary<string, int>[] Targets { get; set; } Property Value Type Description Dictionary<string, int>[] Methods ShouldSerializeAttributes() Declaration public bool ShouldSerializeAttributes() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeIndices() Declaration public bool ShouldSerializeIndices() Returns Type Description bool ShouldSerializeMaterial() Declaration public bool ShouldSerializeMaterial() Returns Type Description bool ShouldSerializeMode() Declaration public bool ShouldSerializeMode() Returns Type Description bool ShouldSerializeTargets() Declaration public bool ShouldSerializeTargets() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.MeshPrimitive.ModeEnum.html": {
    "href": "api/glTFLoader.Schema.MeshPrimitive.ModeEnum.html",
    "title": "Enum MeshPrimitive.ModeEnum | Evergine Doc",
    "keywords": "Enum MeshPrimitive.ModeEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum MeshPrimitive.ModeEnum Fields Name Description LINES LINE_LOOP LINE_STRIP POINTS TRIANGLES TRIANGLE_FAN TRIANGLE_STRIP Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Node.html": {
    "href": "api/glTFLoader.Schema.Node.html",
    "title": "Class Node | Evergine Doc",
    "keywords": "Class Node Inheritance object Node Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Node Properties Camera The index of the camera referenced by this node. Declaration [JsonProperty(\"camera\")] public int? Camera { get; set; } Property Value Type Description int? Children The indices of this node's children. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"children\")] public int[] Children { get; set; } Property Value Type Description int[] Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Matrix A floating-point 4x4 transformation matrix stored in column-major order. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"matrix\")] public float[] Matrix { get; set; } Property Value Type Description float[] Mesh The index of the mesh in this node. Declaration [JsonProperty(\"mesh\")] public int? Mesh { get; set; } Property Value Type Description int? Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Rotation The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"rotation\")] public float[] Rotation { get; set; } Property Value Type Description float[] Scale The node's non-uniform scale, given as the scaling factors along the x, y, and z axes. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"scale\")] public float[] Scale { get; set; } Property Value Type Description float[] Skin The index of the skin referenced by this node. Declaration [JsonProperty(\"skin\")] public int? Skin { get; set; } Property Value Type Description int? Translation The node's translation along the x, y, and z axes. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"translation\")] public float[] Translation { get; set; } Property Value Type Description float[] Weights The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"weights\")] public float[] Weights { get; set; } Property Value Type Description float[] Methods ShouldSerializeCamera() Declaration public bool ShouldSerializeCamera() Returns Type Description bool ShouldSerializeChildren() Declaration public bool ShouldSerializeChildren() Returns Type Description bool ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeMatrix() Declaration public bool ShouldSerializeMatrix() Returns Type Description bool ShouldSerializeMesh() Declaration public bool ShouldSerializeMesh() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeRotation() Declaration public bool ShouldSerializeRotation() Returns Type Description bool ShouldSerializeScale() Declaration public bool ShouldSerializeScale() Returns Type Description bool ShouldSerializeSkin() Declaration public bool ShouldSerializeSkin() Returns Type Description bool ShouldSerializeTranslation() Declaration public bool ShouldSerializeTranslation() Returns Type Description bool ShouldSerializeWeights() Declaration public bool ShouldSerializeWeights() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Sampler.html": {
    "href": "api/glTFLoader.Schema.Sampler.html",
    "title": "Class Sampler | Evergine Doc",
    "keywords": "Class Sampler Inheritance object Sampler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Sampler Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras MagFilter Magnification filter. Declaration [JsonProperty(\"magFilter\")] public Sampler.MagFilterEnum? MagFilter { get; set; } Property Value Type Description Sampler.MagFilterEnum? MinFilter Minification filter. Declaration [JsonProperty(\"minFilter\")] public Sampler.MinFilterEnum? MinFilter { get; set; } Property Value Type Description Sampler.MinFilterEnum? Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string WrapS s wrapping mode. Declaration [JsonProperty(\"wrapS\")] public Sampler.WrapSEnum WrapS { get; set; } Property Value Type Description Sampler.WrapSEnum WrapT t wrapping mode. Declaration [JsonProperty(\"wrapT\")] public Sampler.WrapTEnum WrapT { get; set; } Property Value Type Description Sampler.WrapTEnum Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeMagFilter() Declaration public bool ShouldSerializeMagFilter() Returns Type Description bool ShouldSerializeMinFilter() Declaration public bool ShouldSerializeMinFilter() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeWrapS() Declaration public bool ShouldSerializeWrapS() Returns Type Description bool ShouldSerializeWrapT() Declaration public bool ShouldSerializeWrapT() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Sampler.MagFilterEnum.html": {
    "href": "api/glTFLoader.Schema.Sampler.MagFilterEnum.html",
    "title": "Enum Sampler.MagFilterEnum | Evergine Doc",
    "keywords": "Enum Sampler.MagFilterEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Sampler.MagFilterEnum Fields Name Description LINEAR NEAREST Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Sampler.MinFilterEnum.html": {
    "href": "api/glTFLoader.Schema.Sampler.MinFilterEnum.html",
    "title": "Enum Sampler.MinFilterEnum | Evergine Doc",
    "keywords": "Enum Sampler.MinFilterEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Sampler.MinFilterEnum Fields Name Description LINEAR LINEAR_MIPMAP_LINEAR LINEAR_MIPMAP_NEAREST NEAREST NEAREST_MIPMAP_LINEAR NEAREST_MIPMAP_NEAREST Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Sampler.WrapSEnum.html": {
    "href": "api/glTFLoader.Schema.Sampler.WrapSEnum.html",
    "title": "Enum Sampler.WrapSEnum | Evergine Doc",
    "keywords": "Enum Sampler.WrapSEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Sampler.WrapSEnum Fields Name Description CLAMP_TO_EDGE MIRRORED_REPEAT REPEAT Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Sampler.WrapTEnum.html": {
    "href": "api/glTFLoader.Schema.Sampler.WrapTEnum.html",
    "title": "Enum Sampler.WrapTEnum | Evergine Doc",
    "keywords": "Enum Sampler.WrapTEnum Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public enum Sampler.WrapTEnum Fields Name Description CLAMP_TO_EDGE MIRRORED_REPEAT REPEAT Extension Methods EnumExtensions.HasFlag(Enum, Enum) ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Scene.html": {
    "href": "api/glTFLoader.Schema.Scene.html",
    "title": "Class Scene | Evergine Doc",
    "keywords": "Class Scene Inheritance object Scene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Scene Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Nodes The indices of each root node. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonProperty(\"nodes\")] public int[] Nodes { get; set; } Property Value Type Description int[] Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeNodes() Declaration public bool ShouldSerializeNodes() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Skin.html": {
    "href": "api/glTFLoader.Schema.Skin.html",
    "title": "Class Skin | Evergine Doc",
    "keywords": "Class Skin Inheritance object Skin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Skin Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras InverseBindMatrices The index of the accessor containing the floating-point 4x4 inverse-bind matrices. The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied. Declaration [JsonProperty(\"inverseBindMatrices\")] public int? InverseBindMatrices { get; set; } Property Value Type Description int? Joints Indices of skeleton nodes, used as joints in this skin. Declaration [JsonConverter(typeof(ArrayConverter))] [JsonRequired] [JsonProperty(\"joints\")] public int[] Joints { get; set; } Property Value Type Description int[] Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Skeleton The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root. Declaration [JsonProperty(\"skeleton\")] public int? Skeleton { get; set; } Property Value Type Description int? Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeInverseBindMatrices() Declaration public bool ShouldSerializeInverseBindMatrices() Returns Type Description bool ShouldSerializeJoints() Declaration public bool ShouldSerializeJoints() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeSkeleton() Declaration public bool ShouldSerializeSkeleton() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.Texture.html": {
    "href": "api/glTFLoader.Schema.Texture.html",
    "title": "Class Texture | Evergine Doc",
    "keywords": "Class Texture Inheritance object Texture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class Texture Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Name The user-defined name of this object. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description string Sampler The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used. Declaration [JsonProperty(\"sampler\")] public int? Sampler { get; set; } Property Value Type Description int? Source The index of the image used by this texture. Declaration [JsonProperty(\"source\")] public int? Source { get; set; } Property Value Type Description int? Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeName() Declaration public bool ShouldSerializeName() Returns Type Description bool ShouldSerializeSampler() Declaration public bool ShouldSerializeSampler() Returns Type Description bool ShouldSerializeSource() Declaration public bool ShouldSerializeSource() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/glTFLoader.Schema.TextureInfo.html": {
    "href": "api/glTFLoader.Schema.TextureInfo.html",
    "title": "Class TextureInfo | Evergine Doc",
    "keywords": "Class TextureInfo Inheritance object TextureInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: glTFLoader.Schema Assembly: Evergine.Assets.dll Syntax public class TextureInfo Properties Extensions Dictionary object with extension-specific objects. Declaration [JsonProperty(\"extensions\")] public Dictionary<string, object> Extensions { get; set; } Property Value Type Description Dictionary<string, object> Extras Application-specific data. Declaration [JsonProperty(\"extras\")] public Extras Extras { get; set; } Property Value Type Description Extras Index The index of the texture. Declaration [JsonRequired] [JsonProperty(\"index\")] public int Index { get; set; } Property Value Type Description int TexCoord The set index of texture's TEXCOORD attribute used for texture coordinate mapping. Declaration [JsonProperty(\"texCoord\")] public int TexCoord { get; set; } Property Value Type Description int Methods ShouldSerializeExtensions() Declaration public bool ShouldSerializeExtensions() Returns Type Description bool ShouldSerializeExtras() Declaration public bool ShouldSerializeExtras() Returns Type Description bool ShouldSerializeTexCoord() Declaration public bool ShouldSerializeTexCoord() Returns Type Description bool Extension Methods ReflectionHelper.GetMemberAssembly(object) ReflectionHelper.GetTypeName(object)"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Evergine API | Evergine Doc",
    "keywords": "Evergine API This section of the documentation contains details of the C# API that Evergine provides. To use this information, you should be familiar with the basic theory and practice of coding in Evergine which is explained in the Basics section of our manual. API are grouped by namespaces they belong to, and can be selected from the sidebar to the left."
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System | Evergine Doc",
    "keywords": "Namespace System Classes MathF Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions."
  },
  "api/System.MathF.html": {
    "href": "api/System.MathF.html",
    "title": "Class MathF | Evergine Doc",
    "keywords": "Class MathF Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions. Inheritance object MathF Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: System Assembly: Evergine.Mathematics.dll Syntax public static class MathF Fields E Represents the natural logarithmic base, specified by the constant, e. Declaration public const float E = 2.7182817 Field Value Type Description float PI Represents the ratio of the circumference of a circle to its diameter, specified by the constant, p. Declaration public const float PI = 3.1415927 Field Value Type Description float Tau Represents the number of radians in one turn, specified by the constant, τ. Declaration public const float Tau = 6.2831855 Field Value Type Description float Methods Abs(float) Returns the absolute value of a single-precision floating-point number. Declaration public static float Abs(float x) Parameters Type Name Description float x A number that is greater than or equal to System.Single.MinValue, but less than or equal to System.Single.MaxValue. Returns Type Description float A single-precision floating-point number, x, such that 0 ≤ x ≤ System.Single.MaxValue. Acos(float) Returns the angle whose cosine is the specified number. Declaration public static float Acos(float x) Parameters Type Name Description float x A number representing a cosine, where x must be greater than or equal to -1, but less than or equal to 1. Returns Type Description float An angle, θ, measured in radians, such that 0 ≤ θ ≤ π. -or- System.Single. Asin(float) Returns the angle whose sine is the specified number. Declaration public static float Asin(float x) Parameters Type Name Description float x A number representing a sine, where x must be greater than or equal to -1, but less than or equal to 1. Returns Type Description float An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2. Atan(float) Returns the angle whose tangent is the specified number. Declaration public static float Atan(float x) Parameters Type Name Description float x A number representing a tangent. Returns Type Description float An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2. Atan2(float, float) Returns the angle whose tangent is the quotient of two specified numbers. Declaration public static float Atan2(float y, float x) Parameters Type Name Description float y The y coordinate of a point. float x The x coordinate of a point. Returns Type Description float An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane. Ceiling(float) Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number. Declaration public static float Ceiling(float x) Parameters Type Name Description float x A single-precision floating-point number. Returns Type Description float The smallest integral value that is greater than or equal to x. Cos(float) Returns the cosine of the specified angle. Declaration public static float Cos(float x) Parameters Type Name Description float x An angle, measured in radians. Returns Type Description float The cosine of x. Cosh(float) Returns the hyperbolic cosine of the specified angle. Declaration public static float Cosh(float x) Parameters Type Name Description float x An angle, measured in radians. Returns Type Description float The hyperbolic cosine of x. Exp(float) Returns e raised to the specified power. Declaration public static float Exp(float x) Parameters Type Name Description float x A number specifying a power. Returns Type Description float The number e raised to the power x. Floor(float) Returns the largest integral value less than or equal to the specified single-precision floating-point number. Declaration public static float Floor(float x) Parameters Type Name Description float x A single-precision floating-point number. Returns Type Description float The largest integral value less than or equal to x. IEEERemainder(float, float) Returns the remainder resulting from the division of a specified number by another specified number. Declaration public static float IEEERemainder(float x, float y) Parameters Type Name Description float x A dividend. float y A divisor. Returns Type Description float A number equal to x - (y Q), where Q is the quotient of x / y rounded to the nearest integer (if x / y falls halfway between two integers, the even integer is returned). Log(float) Returns the natural (base e) logarithm of a specified number. Declaration public static float Log(float x) Parameters Type Name Description float x The number whose logarithm is to be found. Returns Type Description float Returns the natural (base e) logarithm. Log(float, float) Returns the logarithm of a specified number in a specified base. Declaration public static float Log(float x, float y) Parameters Type Name Description float x The number whose logarithm is to be found. float y The base. Returns Type Description float Returns the logarithm. Log10(float) Returns the base 10 logarithm of a specified number. Declaration public static float Log10(float x) Parameters Type Name Description float x A number whose logarithm is to be found. Returns Type Description float Returns the base 10 logarithm. Max(float, float) Returns the larger of two single-precision floating-point numbers. Declaration public static float Max(float x, float y) Parameters Type Name Description float x The first of two single-precision floating-point numbers to compare. float y The second of two single-precision floating-point numbers to compare. Returns Type Description float Parameter x or y, whichever is larger. If x, or y, or both x and y are equal to System.Single.NaN, System.Single.NaN is returned. MaxMagnitude(float, float) Returns the larger magnitude of two single-precision floating-point numbers. Declaration public static float MaxMagnitude(float x, float y) Parameters Type Name Description float x The first of two single-precision floating-point numbers to compare. float y The second of two single-precision floating-point numbers to compare. Returns Type Description float Parameter x or y, whichever has the larger magnitude. If x, or y, or both x and y are equal to System.Single.NaN, System.Single.NaN is returned. Min(float, float) Returns the smaller of two single-precision floating-point numbers. Declaration public static float Min(float x, float y) Parameters Type Name Description float x The first of two single-precision floating-point numbers to compare. float y The second of two single-precision floating-point numbers to compare. Returns Type Description float Parameter x or y, whichever is smaller. If x, y, or both x and y are equal to System.Single.NaN, System.Single.NaN is returned. Pow(float, float) Returns a specified number raised to the specified power. Declaration public static float Pow(float x, float y) Parameters Type Name Description float x A single-precision floating-point number to be raised to a power. float y A single-precision floating-point number that specifies a power. Returns Type Description float The number x raised to the power y. Round(float) Rounds a single-precision floating-point value to a specified number of fractional digits using the specified rounding convention. Declaration public static float Round(float x) Parameters Type Name Description float x A single-precision floating-point number to be rounded. Returns Type Description float The number that x is rounded to that has digits fractional digits. If x has fewer fractional digits than digits, x is returned unchanged. Round(float, int) Rounds a single-precision floating-point value to a specified number of fractional digits using the specified rounding convention. Declaration public static float Round(float x, int digits) Parameters Type Name Description float x A single-precision floating-point number to be rounded. int digits The number of fractional digits in the return value. Returns Type Description float The number that x is rounded to that has digits fractional digits. If x has fewer fractional digits than digits, x is returned unchanged. Round(float, int, MidpointRounding) Rounds a single-precision floating-point value to a specified number of fractional digits using the specified rounding convention. Declaration public static float Round(float x, int digits, MidpointRounding mode) Parameters Type Name Description float x A single-precision floating-point number to be rounded. int digits The number of fractional digits in the return value. MidpointRounding mode One of the enumeration values that specifies which rounding strategy to use. Returns Type Description float The number that x is rounded to that has digits fractional digits. If x has fewer fractional digits than digits, x is returned unchanged. Round(float, MidpointRounding) Rounds a single-precision floating-point value to an integer using the specified rounding convention. Declaration public static float Round(float x, MidpointRounding mode) Parameters Type Name Description float x A single-precision floating-point number to be rounded. MidpointRounding mode One of the enumeration values that specifies which rounding strategy to use. Returns Type Description float The integer that x is rounded to using the mode rounding convention. This method returns a System.Single instead of an integral type. Sign(float) Returns an integer that indicates the sign of a single-precision floating-point number. Declaration public static int Sign(float x) Parameters Type Name Description float x A signed number. Returns Type Description int Returns an integer that indicates the sign of a number. Sin(float) Returns the sine of the specified angle. Declaration public static float Sin(float x) Parameters Type Name Description float x An angle, measured in radians. Returns Type Description float The sine of x. Sinh(float) Returns the hyperbolic sine of the specified angle. Declaration public static float Sinh(float x) Parameters Type Name Description float x An angle, measured in radians. Returns Type Description float The hyperbolic sine of x. Sqrt(float) Returns the square root of a specified number. Declaration public static float Sqrt(float x) Parameters Type Name Description float x The number whose square root is to be found. Returns Type Description float Returns the square root. Tan(float) Returns the tangent of the specified angle. Declaration public static float Tan(float x) Parameters Type Name Description float x An angle, measured in radians. Returns Type Description float Returns the tangent. Tanh(float) Returns the hyperbolic tangent of the specified angle. Declaration public static float Tanh(float x) Parameters Type Name Description float x An angle, measured in radians. Returns Type Description float The hyperbolic tangent of x. Truncate(float) Calculates the integral part of a specified single-precision floating-point number. Declaration public static float Truncate(float x) Parameters Type Name Description float x A number to truncate. Returns Type Description float The integral part of x."
  },
  "index.html": {
    "href": "index.html",
    "title": "Evergine Documentation | Evergine Doc",
    "keywords": "Evergine Documentation Manual Learn how to create applications with Evergine! C# API Reference Full C# scripting API reference."
  },
  "manual/addons/arr/getting_started.html": {
    "href": "manual/addons/arr/getting_started.html",
    "title": "Getting started | Evergine Doc",
    "keywords": "Getting started Follow the steps below to quickly start running Azure Remote Rendering on your Evergine project: Create an Azure Remote Rendering instance at Azure portal (you need an Azure account). Once created, copy your account id, key, and domain. You will need them to configure the session on your app. Create a new Evergine project, or open an existing one. Install the Evergine.ARR add-on using the add-on managemer in Evergine Studio. Add the Azure Remote Rendering service to your Application public partial class MainApplication : Application { public MainApplication() { ... this.Container.RegisterInstance(new AzureRemoteRenderingService()); ForegroundTaskScheduler.Foreground.Configure(this.Container); BackgroundTaskScheduler.Background.Configure(this.Container); } ... Go to Evergine Studio, add the ARRSessionManager component on the Environment manager entity and configure it using your credentials. Add the Azure Remote Rendering proxy camera component to the main camera. For each big model that you want to render remotely, add an entity with ARRModelLoader and ARREntitySync components. Note The Url of your model can be obtained from Azure Remote Rendering instance in Azure Portal. If you don't have any, you can use the default builtin://Engine. And that's it! The project should be ready to render the model(s) on windows or other platforms like UWP or Mixed Reality. Check out the demo for more information or the MRTK add-on to add AR controls to your project and start interacting with your models."
  },
  "manual/addons/arr/index.html": {
    "href": "manual/addons/arr/index.html",
    "title": "Azure Remote Rendering (ARR) | Evergine Doc",
    "keywords": "Azure Remote Rendering (ARR) Azure Remote Rendering brings your highest quality 3D content and interactive experiences to mixed reality. This service uses the computing power of Azure to render even the most complex models in the cloud and streams them in real time to your devices, so that users can interact and collaborate with 3D content in amazing detail. It’s an open-source project and it is located in this repository. In this section Getting started"
  },
  "manual/addons/index.html": {
    "href": "manual/addons/index.html",
    "title": "Add-ons | Evergine Doc",
    "keywords": "Add-ons Add-ons are Evergine packages that add specific functionalities and assets to your project. They are meant resolve some key issues that companies face when they create industrial 3D application using their common resources. They may contain assets, prefabs, behaviors, components and nuget packages that will be incorporated to your project after install. Available Add-ons MRTK ARR XRV Add-ons in Evergine Studio To check wich packages are installed in your application, you just need to take a look to the Project Explorer tab in Evergine Studio, and inspect the Dependencies section: Add-ons Manager The Add-ons manager help you installing new ones. There are 3 posibilities to open it: Use File menu, where you will find a new “Manage dependencies” menu item. Under Assets explorer, there is a node with name “Dependencies”. Right click on that will show a context menu with a menu entry with the same name in the point above. Access to “Project settings”, there are two tabs now, one for project profiles, and other for project add-ons. The manager contains two tabs: Browse, where you can find all available add-ons; and Installed, where you can check all add-ons that are currently in use in your project. Both tabs contain a similar user interface. Above those tabs, you will find a searching area: Text search, to filter results by name and tags. Source selector, to limit results to an specific packages source. Depending on search criteria, number of displayed add-ons may vary. Each add-on item within the list displays following information: Name, icon and description. Under the icon, in bottom left corner, it will display a tick inside a green circle if you are already using last available version, or an arrow inside a blue circle if you are using that add-on, but there is a newer version available. On top right corner, you will find latest available version vs installed version (if any). For those add-ons which last version is already in use, a single version label is displayed. Also, if you move your mouse over list items, some buttons to install last add-on version or remove an add-on should appear. When selecting an item in the list, a detail view is loaded with all the information related to an add-on. There, you can also install or uninstall the add-on, and you are even able to install a specific version. Note the NuGet dependencies section, that indicates minimal versions of engine and/or third-party NuGet packages. As it is mandatory to have aligned versions of the engine packages, if you try to install an add-on with an engine dependency higher than the one you are using, a project restart will be required and automatically scheduled. For add-ons which NuGet dependencies are not expressed as explicit version number, you should install those packages manually. In other hand, for third-party NuGet dependencies with explicit version number, they will be added or updated automatically once package is added. Customize assets By default, all assets included in a package cannot be modified. This is indicated by this lock icon: . However, you can modify an asset included in the package. When you modify a package asset, and try to save it, the following message apperas, indicating if you want to create a new copy of this asset in your project: Automatically a new copy of the asset will be created on your local folder project, overwriting the one provided by the package. By doing this allows you to modify or adapt Evergine core assets to your application requirements Develop new Add-ons The ability to include new add-ons to external companies will be available in future releases. For now only add-ons created by Evergine Team can be installed through Evergine Studio. Upcoming packages Evergine is on continuous development, and more upcoming packages are coming: Package Description Noesis GUI Using NoesisGUI with Evergine allows you to create appealing User Interfaces using powerful XAML tools like Microsoft Expression Blend. CAD Formats Take your industrial CAD/3D model and bring it into your Evergine application. Bing Maps Provides Bing Maps integration with Evergine, that allows you to utilize Bing Maps 3D mapping data in your application."
  },
  "manual/addons/mrtk/configurators.html": {
    "href": "manual/addons/mrtk/configurators.html",
    "title": "Configurators | Evergine Doc",
    "keywords": "Configurators The configurator components were created to ease the customization process and, in some cases, extend the functionality of certain controls. To use them, add them to the prefab root after instancing a prefab. There are some examples for all configurators in the test scenes in the MRTK Demo project. Standard button configurator This configurator can manage the configuration of certain aspects of a basic button, like the icon, the button text and the material plate. If the color should also be changed, the CreatesNewIconMaterialInstance and CreatesNewBackPlateMaterialInstance checkboxes will do so that the change does not affect other instances. ToggleButton When added to a button, the ToggleButton component extends its base functionality, so the button will have two different styles depending on whether it is in the ON or the OFF state. This component adds two ToggleButtonConfigurator components, which can be used to configure each state in a very similar way as the StandardButtonConfigurator. MultiState buttons The ToggleButton component adds the ToggleStateManager and two ToggleButtonConfigurators to the button. There's also an implementation for tristate buttons by way of adding a MultiStateStateManager and three MultiStateButtonConfigurator components to a button. All these *StateManager classes extend the BaseStateManager class using an enum with all the states a button can have. If more than three states are needed, a new class can be created using this base class and a custom enum. The configurator components also need to be implemented using this enum, so each one is associated to a single state. Slider configurator This configurator contains specific settings to change the track and thumb materials and the label text in a slider."
  },
  "manual/addons/mrtk/custom_controls.html": {
    "href": "manual/addons/mrtk/custom_controls.html",
    "title": "Creating custom controls | Evergine Doc",
    "keywords": "Creating custom controls All MRTK controls use custom interfaces in order to receive user interaction events. In order to receive these events, most components need to be added to an entity that has a BoxCollider component and a StaticBody component, so that they are properly managed in the physics engine. Focus events Components that implement the IMixedRealityFocusHandler interface will receive focus events. A control gets focus in the following scenarios: When a near pointer is close to the entity. When a far pointer is pointing to the entity using the ray. When the user is looking at the entity (using the GazeProvider). The default button style makes use of the focus event by raising the icon and text when acquiring focus. Touch events Components that implement the IMixedRealityTouchHandler interface will receive events when the near pointer is making contact with the entity's collider. These events are used in the PressableButton component (which is part of the standard button). It enables the main feature of the button. Pointer events Components that implement the IMixedRealityPointerHandler interface will receive pointer events: Pointer down: when the user grabs an object, either by near interaction or far interaction, using the air-tap gesture. Pointer dragged: when the user has already grabbed the object and is still interacting with it, so the object can receive position updates. Pointer up: when the user has stopped interacting with the object. These are used for example in the manipulation handlers, which allow the user to grab an object and move, rotate or scale it arbitrarily. Speech events Components that implement the IMixedRealitySpeechHandler interface will receive an event whenever the user performs voice commands. These can be used to remotely activate buttons or to perform global actions in the application. These components do not need to be attached to an entity with a collider, since they don't rely on the physics engine."
  },
  "manual/addons/mrtk/demo_project.html": {
    "href": "manual/addons/mrtk/demo_project.html",
    "title": "Demo project | Evergine Doc",
    "keywords": "Demo project There is a demo scene in the project's repository which showcases all currently implemented features. Press interaction This area contains some examples using the PressableButton class. This includes: Standard buttons Toggle buttons Some piano keys Touch interaction This area contains some simple examples using the HandInteractionTouch which implements a simple touch behavior. These work only with near interaction. Slider interaction This area includes some sliders which use the PinchSlider class. They are connected to another object and allow the user to change its color. Manipulation interaction These examples showcase the SimpleManipulationHandler component. Some of the examples are configured in such a way that manipulation is restricted in some ways. In addition, some objects interact with the physics engine, so they can be thrown around. If they get too far away, they will be placed back on their starting position. Bounding box The examples in this group use the BoundingBox component, which adds some handles to an object to aid with rotation and uniform and non-uniform scaling. These handles can be hidden if that kind of manipulation is not needed. This component can be combined with the SimpleManipulationHandler component for more flexible manipulation options. Axis manipulation handler There's an example of the AxisManipulationHandler component. With it, the user will see a 3-axis handle which can be moved in any axis or combination of axes independently, without affecting the rest. Pan and zoom control The HandInteractionPanZoom example shows this component in action. The user can pan and zoom its contents using both near and far interaction."
  },
  "manual/addons/mrtk/getting_started.html": {
    "href": "manual/addons/mrtk/getting_started.html",
    "title": "Getting started | Evergine Doc",
    "keywords": "Getting started These are the initial steps to follow in order to get started using our Mixed Reality Toolkit: Create a new Evergine project, or open an existing one. Install the Evergine.MRTK add-on using the add-on management option in Evergine Studio. Change all scenes that will use MRTK functionality so they extend MRTK's XRScene class instead of Evergine's Scene class. There are some material properties that the scene uses, which need to be filled in. using System; using Evergine.MRTK.Scenes; namespace Evergine.MRTK.Demo.Scenes { public class DemoScene : XRScene { protected override Guid CursorMatPressed => EvergineContent.MRTK.Materials.Cursor.CursorPinch; protected override Guid CursorMatReleased => EvergineContent.MRTK.Materials.Cursor.CursorBase; protected override Guid HoloHandsMat => EvergineContent.MRTK.Materials.HoloHands; protected override Guid SpatialMappingMat => Guid.Empty; protected override Guid HandRayTexture => EvergineContent.MRTK.Textures.line_dots_png; protected override Guid HandRaySampler => EvergineContent.MRTK.Samplers.LinearWrapSampler; } } Note There will probably be an error related to the CreateScene method, which is sealed in the XRScene class. If the scene needs to be modified via code, this can be done by overriding the OnPostCreateXRScene instead. Register an instance of the NoesisService class in the Application class. var noesisService = new NoesisService(); this.Container.RegisterInstance(noesisService); And that's it! The project should be ready to use MRTK components."
  },
  "manual/addons/mrtk/index.html": {
    "href": "manual/addons/mrtk/index.html",
    "title": "Mixed Reality Toolkit (MRTK) | Evergine Doc",
    "keywords": "Mixed Reality Toolkit (MRTK) Evergine’s Mixed Reality Toolkit (or MRTK for short) offers an array of components and functionalities to make Mixed Reality applications development easier. It’s an open-source project and it is located in this repository. In this section Getting started Pointers and control Using prefabs and customization Configurators Creating custom controls Demo project"
  },
  "manual/addons/mrtk/pointers_and_control.html": {
    "href": "manual/addons/mrtk/pointers_and_control.html",
    "title": "Pointers and control | Evergine Doc",
    "keywords": "Pointers and control The MRTK changes the way to interact with controls. Instead of using a mouse pointer to click on buttons, the hand tracking feature available in some devices can be used to interact with controls. There are two main ways of interaction: Near interaction: when near a control, the user can touch it with their index finger to interact with it. The mechanism that enables this is called a near pointer. Far interaction: if the user is far away but they want to interact with a control, they can use the far pointer. Using hand tracking, this appears as a light ray coming out of their hand, which can be used to point and click. The click gesture is know as air-tap. Example of near pointer usage Example of far pointer usage The default pointers for hand tracking enabled devices are created automatically in the XRScene. Desktop development These mechanisms can also be used in the desktop solution in an Evergine project. The pointers can be controlled using the keyboard. Press and hold either the left shift or space key to enable either pointer (right and left hand respectively). This enables moving the pointer using the mouse. Use the mouse wheel to move the enabled pointer closer or further away from the camera. Use the left mouse button to perform the air-tap gesture and interact with controls placed far from the cursor. Press and hold the left control key to rotate the enabled pointer using the mouse."
  },
  "manual/addons/mrtk/prefabs.html": {
    "href": "manual/addons/mrtk/prefabs.html",
    "title": "Using prefabs and customization | Evergine Doc",
    "keywords": "Using prefabs and customization The MRTK contains some controls in the form of prefabs that are useful when developing applications, the most basic ones being the button and the slider. They can be found in the Prefabs folder in the MRTK dependency. Buttons Sliders Customization When a control prefab is instantiated in Evergine, its hierarchy will be shown in Evergine Studio. This is one way to customize the look of that particular instance. Button prefab hierarchy Button before and after customization Slider prefab hierarchy Slider before and after customization"
  },
  "manual/addons/xrv/getting_started.html": {
    "href": "manual/addons/xrv/getting_started.html",
    "title": "Getting started | Evergine Doc",
    "keywords": "Getting started In this section we are presenting step-by-step instructions to be ready to execute XRV in your device. Project setup Create a new project using Evergine Launcher. You should include an extra template project, apart from Windows, for your target device. For example, with Meta Quest headset, you can choose between Xamarin and/or .NET 6 project templates. Once Evergine Studio is opened, add a MRTK add-on. You can check how to add add-ons to an existing project. With MRTK add-on installed, you need to add Evergine.XRV.Core add-on using project management dialog again. Note All XRV add-ons have an associated NuGet package. In the same way as Evergine packages, nightly builds of XRV are available on a public NuGet feed. Preview packages will be published in Nuget.org. So, for nightly builds, you should update your nuget.config file to include Evergine nightly feed: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" /> <add key=\"Evergine Nightly\" value=\"https://pkgs.dev.azure.com/plainconcepts/Evergine.Nightly/_packaging/Evergine.NightlyBuilds/nuget/v3/index.json\" /> </packageSources> </configuration> Change default scene SunLight entity value for Illuminance to a value of 1 Code setup Register background scheduler in your Application constructor. public MyApplication() { this.Container.RegisterType<Settings>(); this.Container.RegisterType<Clock>(); this.Container.RegisterType<TimerFactory>(); this.Container.RegisterType<Random>(); this.Container.RegisterType<ErrorHandler>(); this.Container.RegisterType<ScreenContextManager>(); this.Container.RegisterType<GraphicsPresenter>(); this.Container.RegisterType<AssetsDirectory>(); this.Container.RegisterType<AssetsService>(); this.Container.RegisterType<ForegroundTaskSchedulerService>(); this.Container.RegisterType<WorkActionScheduler>(); BackgroundTaskScheduler.Background.Configure(this.Container); } Change your scene class to implement XRScene. public class MyScene : XRScene { protected override Guid CursorMatPressed => EvergineContent.MRTK.Materials.Cursor.CursorPinch; protected override Guid CursorMatReleased => EvergineContent.MRTK.Materials.Cursor.CursorBase; protected override Guid HoloHandsMat => EvergineContent.MRTK.Materials.Hands.QuestHands; protected override Guid SpatialMappingMat => Guid.Empty; protected override Guid HandRayTexture => EvergineContent.MRTK.Textures.line_dots_png; protected override Guid HandRaySampler => EvergineContent.MRTK.Samplers.LinearWrapSampler; protected override Guid LeftControllerModelPrefab => Guid.Empty; protected override Guid RightControllerModelPrefab => Guid.Empty; protected override float MaxFarCursorLength => 0.5f; //... } Add Microsoft.Bcl.AsyncInterfaces to shared project. <PackageReference Include=\"Microsoft.Bcl.AsyncInterfaces\" Version=\"7.0.0\" /> Finally, create XrvService instance and initialize it under OnPostCreateXRScene. MyApplication.cs public override void Initialize() { base.Initialize(); this.InitializeXrv(); // ... } private void InitializeXrv() { var xrv = new XrvService(); this.Container.RegisterInstance(xrv); } MyScene.cs protected override void OnPostCreateXRScene() { base.OnPostCreateXRScene(); var xrv = Application.Current.Container.Resolve<XrvService>(); xrv.Initialize(this); } Platform setup Android In some platforms like Android, you may find build errors like this. error XA2002: Can not resolve reference: `Evergine.Editor.Extension`, referenced by `Evergine.MRTK.Editor`. Please add a NuGet package or assembly reference for `Evergine.Editor.Extension`, or remove the reference to `Evergine.MRTK.Editor`. Just add Evergine.Editor.Extension to your project and it should work. Also, to make use of passthrough capability, remember to uncomment related parts of code in MainActivity.cs and in Android manifest file. UWP (Mixed Reality) In UWP you may find some PRI generation erros, that you can fix editing your project file and adding the following: <AppxGeneratePrisForPortableLibrariesEnabled>false</AppxGeneratePrisForPortableLibrariesEnabled> Also, if you add modules that require internet access or want to make use of voice commands, review that you enable Internet Client and Microphone capabilities. For voice commands, you should also add an explicit reference in Mixed Reality project to Evergine.Xrv.Core NuGet package. Add more modules With all this, you can run application, but the only thing you could do is open hand menu and its two default buttons to open Settings and Help windows. To add more functionalities, you can add any of the existing XRV modules, create your own module or just add new elements using XRV API. You can also take a look to our XRV sample that includes all our public modules."
  },
  "manual/addons/xrv/hand_menu.html": {
    "href": "manual/addons/xrv/hand_menu.html",
    "title": "Hand menu | Evergine Doc",
    "keywords": "Hand menu One of the main features that XRV offers is the hand menu. This is an element that shows a set of buttons that can be added or removed programmatically, and which container is attached to user's wrist. When user turns his palm, menu will be displayed or hidden depending on palm orientation. It works for both left and right hands. Each one of the configured modules for an XRV application, have the possibility to add a new button to this menu. For this, in module definition class just create an instance for HandMenuButton property. public class MyModule : Module { public override MenuButtonDescription HandMenuButton { get; protected set; } public override void Initialize(Scene scene) { this.HandMenuButton = new MenuButtonDescription { // Button configuration here }; } } If you set a null value to this property, no button will be automatically added to the hand menu. Hand menu button configuration Here you will find a table with elements that can be configured for each one of hand menu buttons using MenuButtonDescription. Property Description IconOn Material identifier to be used when button is in on state for a toggle button, or just button icon for a non-toggle button. IconOff Material identifier to be used when button is in off state (for toggle buttons only). IsToggle Indicates if button should be a toggle button or not. TextOn Button text to be used when button is in on state for a toggle button, or just button icon for a non-toggle button. This property is a Func<string> to let user to define different values depending on application display language. TextOff Button text to be used when button is in off state (for toggle buttons only). This property is a Func<string> to let user to define different values depending on application display language. VoiceCommandOn Voice command to activate button when it is in on state for a toggle button, or just button icon for a non-toggle button. VoiceCommandOff Voice command to activate button when it is in off state (for toggle buttons only). Attaching/detaching hand menu User has the possibility to detach menu from his hand, using Detach button located at the top of the menu. Doing this, menu will change its layout and behave like a standard window. User can make it to follow him or just stay pinned whenever user wants. To bring menu back to the wrist, user just have to press detached menu Close button. Adding buttons programmatically You can also add or remove buttons programmatically, apart from button that you may have added (or not) from your own application module definitions. Notice that XrvService exposes a HandMenu property that will let you apply some custom configuration to the menu. Menu buttons collection can be modified at runtime. var xrv = Application.Current.Container.Resolve<XrvService>(); var handMenu = xrv.HandMenu; var buttonDefinition = new MenuButtonDescription { // Button configuration here } // adding a new button handMenu.ButtonDescriptors.Add(buttonDefinition); // removing a defined button handMenu.ButtonDescriptors.Remove(buttonDefinition); Hand menu layout We don't have support to modify built-in hand menu shape or layout. You can just modify number of buttons per column. This property has a minimal size of 4 buttons per column, as this is necessary for detached menu state. To modify number of buttons per column just use following code snippet. handMenu.ButtonsPerColumn = 5; Hand menu starting tutorial An tutorial animation can be displayed every time application is started, to let users know that the should turn their hand if they want to display the menu and interact with the application. To hide this animation on application start, you can do it with this code snippet. Note that you should deactivate the flag after XRV initialization (hand menu will not available before that). var xrv = Application.Current.Container.Resolve<XrvService>(); xrv.Initialize(this); xrv.HandMenu.DisplayTutorial = false;"
  },
  "manual/addons/xrv/help_system.html": {
    "href": "manual/addons/xrv/help_system.html",
    "title": "Help System | Evergine Doc",
    "keywords": "Help System Other of the predefined windows that XRV offers is Help window. This window is intended to contain some text and images guidance for application users, to learn how to use it. It works in the same way as Settings System: you can associate a help section to your custom module, or you can add or remove items programmatically. To open Help window, just press button that you can find in hand menu. This window is a TabbedWindow and you have two ways of adding new elements. Adding a help section to your custom module public class MyModule : Module { public override TabItem Settings { get; protected set; } public override void Initialize(Scene scene) { this.Help = new TabItem() { Name = () => \"Module Name\", Contents = this.CreateContents() // Entity with help item contents. }; } } Using HelpSystem API var help = this.xrvService.HelpSystem; var item = new TabItem { Order = 1, Name = \"My item\", Contents = () => this.CreateContents(), }; help.AddTabItem(item); You can also remove an existing item using RemoveTabItem method."
  },
  "manual/addons/xrv/index.html": {
    "href": "manual/addons/xrv/index.html",
    "title": "Extended Reality Viewer (XRV) | Evergine Doc",
    "keywords": "Extended Reality Viewer (XRV) XRV is a library that we are using internally while developing custom XR experiences for our customers. It tries to gather in a single place different functionalities and features commonly required by applications we build, like floating windows, hand menu, voice commands, etc. It is based on our own MRTK add-on, so it uses the same input pointers, user controls like buttons or sliders, configuration components, etc. Based on that we have built all XRV infrastructure. Most of the features are supported for many platforms, but some of them are not for some of those platforms. You can run XRV for devices like: Meta Quest and Meta Quest 2 Meta Quest Pro Pico XR headsets Microsoft HoloLens 2 In this section Getting started Hand menu UI Windows System Tabs control Settings System Help System Voice commands Messaging Storage Themes System Localization Modules Image Gallery Models Viewer Painter Ruler Streaming Viewer Custom Modules"
  },
  "manual/addons/xrv/localization.html": {
    "href": "manual/addons/xrv/localization.html",
    "title": "Localization | Evergine Doc",
    "keywords": "Localization If you want to create an application that supports different target languages, you may find useful localization mechanism provided by XRV. It scans your assemblies looking for embedded resource files (.resx), and provides a set of Evergine components that let you choose a dictionary name-entry pair for a 3D texts or buttons. Lookup assemblies must be decorated with EvergineAssembly attribute with UserProject or Extension as value. Note In current state, we only support English (fallback) and Spanish as available languages for applications. We plan to add extension points in the future to allow developers adding new languages. You can easily change current UI culture var localization = this.xrvService.Localization; localization.CurrentCulture = CultureInfo.GetCultureInfo(\"es\"); When culture changes, a CurrentCultureChangeMessage message is published in PubSub, indicating the value of the new UI culture. It also changes current thread CurrentUICulture and CurrentCulture values. Built-in components for localization We provide a set of components to control localization for button texts and 3D texts: Text3dLocalization: to have localized text for Text3DMesh components. ButtonLocalization: you can localize buttons text for entities with StandardButtonConfigurator component. ToggleButtonLocalization: you can localize toggle buttons text for entities with ToggleStateManager component. You should have one component instance for each one of toggle states. For a toggle button, as we said, you must add one component for each one of toggle states. Get localized string from code To retrieve a localized string, just use of localization service. var localization = this.xrvService.Localization; var localizedString = this.localization.GetString(() => Resources.Strings.MyString); Hand menu buttons MenuButtonDescription has a way to set localized text for hand menu buttons. If your button is a toggle button, you can also indicate different strings for each one of the toggle states. var localization = this.xrvService.Localization; var description = new MenuButtonDescription() { TextOn = () => localization.GetString(() => Resources.Strings.MyString), TextOff = () => localization.GetString(() => Resources.Strings.MyString), }; Tab items TabItem lets you to set a Func that will be invoked on first run or when current culture changes. var localization = this.xrvService.Localization; var item = new TabItem() { Name = () => localization.GetString(() => Resources.Strings.MyString), Contents = this.HelpContent, }; Window title WindowConfigurator also uses an specific Func property to have localized text for window title. var windowsSystem = this.xrvService.WindowsSystem; var localization = this.xrvService.Localization; var window = windowsSystem.CreateWindow(config => { config.LocalizedTitle = () => localization.GetString(() => Resources.Strings.MyString), }); Alert dialogs WindowsSystem API has overload methods for both ShowAlertDialog and ShowConfirmationDialog, where you can assign Func callbacks to have localized dialogs. var windowsSystem = this.xrvService.WindowsSystem; var dialog = windowsSystem.ShowAlertDialog( () => localization.GetString(() => Resources.Strings.MyAlertTitle), () => localization.GetString(() => Resources.Strings.MyAlertMessage), () => localization.GetString(() => Resources.Strings.MyAlertOk));"
  },
  "manual/addons/xrv/logging.html": {
    "href": "manual/addons/xrv/logging.html",
    "title": "Logging | Evergine Doc",
    "keywords": "Logging We provide logging service that implements Microsoft.Extensions.Logging.ILogger and uses Serilog. We use LoggingConfiguration class to configure logging. Properties Description LogLevel Sets log level verbosity. EnableFileLogging If true save logs to file. FileOptions Log file name and max size Registration Use WithLogging method from XrvService. var xrvService = Application.Current.Container.Resolve<XrvService>(); var config = new LoggingConfiguration() { LogLevel = LogLevel.Debug } xrvService.WithLogging(config); Uses Obtain the service and use it. Get Logging anywhere // Get logger var log = Application.Current.Container.Resolve<ILogger>(); Get Logging in component [BindService] private ILogger log = null; Log // log debug log.Log(LogLevel.Debug, \"debug msg\"); Warning // log warning log.LogWarning(\"warning msg\"); Error // log error log.LogError(\"error\");"
  },
  "manual/addons/xrv/messaging.html": {
    "href": "manual/addons/xrv/messaging.html",
    "title": "Messaging | Evergine Doc",
    "keywords": "Messaging XRV counts with a simple implementation of publisher-subscriber pattern, that will let you communicate two separated parts of code using messages. You can use it in components, services or any other elements if that suits to your needs. You can emit any type of message using this channel, but the recommendation is to create specific message types, that can contain any information that you consider useful. To emit a message, just create a custom message class and use Publish method. public class MyMessage { public MyMessage(string data1, int data2) { this.Data1 = data1; this.Data2 = data2; } public string Data1 { get; private set; } public int Data2 { get; private set; } } var pubSub = this.xrvService.Services.Messaging; var message = new MyMessage(\"my-data\", 1234); pubSub.Publish(message); To receive messages of a given type, you should use Subscription method. It returns a subscription token, that you must save to be able to unsubscribe, depending on your how your code behaves. For example, if you want to use it in a Component, the most common pattern will be subscription in OnAttach/OnActivated and desubscribe in OnDetach/OnDeactivated. public class MyComponent : Component { [BindService] private XrvService xrvService = null; private PubSub pubSub => this.xrvService.Services.Messaging; private Guid subscription; protected override bool OnAttached() { bool attached = base.OnAttached(); if (attached) { this.subscription = this.pubSub.Subscribe<MyMessage>(this.OnMyMessageReceived); } return attached; } protected override void OnDetach() { base.OnDetach(); this.pubSub.Unsubscribe(this.subscription); } private void OnModuleActivationChange(MyMessage message) { // Do something } }"
  },
  "manual/addons/xrv/modules/customModule/index.html": {
    "href": "manual/addons/xrv/modules/customModule/index.html",
    "title": "Create your own XRV modules | Evergine Doc",
    "keywords": "Create your own XRV modules You can create your own module, you just need to extend Module abstract class. Depending on elements you instantiate here, XRV will automatically add a new hand menu button, a section in Settings window or a section in Help window. Also, you can define your own voice commands. As we comment below, you'll get notified through Run method when module's associated hand menu button is tapped. There, you can show or hide 3D elements that you have previously added to the scene in Initialize method. Module implementation public class MyCustomModule : Module { public override string Name => MyModuleName; public override MenuButtonDescription HandMenuButton => MyHandMenuButton; public override TabItem Help => MyHelp; public override TabItem Settings => MySettings; public override IEnumerable<string> VoiceCommands => MyVoiceCommands; public override void Initialize(Scene scene) { // Do initialize stuff. } public override void Run(bool turnOn) { // Code. } } Methods Description Initialize(Scene scene) If we need some initialization for our code, we can set it here. For example, adding 3D entities or creating module specific windows. Run(bool turnOn) This method will be called when we press hand menu button, turnOn represents button toggle state, or always true if it's not a toggle button Properties Required Description Name Yes Module Name. HandMenuButton No If provided will add a button in hand menu. Help No If provided will add a tab in the help section. Settings No If provided will add a tab in the settings section. VoiceCommands No If provided will add a this strings to the voice command service. Installation var xrv = new XrvService() .AddModule(new MyCustomModule());"
  },
  "manual/addons/xrv/modules/imageGallery/index.html": {
    "href": "manual/addons/xrv/modules/imageGallery/index.html",
    "title": "Image Gallery module | Evergine Doc",
    "keywords": "Image Gallery module With this module, you can display a gallery of images, that can be stored remotely. A new element will be added in hand menu to provide direct access to gallery window. This window counts with some UI elements like a slider or buttons that lets the user load an image or other. . If data source contains only one image, no navigation buttons will be displayed at all. A single images data source is supported in current module version. Note In current version, there is a restriction: all images should be of the same size. Properties Description ImagePixelsWidth Image width for the viewer in pixels. ImagePixelsHeight Image height for the viewer in pixels. FileAccess Images data source. Please refer to Storage section for more information. Installation This module is packaged as Evergine add-on. To use it in your project, just install it from Project Settings > Add-Ons window. Then, just register the module programmatically within your XRV service instance. FileAccess imagesDataSource = <Create FileAccess instance>; var xrv = new XrvService() .AddModule(new ImageGalleryModule { ImagePixelsWidth = 640, ImagePixelsHeight = 640, FileAccess = imagesDataSource, }); Usage To open gallery window, just tap on hand menu button. You can navigate between images by clicking on next or previous buttons. You can also change current image using attached slider."
  },
  "manual/addons/xrv/modules/index.html": {
    "href": "manual/addons/xrv/modules/index.html",
    "title": "XRV Modules | Evergine Doc",
    "keywords": "XRV Modules This is the list of our current public modules. You can see them working running our public XRV sample. Image Gallery With this module you can display images in XR space, with no limitation in their number. Images will be displayed one by one. Model Viewer This module lets you load 3D models from different sources. Once loaded you can scale them and move them, you also have a menu with more features. Painter This is a module where you can draw lines in XR space to help you to emphasize something in particular. You can choose from different colors and thickness. Ruler With this module you can take measurements from any present object in XR space. Move handlers and obtain a precise measurement between two points. Streaming Viewer Module that loads a panel with video images served by an IP camera. Create your own Custom Module If you have some specific requirements for your application, you can create a custom module that you can reuse in more applications."
  },
  "manual/addons/xrv/modules/modelViewer/index.html": {
    "href": "manual/addons/xrv/modules/modelViewer/index.html",
    "title": "Model Viewer module | Evergine Doc",
    "keywords": "Model Viewer module One of the most common tasks while developing a XR experience is loading 3D models. With this module, you have a way to load models from a remote location into your application. When loaded, a model can be moved, rotated and scaled thanks to its bounding box. Transformations can be performed by near or far interaction, indistinctly. This module lets you to define an unlimited number of model repositories, each one can contain an unlimited number of 3D models. Properties Description NormalizedModelEnabled If true will override original scale of the model and set the same for all models. NormalizedModelSize Size in meters for models when loaded Repositories Array of model repositories. A repository counts with following properties. Properties Description Name This name will be displayed on model load list. FileAccess Models data source. Please refer to Storage section for more information. Installation This module is packaged as Evergine add-on. To use it in your project, just install it from Project Settings > Add-Ons window. Then, just register the module programmatically within your XRV service instance. FileAccess modelsDataSource = <Create FileAccess instance>; var xrv = new XrvService() .AddModule(new ModelViewerModule { Repositories = new Repository[] { new Repository() { Name = \"Remote Sample Models\", FileAccess = loadModelFileAccess, } }, NormalizedModelEnabled = true, NormalizedModelSize = 0.2f, }); Usage To open model selection window, just tap on hand menu button. Select a model from Models list. Each repository can have a different set of models. Once you know which model you want to load, just press Load button. . Manipulation By using manipulators can move, scale and rotate models. Manipulators are shown over bounding box. We have marked interaction areas with colors, depending on their manipulation possibilities. Red: Scale, pinch on corners and drag for scale model. Green: Roll, pinch on upper middle manipulator and drag for roll rotation. Blue: Pitch, pinch on side middle manipulator and drag for pitch rotation. Pink: stretch, pinch on center manipulator and drag for stretch scale. Actions Each model has a submenu with a set of options. Tap on button to expand list of available actions. : Manipulation is disabled for the model. This is, it could not be moved, rotated or scaled until it is unlocked again. : Reset model to original scale and orientation. Position won't be modified. : Removes model from virtual space."
  },
  "manual/addons/xrv/modules/painter/index.html": {
    "href": "manual/addons/xrv/modules/painter/index.html",
    "title": "Painter module | Evergine Doc",
    "keywords": "Painter module If you need to draw 3D lines in virtual space, this module is a good option. It lets you draw lines with different colors and thickness, so it could be useful to draw attention to certain elements like, for example, 3D models. A remarkable capability of this drawing tool is that you can use both hands at the same time. Also, you can undo any drawing/deletion action, or even remove all drawn lines at any moment. Installation This module is packaged as Evergine add-on. To use it in your project, just install it from Project Settings > Add-Ons window. Then, just register the module programmatically within your XRV service instance. var xrv = new XrvService() .AddModule(new PainterModule()); Usage To open painter window, tap on hand menu button. Note Drawing or removing lines is only available while painter window is open. Color selection wheel lets user to change current color. Active color is marked with a selection indicator. You can choose between a set of thickness that will be applied when a new line is drawn. Thin. Medium. Thick. There are buttons to undo previous actions or remove all lines. Full set of actions is listed below. : Pinch fingers and drag to draw line. : Pinch fingers and drag to remove line. : Do nothing. : Undo last action. : Clean all lines."
  },
  "manual/addons/xrv/modules/ruler/index.html": {
    "href": "manual/addons/xrv/modules/ruler/index.html",
    "title": "Ruler module | Evergine Doc",
    "keywords": "Ruler module This module lets users to measure elements in virtual space. It creates a basic ruler element with manipulators in both ends. When user grabs any of these manipulators, distance from one side to the other will be automatically calculated. Installation This module is packaged as Evergine add-on. To use it in your project, just install it from Project Settings > Add-Ons window. Then, just register the module programmatically within your XRV service instance. var xrv = new XrvService() .AddModule(new RulerModule()); Usage button is added to hand menu. Tapping on this button will toggle ruler visibility. Drag line ends will update distance measurement. Access to Settings to change current measure units. You can choose between meters and feet."
  },
  "manual/addons/xrv/modules/streamingviewer/index.html": {
    "href": "manual/addons/xrv/modules/streamingviewer/index.html",
    "title": "Streaming Viewer module | Evergine Doc",
    "keywords": "Streaming Viewer module This module lets you load a video stream from a MJPEG source. This is the unique streaming protocol that we support in current version. Video size can't be configured: this means that window size may vary depending on returned size of images provided by the server. Note It's required provided JPEG responses counts with Content-Length header to make it work properly. Installation This module is packaged as Evergine add-on. To use it in your project, just install it from Project Settings > Add-Ons window. Then, just register the module programmatically within your XRV service instance. var xrv = new XrvService() .AddModule(new StreamingViewerModule { SourceURL = \"http://<HOST>/video.mjpg\" }); Android-based systems In Android-based systems, like Meta Quest, there are some constraints about clear text traffic. By default, it is not allowed. If you set a source that is not served over HTTPS, you must white-list camera domain or IP address using appropriate native mechanism. Please see Android documentation for more information. Add a XML file under Android resources folder. We are giving it a name like network_security_config.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <network-security-config> <domain-config cleartextTrafficPermitted=\"true\"> <!-- Sample IP cameras for Streaming Viewer module --> <domain includeSubdomains=\"true\">IP address or domain name</domain> </domain-config> </network-security-config> Register security configuration within your application definition under Android manifest file <application android:allowBackup=\"true\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:networkSecurityConfig=\"@xml/network_security_config\"> <!-- ... --> </application> Usage Use hand menu button to open streaming window."
  },
  "manual/addons/xrv/settings_system.html": {
    "href": "manual/addons/xrv/settings_system.html",
    "title": "Settings System | Evergine Doc",
    "keywords": "Settings System XRV provides a default window where you can include specific settings for your application or modules. It also includes a section for general settings provided by the core library, like turning on or off voice commands. To open Configuration window, just press button that you can find in hand menu. This window is a TabbedWindow and you have two ways of adding new elements. Adding a configuration section to your custom module public class MyModule : Module { public override TabItem Settings { get; protected set; } public override void Initialize(Scene scene) { this.Settings = new TabItem() { Name = () => \"Module Name\", Contents = this.CreateContents() // Entity with configuration item contents. }; } } Using SettingsSystem API var settings = this.xrvService.SettingsSystem; var item = new TabItem { Order = 1, Name = \"My item\", Contents = () => this.CreateContents(), }; settings.AddTabItem(item); You can also remove an existing item using RemoveTabItem method."
  },
  "manual/addons/xrv/storage.html": {
    "href": "manual/addons/xrv/storage.html",
    "title": "Storage | Evergine Doc",
    "keywords": "Storage If you need an external repository to load your models, images or other type of files, that are required by your application, you can take a look to what XRV offers about files storage. Base class for storage systems is FileAccess class, that can be extended to create specific implementations for a full CRUD access to files in a repository or folder. File access We provide a set implementations for FileAccess that we are going to enumerate. Following set of methods will be available when using any file access instance from code. Method Description ClearAsync Clears all files and directories. CreateBaseDirectoryIfNotExistsAsync Ensure that base directory defined by BaseDirectory exits. If it does not exists, directory is created. CreateDirectoryAsync Creates a directory, indicated by relative path. DeleteDirectoryAsync Deletes a directory, indicated by relative path. DeleteFileAsync Deletes a file, indicated by relative path. GetFileAsync Gets file contents by relative path. GetFileItemAsync Gets file metadata by relative path. EnumerateDirectoriesAsync Enumerates directories existing in base directory or in a relative directory path. EnumerateFilesAsync Enumerates files existing in base directory or in a relative directory path. ExistsDirectoryAsync Checks if a directory, indicated by relative path, exits or not. WriteFileAsync Writes file contents by relative path. Local application data folder storage This is implemented by ApplicationDataFileAccess, which sets as base path the value of System.Environment.SpecialFolder.LocalApplicationData, that can change depending on target platform. If, you create a new file access instance of this type, just set BaseDirectory value to a name for a base directory for that instance. You can use this file access as data cache or to create temporary files needed by your application, but may not be externally available depending on target platform. var fileAccess = new ApplicationDataFileAccess() { BaseDirectory = \"my-folder\", }; Note We use some folders internally, so be careful and do not use a \"cache\" as base directory name. Azure Blobs data storage You can also use Azure Blob Storage as data source to download files required by your application. Only thing you need is to add some storage account configuration settings when instancing a file access of this type. You may find different static methods to create instances, depending on set of configuration data you want to provide. Please, note that some directory methods may not work for this file access, as Azure Blob Storage does not have the concept of directory. When using SAS, remember that you should add appropiate permissions to the token, if you want full CRUD access to blobs. var fileAccess = AzureBlobFileAccess.CreateFromConnectionString(\"Storage account connection string\", \"Container name\"); //or var fileAccess = AzureBlobFileAccess.CreateFromUri(\"https://<ACCOUNT>.blob.core.windows.net/container?sv=2021-08-06&st=2022-11-18T15%3A07%3A20Z&...\"); // Container URI containing SAS (or without SAS for public containers, if you need read-only operations) var fileAccess = AzureBlobFileAccess.CreateFromConnectionString(\"https://<ACCOUNT>.blob.core.windows.net/container\", \"sv=2021-08-06&st=2022-11-18T15%3A07%3A20Z&...\"); // Container URI with separated SAS Azure Files data storage We have support for other service, Azure Files that you can use. In the same way, you need to specify connection configuration data to make. You may find different static methods to create instances, depending on set of configuration data you want to provide. var fileAccess = AzureFileShareFileAccess.CreateFromConnectionString(\"Storage account connection string\", \"Share name\"); //or var fileAccess = AzureFileShareFileAccess.CreateFromUri(\"https://<ACCOUNT>.file.core.windows.net/share?sv=2021-08-06&st=2022-11-18T15%3A07%3A20Z&...\"); // Share URI containing SAS var fileAccess = AzureFileShareFileAccess.CreateFromConnectionString(\"https://<ACCOUNT>.file.core.windows.net/share\", \"sv=2021-08-06&st=2022-11-18T15%3A07%3A20Z&...\"); // Share URI with separated SAS Disk cache Any FileAccess can use an optional cache, that will check for files locally instead of downloading them again. To activate caching for a file access, just create an instance of DiskCache and assign it. var fileAccess = AzureFileShareFileAccess.CreateFromUri(...); fileAccess.Cache = new DiskCache(\"images\"); // indicate an unique cache name for your needs For cache, you can specify following settings. Property Description SizeLimit Cache size limit. Defaults to 100 MB. SlidingExpiration Maximum time an item remains in cache without being accessed."
  },
  "manual/addons/xrv/themes.html": {
    "href": "manual/addons/xrv/themes.html",
    "title": "Themes System | Evergine Doc",
    "keywords": "Themes System If you need to customize colors used by your application, you should know that XRV uses a system for application theming. A palette of colors is defined by generic color names. Color Description PrimaryColor1 Used for windows title bar plate, text color for light buttons, lists selected item background color. PrimaryColor2 Color applied to scroll bar color. PrimaryColor3 This color is for global texts and for active items in a tab control. SecondaryColor1 Color for inactive items in tab controls, backplate color for some buttons, text color for selections, some manipulators, etc. SecondaryColor2 Color applied to some manipulators. SecondaryColor3 Applies to accept option backplate in confirmation dialogs. SecondaryColor4 Windows front plate gradient start and plate color for dialog buttons. SecondaryColor5 Windows front plate gradient end. Associated to these built-in colors, we provide a set of materials that you should use in your custom UI elements if you need to make use of themes and change default set of colors provided by XRV. Depending on values indicated in the theme, these materials are modified at runtime. As material instances are shared by different MaterialComponent instances, new color will be applied application wide. If you create your own materials, of course, they will be not modified by theme system. On the other hand, if you apply any of default materials in your own UI elements, they will be modified at runtime by themes system. Modifying a theme color To change a theme color, just access to ThemesSystem and take a look to its CurrentTheme property, that you can use to modify values for current theme or assign a new Theme instance. A new Theme instance has default XRV colors by default. You can modify color properties to apply modifications on UI elements. var theme = this.xrvService.ThemesSystem.CurrentTheme; theme.PrimaryColor1 = Color.DarkCyan; theme.SecondaryColor4 = Color.Blue; theme.SecondaryColor5 = Color.DarkBlue; For piece of code above, following changes would be presented when loading XRV windows and rest of visual elements. You can have as many theme instances as you want, an switching them in CurrentTheme property should change colors at runtime. Modify a theme font Themes also provide a set of fonts used in different parts of UI elements. Font Description PrimaryFont1 Used for windows title, buttons, section labels and tab items. PrimaryFont2 Font used for context texts, hand menu and window buttons. In the same way as colors, you can change these default fonts. Just add a new font asset and assign its identifier to any of the predefined font properties. theme.PrimaryFont1 = EvergineContent.MyCustomFont_ttf; theme.PrimaryFont2 = EvergineContent.MyCustomFont_ttf; Shared text styles XRV also tries to provide helpful ways of having uniform UI definitions. For this purpose, we have defined text styles that are shared globally, and that let you to define a font type, size and color, and reuse this definition and apply it to any number of 3D texts within application. In each TextStyle instance, you can set the following. Property Description Font You can optionally set a font asset identifier here as text font. This will be applied if ThemeFont is null. TextColor Color for the text. This will be applied if ThemeColor is null. TextScale Text scale for the style. ThemeColor This will indicate that this style will use one of theme defined colors. ThemeFont This will indicate that this style will use one of theme defined fonts. You will also find a set of built-in components to make your own 3D text to apply global styles. Text3dStyle: Associates a Text3DMesh to a text style. ButtonTextStyle: Associates a text style to a StandardButtonConfigurator instance. ToggleButtonTextStyle: Associates a text style to a ToggleButton. You must set a component for each toggle state. In the next table you can see the list of default text styles. As you may notice, they are all attached to theme fonts and colors. Note Please, note that in this case, changing text style values will only work on application startup. We don't have support right now to do this at runtime. Style key Default values Xrv.Primary1.Size1 font: ThemeFont.PrimaryFont1, scale = 0.012f, color = ThemeColor.PrimaryColor3 Xrv.Primary1.Size2 font: ThemeFont.PrimaryFont1, scale = 0.01f, color = ThemeColor.PrimaryColor3 Xrv.Primary1.Size3 font: ThemeFont.PrimaryFont1, scale = 0.008f, color = ThemeColor.PrimaryColor3 Xrv.Primary2.Size1 font: ThemeFont.PrimaryFont2, scale = 0.007f, color = ThemeColor.PrimaryColor3 Xrv.Primary2.Size2 font: ThemeFont.PrimaryFont2, scale = 0.006f, color = ThemeColor.PrimaryColor3 Xrv.Primary2.Size3 font: ThemeFont.PrimaryFont2, scale = 0.005f, color = ThemeColor.PrimaryColor3 Add or modify an existing text style If you need to add new styles, or modify an existing one, you can do it implementing ITextStyleRegistration. Its single method named Register passes as parameter the global styles dictionary: you can add new entries or modify existing ones. public MyTextStylesRegistration : ITextStyleRegistration { public void Register(Dictionary<string, TextStyle> registrations) { // override a default style if (registrations.ContainsKey(DefaultTextStyles.XrvPrimary1Size1)) { var defaultStyle = registrations[DefaultTextStyles.XrvPrimary1Size1]; defaultStyle.TextScale = 0.015f; } // add a new style with theme-independent color registrations[\"RedStyle\"] = new TextStyle { ThemeFont = ThemeFont.PrimaryFont1, TextScale = 0.013f, Color = Color.Red, }; } } As this registrations are scanned by XRV, you can add your own text styles, and they will be available for text styling built-in components. How-to respond to theme changes You may be wondering what happens with custom defined materials and theme changes. As we said above, Theme System will not update these materials. Don't worry, as you can create your own code to control changes for themes at runtime. ThemeSystem counts with an event named ThemeUpdated that will be invoked on theme changes. It has arguments of type ThemeUpdatedEventArgs that contains information about theme changes. Property Description IsNewThemeInstance It indicates if message has been sent by a complete theme change (a new instance of theme has been set). Theme Theme instance that is being applied at the moment of message emission. UpdatedColor If just one of the theme colors has been updated, it indicates which one of themed colors has been involved So, if you want that your component listens changes on current theme (for example, to change a custom material tint color), you will need something like the following. public MyComponent : Component { [BindService] private XrvService xrvService = null; private ThemesSystem themes => this.xrvService.ThemesSystem; protected override bool OnAttached() { bool attached = base.OnAttached(); if (attached) { this.themes.ThemeUpdated += this.ThemesSystem_ThemeUpdated; } return attached; } protected override bool OnDetached() { base.OnDetached(); this.themes.ThemeUpdated -= this.ThemesSystem_ThemeUpdated; } private void ThemesSystem_ThemeUpdated(object sender, ThemeUpdatedEventArgs args) { if (args.IsNewThemeInstance) { // Respond to theme instance changes return; } switch (args.UpdatedColor) { case ThemeColor.PrimaryColor1: // Respond to PrimaryColor1 changes break; // ... default: break; } } }"
  },
  "manual/addons/xrv/ui/index.html": {
    "href": "manual/addons/xrv/ui/index.html",
    "title": "UI | Evergine Doc",
    "keywords": "UI XRV provides some built-in components and artifacts that makes life easier to developer about creating uniform and consistent user interfaces. In this section Windows system Tabs control"
  },
  "manual/addons/xrv/ui/tabs_control.html": {
    "href": "manual/addons/xrv/ui/tabs_control.html",
    "title": "Tabs Control | Evergine Doc",
    "keywords": "Tabs Control Tabs control gives basic infrastructure and functionality to add tabbed panels to your application. It provides a container and a tab navigation system. It provides following properties to customize the control. Properties Description Size Set size for the container. SelectedItem Sets selected tab, and show associated content. Builder returns TabControlBuilder Create a tab control programmatically Easiest way to create a tab instance is to use TabControlBuilder provides features related to add content in the tab control. Methods Description AddItem Adds a single item. AddItems Adds a set of items. WithSize Specifies a size for tab control WithActiveItemTextColor Specifies active text color for tab item. WithInactiveItemTextColor Specifies inactive text color for tab item. var tabEntity = TabControl.Builder .Create() .WithSize(new Vector2(0.3f, 0.2f)) .AddItem(new TabItem { Name = () => \"Tab Name\", Contents = () => this.CreateContent(), // Function to set content entity }) .Build(); In XRV we make use of this tab control builder in configuration and help windows. If you want a window which only content entity is a tab control, you can make use of TabbedWindow class. Tab items definition TabItem provides tab and content for the tab control. Properties Description Name Tab Name. Data General purpose data. Order Order to be displayed. Contents Content for the tab item."
  },
  "manual/addons/xrv/ui/windows_system.html": {
    "href": "manual/addons/xrv/ui/windows_system.html",
    "title": "Windows System | Evergine Doc",
    "keywords": "Windows System One of the main features that XRV offers is the Windows System, that helps you with built-in windows which contents can be customized by your own. It also includes built-in alert and confirmation dialogs, that you can include within your UI logic to notify or ask for confirmation to application users, and execute some logic or another based on their decisions. Windows interaction When a window is created, it will include some default buttons that allows users to modify window behavior or visibility. Window position behavior can be changed, you can choose how window is placed relative to the user. To change position mode, just use window button to toggle between following behaviors: Follow mode: window will follow the user wherever he moves if he goes away by a distance higher than 0.6 meters. In this mode, window will also change its orientation to face the user if he moves around. Pinned mode: when switched to this mode, window will stay in the position and orientation that button has when pressed. In this mode, user can also manipulate position and orientation of the window, using pinch gesture on surface area of the window, including both title bar and contents area. Press to close the window. Create and show a window programmatically To create a window, you can do it accessing Windows System that is exposed by XrvService. This window creation have a callback to configure the window, with different options that we will enumerate in section below. You can create as many windows as you want. var xrv = Application.Current.Container.Resolve<XrvService>(); var windowSystem = xrv.WindowSystem; // Setting Window var window = xrv.WindowSystem.CreateWindow(config => { config.Title = \"Window #1\"; config.Size = new Vector2(0.3, 0.2); }); // Show window (empty in this case) window.Open(); Windows include different built-in parts and layers: Title bar: this is on the top of the window, also contains action buttons on right side of the window. Back plate: it has the same material than title bar, and the unique content that it includes is an optional logo image. Front plate: it will be drawn over back plate, and is intended to be placed behind window contents. Window instance options Each window instance that is returned by Windows System offers a set of options that developers can change by their own criteria. You can also open or close any window programmatically or subscribe to events about that window being opened or closed. Properties Description AllowPin If this option is disabled, default toggle button to let user change window positioning behavior that we commented above, will not be available for a window instance. DistanceKey This lets developers to specify the distance key that will be used to place window once opened. EnableManipulation When set to false, this option will not let users to change window orientation and positioning when pinned mode is active. Methods Description Open Opens window instance. Close Closes window instance. Events Description Opened It occurs when window instance is opened. Close It occurs when window instance is closed. Window instance configuration On configuration callback, you can use following properties to change how window is displayed. Properties Description Content This property lets you to set an entity that will be placed as window contents. Here you can set whatever you want: buttons, 3D text, images, etc. We will talk later about what is the easier way to layout your windows contents and how to set up window parameters like size to fits its contents. DisplayFrontPlate Front plate can be optionally hidden using this flag. DisplayBackPlate Back plate can be optionally hidden using this flag. DisplayLogo Controls logo visibility for the window. This image is located in bottom-left corner of the back plate. FrontPlateOffsets XY front plane offset relative to window back plate. FrontPlateSize Front plate width and height in meters. LocalizedTitle Lets you to specify callback function to set a localized title for the window. LogoMaterial To change default logo image, you can set your own material here. Size You can set window width and height in meters. Title Lets you to specify a fixed title string to your window. How-to: create own window with contents If you want to create your own window, you should first know the size of its contents, but calculating this manually could be tricky. We are going to quickly explain the steps we follow in this case. Create a new scene, that will contain your window contents. Window contents will be then exported to a prefab that will be loaded as window contents. Create a new mesh with BorderlessFrontPlate material. This plane will be a help guide just to know how contents will fit in final window. Set PlaneMesh width and height with desired size. Create your window layout. Create a prefab from your contents entity. Do not include guide reference in the prefab, just Painter entity in this case. Remember that you should not save your changes after creating the prefab. Instantiate your window from code, and set its size with same values as your reference. var contentsSize = new Vector2(0.214f, 0.173f); var window = windowsSystem.CreateWindow(config => { config.Size = contentsSize; config.FrontPlateSize = contentsSize; config.Content = this.assetsService.Load<Prefab>(<Prefab GUID here>).Instantiate(); }); Built-in dialogs XRV also offers two built-in dialog types that you can use to request a user action before making a decision. An important thing here is that, unlike windows creation, there could only be a single instance of alert or confirmation dialog at the same time in the application. We limit this to avoid dialog stacks that would make users uncomfortable while using the application. Alert dialog: this may be used to alert user about anything that happens while using the application, but where the user can choose no option, just confirm the dialog. Confirmation dialog: in this case, we can use this type of dialog to ask user for confirmation about an action, for example, removing a 3D model from virtual space. Here you have an example of how use Windows System to show an alert or confirmation dialog. var dialog = windowsSystem.ShowConfirmationDialog(...); // or ShowAlertDialog dialog.Closed += Dialog_Closed; private void Dialog_Closed(object sender, EventArgs e) { if (dialog is ConfirmDialog confirm) { dialog.Closed -= this.Dialog_Closed; if (confirm.Result == confirm.AcceptOption.Key) { // Do something only if user taps on accept option } } } In the sample, you can notice that we are subscribing to Closed event. This is safe as long as you do event unsubscription in callback method, as we only allow a single dialog opened at the time. This means, if we have other part of the code that has already opened a dialog an is waiting for the response, this new dialog opening will provoke Closed event to be invoked for that previously executed code. XRV dialogs have a property named Result that you can check to know which button has been pressed by the user. Alert dialog Result value It AlertDialog.AcceptKey When user presses dialog Accept button. null When user presses dialog Close button, or other part of the code invokes ShowAlertDialog. Confirmation dialog Result value It ConfirmationDialog.AcceptKey When user presses dialog Accept button. ConfirmationDialog.CancelKey When user presses dialog Cancel button. null When user presses dialog Close button, or other part of the code invokes ShowConfirmationDialog. Other things that you can do with Windows System Windows System instance also provide two properties that may be helpful for developers: Properties Description Distances You can register or modify predefined window distances. OverrideIconMaterial This property allows to you to set a custom Material that will override default window logo material. So, you don't need to go instance by instance replacing default logo material. Window distances definition XRV provides a set of predefined window distances, but you can add as many as you want to your application. Distance key Value (in meters) Usage NearKey 0.35 This is the distance used by default for alert and confirmation dialogs. MediumKey 0.5 This is the distance used by default for rest of the windows. FarKey 1 This is not used at all by built-in elements of XRV but you can use it by your own purpose. To override or add a new distance, you can use SetDistance method. // override an existing key windowsSystem.Distances.SetDistance(Xrv.Core.UI.Windows.Distances.NearKey, 0.45f); // adding a new key windowsSystem.Distances.SetDistance(\"custom\", 0.5f); // use distance key in a window window.DistanceKey = \"custom\"; Examples Get Windows System in component public MyComponent : Component { [BindService] private XrvService xrvService = null; private windowSystem => xrvService.WindowSystem; private void ShowAlert() { var dialog = this.windowSystem.ShowAlertDialog(\"Alert Title\", \"Sample Content.\", \"OK\"); dialog.Closed += this.OnAlertClosed(); } private void ShowConfirmation() { var dialog = this.windowSystem.ShowConfirmationDialog(\"Confirmation Title\", \"Sample Content.\", \"No\", \"Yes\"); dialog.Closed += this.OnConfirmationClosed(); } private void OnAlertClosed(object sender, EventArgs e) { if (sender is AlertDialog dialog) { dialog.Closed -= this.OnAlertClosed(); } } private void OnConfirmationClosed(object sender, EventArgs e) { if (sender is ConfirmationDialog dialog) { dialog.Closed -= this.OnConfirmationClosed(); } } }"
  },
  "manual/addons/xrv/voice_commands.html": {
    "href": "manual/addons/xrv/voice_commands.html",
    "title": "Voice Commands | Evergine Doc",
    "keywords": "Voice Commands Provides a service where we can register key words, that the speech recognition service will detect and we can take actions when this happens. It is based on MRTK, so you should work with SpeechHandler if you want to create handlers for your custom controls. If you are only interested in buttons and toggle buttons, you can make use of PressableButtonSpeechHandler defined in MRTK, or ToggleButtonSpeechHandler defined in XRV, to activate a button if associated voice command is recognized. Note Current implementation supports voice commands for HoloLens 2 (UWP) only. Speech recognition service must be enabled or command recognition will never be fired. Please, note that you should add an explicit reference to Evergine.Xrv.Core NuGet package for your UWP Mixed Reality project. This is necessary in order to take correct implementation of speech service for UWP platform. User can also activate or deactivate voice command recognition in Configuration -> General section. Associate voice commands programmatically You have two options to add custom voice commands: Specify voice commands in menu button description for module definition. public MyModule : Module { private const string VoiceCommandShow = \"Show feature\"; private const string VoiceCommandHide = \"Hide feature\"; public override IEnumerable<string> VoiceCommands => new[] { VoiceCommandShow, VoiceCommandHide }; public override void Initialize(Scene scene) { this.HandMenuButton = new MenuButtonDescription() { VoiceCommandOff = VoiceCommandShow, VoiceCommandOn = VoiceCommandHide, }; } } Using Voice System API to programmatically register voice commands. Please, note that this should only be invoked on application startup. var voiceSystem = this.xrvService.VoiceSystem; voiceSystem.RegisterCommands(new [] { \"one command\", \"other command\" }); Create custom speech handler public MySpeechRecognizer : SpeechHandler { protected override void InternalOnSpeechKeywordRecognized(string keyword) { base.InternalOnSpeechKeywordRecognized(keyword); // Do something depending on matching command } }"
  },
  "manual/animation/animation_blend_tree.html": {
    "href": "manual/animation/animation_blend_tree.html",
    "title": "Animation Blend Tree | Evergine Doc",
    "keywords": "Animation Blend Tree Coming soon"
  },
  "manual/animation/animation_clip.html": {
    "href": "manual/animation/animation_clip.html",
    "title": "Animation Clip | Evergine Doc",
    "keywords": "Animation Clip Coming soon"
  },
  "manual/animation/index.html": {
    "href": "manual/animation/index.html",
    "title": "Animation | Evergine Doc",
    "keywords": "Animation Coming soon In this section Animation Clip Animation Blend Tree"
  },
  "manual/audio/audio_editor.html": {
    "href": "manual/audio/audio_editor.html",
    "title": "Audio Editor | Evergine Doc",
    "keywords": "Audio Editor Audio Editor allows editing the audio assets. Double click over an audio asset shown in Assets Details will open this editor. The editor is composed of 2 main parts: Viewport Shows the wave form of the audio asset. In the top of the viewport the original audio file properties is shown while above the toolbox the audio asset properties is shown, these parameters depend of the propeties panel. The viewport has a toolbox on the bottom side that allows to test the audio. Icon Description Plays the audio asset. Enable/Disable playing in loop. Volume of the playing audio. Distribution of audio signal to listen more through right or left speaker. Decrease/Increase the audio speed. Properties The audio properties that you can configure are: Property Available values Description ChannelFormat Mono / Stereo The number of channels of audio wave data. SampleRateMode Low / High The sample rate of audio wave data. A high sample rate improves the quality but increases the file weight. Enconding PCM8 / PCM16 Pulse Code Modulation bits."
  },
  "manual/audio/import_audio.html": {
    "href": "manual/audio/import_audio.html",
    "title": "Import Audio | Evergine Doc",
    "keywords": "Import Audio The Audio asset allows you to play sound effects and music in your project. Import a Audio asset in Evergine Studio You can create an audio asset by dragging an audio file to the Assets Details panel, as explained in this article. Audio files in content directory Audio imported in Evergine create an additional metadata .wesn file. Supported formats: Evergine supports the following audio file formats: Extension Description .wav Waveform Audio File Format is an audio file format standard, developed by IBM and Microsoft, for storing an audio bitstream on PCs. It is the main format used on Microsoft Windows systems for uncompressed audio. The usual bitstream encoding is the linear pulse-code modulation (LPCM) format. .mp3 MPEG-2 Audio Layer III is a coding format for digital audio developed largely by the Fraunhofer Society in Germany, with support from other digital scientists in the United States and elsewhere. Originally defined as the third audio format of the MPEG-1 standard, it was retained and further extended — defining additional bit-rates and support for more audio channels — as the third audio format of the subsequent MPEG-2 standard. A third version, known as MPEG 2.5 — extended to better support lower bit rates — is commonly implemented, but is not a recognized standard."
  },
  "manual/audio/index.html": {
    "href": "manual/audio/index.html",
    "title": "Audio | Evergine Doc",
    "keywords": "Audio Evergine supports creating audio sounds and playing music in your projects including 3D spatialized audio very useful in Virtual Reality or Augmented Reality. In this section Import Audio Audio Editor Using Audio from Evergine Studio Using Audio from code"
  },
  "manual/audio/using_audio_from_code.html": {
    "href": "manual/audio/using_audio_from_code.html",
    "title": "Create audio from code | Evergine Doc",
    "keywords": "Create audio from code In this section are explained in more detail the all important elements to reproduce audio in your project. Audio Device Audio Device is a class that represents an audio output device. Evergine supports to audio device implementations: Audio Device Implementation Platforms supported Description XAudioDevice Windows, Hololens A lower-level audio API for Microsoft Windows, Xbox 360 and Windows Phone 8, the successor to DirectSound on Windows and a supplement to the original XAudio on the Xbox 360. ALAudioDevice Windows, Web, Android, IOS, Linux, Mac A cross-platform audio application programming interface (API). It is designed for efficient rendering of multichannel three-dimensional positional audio. Its API style and conventions deliberately resemble those of OpenGL. OpenAL is an environmental 3D audio library, which can add realism to a game by simulating attenuation (degradation of sound over distance), the Doppler effect (change in frequency as a result of motion), and material densities. OpenAL aimed to originally be an open standard and open-source replacement for proprietary (and generally incompatible with one another) 3D audio APIs such as DirectSound and Core Audio, though in practice has largely been implemented on various platforms as a wrapper around said proprietary APIs or as a proprietary and vendor-specific fork. In the Program.cs class in Evergine project template is possible to see the implementation used as Audio Device: Creating a XAudio2 implementation // Creates XAudio device var xaudio = new global::Evergine.XAudio2.XAudioDevice(); application.Container.RegisterInstance(xaudio); Creating a OpenAL implementation // Creates OpenAL device var audioDevice = new Evergine.OpenAL.ALAudioDevice(); application.Container.RegisterInstance(audioDevice); Its methods more relevant are: Method Description CreateAudioSource Creates an audio source where you can enqueue audio buffers. CreateAudioBuffer Creates an audio buffer. Audio Buffer The audio buffer represents a sound. When you drag an audio file to the Evergine Studio and audio asset is created automatically. You can load an audioBuffer from an audio asset using the AssetService: // Create audioBuffer from audio asset. AudioBuffer audioBuffer = assetsService.Load<AudioBuffer>(EvergineContent.Audio.sound1_wav); It is possible to create an audio buffer with procedural data too: // Create buffer this.format = new WaveFormat(false); this.buffer = this.AudioDevice.CreateAudioBuffer(); // Fill with data var bufferData = new byte[100 * this.format.BlockAlign]; this.buffer.Fill(bufferData, 0, bufferData.Length, this.format); For more details see the AudioBuffer API reference Audio Source The audio source represents the audio queue where it is possible to enqueue several audio buffers and reproduce them one after another. To enqueue an audio buffer and playing it: // Load audio buffer AudioBuffer audioBuffer = assetsService.Load<AudioBuffer>(EvergineContent.Audio.sound1_wav); // Gets Audio Device instance AudioDevice audioDevice = Application.Current.Container.Resolve<AudioDevice>(); // Create Audio Source AudioSource audioSource = audioDevice.CreateAudioSource(audioBuffer.Format); // Enqueue audio buffer if (audioSource.PendingBufferCount == 0) { audioSource.EnqueueBuffer(audioBuffer); } // Play the audio source. audioSource.Play(); Its methods more relevants are: Method Description EnqueueBuffer Enqueue an audio buffer. Play Play all buffers enqueued in the audio source. Pause Pause the audio source reproduction. Stop Stop the audio source reproduction. For more details see the AudioSource API reference"
  },
  "manual/audio/using_audio_from_editor.html": {
    "href": "manual/audio/using_audio_from_editor.html",
    "title": "Using Audio from Evergine Studio | Evergine Doc",
    "keywords": "Using Audio from Evergine Studio The 3D spatialized audio allows simulate sounds in a 3D environmnet. The goal is to reproduce audio in a way that replicates the way we hear sound in the real world. Spatial sounds are very useful to simulate environments in Virtual Reality / Augmented reality because this feature added more realism to the experience. In Evergine there are two components to simulate audio/spatial audio: Component Description SoundListener3D Represents a listener. Usually, this component is used with the camera entity. SoundEmitter3D Represents an emitter. This component can be added to any Entity of your scene to emit a 3D sound. Sound Listener To add a sound listener component to the main camera, select the camera and click the button on from Entity Details panel and search the component. Properties Description DopplerFactor Changes in frequency of a wave in relation to a listener who is moving relative to the sound emitter. The value is a positive float and the default value is 1.0. Sound Emitter To add a sound emitter component to any scene entity, select the entity and click the button on from Entity Details panel and search the component. Properties Description Audio The audio asset. Note. The audio must be mono to work as spatial sound. Volume The audio volume. The value is between [0.0-1.0] and the default value is 1.0. Pitch The quality makes it possible to judge sounds as higher and lower in the sense associated with musical melodies. The value is between [0.0-1.0] and the default value is 1.0. IsMuted Indicates whether the emitter is muted or not. Distance Scale Factor This is only used to calculate the doppler effect on the sound effect. Play Automatically The emitter starts playing the sound automatically. Loop The emitter is playing in loop mode. Apply3D Indicates whether the position of the emitter with respect to the listener will be used to simulate spatial sound or not."
  },
  "manual/basics/application/container.html": {
    "href": "manual/basics/application/container.html",
    "title": "Application Container | Evergine Doc",
    "keywords": "Application Container The Application Container is a class responsible to store objects that will be accesses from the entire application. The application itself does not have functionality itself, and all logic is made using registered instances into the Container. The application Container could be accessed using the Container property in the Application class. Here you will register all Services of your application, among other instances to control your project (like the GraphicContext to expose the graphic API, or AssetsService to control the asset library of your application, and ScreenContextManager to control the scenes that will be played in your application). Tip In general terms, in the Container you will register all Services and logic that will be consumed for every Scene or Component in your Application. Note There can be only one instance per Type in the Container. Every object registerd here is treated like a Singleton. Using the Container Register Instances You can register elements inside the Container by two ways: Register a Type You can register a type in the Container. If this functionality will be needed in the future, the Container will create an instance and will offer it to everyone that require this instance. This is dome by the Container.RegisterType<T>() method: Method Description RegisterType<T>() Register the specified type T to the container. A small example: public partial class MyApplication : Application { public MyApplication() { // Previous code :) // You could register the service by type... this.Container.RegisterType<MyService>(); } ... Register an Instance In the other hand, you can register directly an instance, this useful if you want to properly initiate the service, or offer an implementation of an abstract class: Methods Description RegisterInstance(T instance) Register the instance object into the Container. It will associate to the type of the instance. RegisterInstance<T> (T instance) Register the instance object into the Container. It will associate to the type of the generic type <T>. the instance parameter type must be a subclass of <T>. A small example: public partial class MyApplication : Application { public MyApplication() { // Previous code :) // Register directly the service instance... this.Container.RegisterInstance(new MyService()); // You can register a instance but specifying a parent class to indicates // the type that you want to expose. // In that case, you are offering the DX11 implementation when someone request the GraphicsContext... this.Container.RegisterInstance<GraphicsContext>(new DX11GraphicsContext()); } ... Get instances Is easy to obtains instances from the Application Container Using [BindService] tag attribute You can use the [BindService] attribute in your Component, SceneManager or even from another Services to automatically inject the Service instance into your property. using Evergine.Framework; using System; namespace MyProject { public class MyBehavior : Behavior { // Use the BindService attribute on top of the property or attribute // in which you want to inject the Service [BindService] private MyService myService = null; protected override void Update(TimeSpan gameTime) { this.myService.DoRequest(); } } } Using Resolve() methods The Container has the following methods to obtains instances: Methods Description T Resolve<T>() Obtains the instance of the type <T> specified. object Resolve(Type type) Other way to obtains an objects, but without C# generics. using Evergine.Framework; using System; namespace MyProject { public class MyBehavior : Behavior { private MyService myService = null; protected override bool OnAttached() { // Use the Resolve<Type> method from the Application Container.... this.myService = Application.Current.Container.Resolve<MyService>(); return base.OnAttached(); } protected override void Update(TimeSpan gameTime) { this.myService.DoRequest(); } protected override bool OnDettached() { // Release the reference when a component is being dettached... this.myService = null; } } }"
  },
  "manual/basics/application/index.html": {
    "href": "manual/basics/application/index.html",
    "title": "Application | Evergine Doc",
    "keywords": "Application In Evergine, the Application class is the entry point for your application. It contains all services and expose the application loop with DrawFrame() and UpdateFrame() cycles. Additionally, it offers the Container instance, that allows developer to register all Services and global functionality to be accessed and binded through the entire application (from Components, Scenes, Managers, etc...) There can be only one instance of Application class in your Evergine project, and we treat it like a Singleton instance Static property Description Application.Current Static property to access the current Application. It's the most common way to access to your application instance from every part of your Evergine classes. In this section Application Container Using Application ScreenContext Manager"
  },
  "manual/basics/application/screen_context_manager.html": {
    "href": "manual/basics/application/screen_context_manager.html",
    "title": "ScreenContext Manager | Evergine Doc",
    "keywords": "ScreenContext Manager The ScreenContext Manager allows you to load a ScreenContext with single or multiple scenes simultaneously and transit to other ScreenContext while the application is running. Then the Screen Context manager is used to control the flow of your application through multiple scenes. ScreenContext A ScreenContext could be simple if only contains a single scene or multiple if contains several scenes. Transit to other ScreenContext The ScreenContext Manager has the To, Push and Pop methods to transit between different ScreenContexts. Method Description To The Screen ContextManager stack unloads and clears all ScreenConnect enqueued before and loads only the new ScreenContext. By default, the method dispose all ScreenContexts previously in the stack, but this behavior can be modified using an overloading method with the paramaeter doDispose Push The ScreenContextManager stack pauses the last ScreenContext enqueued and enqueues the new ScreenContext. Only the peek ScreenContext is running. . Pop The ScreenContextManager stack unloads and dequeues the ScreenContext located in the peek and the previous ScreenContext in the stack will be running. By default, the method dispose of the dequeued ScreenContext, but this behavior can be modified using an overloading method with the parameter doDispose Using ScreenContent Manager The ScreenContext Manager is only available from code so is not possible to configure it from Evergine Studio. If you inspect the MyApplication class created by the Evergine project template, you can see the method Initialize with the following code: public override void Initialize() { base.Initialize(); // Get ScreenContextManager var screenContextManager = this.Container.Resolve<ScreenContextManager>(); var assetsService = this.Container.Resolve<AssetsService>(); // Navigate to scene var scene = assetsService.Load<MyScene>(EvergineContent.Scenes.MyScene_wescene); ScreenContext screenContext = new ScreenContext(scene); screenContextManager.To(screenContext); } In the code below a simple ScreenContext is created with the MyScene scene and the ScreenContextManager transit to this ScreenContext using the To method explain before. In addition, you can assign names to the ScreenContexts using: ScreenContext screenContext = new ScreenContext(\"Menu\", scene); To find the ScreenContext in the stack you can use the following line: var menuScreenContext = screenContextManager.FindContextByName(\"Menu\"); ScreenContext behaviors When a ScreenContext has been paused the update and draw method of the scenes inside of ScreenContext they will not run. But this behavior can be modified using the parameter Behavior in the ScreenContext class. ScreenContext screenContext = new ScreenContext(\"Menu\", scene) { Behavior = ScreenContextBehaviors.UpdateInBackground | ScreenContextBehaviors.DrawInBackground }; Behavior Description UpdateInBackground The scenes inside of ScreenContext keep updating when the ScreenContext is paused. DrawInBackground The scenes inside of ScreenContext keep drawing when the ScreenContext is paused."
  },
  "manual/basics/application/using_application.html": {
    "href": "manual/basics/application/using_application.html",
    "title": "Using Application | Evergine Doc",
    "keywords": "Using Application In this documents yo will learn the common usages and tips to deal with Evergine Application class. Default Application After creating a new Evergine project (checks the Project Structure document for further details), you will find a MyApplication class that inherit from Application: public partial class MyApplication : Application { public MyApplication() { // Register services into application container... this.Container.RegisterType<Clock>(); this.Container.RegisterType<TimerFactory>(); this.Container.RegisterType<Random>(); this.Container.RegisterType<ErrorHandler>(); this.Container.RegisterType<ScreenContextManager>(); this.Container.RegisterType<GraphicsPresenter>(); this.Container.RegisterType<AssetsDirectory>(); this.Container.RegisterType<AssetsService>(); this.Container.RegisterType<ForegroundTaskSchedulerService>(); this.Container.RegisterType<WorkActionScheduler>(); } public override void Initialize() { base.Initialize(); // Get ScreenContextManager... var screenContextManager = this.Container.Resolve<ScreenContextManager>(); var assetsService = this.Container.Resolve<AssetsService>(); // Load the scene asset and instantiate into a MyScene class instance... var scene = assetsService.Load<MyScene>(EvergineContent.Scenes.MyScene_wescene); // Use ScreenContextManager service to navigate the main scene (MyScene)... ScreenContext screenContext = new ScreenContext(scene); screenContextManager.To(screenContext); } } Interesting things: It uses the MyApplication constructor to register all available services. You can register services in any part of your code, but it is a good place to register services. The Initialize() method is invoked to initialize your application. In that part the ScreenContextManager is notified what Scene is going to be played. Note You can register Services on any place of your code. For example, if you want to register the GraphicsContext, we suggest to register in the Profile Project (I recommend again the Project Structure document). For example, you will register the DX11GraphicsContext in the Windows profile project, or VulkanGraphicsContetx in the Android profile. Application lifecycle methods The application class will invoke several methods to maintain its lifecycle, and helps developers to keep things going well. Methods Description Initialize() Initialize all aspects needed to start your application. Here you will usually navigate to the Scene to be played, and setup initial functionality or services to be consumed during the execution. UpdateFrame() This method execute the Update cycle of your application. It will notify all UpdatableServices to be updated, including the ScreenContextManager, that will propagate this invocation to the Scene and finally your Components. You can override this method to customize the Update loop. DrawFrame() This method is triggered to Draw your application. All Scenes will be rendered, and the GraphicsPresenter service will present the rendering results in all displays (windows, XR headsets, off screen rendering, etc...). You can override this method to customize the Draw loop. Destroy() Use this method to dispose all resources of your application. Checks if the application is running inside Evergine Studio When you are developing components or functionality, you maybe need to check if your code is running inside Evergine Studio or outside. Property Description IsEditor Application property that indicates if the application is running in Evergine Studio. public class MyBehavior : Behavior { [BindComponent] private Transform3D transform; protected override void Start() { // Reset the position to Zero only if is not Evergine Studio... if (!Application.Current.IsEditor) { this.transform.Positon = Vector3.Zero; } } }"
  },
  "manual/basics/bindings/bind_components.html": {
    "href": "manual/basics/bindings/bind_components.html",
    "title": "Bind Components | Evergine Doc",
    "keywords": "Bind Components Using [BindComponent] attribute allows your Components to stablish dependencies with another components. // Bind with the Transform component of the owner entity... [BindComponent] private Transform3D transform; // Bind a list with all Camera3D components of the entire scene... [BindComponent(source: BindComponentSource.Scene)] private List<Camera3D> sceneCameras; Note [BindComponent] can only be used inside Components. In other case the binding cannot be resolved [BindComponent] Properties This attribute offers several ways to customize: isRequired (default true) If the value is true the dependency is required to be resolved, in the oher case, the current Component won't be attached. For insatnce, in the following example we have a custom component MyComponent, and a definition of an Entity with two components (a Transform3D and MyComponent) public class MyComponent : Component { [BindComponent(isRequired: true)] private Transform3D transform; [BindComponent(isRequired: false)] private Camera3D camera; } Entity entity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MyComponent()); The MyComponent will be attached correctly, because all requirements has been satisfied: The required Transform3D will be injected into the transform attribute, because we previously added a Transform3D component. The camera attribute won't be resolved, and this value will be equal to null, however, the component would be attached because this dependency is not required. In the other hand, in this other Entity, now the MyComponent instance won't be attached because the Transform3D dependency cannot be resolved: Entity anotherEntity = new Entity() .AddComponent(new MyComponent()); isExactType (default true) If the value is true indicates that the Type of the component to bound must be the same as the type required (nor subclass or parent class). For insatnce, the following component MyComponent, requires a component of the exact type Camera public class MyComponent : Component { [BindComponent] // isExactType: true by default private Camera camera; } Entity entity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new Camera3D()) .AddComponent(new MyComponent()); In that case, the dependency won't be injected, because the entity has no Camera component (it has a Camera3D component, which is a subclass, but isExactType is true) However, if we change the MyComponent definition and sets isExactType value to false, now the dependency will be satisfied, because the entity has a component asignable to a Camera type (the Camera3D component): public class MyComponent : Component { [BindComponent(isExactType: false)] private Camera camera; } source (default BindComponentSource.Owner) This property indicates where the component or components will be searched. There are several values: Source Description Owner (default) The Component will be searched in the owner entity. Scene The Component is searched in the entire Scene. It iterates over all entities in the scene to find if exist components. Children Search the Components in its descendant entities, including the owner entity ChildrenSkipOwner Search the Components in its descendant entities, not including the owner entity Parents Search the Components in the ascendant entities, including the owner entity ParentsSkipOwner Search the Components in its ascendant entities, not including the owner entity A brief example: public class MyComponent : Component { // Bind a the first Camera3D component in the scene... [BindComponent(source: BindComponentSource.Scene)] private Camera3D firstCamera; // Bind a list with all Camera3D components in the entire scene... [BindComponent(source: BindComponentSource.Scene)] private List<Camera3D> sceneCameras; // ... } isRecursive (default true) If set to true the search will include all descendants (or ascendants) in the hierarchy; otherwise, the search will only include the direct descendants. tag (default null) If the tag has value, it will only find components in entities that has the specified Tag. It works for filtering entities. public class MyComponent : Component { // Bind a list with all Camera3D components of all Entities tagged with \"Tag\" [BindComponent(source: BindComponentSource.Scene, tag: \"Tag\")] private List<Camera3D> sceneCameras; // ... }"
  },
  "manual/basics/bindings/bind_entities.html": {
    "href": "manual/basics/bindings/bind_entities.html",
    "title": "Bind Entities | Evergine Doc",
    "keywords": "Bind Entities Using [BindEntity] attribute allows your components to stablish dependencies with Entities in your scene. The search is made using the Entity.Tag propert: // Binding with the first Entity in the Scene tagged with \"Player\" [BindEntity(tag: \"Player\")] private Entity player; // Search all Entities with \"Item\" tag... [BindComponent(tag: \"Item\")] private List<Entity> itemList; Note [BindEntity] can only be used inside Components. In other case the binding cannot be resolved [BindEntity] Properties This attribute offers several ways to customize: source (default BindEntitySource.Scene) This property indicates where the component or components will be searched. There are several values: Source Description Scene (default) The Entity is searched in the entire Scene. It iterates over all entities in the scene. Children Search the Entity in its descendant entities, excluding the owner entity ChildrenSkipOwner Search the Entity in its descendant entities, not including the owner entity Parents Search the Entity in the ascendant entities, including the owner entity ParentsSkipOwner Search the Entity in its ascendant entities, not including the owner entity A brief example: public class MyComponent : Component { // Binding with the first Entity in the Scene tagged with \"Player\" [BindEntity(tag: \"Player\")] // source: Scene is default value private Entity player; // ... } isRequired (default true) If the value is true the dependency is required to be resolved, in other case, the current Component won't be attached. The IsRequired value has the same functionality than [BindComponent] (see [Bind Components](bind_components.md for further details)). isRecursive (default true) If set to true the search will include all descendants (or ascendants) in the hierarchy; otherwise, the search will only include the direct descendants. tag (default null) The Entities will be filtered by its tag value."
  },
  "manual/basics/bindings/bind_scenemanagers.html": {
    "href": "manual/basics/bindings/bind_scenemanagers.html",
    "title": "Bind SceneManagers | Evergine Doc",
    "keywords": "Bind SceneManagers Using [BindSceneManager] attribute allows the developer to stablish dependencies with a SceneManager registered in the Scene. // Bind the RenderManager of the scene... [BindSeneManager] private RenderManager renderManager; Note [BindSceneManager] can be used inside Components and SceneManagers. In other case the binding cannot be resolved [BindSceneManager] Properties This attribute offers several ways to customize: isRequired (default true) If the value is true the dependency is required to be resolved, in other case, the current Component won't be attached. The isRequired value has the same functionality than [BindComponent] (see [Bind Components](bind_components.md for further details)). For example, if this is all Services registered inside the Application Container: this.managers.AddManager(new EntityManager()); this.managers.AddManager(new AssetSceneManager()); this.managers.AddManager(new BehaviorManager()); this.managers.AddManager(new RenderManager()); this.managers.AddManager(new EnvironmentManager()); The following component will be attached because the EnvironmentManager has been registered: public class MyComponent : Component { [BindSceneManager] private EnvironmentManager environmentManager; // ... } However, in that case, the dependency will fail because PhyisicManager3D is not registered in the scene: public class MyComponent : Component { [BindSceneManager] private PhyisicManager3D physicManager; // ... }"
  },
  "manual/basics/bindings/bind_services.html": {
    "href": "manual/basics/bindings/bind_services.html",
    "title": "Bind Services | Evergine Doc",
    "keywords": "Bind Services Using [BindService] attribute allows the developer to stablish dependencies with a Service registered in the Application Container. // Bind the Graphics Context registered in the Application... [BindService] private GraphicsContext transform; Note [BindService] can be used inside Services, Components and SceneManagers. In other case the binding cannot be resolved [BindService] Properties This attribute offers several ways to customize: isRequired (default true) If the value is true the dependency is required to be resolved, in other case, the current Component won't be attached. The isRequired value has the same functionality than [BindComponent] (see [Bind Components](bind_components.md for further details)). For example, if this is all Services registered inside the Application Container: // Register services into application container... this.Container.RegisterType<TimerFactory>(); this.Container.RegisterType<Random>(); this.Container.RegisterType<ErrorHandler>(); this.Container.RegisterType<ScreenContextManager>(); this.Container.RegisterType<GraphicsPresenter>(); this.Container.RegisterType<AssetsDirectory>(); this.Container.RegisterType<AssetsService>(); this.Container.RegisterType<ForegroundTaskSchedulerService>(); this.Container.RegisterType<WorkActionScheduler>(); The following component will be attached because the AssetsService has been registered: public class MyComponent : Component { [BindService] private AssetsService assetService; // ... } However, in that case, the dependency will fail because the Clock service is not registered: public class MyComponent : Component { [BindService] private Clock clock; // ... }"
  },
  "manual/basics/bindings/index.html": {
    "href": "manual/basics/bindings/index.html",
    "title": "Binding Elements | Evergine Doc",
    "keywords": "Binding Elements Evergine allows to bind dependencies automatically across your components, services and sceneManagers. For example, bindings allow a custom component to require that its Owner Entity has a Transform3D component, and set it to a property during the Attach phase (see the Lifecycle documents) This binding feature gives to developers a lot of flexibility to interconnect components, services and scene managers, avoiding the tedious part to setup this dependencies in Evergine Studio or from code. In Evergine, we define bindings using property attributes ([BindComponent] for example). Note All dependencies are not available until the Attach phase, if you try to access during in the constructor, OnLoaded() or OnDestroy() methods, the property value is goint to be null In this section There are four types of binding: Bind Components Bind Services Bind Entities Bind SceneManagers Example In the following example, the component will bind a service, a component an a scene manager. public class MyComponent : Component { [BindService] private AssetsService assetsService; [BindSceneManager] private RenderManager renderManager; [BindComponent] private Transform3D transform; private Material defaultMaterial; protected override Start() { // All values of bind attributes will be injected after the Attach phase... // Bind assetService this.defaultMaterial = this.assetsService.Load<Material>(EvergineContent.Materials.DefaultMaterial); // Bind SceneManagers this.RenderManager.DebugLines = true; // Bind Components this.transform.Position = Vector3.Zero; } // ... } Bind Collections If the [Bind] attribute is set on top of List<T> property, they will attempt to search a list of elements that elements that satisfy the dependency: // Bind with the Transform component of the owner entity... [BindComponent] private Transform3D transform; // Bind a list with all Camera3D components of the entire scene... [BindComponent(source: BindComponentSource.Scene)] private List<Camera3D> sceneCameras;"
  },
  "manual/basics/component_arch/components/behaviours.html": {
    "href": "manual/basics/component_arch/components/behaviours.html",
    "title": "Behaviours | Evergine Doc",
    "keywords": "Behaviours The Behaviors are one kind of Component that allows you to do and action each Update cycle of the Application. A Behavior is associated with an Entity and all Behaviors in a scene are managed by Behavior Manager. Create a Behavior From Visual Studio you can create a c# class with the following template. using Evergine.Framework; using System; namespace MyProject { public class MyBehavior : Behavior { protected override void Update(TimeSpan gameTime) { // Your code } } } Update Order You can indicate the order of execution of every Behavior by setting its UpdateOrder property. Property Description UpdateOrder Value used to order the execution of every Behavior of the Scene, whether lower values indicate that the Behavior would be updated first. The default value is 0.5 Behavior family There are three Behavior families that you can specify in the constructor of your Behavior using the base constructor with the FamilyType parameter. DefaultBehavior: This is the default family when you don't specify anything in the constructor. The Behavior only runs in runtime but not in the Evergine Studio. PriorityBehavior: This is a special family that indicates your Behavior runs both in runtime and in Evergine Studio. PhysicBehavior: This family is specific to Physics components that need to be updated by the PhysicsManager. BehaviorManager The Behavior Manager is a SceneManager registered by default in every SCene that manages the execution of all Behaviors in each update cycle. All Behaviors are registered automatically into the BehaviorManager when it's attached, and unregistered when the Behaviour is detached. Behavior example The following example creates Behavior that allows you to rotate your entity every update cycle. using Evergine.Framework; using Evergine.Framework.Graphics; using Evergine.Mathematics; using System; namespace MyProject { public class MyBehavior : Behavior { [BindComponent] private Transform3D transform = null; public MyBehavior() : base(FamilyType.DefaultBehavior) // This base(...) constructor could be ommited. { } protected override void Update(TimeSpan gameTime) { this.transform.LocalOrientation *= Quaternion.CreateFromEuler(new Vector3(0, (float)gameTime.TotalSeconds, 0)); } } } Tip BindComponent allows binding other components, to know more about that visit the following section Add/Remove a Behavior To add/remove a Behavior to/from your entity both from code or Evergine Studio is the same that adding/removing a component because a Behavior is a kind of component. You can see how to add/remove a component here"
  },
  "manual/basics/component_arch/components/drawables.html": {
    "href": "manual/basics/component_arch/components/drawables.html",
    "title": "Drawables | Evergine Doc",
    "keywords": "Drawables The Drawables are one kind of Component that allows you to do and action each Draw/Render cycle of the Application. A Drawable is associated with an Entity and all Drawables in a scene are managed by RenderManager. Drawable3D Drawables3D are a kind of drawables that is designed to provides 3D content. They will be processed on every Camera3D render. In these components you usually create graphics elements to draw 3D features (models, billboard, background environment, etc...) Add the following property: Property Description CastShadows Boolean value indicating whether this model will cast shadows. True by default. Creating a Drawable3D From Visual Studio you can create a c# class with the following code: using Evergine.Common.Graphics; using Evergine.Framework; using Evergine.Framework.Graphics; using Evergine.Mathematics; using System; namespace MyProject { public class BBoxDrawable : Drawable3D { [BindComponent] private Transform3D transform; public Vector3 Size {get;set;} = Vector3.One; public Color Color {get; set;} = Color.Red; public override void Draw(DrawContext drawContext) { var orientedBBox = new BoundingOrientedBox( this.transform.Position, this.Size, this.transform.Orientation); // Draw an oriented boundingbox with the specified color and size... this.Managers.RenderManager.LineBatch3D.DrawBoundingOrientedBox(orientedBBox, this.Color); } } } Drawable2D This drawables will be processed on every Camera2D render. In the other hand with Drawable2D you will render 2D content (Sprites, UI...). Add the following properties: Property Description Layer Suggest the RenderLayer that will use all 2D content used by this Drawable. Creating a Drawable2D From Visual Studio you can create a c# class with the following code: using Evergine.Common.Graphics; using Evergine.Framework; using Evergine.Framework.Graphics; using Evergine.Mathematics; using System; namespace MyProject { public class CircleDrawable : Drawable2D { [BindComponent] private Transform2D transform; public float Radius {get;set;} = 0.5f; public Color Color {get; set;} = Color.Red; public override void Draw(DrawContext drawContext) { // Draw a circle... this.Managers.RenderManager.LineBatch2D.DrawCircle( this.transform.Position, this.Radius, this.Color, this.transform.DrawOrder); } } } Graphics content A Drawable will add to RenderManager objects to be drawn (sprites, meshes, etc...). Read Render Overview document for further details. Add/Remove a Drawable To add/remove a Drawable to/from your entity both from code or Evergine Studio is the same that adding/removing a component because a Drawable is a kind of component. You can see how to add/remove a component here"
  },
  "manual/basics/component_arch/components/index.html": {
    "href": "manual/basics/component_arch/components/index.html",
    "title": "Components | Evergine Doc",
    "keywords": "Components A Component allows to add functionality and logic to an Entity. The Component class is the one of every component in Evergine. There are three types of Components which are broadly used along the engine: Component: You could derive directly from the Component class to add functionality whithout an Update() or Draw() calls. You could register to events or expose some logic, the only limit is your imagination :) Behavior: It is thought to add logic to the associated Entity. It provices an Update() method which is executed on each game loop. Drawable: In charge of managing the rendering on the screen. In the same way as above one, this provides a Draw() abstract method invoked during the rendering cicle. It is suitable to register and update objects to be rendered. Component Lifecycle Please, check Lifecycle of element for details regarding the lifecycle of elements in Evergine, including Components. Using Components You can deal with Components both in Evergine Studio and directly from code. From Evergine Studio In Evergine Studio, you can add/remove Components to an Entity, and modify its properties. Add a Component In Evergine Studio, first select an Entity that you want to add the Component, and click the button in the Entity Details section: A Component selector dialog appears. Select the component type that you want to add: Remove a Component The process of removing a component is quite simple. First, select the Entity that you want to remove one Component. Later, on the Entity Details, right click in the Component name area, and click the Delete button: From Code Add Components To add Components, you just need to invoke the Entity.AddComponent() method: Entity entity = new Entity(\"MyAwesomeEntity\"); // Add a Component (Transform3D)... entity.AddComponent(new Transform3D()); // You can chain AddComponent() calls... entity.AddComponent(new CubeMesh()) .AddComponent(new MaterialComponent()) .AddComponent(new MeshRenderer()); Remove Components You have several options to specify the component or components that you want to remove. You can remove components by indicating the Component instance itself, or by giving the type of the component to remove. In every method to remove the component specifying the type, you have the optional parameter isExactType, which indicate if the component to search and remove must match the given type, or for contrary, it can be a subclass of the type. // Remove a component passing the instance: entity.RemoveComponent(component); // Remove a component with the type (MeshRenderer in that case): entity.RemoveComponent<MeshRenderer>(); // An alternative way to remove a Component using the type: entity.RemoveComponent(typeof(MeshRenderer)); // You can remove all components that match the specified type (all Drawables in that example) // keep in mind that isExactType is false... entity.RemoveAllComponentsOfType<Drawable>(isExactType: false) Create a new Component Evergine provides a good Component library, but when you are developing a custom application, you will need to create your own Components to accomplish your application requirements. Write the C# code of your Component You only need to create a class that inherit from Component class, and add to your application project: public class MyComponent : Component { // Add some properties to expose data :) public int Value { get; set; } // Override the Start method, which is called once the Entity is started: protected override void Start() { base.Start(); Trace.TraceInformation($\"The component has been started: {this.Value}\"); } } Allow multiple instances By default, an Entity can only have one Component per Type (for instance, an Entity can't have more than one Transform3D). However, in some cases it is useful that an Entity can have more instances per type (for example, if you want to add several colliders). In that case, you need to add the [AllowMultipleInstances] attribute to your class: [AllowMultipleInstances] public MyComponent : Component { // The entity can have multiple instances of this component type... } // This is valid becuse MyComponent has the [AllowMultipleInstances] attribute... Entity entity = new Entity() .AddComponent(new MyComponent())) .AddComponent(new MyComponent())) .AddComponent(new MyComponent())) .AddComponent(new MyComponent())) .AddComponent(new MyComponent()));"
  },
  "manual/basics/component_arch/entities/entity_hierarchy.html": {
    "href": "manual/basics/component_arch/entities/entity_hierarchy.html",
    "title": "Entity Hierarchy | Evergine Doc",
    "keywords": "Entity Hierarchy You can establish an Entity as a child of another Entity. Using this relationships, it is possible to define an entity tree, where root entities has several children, and those children could have another children too. Hierarchy transformations If an Entity has a Transform3D component (or Transform2D for 2D entities), the Child Entity will move, rotate and scale in the same way as its Parent does. You can think of parent / child hierarchy as being like the relationship between your arms and your body, whenever your body moves, your arms also move along with it. Child objects can also have children. Your hands can be considered as children of your arms, and your fingers are hands children. Hierarchy Properties and Methods The Entity has the following properties and methods to maintain and inspect the hierarchy: Property Type Description Parent Entity Point to the inmediate ascendant of this entity. If the entity has no parents this property is null ChildEntities IEnumerable<Entity> A collection of the inmediate descendants. To add and remove entities, an Entity instance have the following methods: Method Description Entity.AddChild(Entity) Add a child entity to the current entity. Entity.RemoveChild(...) Remove a child entity from the current entity. You can specify the entity to remove by giving the following options: The Entity instance. The child Name The child ID Entity Paths Like in a normal file system, Evergine implements a simple Entity Path system to allow identification of entities in the Scene entity tree. An Entity Path cound be accessed by the EntityPath property, and is represented by the sequence of ascendant entity names (including the current entity) separated by the . symbol. For example, in the hierarchy described above, the EntityPath of the Tire2 entity is Car.Wheel2.Tire2 Path representation These are the path representation elements: Entity separator: . Current entity: [this] Parent entity: [parent] Sample uses Using the example described above... The relative path from Wheel1 to Tire2 would be: [parent].Wheel2.Tire2 The relative path from Car to Tire1 would be: .Wheel1.Tire1 Or: [this].Wheel1.Tire1, Notice that [this] is optional. The absolute path of Wheel1 entity would be exactly the one we've been using until now: Car.Wheel1 Whe you want to get an entity that doesn't belong to the source's root entity, we just specify the target's absolute path. For example, the relative path from Tire1 to Ground is just: Ground, instead of [parent].[parent].[parent].Ground (Incorrect path) To figure out if a specific path is absolute or relative, we just have to read the first element. If it's one of the special elements (., [this] pr [parent]): Path Type [parent].Wheel1 Relative Relative .Tire2 Relative [this] Relative Car.Wheel2 Absolute Road Absolute Additional methods In order to make easier the search of entities in code, we’ve added the Find() method in the Entity class. public Entity Find (string path) This method finds an entity with the desired relative path respect the caller entity. If the relative path is not correct, it returns null. We have also added an additional parameter in the Find method in EntityManager class, allowing to set the source entity and allowing to directly search there. public Entity Find (string path, Entity sourceEntity = null) For example (following with the above-mentioned hierarchy), if we want to search the tire1 entity from car we can call one of the next: Entity tire; // We can find the entity either of these ways tire = car.Find(\".Wheel1.Tire1\"); tire = entityManager.Find(\".Wheel.Tire1\", car);"
  },
  "manual/basics/component_arch/entities/entity_manager.html": {
    "href": "manual/basics/component_arch/entities/entity_manager.html",
    "title": "EntityManager | Evergine Doc",
    "keywords": "EntityManager EntityManager is the subsystem in the Scene responsible to manage Entities. It is responsible to maintain the Entity list, and the lifecycle of each one. Useful ways to interact with EntityManager: Add and Remove Entities The most common way to interact with EntityManager is by adding and removing entities: EntityManager entityManager = scene.Managers.EntityManager; // Add an Entity to the Scene.. entityManager.Add(entity); // Remove an Entity from the Scene... entityManager.Remove(entity); Important Properties Method Description EntityGraph Return the entities at the top level on the scene (Those without parent) AllEntities Return all the entities of the scene, including those who have parent. Find Entities You can find Entities in several ways: Find Entity by EntityPath This is the most common way to find an Entity in the Scene, by using its EntityPath: // Find an entity by its Entity Path... var entity = entityManager.Find(\"Parent.Entity1.ChildEntity\"); Find Entity by ID You can find an Entity if you specify its ID (Guid) // Find an entity by its ID... Guid id = entity.Id; var entity = entityManager.Find(id); Find all Entities by Tag As we mentined before, you can set the tag Entities by setting the Tag property. So, you can obtain an Entity collection that match a given Tag: // Find all entities with a given Tag... IEnumerable<Entity> entityCollection = entityManager.FindAllByTag(\"Tag\"); Entity Tag Collection A useful feature of EntityManager is the possibility to obtain a live collection of entities that match a specified Tag. This collection is represented by the EntityTagCollection class. The main advantage compared to invoke FindAllByTag() method is that in this case the collection is dynamic during the application lifetime. So, you can subscribe to events to get notified when the collection changes: Here it is a glimpse of how to use it: // Gets the tag collection... var tagCollection = entityManager.GetEntityTagCollection(\"Tag\"); // Iterates over all matching entities... foreach (var entity in tagCollection.Entities) { System.Console.WriteLine(entity.EntityPath); } // TagCollection Events: // OnEntityAdded: Event triggered when a new Entity with the given Tag is added to the Scene... tagCollection.OnEntityAdded += (sender, entity) => { System.Console.WriteLine($\"New entity: {entity.EntityPath}\"); }; // OnEntityRemoved: Event triggered when an Entity is no longer belong to this collection, // becuase the Entity is removed or its Tag has changed... tagCollection.OnEntityRemoved += (sender, entity) => { System.Console.WriteLine($\"Entity removed: {entity.EntityPath}\"); };"
  },
  "manual/basics/component_arch/entities/index.html": {
    "href": "manual/basics/component_arch/entities/index.html",
    "title": "Entities | Evergine Doc",
    "keywords": "Entities Entities are the fundamental objects in Evergine that represent characters, lights, models and so on. An Entity without any Component has no functionality (nothing will be rendered or interacted). To give an Entity the properties it needs to become a Light, a Model, or a Camera, you need to add Components to it. Depending on what kind of objects do you want to create. Basic Properties Despite entities has no functionality itself, it provides several ways to identify Entity instances and access to information: Property Type Description ID Guid The unique identifier of an Entity. Among other objects in Evergine, entities are identified by its ID property. There can only be one Entity with the same ID. This value is usually autogenerated when a new Entity is created, or when it is deserialized when a Scene is loaded from asset. Name String The name of the Entity. Several objects can share the same name. Tag String A string used to categorize entities. It is useful to tag entities with things in common (for instance, tag all vehicle entities with the tag \"Vehicle\"). Evergine provides ways to get entity collections sharing the same Tag. Components IEnumerable<Component> A collection of registered components in this Entity Scene Scene Point to the Scene in which this Entity has been registered. This value is set after attaching the Entity (see LifeCycle document for further details) In this section Entity Manager Entity Hierarchy Using entities"
  },
  "manual/basics/component_arch/entities/using_entities.html": {
    "href": "manual/basics/component_arch/entities/using_entities.html",
    "title": "Using Entities | Evergine Doc",
    "keywords": "Using Entities Manipulate Entities is quite straightforward in Evergine. From Evergine Studio Add Entity in Evergine Studio In the Entities Hiearchy area in an oppened SceneEditor, just click the button. A popup menu will appear: This menu gives you several options to create entities. If you just want to create an Entity with only the Transform3D component, click the Empty entity button. If an Entity is selected, you can change its properties (Name, Tag, enable) in the Entity Details panel: From Code Create a new Entity from code Creating and Entity from code is a not a complex task: Entity entity = new Entity(\"EntityName\"); // Set the Entity Tag... entity.Tag = \"Tag\" // Add some components... entity.AddComponent(new Transform3D()); .AddComponent(new TeapotMesh()) .AddComponent(new MaterialComponent()) .AddComponent(new MeshRenderer()) // Add to the EntityManager this.Managers.EntityManager.Add(entity); Create a simple Hierarchy from code // Create the parent entity... Entity parentEntity = new Entity() .AddComponent(new Transform3D()); // Create the child entity... Entity childEntity = new Entity() .AddComponent(new Transform3D()); // Add the child entity to the parent... parentEntity.AddChild(childEntity); // Add only the parent entity to the EntityManager this.Managers.EntityManager.Add(parentEntity);"
  },
  "manual/basics/component_arch/index.html": {
    "href": "manual/basics/component_arch/index.html",
    "title": "Component Based Architecture | Evergine Doc",
    "keywords": "Component Based Architecture Evergine is based on entity-oriented programming. An Entity is built of Components, where each component does just an specific piece of work, and are reusable on other entities. Overview When you are making applications in Evergine, you need to create objects to represent the entities in your scene, like a car, a player, a sunlight, and so on. Traditional deep class hierarchies When you first get started ,you might think the most logical thing is to create a base class called AppObject or similar, that contains the common code. Then you can create subclasses like Vehicle with all common functionality between all vehicles, and maybe subclases for specific types (Car, Motorbike, Train...). For simple scenarios, this works quite well and is quite easy to program. However, has your application get larger and more complex, this architecture begins to cause some problems in practice: Root classes tend to be heavier and is difficult to split the functionality in separate subsystems. Class inheritance may introduce weird scenarios. For instance, if we have created a GroundVehicle and WaterVehicle base classes, Which class a AmphibianVehicle should be derived from? If it is derived from GroundVehicle, all water functionality would be missing, and the same if it is derived from WaterVehicle. Entities as an aggregation of Components To solve this issues, we have chosen the aggregation of components approach. In ths approach, the functionality is separated into individual components that are mostly independent of one another. The old object hierarchy is replaced by an object (Entity) with a collection of independent components (derived from Component). Each object now only has the functionality that it needs. Any distinct new functionality is implemented by adding a new component. Entity-Component relationship Entities are the fundamental objects in Evergine that represent characters, lights, models and so on. An Entity without any Component has no functionality (nothing will be rendered or interacted). To give an Entity the properties it needs to become a Light, a Model, or a Camera, you need to add Components to it. Depending on what kind of objects do you want to create. SceneManagers and Components In Evergine, a Scene has several subsystems (called SceneManagers). Every SceneManager control different aspects of the scene (A few examples: RenderManager to render and draw the scene, BehaviorManager to udpate all Behaviors, PhysicManager3D to perform Physics simulations, and so on) With the Component architecture, every component is responsible to registers itself into the associated SceneManager, allowing in these SceneManagers to have the scope of Components which they are interested in and ignore the rest of them. Note For instance: Every physics related components (RigidBody3D, BoxCollider3D, etc...) are internally registered into the PhysicManager3D when an Entity is spawned into the scene. This allows PhysicManager3D to gather and control all the physic information in the scene. Summary Diagram A Scene is composed for several Entities. Each one has a collection of Components that give it the required functionality or data. Every component may be registered into the different SceneManagers of the Scene. The following diagram gives an overview concerning this In this section Entities Components Prefabs"
  },
  "manual/basics/component_arch/prefabs/index.html": {
    "href": "manual/basics/component_arch/prefabs/index.html",
    "title": "Prefabs | Evergine Doc",
    "keywords": "Prefabs Sometimes you need to reuse entities including their components and their descendants. Instead of use copy and paste or entity duplication for doing this, that will create maintenance problems, you can use the concept of prefab. A prefab is a type of asset which helps developers with this basic function: reusing. Creating a prefab To create a prefab, first you need to build your entities hierarchy and assign components. For example, we can create an entity with a teapot and a plane, and a Spinner component to the top of this hierarchy. To create a prefab, right click on the top-most entity that you wan to include in it, and select Create prefab option. This will create a new asset with weprefab extension the same folder that you have selected in Project Explorer panel. If you created prefab in the wrong folder, don't worry as they are like any other Evergine asset, you can move it wherever you want. If you save changes and reload the scene, you will realize that entities that were part of created prefab, are marked now with a \"(Prefab)\" suffix. Using prefab creation option is not reversible once you save the scene. You can also drag and drop asset element from Asset Details panel to your scene, to create new prefab instances. Prefabs edition If you change values on those entities, this will no affect to new and existing prefab instances. In future releases, we plan to provide an specific prefabs editor. For now, a good option is to create your prefab in a separated scene. At the time of using Create prefab option, a new prefab file will be created, but do not save the scene. Doing this, you could modify your entities in the future. Just replace previous prefab file version with the new one. We don't officially support prefab nesting. This is, create a separated scene for your prefab, and use another prefab in that scene. Prefab instantiation To create a prefab instance programmatically, you can use following code snippet: var prefab = this.assetsService.Load<Prefab>(EvergineContent.Scenes.Entity_weprefab); var entity = prefab.Instantiate();"
  },
  "manual/basics/index.html": {
    "href": "manual/basics/index.html",
    "title": "Basics | Evergine Doc",
    "keywords": "Basics This chapter explains the basic concepts you need to know before starting to develop Evergine applications. Evergine and .NET Evergine is a powerful component based engine developed on .NET and designed to be completely multiplatform. Because of this, when you develop an Evergine application, all code are written in C#. You can edit your source code in Visual Studio or your preferred IDE that supports .NET. At last, an Evergine application is a .NET application, so you can integrate every library or service available in this ecosystem. NuGet Packages Evergine libraries are distributed using NuGet package system. As a result, is straightforward to update your application and integrate with tons of libraries available in the large .Net community ❤. Caution To update the version of your Evergine application, use Evergine Launcher evergine_launcher/index.md) instead of NuGet Package Manager in Visual Studio. In this section Project structure Component Based Architecture Transform Bindings Lifecycle of elements Scenes Services Application"
  },
  "manual/basics/lifecycle_elements.html": {
    "href": "manual/basics/lifecycle_elements.html",
    "title": "Lifecycle of elements | Evergine Doc",
    "keywords": "Lifecycle of elements Running Evergine components, entities or other objects executes a number of functions in a predetermined order. This document describes those functions and explains how they fit into the execution sequence. The following elements has the same lifecycle methods, and all information described in this document can be applied on each one: Components Entities Services SceneManagers Lifecycle overview The diagram below summarizes how Evergine orders and repeats function invocations over the element's lifetime: Lifecycle properties All elements that implements the default lifecycle shares the same properties. These properties and methods are exposed in the AttachableObject class. Because of this, the Component, Entity, Service or SceneServices classes extend AttachableObject class. Property Description IsEnabled (getter and setter) Allows to enable or disable an element. A disabled Behavior is not updated, or a disabled Drawable doesn't draw anything. State (getter) Gets the current state of this object. We cover this area later in this document To easy checking states, Evergine offers several properties (getter only) to know in which state are the element: Property Description IsLoaded Indicates if this object has been loaded (the OnLoaded() method has been invoked). IsAttached Indicates if this object has been attached (the OnAttached() method has been invoked). When an element is detached this property is set to false IsActivated Indicates if this object has been activated (the OnActivated() method has been invoked). IsStarted Indicates if this object has been started (the Start() method has been invoked). IsDestroyed Indicates if this object has been destroyed (the OnDestroy() method has been invoked). Initialization These methdos get usually called when the Application starts. OnLoaded() This method is called after the element is deserialized (during the scene loading) or it is created from code: This method is invoked once during the object lifetime. OnLoaded() is usually used to initialize all variables and functionality that does not depends on other external elements. Note On this step, all Bindings are not yet resolved. OnAttached() This method is invoked when an element is attached into Evergine. All bindings are resolved prior execution of this method. This method is used to stablish dependencies with external elements. This method returns a boolean value. Return true if the execution has been succeded, otherwise the component is not suscessfully attached. Note On this step, all binding elements (Components for example) may not have been attached yet. OnActivated() This method is invoked when an element is activated, this can happend after the OnAttached() execution or we change the IsEnabled property. This method only is invoked if IsEnabled == true, if a Component or its Entity has been disabled, this method is not executed. During this method, we setup the functionality once we have previously stablished all dependencies. We usually put here all code that can be easily undone when the component will be deactivated (subscribe to events for example.) Note On this step, all dependencies (Components for example) have being previously attached, but some elements may not have been activated yet. Start() This method is called before the first frame update only if the element has been previously activated. This method is called only once per attachment. If we enable or disable a Component, the Start method is not called again. However, if we detach a Component and reattach again to an Entity, the Start() method will be called again (after the OnAttached() and OnActivated() invocations) In that method we usually put all initialization functionality that depends on other elements and that we only want to execute once. Note On this step, all dependencies have being activated, but some elements may not have been started yet. Per frame loop During the appliction Update/Draw loop, each Frame the following methods are invoked: Update() This method is only available on Behaviors, UpdatableServices or UpdatableSceneManagers. This method can only be executed if the element has been started (attached and initialized). In general terms, the Update() method is called once per frame. We put here execution code to update the application logic or state (player movement, camera input controller, etc...) Draw() This method is only available on Drawables This method can only be executed if the element has been started (attached and initialized). The Draw() method is called once per drawing camera, during the rendering phase. We put here all code to update RenderObjects before the camera will process them. Deinitialization Evergine follows the following steps to properly destroy or detach an element OnDeactivated() This method is called when an activated element becomes disabled or inactive. This method is the opposite of OnActivated() method, and it's a good practice to undo all functionalities done in the OnActivated() method (unsubscribe events for example). OnDetach() OnDetach is called when an element is detached This method is the opposite of OnAttached() method, and it's a good practice to undo all functionalities done in the OnAttached() method. OnDestroy() This method is invoke when the element is defintively removed and we want to destroy or dispose objects. A destroyed element cannot be attached again, and it is finally disposed. A good practice is to remove all internal data of this component (tables, collections, etc...)"
  },
  "manual/basics/project_structure.html": {
    "href": "manual/basics/project_structure.html",
    "title": "Project Structure | Evergine Doc",
    "keywords": "Project Structure Evergine projects need to be inter-connected so we can deal with different platforms or rendering system, for example. That means that by default an Evergine project has a specific structure. Folders / Projects When we create our Evergine application, it defines by default one Visual Studio Solution for every Project profile we creates. It will also define the following folders: A description of this project structure: Folder Example Element description [ProjectName].weproj NewProject.weproj This is the Evergine Project file. This file contains metafile information about the project profiles, packages among other things. If you double click this file, the project will be opened in Evergine Studio Content/ Content/ Contains all the Evergine assets of the project. Every texture, model, scene of the project are saved in this folder. [ProjectName]/ NewProject/NewProject.csproj It contains [ProjectName].csproj, the base project where usually the main Evergine code are defined (scenes, components, services, etc.). All code written in this project will be shared between all profile projects. [ProjectName].[Profile]/ NewProject.Windows/NewProject.Windows.csproj NewProject.Windows.sln There will be a folder with every application profile. It contains [ProjectName].[Profile].csproj, the Launcher application for that specific profile carrying all its specific classes and logic. For example, the project for UWP.MixedReality will be a UWP Mixed Reality application. Additionally, a Visual Studio Solution is created per each profile. In that projects we reconmend to put all specific code for that profile. [ProjectName].Editor/ NewProject.Editor/NewProject.Editor.csproj Contains [ProjectName].Editor.csproj project that contains the Evergine Editor customizations. For example, for showing a custom panel for a specific component is created here. Visual Studio Solutions As we have mentioned before, per each different Profile (Windows, UWP, Android, etc...) Evergine will create a Visual Studio solution. This solution will launch the Evergine application in the specified target. So for example, a Windows profile will produces a .Net desktop application, however an Android profile solution will create a Xamarin.Android project to deploy in devices. Note Every profile solution may require differents Visual Studio features (\"Mobile development with .Net\" for mobile devices, or \"UWP development\" for UWP profiles...). Follow Visual Studio indications to install the missing features. Custom structue Evergine supports custom structures in your application. It only requires that every specific profile solution can build properly."
  },
  "manual/basics/scenes/create_scenes.html": {
    "href": "manual/basics/scenes/create_scenes.html",
    "title": "Create scenes | Evergine Doc",
    "keywords": "Create scenes When you create a project, it contains a initial Scene (MyScene.wescene) containing some base entities. In Evergine scenes are created like another Asset. Create scene from Evergine Studio There are two ways of creating a Scene from Evergine Studio. In the Assets Details panel, right click and select Create scene menú item. Alternatively, in the main menu, select Assets > Create scene Note When creating a Scene, the new asset will be placed in the current selected Asset Folder, the one selected in Project Explorer panel and the one showed in Assets Details panel. Create a scene by code To generate a new Scene by code we just need to create a new class extending Scene: Create a new class in your Evergine project (MyScene.cs for example). Make that class inherit from Scene class. You can override the following important methods: Method Description CreateScene() Method where all the scene entities are created and added to the Scene. RegisterManagers() Method where the SceneManagers are loaded. base.RegisterManagers() will register the default SceneManagers. Start() Called just before the Scene start updating and drawing. End() Ends the scene Pause() Called when the scene is paused. It can be due the app being suspended or either manually paused through the ScrenContextManager. Resume() Resume the Scene when it's dead.. Here is a code example: public class MyScene : Scene { public override void RegisterManagers() { base.RegisterManagers(); this.Managers.AddManager(new Evergine.Bullet.BulletPhysicManager3D()); } protected override void CreateScene() { // Add scene entities. // Create a camera var cameraEntity = new Entity(\"camera\") .AddComponent(new Transform3D()) .AddComponent(new Camera3D()) .AddComponent(new FreeCamera3D()); this.Managers.EntityManager.Add(cameraEntity); } }"
  },
  "manual/basics/scenes/index.html": {
    "href": "manual/basics/scenes/index.html",
    "title": "Scenes | Evergine Doc",
    "keywords": "Scenes A Scene is a basic scenario that are composed by Entities. They usually represents one screen, although there are ways for showing more scenes at the same time. The above image shows a scene with a robot, light, camera and environment entities. Scenes are a type of asset. In this section Create Scenes Using Scenes Scene Managers Scene Editor"
  },
  "manual/basics/scenes/scene_editor.html": {
    "href": "manual/basics/scenes/scene_editor.html",
    "title": "Scene Editor | Evergine Doc",
    "keywords": "Scene Editor Evergine supports a complete Scene Editor. It allows creating entities, modifying them, adding / removing components. It contains the following sections: Scene Toolbar. Scene Viewport. Entities Hierarchy. Entity Details. Scene Toolbar It contains useful controls for adjusting the scene edition. Control Description Camera selection. Allow the Scene Viewport to visualize one of the scene cameras. Perspective is the default value, representing Evergine Studio camera. Set the transform manipulation in Translation Mode. Set the transform manipulation in Rotation Mode. Set the transform manipulation in Scale Mode. / Toggles the transform manipulation from local axis to global axis. When enabled, translation manipulation is done by steps of a custom value (0.5, 1, 5, 10, 50, 100) When enabled, rotation manipulation is done by steps of a custom value (5, 10, 15, 30, 45, 60 and 90 degrees) When enabled, scale manipulation is done by steps of a custom value (0.001, 0.01, 0.1, 0.5, 1, 5, 10) Open a dialog with the properties of the editor scene camera. (More details below) Toggles the visibility of the grid in the viewport. Editor Camera properties This dialog sets the properties of the Editor camera. This camera is the default camera when editing your scene. The properties shown in this panel are the same that appear when editing a Camera3D component. More information in this article Scene Viewport This area allows navigating the camera through the scene and also selecting, transforming and manipulate all the en entities of the scene (Cameras, Lights and other types). On top of the viewport there is the Scene toolbar where the user can adjust how the viewport behaves. Controls Action Description Left Mouse Select entity. Right Mouse Rotate camera. Right Mouse + Arrows / WASD Move camera. Right Mouse + Mouse Wheel Change camera speed up / down. Right Mouse + Shift Speed up camera by 2. Middle Mouse Pan camera Mouse Wheel Zoom in/out camera. Ctrl + D Duplicate selected entity. G Toggle Grid visibility W Set Translating manipulation mode. E Set Rotating manipulation mode. R Set Scaling manipulation mode. Basic Manipulation When selecting an entity, a Bounding Selection Box will appear and also a manipulator for adjusting the entity Transform3D. There are 3 different transform manipulation, selected by the above keys (W, E and R), or throug the Toolbar: Translation Moves the entity through the scene. It allows to translate the entity: 3 main axis (X, Y an Z) as an one dimension translatio. 3 main surfaces (XY, XZ and YZ) as a two dimensional translation. Rotation Rotates the entity through one rotation axis. Those axis are: X axis. Y axis. Z axis. Screen Axis, the entity will rotate around the camera (using the camera forward as axis). Scale Scales the entity in one or more axis: X axis. Y axis. Z axis. Uniform, scales proportionally so the entity proportions remain the same. Note Scaling manipulations always use local axis. Entities Hierarchy This panel shows the entity tree of the scene. Every node represents an entity so it reflects entity hierarchy. When a node has some children mean that entity has some entity children. Operations Entities can be rearranged. This will cause the entities to be relocated to another parent. When this operation is made the overal world transform (scale, rotation and translation) tries to remain constant during the process. Entities can be removed. Pressing the Supr button will delete the selected entity and all their children. Double click in an entity will focus it in the Scene Viewport. Clicking in the button will show the Add Entity dialog. More details in the Using Entities article. In the botton bar shows the total number of entities in the scene (137 in above image) Entity Details This panel shows all the properties of a selected entity. It shows all the entity parameters like name, tag and enable status, and also shows an accordion panel of their components. Here are some specific controls: Controls Control Description Toggles the entity as static entity. Collapses the visibilisation of all the components Expand the visibilisation of all the components More details in the Using Entities article."
  },
  "manual/basics/scenes/scenemanagers.html": {
    "href": "manual/basics/scenes/scenemanagers.html",
    "title": "Scene Managers | Evergine Doc",
    "keywords": "Scene Managers In Evergine the SceneManagers are elements that control some important aspects of the scene. They are not based as entities because they behave as a global element of the scene and cannot be attached into a specific entity. All SceneManagers in a Scene can be accessed using the Scene.Managers property. This allow to register and access SceneManagers. Default SceneManagers. Evergine scenes are created with some SceneManagers by default. These are: SceneManager Access Property Description EntityManager this.Managers.EntityManager Controls the entities of the scene. More information in the EntityManager article. AssetsSceneManager this.Managers.AssetsSceneManager Controls the asset of the scene. More information below. BehaviorManager this.Managers.BehaviorManager Manages the behavior update execution of the scene and their priority order. RenderManager this.Managers.RenderManager Handles the Rendering of the scene. More information in the Rendering article. EnvironmentManager this.Managers.EnvironmentManager Controls the environmental information of the scene. Their Reflection Probes, their environmental radiance and irrandiance maps, etc. More information in the Environment article. PhysicManager3D this.Managers.PhysicManager3D Manages the physic simulation. All the Rigid or Static bodies are registered into this manager. More information in the Physic Manager and Bullet article. Note The PhysicsManager3D scene manager is not registered by default although in the project template it's loaded in the RegisterManagers method of the template scene class. Assets Scene Manager The AssetsSceneManager controls all the asset loaded in the scene. When the scene is disposed AssetsSceneManager automatically unloads all the assets of the scene, releasing all the GPU memory in the process. More information in the Use Assets article. Create custom SceneManager In the previous section we've covered all the default SceneManagers of the scene. However you can create your own SceneManager. For doing that: Create a new class in the Evergine project in the Visual Studio Solution. Set that the new class inherit from SceneManager class. The new created scene manager can use all the lifecycle methods like OnAttached, OnDetach, etc. More information in Life cycle article. UpdatableSceneManager In addition, instead on creating a class that inherit SceneManager we can choose to inherit from UpdatableSceneManager. This class has an Update method that will be called in every frame. This is useful for managers that need to update some components in real time. For example, PhysicManager3D controls the physic simulation using this method. Using SceneManagers Register a Scene Manager We can register a new SceneManager from code like this: // We can register a scene manager directly using the actual instance. this.Managers.AddManager(new MyManager()); // Alternatively we can register by type. Useful when dealing with abstract classes. this.Managers.AddManager<PhysicsManager3D>(new BulletPhysicsManager3D()); Unregister a Scene Manager. We can also unregister calling the following function: // We can remove the manager using its instance. this.Managers.RemoveManager(myManagerInstance); // Or the type. For example, next line will remove BulletPhysicsManager3D manager that we registered in the previous section. this.Managers.RemoveManager<PhysicsManager3D>(); Obtaining a SceneManager We can obtain a registered SceneManager in several ways. Using [BindSceneManager] attribute With the [BindSceneManager] attribute in your Component or another custom SceneManager (See the Binding article) public class MyComponent : Component { [BindSceneManager] public RenderManager RenderManager; protected override void Start() { // Once the component is attached, the RenderManager property has being bound... this.RenderManager.DebugLines = true; } } Searching the SceneManager directly Using the SceneManager.FindManager () you can find your desired manager MyManager manager = this.Managers.FindManager<MyManager>(); // This for example will return the BulletPhysicsManager3D registered before. PhysicsManager3D physics = this.Managers.FindManager<PhysicsManager3D>(); // For default SceneManagers you can access using quick properties :) RenderManager renderManager = this.Managers.RenderManager; Scene managers in Evergine Studio Until Evergine 2022.2.16, default scene template included an entity named SceneManagers to configure some of built-in managers. From now, this entity is no longer included when you create a new scene, as scene managers are included in a separate panel. In that panel, you count with a user interface very similar to Entity Details panel, where you can manage components for an entity. In this case, you can manage scene managers for your scene. Behavior is the same: to add a new manager, just make use of add button and search for the element you want. By default, managers search window will scan all available managers in your project and Evergine core libraries. If you don't want that one of your custom managers to be selectable, mark your class with [Discoverable(false)] attribute. [Discoverable(false)] public class MyManager : SceneManager { } To remove a manager from a scene, just right click over the element and select remove option. There are a few managers that are required for the engine to correctly work, so you should be careful about removing them. Anyways, a confirmation message will be displayed if you try to remove one of those managers. Migrating older scenes For scenes created with Until Evergine 2022.2.16 or below, Evergine Studio will ask you for asset update once you open the scene file. It will automatically copy your custom values for shadows and environment managers located in obsolete SceneManagers entity to scene managers saved within your scene. It is recommendable to confirm scene update when requested, but this process can't be undone if, for some reason, you decide to go back to Evergine 2022.2.16. Once scene asset is updated, SceneManagers entity will be removed and replaced by entries in managers file section."
  },
  "manual/basics/scenes/using_scenes.html": {
    "href": "manual/basics/scenes/using_scenes.html",
    "title": "Using Scenes | Evergine Doc",
    "keywords": "Using Scenes For loading and launching a Scene from code we have to use ScreenContextManager and understand the concept of ScreenContexts. ScreenContext A ScreenContext represents a list of Scenes that can be simultanously loaded in the application at the same time. Note For example, this the diagram above depicts a ScreenContext containing two scenes: MainScene for the application logic, and UIScene another one just the UI. ScreenContextManager ScreenContextManager is a Service that manages the Scene navigation between scenes or, more accurately, ScreenContext. Its main methods are: Method Description To Navigating to a new ScreenContext (passed by parameter), replacing the previous ScreenContext. Push Navigtes to a new ScreenContext but keeps the previous one in a stack so we can restore later. Pop Removes the current ScreenContext and restores the previous stacked one. FindContextByName For searching among the ScreenContext list. So loading and navigating to a Scene by code would be like this (this code is placed in the Application class): // Loads the scenes. will create MyScene and UIScene objects which should be existing classes that intherit Scene class. // These scenes are populated with all entities defined in its respectives assets (MainScene.wescene and UIScene.wescene) var baseScene = assetsService.Load<MyScene>(EvergineContent.Scenes.MainScene_wescene); var uiScene = assetsService.Load<UIScene>(EvergineContent.Scenes.UIScene_wescene); // Creates a context and navigate to it. ScreenContext screenContext = new ScreenContext(scene, uiScene); screenContextManager.To(screenContext); For more details read the ScreenContextManager section."
  },
  "manual/basics/services.html": {
    "href": "manual/basics/services.html",
    "title": "Services | Evergine Doc",
    "keywords": "Services In Evergine, Services are elements that allow you to manage global features. A Service functionality could be accessed from every Scene, Component or Behavior in your application. The services could be bond from any component even other services using the aplication container. Developing custom Evergine services are useful to integrate your application with external external services or APIs. There are two kind of services: Basic Services: This kind of service is very useful to expose functionality or to execute global tasks. Updatable Services: Is a Service subclass with an Update() method that allows running an action every application update cycle. Creating a Service To create a basic Service, add a class from Visual Studio and extend the Service class: using Evergine.Framework.Services; namespace MyProject { public struct MyServiceData { public string name; public int requests; } public class MyService : Service { private MyServiceData data; public MyServiceData Data { get => this.data; private set => this.data = value; } public MyService() { this.data.name = \"myService\"; } public void DoRequest() { this.data.requests++; } } } Create an UpdatableService On the other hand, to create a updatable service add a class from Visual Studio and extend the `UpdatableService' class. using Evergine.Framework.Services; public class MyUpdatableService : UpdatableService { public override void Update(TimeSpan gameTime) { // Called on every application update cycle... } } Register a new Service in your Application Before using a service is necessary to register it in the application container where you can register the type or an instance. public partial class MyApplication : Application { public MyApplication() { // Previous code :) // You could register the service by type... this.Container.RegisterType<MyService>(); // Or register the Service using an instance... this.Container.RegisterInstance(new MyService()); } ... Using Services Accessing registered services could be done by two ways: Using [BindService] attribute You can use the [BindService] attribute in your Component, SceneManager or even from another Services to automatically inject the Service instance into your property. using Evergine.Framework; using System; namespace MyProject { public class MyBehavior : Behavior { // Use the BindService attribute on top of the property or attribute in which you want to inject the Service [BindService] private MyService myService = null; protected override void Update(TimeSpan gameTime) { this.myService.DoRequest(); } } } Using Application Container In the other hand, you could obtains the Service instance directly from the Application Container: using Evergine.Framework; using System; namespace MyProject { public class MyBehavior : Behavior { private MyService myService = null; protected override bool OnAttached() { // Use the Resolve<Type> method from the Application Container.... this.myService = Application.Current.Container.Resolve<MyService>(); return base.OnAttached(); } protected override void Update(TimeSpan gameTime) { this.myService.DoRequest(); } protected override bool OnDettached() { // Release the reference when a component is being dettached... this.myService = null; } } }"
  },
  "manual/basics/transform.html": {
    "href": "manual/basics/transform.html",
    "title": "Transform3D | Evergine Doc",
    "keywords": "Transform3D Transform3D is maybe the most important Component in Evergine. The Transform3D components are used to store the Entity positiom, rotation and scale. Parent / Child hierarchy when an Entity is a Parent of another Entity, the Child Entity will move, rotate and scale in the same way as its Parent does. You can think of parent / child hierarchy as being like the relationship between your arms and your body; whenever your body moves, your arms also move along with it. Child objects can also have children. Your hands can be considered as children of your arms, and your fingers are hands children. Local vs World space 3D and 2D position and transformations exist within a coordinate systems called spaces: World Space World Space is the coordinate system for the entire scene. Its origin is at the center of the scene: Position [0, 0, 0] Scale [1, 1, 1] Rotation [0, 0, 0] In an entity hierarchy this space is used to get the global position of your body hand (following the example explained above). Local Space Local Space is the coordinate system where position, rotate and scale is used taking the entity parent as reference. Transform3D Properties When you set a local property, the equivalent world property is set automatically, and vice versa. So, you can place a child object in a global position, and the Transform3D component translates it to local space. Local Space properties The following properties are used to modify Transform3D in local space: Property Type Default Description LocalPosition Vector3 Vector3.Zero This is the position of the entity in local space LocalOrientation Quaternion Quaternion.Identity This is the orientation of the entity in local space LocalRotation Vector3 Vector3.Zero This is the rotation of the entity in local space expressed in Euler angles. LocalScale Vector3 Vector3.One This is the scale of the entity in local space LocalTransform Matrix4x4 The transform matrix relative to the parent transform. Is obtained by combining the LocalPosition, LocalOrientation and LocalScale (TRS matrix). Note As you can see, we use the terminology Orientation to express quaternion properties, and Rotation to express Euler angles. Tip Internally the orientation/rotation are stored in a Quaternion value, so, for performance reasons, we reconmend to use Quaternion properties (apart from the great benefits that Quaternion offers itself). World Space properties The following properties are used to modify Transform3D in local space: Property Type Description Position Vector3 This is the position of the entity in world space Orientation Quaternion This is the orientation of the entity in world space Rotation Vector3 This is the rotation of the entity in world space expressed in Euler angles. Scale Vector3 This is the scale of the entity in world space WorldTransform Matrix4x4 The matrix that transforms from local space to world space. Is obtained by combining the Position, Orientation and Scale (TRS matrix). Note The initial Position, Orientation and Scale values depends on parent Transforms, because parent translation, scaling or orientation chages are propagated. Events You can subscribe to transform events to be notified when one of its properties changes: Event Description LocalPositionChanged Triggered when the LocalPosition is changed. LocalOrientationChanged Triggered when the LocalOrientation is changed. LocalScaleChanged Triggered when the LocalScale is changed. LocalTransformChanged Triggered when the LocalTransform is changed. PositionChanged Triggered when the Position is changed. OrientationChanged Triggered when the Orientation is changed. ScaleChanged Triggered when the Scale is changed. TransformChanged Triggered when the WorldTransform is changed. Hierarchy properties Property Description ParentTransform Indicates the transform of the parent entity. null if the entity has no parents. ChildrenTransform The list of children Transforms. LocalScaleChanged Triggered when the LocalScale is changed. LocalTransformChanged Triggered when the LocalTransform is changed. PositionChanged Triggered when the Position is changed. OrientationChanged Triggered when the Orientation is changed. ScaleChanged Triggered when the Scale is changed. TransformChanged Triggered when the WorldTransform is changed. Useful methods Method Description LookAt(targetPosition, up) Rotates the entity to point to the target position and up vector. All calculations are made in world space. LocalLookAt(targetPosition, up) Rotates the entity to point to the target position and up vector. All calculations are made in local space. SetLocalTransform (localPosition, localOrientation, localScale) Compute the local transform and update all local space properties. Tip We reconmend to invoke the SetLocalTransform() method instead of setting LocalPosition, LocalOrientation and LocalScale by separate."
  },
  "manual/evergine_launcher/create_project.html": {
    "href": "manual/evergine_launcher/create_project.html",
    "title": "Create a new project | Evergine Doc",
    "keywords": "Create a new project To create a new project from Evergine launcher, go to the My Projects section and click on the Add new project button. The project configuration windows will be opened. Then you can choose the Project Name, the disc location of your project, and the Evergine version to use. Also, you can choose a single or multiples profiles for your project. Tip New profiles can be added later As number of templates has been growing in latest Evergine releases, we have decided to add some filters that may be useful to find desired template. You have a free text input and a platform dropdown selector that you can combine to limit template results. Open your new Evergine project Finally, click on the Create button on the bottom right side of the configuration panel to create and open your project in Evergine Studio. Next steps Larn how to open your Evergine project in Visual Studio"
  },
  "manual/evergine_launcher/manage_versions.html": {
    "href": "manual/evergine_launcher/manage_versions.html",
    "title": "Manage Evergine versions | Evergine Doc",
    "keywords": "Manage Evergine versions In the Versions section of the Evergine Launcher you can find all available Evergine versions. From this section, you can install/uninstall, search for a specific version in the Evergine repositories. Repositories Evergine Studio has different repositories with version collections that you can install. The official repositories are: Repository Description URL Stable This collection has the stable Evergine versions. https://everginestudio.blob.core.windows.net/stable Preview This collection has the preview Evergine versions. https://everginestudio.blob.core.windows.net/preview Nightly This collection has the nightly Evergine versions. https://everginestudio.blob.core.windows.net/nightly Manage repositories You can add or manage your repositories collection click on the Repositories button on the bottom right side of the Versions section. Group by Repository The Versions section allows filter the available Evergine version by repository or group by them to help you find a specific version. New version indication When a new Evergine version is published on some of the available repositories a New Version label will be shown close to the Versions section."
  },
  "manual/evergine_launcher/samples_learning_support.html": {
    "href": "manual/evergine_launcher/samples_learning_support.html",
    "title": "Samples, Learning and Support | Evergine Doc",
    "keywords": "Samples, Learning and Support In Evergine launcher you can have access to learning and samples sections to learn more about how to use Evergine and the Support section in the case that you have doubts or need help with something. Samples In this section, you can find an official Evergine sample collection. These samples are stored in GitHub so you can navigate through the collection and click on the Web button to go to sample code in Github. Learning Here you can find the the Official Manual, the API Documentation, and the official Evergine Youtube Channel with useful resources. Support In this section you can find the official Evergine support that includes: Comunity support where you can create a ticket and vote for existing tickets. Priority support Portal where you can create priority tickets that will be resolve in less to 48 hours for an Evergine team member (only available if you contract Priorty Support service). Access to Evergine Source code (only available if you contract Source Code Access service)."
  },
  "manual/evergine_studio/assets/create.html": {
    "href": "manual/evergine_studio/assets/create.html",
    "title": "Create assets | Evergine Doc",
    "keywords": "Create assets In Evergine there are two ways of creating an asset depending on its type : Importing a resource file to the Assets Details panel, either with drag and drop or selecting the Import asset menu item. This works with images, 3d models and sound files. Creating an asset directly from Evergine Studio. Only for non resource and Evergine specifics assets. Metafile generation When creating an asset, a Metafile will be generated with the same name of the resource file. That file will contains all the properties and profile specifications of the asset. Every asset type has a different extension, described below. Importing assets Drag and drop the resource file You can drag any file into the Evergine Studio to import that asset file into the project and create an asset with it. Depending of the file extension Evergine Studio will decide what kind of asset will be created in the panel folder: Asset type Metafile extension Supported file extensions Texture .wetx .jpg , .jpeg , .png , .bmp , .tga , .ktx , .dds , .hdr Model .wemd .gltf , .glb , .fbx , .3ds , .obj , .dxf , .dae Audio .wesn .wav , .mp3 , .ogg File .wefile Any other file. Font .weft .ttf, .otf Import an asset by dragging and dropping a resource file from your File Explorer to the Assets Detail panel. Use the import asset menu item You can also import a resource file selecting the Import Asset menu item located in: In the Assets main menu. In the button on the Assets Details panel. The Asset Details panel contextual menu. Create assets without resource file. Evergine uses a variety of assets that don't require external resource files. Those assets can be created directly from the Evergine Studio. Like in the previous section, you can access the Assets menu items in three places: In the Assets item in the main menu. In the button on the Assets Details panel. In the Assets Details contextual menu. This way we can create the following assets: Asset type Metafile extension Additional files Scene .wesc .wescene file with the scene elements. A folder with the scene name that contains Scene subassets like the environment probe. Effect (graphic effect and compute shader) .wefx Sources folder, containing a Shader.fx file with the shader description Sampler .wesp Material .wemt Render Layer .werl Post-Processing Graph .wepp Note If there is already an asset with the same name than the importing resource file, the new asset will be renamed adding a number suffix in the name. For example, texture.jpg would be renamed to texture(1).jpg and texture(2).jpg if another file with the same name is imported."
  },
  "manual/evergine_studio/assets/edit.html": {
    "href": "manual/evergine_studio/assets/edit.html",
    "title": "Edit assets | Evergine Doc",
    "keywords": "Edit assets Evergine Studio offers the possibility of editing plenty of properties of every asset to fully customize the use of that asset into your app. Also, every Evergine project also defines a set of profiles, so you can also set different properties per profile. Note For example, we can halve the resolution of a texture for the Android or iOS profiles. Or sets a different PixelFormat. Contextual Actions We can apply some actions to the assets regardless its type. Right click to an asset in the Assets Details panel to show a contextual menu with the following actions: Rename the asset. Cut the asset (For cut/paste operation). Copy the asset (For copy/paste operation). Duplicate will create an exact copy of the asset but with different Id. Delete asset. Set to export as raw copies to the Export Content Folder the resource file instead the compiled exported version. Open folder location will open the File explorer in the same location of the asset. Copy path to clipboard. Copies the path of the asset metafile. Copy id to clipboard. Assets Editor To edit an asset: Click on it in the Assets Details panel. A new panel will be opened, specific for that asset. Every Asset editor panel is different, but some of the most common areas are the next ones: Asset viewer area. Global properties panel. Profile properties panel(s). Viewer area Usually the viewer area of the asset will show a visual representation of the asset. It's also common to have some sort of controls to change the visualization settings. Some examples are: Enabling / disabling Texture channels. Selecting the Level of Mipmap of a Texture. Play/Pause a Model animation. Set the geometry where a Material is applied. Global properties Usually the global properties are the one that applies for all the Project profiles. Next image shows the Render Layer parameters: Profile properties Present in many assets there is a Profile parameters area where users can customize properties per profile. Usually this area is similar to this: This area shows: Profile tabs: It shows the default profile tab and one tab per Project profile. Allows to switch to a specific profile property panel. Default profile: Sets the profile properties by default when no other profile is specified. Override Default Property: When enabled, it enables the custom properties of this profile. If disabled, the default profile will be used. Exclude Asset: Property that allows an asset not to be exported in a specific profile, hence making it only available in some of the profiles."
  },
  "manual/evergine_studio/assets/export.html": {
    "href": "manual/evergine_studio/assets/export.html",
    "title": "Exporting assets | Evergine Doc",
    "keywords": "Exporting assets Evergine usually doesn't load the resource files (.jpg, .fbx, etc.) directly at runtime. However, it processes the resource files and compile or export them into actual binary files that can be properly and efficiently loaded into Evergine. For example, the Model asset exported file contains areas that can be directly copied into buffers and uploaded into the graphic card. Note Evergine actually can load direct resource files at runtime. However it relies on third-party libraries that would make the asset workflow much slower and memory consuming. Also you wouldn't be able to edit their properties. However for many application that's not only a good option, but a desirable one. Specially if it needs to load images dynamically loaded from internet, for example Exported asset file extensions. Every asset type defines the exported file asset extension (in the same way it defines its metafile file extension). Below you can find them: Asset type Exported extension Texture .weptx Model .wepmd Sound .wepsn Scene .wepsc Effect .wepfx Sampler .wepsp Material .wepmt Render Layer .weprl Post Processing Graph .weppp Export process Evergine asset export process is actually a pipeline with the next steps: Gather information about the resource file (if any). Get the application profile name. Check if the asset metafile contains specific parameters for the app profile. If there is a specific profile definition use those parameters. Otherwise the asset will use its default profile parameters. Convey all the parameters of the asset and generate the exported binary file."
  },
  "manual/evergine_studio/assets/index.html": {
    "href": "manual/evergine_studio/assets/index.html",
    "title": "Assets | Evergine Doc",
    "keywords": "Assets An asset is an item that represents an element in Evergine Studio that can be used in your project. It can represent visual or graphic elements like 3D models, textures, or either more abstract engine elements like sampler states, materials and render layers. Type of assets Here it is a summary of different asset types. Assets with resource file Some assets are created using external applications, like 3ds Max, Blender or Photoshop. These assets are resource files that can be imported in Evergine Studio and used in your project, either by the Studio or directly by code. Here are the asset with resource files that Evergine currently supports. Asset Description Supported file extensions Texture Image file used as texture graphic resource. .jpg, .jpeg, .png, .bmp, .tga, .ktx, .dds, .hdr Model 3d model with geometry, animation and material information. .gltf, .glb, .fbx, .3ds, .obj, .dae Sound Audio file used for music and sound effects .wav, .mp3, .ogg File Any file that does not satisfy the previous formats Any other file. Font Font file used as font graphics resource .ttf, .otf Assets created only by Evergine However, some assets represents just abstract elements that can only be created by Evergine Studio, some of them even by code. They don't have any external associated resource file. Some of these assets have complex folder structure, while others are more basic. Asset Description Scene Main Evergine asset. It defines an entity graph that populates a scene, and also define their components. Effect Contains a HLSL shader. It automatically translates to other shading languages like GLSL. They are also flavored with custom attributes and annotations for a better integration. Post Processing Graph Defines a visual post processing graph node, using compute shaders for effects like anti-aliasing, tone mapping, SSAO, and many others. Material Represents how a geometry is rendered. It references an Effect asset and describes its parameters like textures and values. Prefab Contains an entity hierarchy that can be instanced in any scene. Render Layer Contains Rasterizer, Blending, Depth and Stencil information. Every material needs a Render Layer asset. Sampler State Element that represents a texture sampler state description, like filtering, clamping or wrapping information. In this section Create Assets Edit Assets Export Assets Use Assets"
  },
  "manual/evergine_studio/assets/scenes.html": {
    "href": "manual/evergine_studio/assets/scenes.html",
    "title": "Scenes | Evergine Doc",
    "keywords": "Scenes Scenes are a 3D space where you can create your experiences/projects. The evergine scene is composed of entities and each entity will be an element of your scene. Scenes are a type of asset and have a dedicated Editor Scene Editor. You can find the scene assets in the Assets Details panel when you select a folder in the Project Explorer. The scene file has the wscene extension and always come together a file .wesc descriptor and a folder with the same name of the scene. Create a new scene asset You can create a scene click button on from Assets Details panel to deploy a create menu options and click on the option \"Create scene\""
  },
  "manual/evergine_studio/assets/use.html": {
    "href": "manual/evergine_studio/assets/use.html",
    "title": "Use assets | Evergine Doc",
    "keywords": "Use assets We can use an asset in our project in these ways: Reference it in an entity Component. Reference it from another asset. Load it from code. Reference asset from components. Lots of components can use assets. For example, MeshComponent uses Model assets and Sprite uses Texture assets. When a component uses an asset, it will show a Asset Selection Control in its section in the Entity Details panel. When a Scene is loaded in Evergine, all referenced assets by components will be loaded automatically. To add an asset to that component, we need to click on it and a Asset Picking Dialog will appear, allowing is to select a desired asset. The user can also fill the Asset filter textbox to filter all the assets, making it easier in big projects. Clicking the lens icon will select the asset in the Asset Details panel. Useful to locate and edit a specific asset used in your scene. Clicking in an asset of the list will select it and set it as the property value of the component. To clear the asset reference, just select the No Asset element on the list (it's the first one). Note The dialog will only shows assets of the same type of the defined by the component property or field. Reference asset by other assets In the same way as the components, assets can reference other assets. For example, a Material can reference a Texture and a Texture references a SamplerState asset. You can reference those assets in the same way you add them to components (see above). Reference assets by code. An asset can be loaded an accessed at runtime using in two ways depending of the asset scope: AssetsService: For loading global assets, used in more than one Scene. AssetsSceneManager: For loading assets in a Scene. AssetsService loading AssetsService is a Service that manages all the assets in the application. When loading an asset using this service we are also responsible of unloading it when it's no longer needed. var assetsService = Application.Current.Container.Resolve<AssetsService>(); Texture textureAsset; // Asset loading. // Load asset by id (using EvergineContent). textureAsset = assetsService.Load<Texture>(EvergineContent.Textures.SampleTexture_png); // Load asset by path. textureAsset = assetsService.Load<Texture>(\"SampleTexture.wetx\"); // Load asset by stream (we need to provide an asset name anyways). textureAsset = assetsService.Load<Texture>(\"SampleTexture.wetx\", stream); // Asset unloading. // Unloads asset by id. assetsService.Unload(EvergineContent.Textures.SampleTexture_png); // Unload asset by path. assetsService.Unload(\"SampleTexture.wetx\"); AssetsSceneManager loading AssetsSceneManager is a SceneManager that controls all the assets in a specific Scene. All the assets loaded through this SceneManager will be unloaded when the Scene is disposed (When navigating to other scenes, for example). Its methods are pretty similar to the AssetsService. var assetSceneManager = this.Managers.AssetSceneManager. Texture textureAsset; // Asset loading. // Load asset by id (using EvergineContent). textureAsset = assetSceneManager.Load<Texture>(EvergineContent.Textures.SampleTexture_png); // Load asset by path. textureAsset = assetSceneManager.Load<Texture>(\"SampleTexture.wetx\"); // Load asset by stream (we need to provide an asset name anyways). textureAsset = assetSceneManager.Load<Texture>(\"SampleTexture.wetx\", stream); // Asset unloading. // Unloads asset by id. assetSceneManager.Unload(EvergineContent.Textures.SampleTexture_png); // Unload asset by path. assetSceneManager.Unload(\"SampleTexture.wetx\"); Force new instance when loading By default when an asset is loaded either in the AssetsService or the AssetsSceneManager only one instance of the asset is generated. This saves GPU memory and time. However, in some certain occasions we want to load a different instance* of an already loaded asset. For example, we want to load and use a Material and changing it but we don't want to change the rest of instances, only this one. In this case we can do using the forceNewInstance in the Load method. // Forces a new instance to load. Texture textureAsset = assetSceneManager.Load<Texture>(EvergineContent.Textures.SampleTexture_png, true); Texture textureAsset = assetsService.Load<Texture>(EvergineContent.Textures.SampleTexture_png, true);"
  },
  "manual/evergine_studio/index.html": {
    "href": "manual/evergine_studio/index.html",
    "title": "Evergine Studio | Evergine Doc",
    "keywords": "Evergine Studio Evergine studio is the most important tool for creating experiences in Evergine. This documentation section covers the principal topics of how to use this powerful tool. Click on the following links to know more about this tool. In this section Interface Assets Project Properties & Profiles Profile with RenderDoc"
  },
  "manual/evergine_studio/interface.html": {
    "href": "manual/evergine_studio/interface.html",
    "title": "Interface | Evergine Doc",
    "keywords": "Interface Evergine Studio's interface uses dockable panels to organize different section so you can create your own layout with the panel location that you prefer. The above image shows the default layout and his main panels are: Project Explorer: Is used to manage the assets and packages of the current project. Assets Details: Shows the assets of the current folder selected on Project Explorer. Allow you open, rename or create new assets. Asset Editor: Is used to edit assets (scenes, materials, textures, etc..). Some asset types, such as scenes, have dedicated editors where you can edit it. To open a dedicated editor (when available), double-click the asset in the Asset Details region. Asset Editors Evergine studio has the following editors that allow you manage the associate asset type: Editors Description Scene Editor Double-clicking a Scene asset opens a dedicated editor. Effect Editor Double-clicking an Effect asset opens a dedicated editor. Material Editor Double-clicking a Material asset opens a dedicated editor. Model Editor Double-clicking a Model asset opens a dedicated editor. Render Layer Editor Double clicking a RenderLayer asset opens a dedicated editor. Sampler Editor Double clicking a Sampler asset opens a dedicated editor. Sound Editor Double clicking a Sound asset opens a dedicated editor. Post-Processing Graph Editor Double clicking a Post-Processing graph asset opens a dedicated editor. Evergine Studio Layout As we have mentioned earlier, Evergine Studio layout is customizable. By clicking in the Window menu, you can manage the Evergine Studio layout:"
  },
  "manual/evergine_studio/project_profiles.html": {
    "href": "manual/evergine_studio/project_profiles.html",
    "title": "Project settings & Manage profiles | Evergine Doc",
    "keywords": "Project settings & Manage profiles As cross-platform engine, Evergine provides a way to create different launcher projects for supported platforms. For each platform, a C# project will be added to your filesystem. You can create more than a project for a given platform, but each one of those projects will be considered as a different profile. If you didn't add all platforms you want in project creation window, you can do it from Evergine Studio once your project is loaded. Just go to Settings > Project Settings menu to open a dialog to manage your project profiles. By default, an Evergine project includes Windows as platform. This platform is required for Evergine Studio to work, so you can't remove it. To add a new platform profile, use the Add button. A new window will be open, where you can look for platform you want to add. By default, a profile name will be proposed, but you can change it if you want. As described above, you can even have more than one profile for the same platform. This will create separated C# projects for each one of those platforms. In the same way as launcher creation form, we have added here some filters to make it easier to find a template. Just make use of free text input and platform dropdown selector to limit template results. Profile management For each profile, a different set of settings is applied. Once you add a new platform profile, a default set of values will be added for that platform. For example, in platforms like Windows shaders are compiled on runtime by default, but other platforms like Web or Android require shaders to be precompiled due to performance and platform limitations. Profile settings whenever can be customized at any time you want. Changes will be saved once you press Update button. List of options that you can configure are described below. Textures Controls texture compression to be used in a given profile. This is important to optimize textures to be loaded in graphics hardware, that may be limited in platforms like mobile devices. You can specify both alpha and non-alpha compression format. List of available formats are provided by PixelFormat enum. Shaders You can enable shaders to be precompiled and included in platform package. This may increase build time, but reduce loading time while running the application. Also, you can configure your own directive specifications that fits better to your project. For each directive you can choose on enabling or disabling it. Once enabled, you can also add each directive to a directive combination. At the bottom, there is a read-only text area that presents configured directive combinations. Open platform projects For each profile registered within your project, you will find a new entry in File > Open C# editor menu. When clicking on one of provided options, platform specific Visual Studio solution."
  },
  "manual/evergine_studio/renderdoc.html": {
    "href": "manual/evergine_studio/renderdoc.html",
    "title": "Profile with RenderDoc | Evergine Doc",
    "keywords": "Profile with RenderDoc RenderDoc is a graphics debugger currently available for Vulkan, DirectX 11/12 and OpenGL development on Windows, Linux and Android. It is integrated on Evergine Studio to make it easy to debug your application during the development process. To install the latest RenderDoc version visit the project website Loading RenderDoc First you need to load the RenderDoc assembly to allow the graphical commands that are sent to the GPU to be captured. In the setting menu of the Editor you will find and option called \"Enable RenderDoc\". This will reload the graphics device so you must save any changes, and afterwards RenderDoc will be ready to capture the scene. Capturing a frame with RenderDoc Once RenderDoc is enabled into the Evergine Studio, a new button will appear on the right side of the toolbar on the scene view. Pressing this button will trigger a capture of the next frame of rendering for the view. And a new RenderDoc instance will be launched to show the capture. From there you can open the capture and debug using the tool. Naming objects The Evergine low level API allow you to name all the different object types available, this include samplers, buffers, pipelines and much more. These names can then be displayed on RenderDoc to help to debugging the application. To set an object name, in a buffer for example, just set it as a parameter in the factory constructor or set the property Name. this.graphicsContext.Factory.CreateBuffer(ref Description, \"Buffer_Name\"); or buffer.Name = \"Buffer_Name\"; Debug markers and regions In addition to naming the Evergine low level API also adds the ability to place debug markers inside command buffers. These can be used to mark points of interest and highlight specific areas inside of the command buffer. Tip Note that contrary to naming objects, debug markers (and regions) have to placed inside of an active command buffer. commandBuffer.BeginDebugMarker(\"Region_Name\"); // Stuff commandBuffer.EndDebugMarker(); Including shader debug information By default to optimize the size of DirectX shaders, debugging information is stripped out. This mean that constants and resources will have no names, and the shader source will not be available. To include this debugging information in your shader you need to set the debug mode inside the pass shader code by adding [Mode Debug] line: [Begin_Pass:Default] [Mode Debug] [Profile 10_0] [Entrypoints VS=VS PS=PS] // ... Alternative graphics debugging technique If you build a desktop Windows application using DirectX, you can capture a frame and debug it using Visual Studio graphics debugger, NVidia Nsight Graphics or PIX on Windows"
  },
  "manual/extensions/armobile/index.html": {
    "href": "manual/extensions/armobile/index.html",
    "title": "ARMobile (Experimental) | Evergine Doc",
    "keywords": "ARMobile (Experimental) ARMobile is an extension to work with augmented reality experiences, so you will need compatible devices to run this kind of applications. By now, only supported platform is Android (ARCore) but we also plan to support iOS (ARKit) in the future. AR Mobile is based on XR Platform. Note Please, note that Evergine.ARMobile extension is in experimental state, so it has some limitations and known issues described at Known issues. Create a project using ARMobile To make it easier to create ARMobile projects, we have created a new project template for Android ARCore. It works with OpenGL as graphics backend, due to limitations related with ARCore, that does not support Vulkan. You also have to open Evergine Studio add-ons manager and add Evergine.ARMobile add-on. Once Evergine Studio loads default scene, you need to do some changes to make it work properly for ARMobile. For scene 3D camera, set background color to #00000000 color and remove FreeCameraBehavior component. Disable SkyAtmosphere entity. Go to Scene Managers tab and add ARMobileManager scene manager. Built-in AR.Mobile add-on prefabs AR.Mobile add-on provides a set of prefabs that you can use for common AR scenarios. Expand Dependencies > Evergine.ARMobile > Prefabs. You can find following prefabs here: Cursor, Face, FeaturePoints, Image and Planes. Cursor prefab This prefab draws a cursor which orientation changes depending on surface detection. Drag and drop Cursor prefab to your scene and set its position to (0, 0, 0). If you select prefab entity, will realize that apart from plane mesh components, there is a ARMobileHitTestBehavior that lets you choose about how plane collision is detected: every frame or just when user taps on the screen. Face prefab Face prefab allows you to use face tracking capabilities from AR platform. Drag and drop Face prefab to your scene and set its position to (0, 0, 0). Then, go to Scene Managers and mark FaceTrackingEnabled as checked. When you use face tracking detection, rear camera is no longer used and front camera is used instead. Because of this, any other AR mode like image tracking or plane detection will not work. If you select prefab entity, you can use attached MaterialComponent to change face material. You also can realize that there is a component called XRFaceTrackingMesh that creates face mesh from native buffers. Feature Points prefab This prefab uses LineBatch3D to render feature points in green, orange or red color, from more confident to less confident results. Confidence is saved in W field of Points property in XRFeaturePoints. Drag and drop FeaturePoints prefab to your scene and set its position to (0, 0, 0) and enable feature points detection in ARMobileManager scene manager. Image prefab With image prefab you can easily track images, and place 3D objects when those images are detected and their real world position changes. It includes a MaterialComponent that you can change to use a custom material for plane that appears once target image has been detected. Drag and drop Image prefab to your scene and set its position to (0, 0, 0) and enable image detection in ARMobileManager scene manager. Under Dependencies > Evergine.ARMobile > AR you will find default images dataset. It includes a single image, named arimage.jpg. Dataset file is in CSV format: Each line represents a single image from dataset. First column is the relative path to the image file. Second column is expected image size in real world, measured in meters. So, for default image, we expect it to be 20 centimeters wide. For each one of the images, we use file name (without extension) as image name, that we internally register in dataset database. This is why default ImageName value for XRImageTracking component in Image prefab is arimage, as this is the file name for default image in Evergine.ARMobile add-on. If you want a custom set of images, just create your own dataset within your project folders. Then, you have to change ImageDataSetPath value in ARMobileManager scene manager to meet your dataset path. To ensure your images are optimal for tracking, please follow platform recommendations: Android: use arcoreimg tool to evaluate your images quality. Planes prefab We provide this prefab to visualize detected planes. For this, drag and drop Planes prefab to your scene and set its position to (0, 0, 0). Then, go to Scene Managers and select a plane detection mode. Prefab counts with a XRPlaneRenderer that lets you change the material used to draw the planes. Known issues As ARMobile extension is in experimental state, you could find some issues while running applications. This is a list of known issues: Application crashes when returning back from background. You will find, in Debug configuration, some Google.AR.Core.Exceptions.DeadlineExceededException exceptions that are written to output console, depending on ARMobileManager configuration. When dragging AR prefabs to the scene, you need to ensure that their Transform3D location is set to (0, 0, 0) position. Any other position could provoke an OpenGL rendering issue that results in a full screen green texture."
  },
  "manual/extensions/imgui/features.html": {
    "href": "manual/extensions/imgui/features.html",
    "title": "Features | Evergine Doc",
    "keywords": "Features There are a list of different controls that you can create with just a few lines of codes, here is the complete list: Window Windows are drag-able containers of Controls. They can receive and lose focus when clicked. Because of this, they are implemented slightly differently from the other Controls. Each Window has an id number, and its contents are declared inside a separate function that is called when the Window has focus. ImguiNative.igSetNextWindowPos(new Vector2(420, 120), ImGuiCond.Appearing, new Vector2(1, 0.5f)); ImguiNative.igSetNextWindowSize(new Vector2(400, 100), ImGuiCond.Appearing); ImguiNative.igBegin(\"MyWindow\", this.imguiDemoOpen.Pointer(), ImGuiWindowFlags.None); // Controls ImguiNative.igEnd(); LabelText The LabelText is non-interactive. It is for display only. It cannot be clicked or otherwise moved. It is best for displaying information only. ImguiNative.igBegin(\"MyWindow\", this.imguiDemoOpen.Pointer(), ImGuiWindowFlags.None); ImguiNative.igLabelText(\"This is a label\", \"Value1\"); ImguiNative.igLabelText(\"This is other label\", \"Value2\"); ImguiNative.igEnd(); Button The Button is a typical interactive button. It will respond a single time when clicked, no matter how long the mouse remains depressed. The response occurs as soon as the mouse button is released. ImguiNative.igBegin(\"MyWindow\", this.imguiDemoOpen.Pointer(), ImGuiWindowFlags.None); if (ImguiNative.igButton(\"Press me\", new Vector2(100, 25))) { clicked++; } if (clicked > 0) { ImguiNative.igText(\"Thanks for clicking me!\"); } ImguiNative.igEnd(); Text The Text Control is an interactive, editable single-line field containing a text string. ImguiNative.igBegin(\"MyWindow\", this.imguiDemoOpen.Pointer(), ImGuiWindowFlags.None); ImguiNative.igText(\"This is a text control\"); ImguiNative.igEnd(); InputText The InputText Control is an interactive, editable area containing a text string. Toggle The Toggle Control creates a checkbox with a persistent on/off state. The user can change the state by clicking on it. Toolbar The Toolbar Control is essentially a row of Buttons. Only one of the Buttons on the Toolbar can be active at a time, and it will remain active until a different Button is clicked. This behavior emulates the behavior of a typical Toolbar. You can define an arbitrary number of Buttons on the Toolbar. SelectionGrid The SelectionGrid Control is a multi-row Toolbar. You can determine the number of columns and rows in the grid. Only one Button can be active at time. HorizontalSlider The HorizontalSlider Control is a typical horizontal sliding knob that can be dragged to change a value between predetermined min and max values. VerticalSlider The VerticalSlider Control is a typical vertical sliding knob that can be dragged to change a value between predetermined min and max values. HorizontalScrollbar The HorizontalScrollbar Control is similar to a Slider Control, but visually similar to Scrolling elements for web browsers or word processors. This control is used to navigate the ScrollView Control. VerticalScrollbar The VerticalScrollbar Control is similar to a Slider Control, but visually similar to Scrolling elements for web browsers or word processors. This control is used to navigate the ScrollView Control. ScrollView ScrollViews are Controls that display a viewable area of a much larger set of Controls. Images The images control allow to display the content of texture, this is a non-interactive control."
  },
  "manual/extensions/imgui/imguizmo.html": {
    "href": "manual/extensions/imgui/imguizmo.html",
    "title": "ImGuizmo | Evergine Doc",
    "keywords": "ImGuizmo This extension also allow you to use the ImGuizmo library, this is a collection of 3D widgets on top o ImGUI library, this project and source code is available on github at: https://github.com/CedricGuillemet/ImGuizmo. Note The C# wrapper is generated on top of a c-api wrapper version of this library, so some samples may not work directly but all the features are supported. Features This library comes with many widget in 3D useful to create an editor tool, here you have more info about the ImViewGizmo widget This widget display a 3D cube in a corner of the screen that represent the view transformation, it is used to select between different camera views preset like top, left, right and bottom. ImGuizmo widget This widget allow you to draw 3D helpers useful to move, scale and transform 3D geometry, this widgets compute the result 4x4 Matrix to make it easy to apply it to the geometry. ImSequencer widget A WIP little sequencer used to edit frame start/end for different events in a timeline. Graph editor widget This widget is useful to create a custom graph editor based on nodes and links between them. It is possible to change how nodes are rendered to customize them."
  },
  "manual/extensions/imgui/imnodes.html": {
    "href": "manual/extensions/imgui/imnodes.html",
    "title": "ImNodes | Evergine Doc",
    "keywords": "ImNodes This extension also allow you to use the ImNodes library, this is a simple, immediate-mode interface for creating a node editor within an ImGui window, this project and source code is available on github at: https://github.com/Nelarius/imnodes. Note The C# wrapper is generated on top of a c-api wrapper version of this library, so some samples may not work directly but all the features are supported. Imnodes aims to provide a simple, immediate-mode interface for creating a node editor within an ImGui window. Imnodes provides simple, customizable building blocks that a user needs to build their node editor. Features Create nodes, links, and pins in an immediate-mode style. The user controls all the state. Usage private bool imnodesDemoOpen = true; ... ImguiNative.igSetNextWindowSize(new Vector2(500, 500), ImGuiCond.Appearing); ImguiNative.igBegin(\"ImNodes Demo\", this.imnodesDemoOpen.Pointer(), ImGuiWindowFlags.None); string[] nodes = new string[] { \"Node1\", \"Node2\", \"Node3\" }; ImnodesNative.imnodes_BeginNodeEditor(); int id = 0; for (int i = 0; i < nodes.Length; i++) { var node = nodes[i]; ImnodesNative.imnodes_BeginNode(id++); ImnodesNative.imnodes_BeginNodeTitleBar(); ImguiNative.igText(node); ImnodesNative.imnodes_EndNodeTitleBar(); ImnodesNative.imnodes_BeginInputAttribute(id++, ImNodesPinShape.Circle); ImguiNative.igText(\"input\"); ImnodesNative.imnodes_EndInputAttribute(); ImnodesNative.imnodes_BeginOutputAttribute(id++, ImNodesPinShape.Circle); ImguiNative.igIndent(40); ImguiNative.igText(\"output\"); ImnodesNative.imnodes_EndOutputAttribute(); ImnodesNative.imnodes_EndNode(); } ImnodesNative.imnodes_MiniMap(0.25f, ImNodesMiniMapLocation.BottomRight, IntPtr.Zero, IntPtr.Zero); ImnodesNative.imnodes_EndNodeEditor(); ImguiNative.igEnd();"
  },
  "manual/extensions/imgui/implot.html": {
    "href": "manual/extensions/imgui/implot.html",
    "title": "ImPlot | Evergine Doc",
    "keywords": "ImPlot This extension also allow you to use the ImPlot library, this is an immediate mode, GPU accelerated plotting library for ImGUI, this project and source code is available on github at: https://github.com/epezent/implot. Note The C# wrapper is generated on top of a c-api wrapper version of this library, so some samples may not work directly but all the features are supported. Features The list of supported plot are: Line Plots A line plot or chart plot is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments. It is a basic type of chart common in many fields. It is similar to a scatter plot except that the measurement points are ordered (typically by their x-axis value) and joined with straight line segments. A line plot is often used to visualize a trend in data over intervals of time. Filled Line Plots A Filled Line Plot or area chart displays graphically quantitative data. It is based on the line chart. The area between axis and line are commonly emphasized with colors. Commonly one compares two or more quantities with an area chart. Shaded Plots A Shaded Plot is a type of chart which display graphically the difference between to series based on lines. The area between two lines of the same graph is colored to highlight when they are further apart. Scatter Plots A scatter plot is a type of plot or mathematical diagram using Cartesian coordinates to display values for typically two variables for a set of data. If the points are coded (color/shape/size), one additional variable can be displayed. The data are displayed as a collection of points, each having the value of one variable determining the position on the horizontal axis and the value of the other variable determining the position on the vertical axis. Realtime Plots A Realtime Plot or Realtime chart is a type of chart which display information as a series with data capture in realtime. It is chart common to display fps (Frames per seconds) or other type of measurements in a graphic application. Stairstep Plots A Stairstep plot is a type of chart which represent digital signals that advancing discreetly by jumps or steps in an stairs. Bar Plots A bar plot or bar chart is a chart or graph that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally. Bar Groups A bar groups or clustered chart is similar to a bar chart but in this case the bars in the same category are drawn together. Bar Stacks A bar stack is based on bar plot but in this case it stacks bars on top of each other so that the height of the resulting stack shows the combined result. Stacked bar charts are not suited to data sets having both positive and negative values. Error Bars A Error bar chart is a type of chart used to visualize series of data and the distance to errors in those data. Stem Plots A Stem plot is a type of chart used to compare two or more stem series in the same chart. It is using vertical lines to highlight the area between the stem series. Infinite Lines A Infinite line chart is used to show a grid and the values are represented by horizontal lines as a constant values. Pie Charts A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area) is proportional to the quantity it represents. While it is named for its resemblance to a pie which has been sliced, there are variations on the way it can be presented. Heatmaps A heat map (or heatmap) is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space. Histogram A histogram is an approximate representation of the distribution of numerical data. To construct a histogram, the first step is the range of values that divide the entire range of values into a series of intervals and then count how many values fall into each interval. Histogram 2D A Histogram 2D chart is similar to the histogram chart but in this case information from a legend is also displayed that allow you understand the colors displays. Digital Plots A Digital Plot is a type of chart which display digital or analog signal over time. This is useful to show electronic signal inside an application."
  },
  "manual/extensions/imgui/index.html": {
    "href": "manual/extensions/imgui/index.html",
    "title": "ImGUI | Evergine Doc",
    "keywords": "ImGUI Dear ImGui is a bloat-free graphical user interface library for C++. It outputs optimized vertex buffers that you can render anytime in your 3D-pipeline enabled application. It is fast, portable, renderer agnostic and self-contained (no external dependencies). Dear ImGui is designed to enable fast iterations and to empower programmers to create content creation tools and visualization / debug tools (as opposed to UI for the average end-user). It favors simplicity and productivity toward this goal, and lacks certain features normally found in more high-level libraries. In this section Getting started Features ImPlot ImNodes ImGuizmo"
  },
  "manual/extensions/imgui/setup.html": {
    "href": "manual/extensions/imgui/setup.html",
    "title": "Getting Started | Evergine Doc",
    "keywords": "Getting Started Install Evergine.ImGUI extension To start using this extension, just add Evergine.ImGui package to your project using NuGet package manager from Visual Studio. <PackageReference Include=\"Evergine.ImGui\" Version=\"2022.9.28.1\" /> Register the ImGuiManager on your scene: public class ImGuiSceneTest : Scene { public override void RegisterManagers() { base.RegisterManagers(); this.Managers.AddManager(new global::Evergine.Bullet.BulletPhysicManager3D()); this.Managers.AddManager(new ImGuiManager() { ImGuizmoEnabled = true, ImPlotEnabled = true, ImNodesEnabled = true, }); } ... } And add the namespace ImGuiNET: using ImGuiNET; Now you can start calling the ImGui API from everywhere using the static reference: private bool imguiDemoOpen; ... ImguiNative.igShowDemoWindow(this.imguiDemoOpen.Pointer()); Usage The UI is generated every frame and all the controls between Begin and End will be drawn. Here you have a simple example: bool open = true; ImguiNative.igBegin(\"Debug\", open.Pointer(), ImGuiWindowFlags.None); ImguiNative.igText(\"Hello, world 123\"); if (ImguiNative.igButton(\"Save\", Vector2.Zero)) { // MySaveFunction(); } float f = 0.5f; ImguiNative.igSliderFloat(\"float\", &f, 0.0f, 1.0f, null, ImGuiSliderFlags.None); ImguiNative.igEnd(); And this is the result: And now will see a more advanced example: bool open = false; ImguiNative.igBegin(\"Path Tracing\", open.Pointer(), ImGuiWindowFlags.None); float x = this.worldInfo.LightPosition.X; float y = this.worldInfo.LightPosition.Y; float z = this.worldInfo.LightPosition.Z; ImguiNative.igSliderFloat(\"Camera Pos X\", &x, -10.0f, 10.0f, null, ImGuiSliderFlags.None); ImguiNative.igSliderFloat(\"Camera Pos Y\", &y, -10.0f, 10.0f, null, ImGuiSliderFlags.None); ImguiNative.igSliderFloat(\"Camera Pos Z\", &z, -10.0f, 10.0f, null, ImGuiSliderFlags.None); this.worldInfo.LightPosition.X = x; this.worldInfo.LightPosition.Y = y; this.worldInfo.LightPosition.Z = z; float lightRadius = this.worldInfo.LightRadius; ImguiNative.igSliderFloat(\"Light Radius\", &lightRadius, 0.0f, 0.2f, null, ImGuiSliderFlags.None); this.worldInfo.LightRadius = lightRadius; int numRays = this.worldInfo.NumRays; ImguiNative.igSliderInt(\"AO Num Rays\", &numRays, 0, 32, null, ImGuiSliderFlags.None); this.worldInfo.NumRays = numRays; float aoRadius = this.worldInfo.AORadius; ImguiNative.igSliderFloat(\"AO Radius\", &aoRadius, 0.0f, 2.0f, null, ImGuiSliderFlags.None); this.worldInfo.AORadius = aoRadius; int numBounces = this.worldInfo.NumBounces; ImguiNative.igSliderInt(\"GI Num Bounces\", &numBounces, 0, 3, null, ImGuiSliderFlags.None); this.worldInfo.NumBounces = numBounces; float reflectanceCoef = this.worldInfo.ReflectanceCoef; ImguiNative.igSliderFloat(\"Reflectance Coef\", &reflectanceCoef, 0, 1, null, ImGuiSliderFlags.None); this.worldInfo.ReflectanceCoef = reflectanceCoef; float roughness = this.worldInfo.Roughness; ImguiNative.igSliderFloat(\"Roughness\", &roughness, 0,1, null, ImGuiSliderFlags.None); this.worldInfo.Roughness = roughness; ImguiNative.igSpacing(); ImguiNative.igSeparator(); ImguiNative.igSpacing(); int numSamples = this.pathTracerNumSamples; ImguiNative.igSliderInt(\"Num Samples\", &numSamples, 0, 1024, null, ImGuiSliderFlags.None); this.pathTracerNumSamples = numSamples; ImguiNative.igProgressBar((float)this.pathTracerSampleIndex / (float)this.pathTracerNumSamples, Vector2.Zero, null); ImguiNative.igEnd(); This is the result: Take a look this in our path tracer demo. Note: This project need to create a ImGuiRenderer because is using the Evergine low level api, but this is not necessary in a default project created from the Evergine Studio."
  },
  "manual/extensions/index.html": {
    "href": "manual/extensions/index.html",
    "title": "Extensions | Evergine Doc",
    "keywords": "Extensions Evergine core packages comes with a lot of useful features, including a lot of Services, Managers, Components in the Evergine.Framework and Evergine.Components packages. Apart from this, Evergine gives several Extensions that provide integration and functionality with different technologies or libraries, but are too specific to be part of the main Evergine packages. In this section ARMobile Networking ImGUI"
  },
  "manual/extensions/networking.html": {
    "href": "manual/extensions/networking.html",
    "title": "Networking | Evergine Doc",
    "keywords": "Networking With networking extension you will be able to establish a client-server communication channel along any processes running Evergine. Those processes could live in the same computer or in different devices connected to a local network. This extension relies in a fork of Lidgren.Network library, that will be in charge of in-process communication using sockets, with server-client and client-client messages delivering. Install Evergine.Networking extension To start using this extension, just add Evergine.Networking package to your project using NuGet package manager from Visual Studio. <PackageReference Include=\"Evergine.Networking\" Version=\"2021.11.17.2-preview\" /> Server configuration To create a networking server, you should make use of built-in service named MatchmakingServerService. This service is part of the extension and manages server rooms, players and provides different events that you can use to be notified when a player (client) connects or disconnects from the server, joins or leaves a room, etc. For a complete list of events, take a look to MatchmakingServerService API documentation. Just register MatchmakingServerService in Evergine dependencies container to start using it. this.Container.RegisterInstance(new MatchmakingServerService()); MatchmakingServerService has a set of properties that you should use to configure your server settings. Some considerations here: It's recommended to not use big values for PingInterval and ConnectionTimeout values. Also, ConnectionTimeout may be a multiple of PingInterval. Values of 4 and 8 seconds, respectively, would be fine, depending on your requirements. Set a value for ApplicationIdentifier that you could easily identify. For example, your application name. Set a version value for ClientApplicationVersion. this.matchmakingServerService.PingInterval = 4; this.matchmakingServerService.ConnectionTimeout = 8; this.matchmakingServerService.ApplicationIdentifier = \"MyApp\"; this.matchmakingServerService.ClientApplicationVersion = \"1.0.0\"; this.matchmakingServerService.ServerName = \"MyServer\"; Note An exception for setting bigger values for ConnectionTimeout would be debugging. When a break point is hit, time will be still running and you could find clients getting disconnected. To avoid problems while developing, you can set ConnectionTimeout to a temporary value of TimeSpan.FromHours(1), for example, to have enough time while debugging. Start a server Once you have your server configured it's time to start it, to make it able to receive incoming client connections. int port = 12345; await this.matchmakingServerService.StartAsync(port); Our recommendation is to create a custom Service or component to contain all server initialization code, and also make use of MatchmakingServerService to log events, very useful for debugging purposes. this.matchmakingServerService.PlayerConnected += this.MatchmakingServerService_PlayerConnected; this.matchmakingServerService.PlayerDisconnected += this.MatchmakingServerService_PlayerDisconnected; this.matchmakingServerService.PlayerJoining += this.MatchmakingServerService_PlayerJoining; this.matchmakingServerService.PlayerJoined += this.MatchmakingServerService_PlayerJoined; this.matchmakingServerService.PlayerLeaving += this.MatchmakingServerService_PlayerLeaving; this.matchmakingServerService.PlayerLeft += this.MatchmakingServerService_PlayerLeft; this.matchmakingServerService.RoomCreated += this.MatchmakingServerService_RoomCreated; this.matchmakingServerService.RoomDestroyed += this.MatchmakingServerService_RoomDestroyed; // ... private async void MatchmakingServerService_PlayerJoined(object sender, ServerPlayer e) { var numberOfClients = this.matchmakingServerService.AllConnectedPlayers.Count(); Debug.WriteLine($\"A client just joined: {e.Nickname}. There are {numberOfClients} clients\"); } Clients configuration In case of clients, built-in service is MatchmakingClientService. As we did for server side, you should register this service in dependencies container. For client settings, check that you apply same values as those provided for server side. this.Container.RegisterInstance(new MatchmakingClientService()); // ... this.matchmakingClientService.PingInterval = 4; this.matchmakingClientService.ConnectionTimeout = 8; this.matchmakingClientService.ApplicationIdentifier = \"MyApp\"; this.matchmakingClientService.ClientApplicationVersion = \"1.0.0\"; Note When creating a server, you would probably also want register your own process as client of that server. This is, use MatchmakingClientService to connect to the server that you have already created, as a common scenario where one of the clients acts as server at the same time. Server discovery Networking extension provides a way of automatic discovery of servers, always that local network infraestructure has broadcast traffic available. To discover a server, make use of following line, using the same port that you configured for your server. Once a server is discovered, ServerDiscovered event will be raised. this.matchmakingClientService.ServerDiscovered += this.MatchmakingClientService_ServerDiscovered; // ... int port = 12345; this.matchmakingClientService.DiscoverServers(port); // ... private async void MatchmakingClientService_ServerDiscovered(object sender, HostDiscoveredEventArgs e) { var connected = await this.matchmakingClientService.ConnectAsync(e.Host); Debug.WriteLine($\"Connected to server {e.ServerName}.\"); } Note You must ensure your server can be reached by clients in the network. Some platforms, like UWP would require extra configuration at application level for security reasons. In case of this platform, capabilities and, depending on your scenario, even review the application isolation. Joining to a server room After connecting to a server, the next step is joining a room. Clients in the same room can share information to update their states, depending on your application requirements. var roomOptions = new RoomOptions() { RoomName = \"MyRoom\", }; var joinResult = await this.matchmakingClientService.JoinOrCreateRoomAsync(roomOptions); Once you have joined to a room, MatchmakingClientService will update its CurrentRoom property with room information, including the list of connected clients (players). You can use this information, for example, to display list of room partipants in your client application. Messages delivery With an existing client-server connection, you can now send information in both directions, or even to other client applications within the network. There are two mechanisms to do this. With first one, messages, you are free to create a network message by your own, writing scalar fields in a buffer. The second one are the network properties, and they are very useful as their values will be automatically synchronized for all connected clients. Messages Both MatchmakingServerService and MatchmakingClientService provide some methods to send messages to different peers in the network. For MatchmakingServerService you have: SendToClient: sends a message to a destination client. For MatchmakingClientService you have: SendToCurrentRoom: sends a message to all clients connected to the room. SendToPlayer: sends a message to a single player in the room. SendToServer: sends a message from a client to the server. For example, we can send a \"hello\" message from a client to another with something line the following. // client A sends hello message var message = this.matchmakingClientService.CreateMessage(); message.Write(\"hello!\"); this.matchmakingClientService.SendToPlayer(message, player, DeliveryMethod.ReliableOrdered); // client B listens for incoming messages this.matchmakingClientService.MessageReceivedFromPlayer += this.Client_MessageReceivedFromPlayer; private void Client_MessageReceivedFromPlayer(object sender, MessageFromPlayerEventArgs e) { var message = e.ReceivedMessage.ReadString(); Debug.WriteLine($\"Received '{message}'\"); } Network properties Network properties are a set of components provided by Evergine.Networking extension. There are two ways properties can be stored and shared for members inside a room: room properties, that will be shared at room level; and player (client) properties, that will be attached to clients connected to a room. As they are components, you can add it to any of the entities of your scene. Network properties require the existence of a properties provider for component owner or its ascendants. Depending of the type of property you want to use, you need to ensure that a component of type NetworkRoomProvider or NetworkPlayerProvider is placed somewhere in entity hierarchical path. This can be done manually using Evergine Studio and adding the component manually, or doing it programatically. Network properties maintain an internal table of key-values to store information. There is also a size limitation for this tables: table key type is byte, so you can't have more than 256 properties for a room or for each single client (player). In Evergine.Networking.Components namespace you can find a set of built-in components to work with network properties of more common scalar data types and structs like numbers, strings, vectors, etc. Properties synchronization For example, imagine that we want to have an object in our scene that can be manipulated by one of the clients (move, scale and rotate it). We also want all the clients connected to the room to see those transformations. In this case, the best option is to use a network property to synchronize entity transform. Below you will find a block of code to see how it works, but lets see a few notes before: It's recommended to have a centralized enum to have an easier control of what room properties are already in use, and avoid using same key for different synchronization properties. We have used a NetworkMatrix4x4PropertySync component because we want to synchronize transform information, but there are many other built-in properties. In this case, we are using a room provider, but remember that you could also have specific properties for clients connected to the room. In that case, you should use NetworkPropertyProviderFilter.Player. Method OnPropertyReadyToSet will be invoked once internal key-value table is ready to be synchronized. This will also change IsReady property to a value of true. You should always check this property before trying to set a network property value. Method OnPropertyRemoved will be invoked if property is removed from shared table. Method OnPropertyAddedOrChanged will be invoked once property is ready or someone within the room has changed its value. To update a property value, just need to set PropertyValue value, as stated in UpdatePropertyValue method. public enum RoomProperties : byte { MyObjectTransform = 0x00, } public class SyncLocalTransform : NetworkMatrix4x4PropertySync<RoomProperties> { [BindComponent(source: BindComponentSource.Owner)] private Transform3D transform3d = null; public SyncLocalTransform() { this.ProviderFilter = NetworkPropertyProviderFilter.Room; this.PropertyKey = RoomProperties.MyObjectTransform; } // We should determine somehow if current client can manipulate the object or // not, as only one at the same time should do it. public bool CanManipulate { get; set; } protected override bool OnAttached() { this.transform3d = this.Owner.FindComponent<Transform3D>(); this.transform3d.LocalTransformChanged += this.Transform3D_LocalTransformChanged; return base.OnAttached(); } protected override void OnDetach() { this.transform3d.LocalTransformChanged -= this.Transform3D_LocalTransformChanged; base.OnDetach(); } protected override void OnPropertyAddedOrChanged() { if (!this.CanManipulate) { this.transform3d.LocalPosition = this.PropertyValue.Translation; this.transform3d.LocalScale = this.PropertyValue.Scale; this.transform3d.LocalRotation = this.PropertyValue.Rotation; } } protected override void OnPropertyRemoved() { } protected override void OnPropertyReadyToSet() { base.OnPropertyReadyToSet(); this.UpdatePropertyValue(); } private void Transform3D_LocalTransformChanged(object sender, EventArgs e) => this.UpdatePropertyValue(); private void UpdatePropertyValue() { if (this.IsReady && this.CanManipulate) { this.PropertyValue = this.transform3d.LocalTransform; } } } Synchronization of complex properties Evergine.Networking extension provides properties for more common scalars and structs but, what if we want to synchronize data of custom class. We can do it, but always keep in mind that is not recommendable to have big objects saved in internal key-value tables, as this will affect to memory consumption and network traffic bandwidth. In any case, we should implement some methods of INetworkSerializable to achieve this. For this example, imagine that our application has a map and we want to control the center and zoom level of that map. INetworkSerializable requires you to implement two methods, one for data serialization and other for data deserialization. Only thing that you need to remember is that you should read data in the same order as you wrote it. public class MapInfo : INetworkSerializable { public Coordinates Center { get; set; } public short ZoomLevel { get; set; } public void Write(NetBuffer buffer) { buffer.Write(this.Center.Latitude); buffer.Write(this.Center.Longitude); buffer.Write(this.ZoomLevel); } public void Read(NetBuffer buffer) { var lat = buffer.ReadDouble(); var lng = buffer.ReadDouble(); this.Center = new Coordinates(lat, lng); this.ZoomLevel = buffer.ReadInt16(); } public struct Coordinates { public Coordinates(double latitude, double longitude) { this.Latitude = latitude; this.Longitude = longitude; } public double Latitude { get; } public double Longitude { get; } } } public class SyncMapInfo : NetworkSerializablePropertySync<RoomProperties, MapInfo> { public SyncMapInfo() { this.ProviderFilter = NetworkPropertyProviderFilter.Room; this.PropertyKey = RoomProperties.MapInfo; } // ... protected override void OnPropertyAddedOrChanged() { if (this.IsReady) { MapInfo info = this.PropertyValue; // Do something with this, like updating the map } } }"
  },
  "manual/extensions/openxr.html": {
    "href": "manual/extensions/openxr.html",
    "title": "OpenXR | Evergine Doc",
    "keywords": "OpenXR Coming soon"
  },
  "manual/get_started/index.html": {
    "href": "manual/get_started/index.html",
    "title": "Get started | Evergine Doc",
    "keywords": "Get started Welcome to the Official Evergine documentation website. Here you will find everything you need to start creating 3D application from scratch. In this section Install Evergine Create an Evergine Project Open your project in Visual Studio Manage Evergine Versions Samples, Learning and Support"
  },
  "manual/get_started/install.html": {
    "href": "manual/get_started/install.html",
    "title": "Install Evergine | Evergine Doc",
    "keywords": "Install Evergine To get Evergine, please, take the following steps: Download the Evergine installer (EvergineSetup.exe) from the Evergine download page. After downloading the Evergine installer, start the installer and follow the installation wizard steps. In order to install Evergine you will be asked to accept the EULA that defines the engine licensing terms: The installer will install some dependencies required to execute Evergine Studio, like DirectX tools. Note Please, note that some dependencies require admin rights and this will be required during installation process. Once installation process is completed, you will be ready to launch Evergine with the Evergine Launcher. Evergine Launcher After the installer closes, the Evergine Launcher opens. Evergine Launcher is a standalone windows app that allows you to install Evergine versions, create and manage your Evergine Projects and find useful resources like samples, access to learning and support Evergine section. Next steps First thing you can do is creating a project with Evergine Launcher."
  },
  "manual/get_started/open_in_vs.html": {
    "href": "manual/get_started/open_in_vs.html",
    "title": "Open in Visual Studio | Evergine Doc",
    "keywords": "Open in Visual Studio Once your project is created to open it on Visual Studio you just have to go File -> Open C# Editor. A new Visual Studio instance will be launched to show the project solution, from here you can build and debug the application. You will find a solution file ready to open on Visual Studio for each configured platform template. By default the solution will contains 3 project: The application source code: This contains the application source code common cross-platform. The editor extensions code: This contains the component specific editor extensions. The platform specific launcher code: This contains the code needed to launch the application in an specific platform like Windows using a specific API like DirectX 11. You can read the Project Structure for further details."
  },
  "manual/graphics/billboard/create_billboard.html": {
    "href": "manual/graphics/billboard/create_billboard.html",
    "title": "Create Billboard | Evergine Doc",
    "keywords": "Create Billboard Billboard allows simulating far objects like bushes or trees reducing the amount of geometry needed to render your scene. Create a Billboard in Evergine Studio You can create a billboard click button on from Entity Hierarchy panel to deploy a create menu options and click on the option \"Billboard\" A billboard entity will be added to your scene In the billboard component of your billboard entity you will find the following properties: Property Description Texture The billboard texture. TintColor Each pixel of the Billboard will be multiplied by such color during the drawing. By default, it is white. Origin Gets or sets the Billboard Origin. The origin (also known as pivot) from where the entity scales, rotates and translates. Its values are included in [0, 1] where (0, 0) indicates the top left corner. Such values are percentages where 1 means the 100% of the rectangle's width/height. Rotation The Billboard rotation. BillboardType The billboard type. The available types are Point orientation or Axial orientation. FlipMode Allows flipping the texture coords in Horizontal or Vertical. Create a Billboard from code The following code shows the list of components necessary to convert an entity into a billboard entity. public class MyScene : Scene { protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); // Load default texture Texture treeTexture = assetsService.Load<Texture>(EvergineContent.Textures.BillboardTree_png); // Load default sampler SamplerState linearClampSampler = assetsService.Load<SamplerState>(EvergineContent.Samplers.LinearClampSampler); // Load a Render Layer description... RenderLayerDescription layer = assetsService.Load<RenderLayerDescription>(EvergineContent.RenderLayers.Alpha); var billboard = new Entity() .AddComponent(new Transform3D()) .AddComponent(new Billboard() { Texture = treeTexture, Sampler = linearClampSampler, BillboardType = BillboardType.Axial_Orientation, }) .AddComponent(new BillboardRenderer() { Layer = layer, }); this.Managers.EntityManager.Add(billboard); } } The result:"
  },
  "manual/graphics/billboard/index.html": {
    "href": "manual/graphics/billboard/index.html",
    "title": "Billboard | Evergine Doc",
    "keywords": "Billboard Billboard is a quad orientated to face the camera. While the active camera in your scene is moving the billboard is orientated to face the camera. The billboards are useful to create indicators or making an impostor of your far mesh to reduce the geometry that the render needs to draw. A common use is to simulate far bushes or trees. Types of billboards Point Orientation The billboard is oriented about his origin to always face the camera. With this type of billboarding, the object will always appear the same to the camera, however, it will be affected by perspective. Axial orientation The billboard is rotated about an axis to face towards the camera. In this section The following sections show how to create and use billboards in your scene. Create Billboard"
  },
  "manual/graphics/cameras.html": {
    "href": "manual/graphics/cameras.html",
    "title": "Cameras | Evergine Doc",
    "keywords": "Cameras Cameras are responsible to capture your scene and display it to the user. By customizing and manipulating cameras, you can make the visual composition of your scene truly appealing. You can create an unlimited number of cameras in a Scene. They can be set to render in any order, at any place on the screen, and choose the render target destination of this camera. Create a Camera3D from code The following sample code can be used to instantiate a new camera entity in a scene. protected override void CreateScene() { // Create a new camera entity. Entity cameraEntity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new Camera3D() { BackgroundColor = Color.CornflowerBlue, }); // Add the camera entity to the entity manager. this.Managers.EntityManager.Add(cameraEntity); } Create a Camera3D in Evergine Studio In the Entities Hierarchy panel of your Scene Editor, click the \"Add Entity and select Camera3D, then choose the kind of camera you want to create: Fixed Camera: This camera does not have any built-in behaviour, it is static. View Camera: This camera can be moved using the mouse, touch or keyboard while respecting the look-at point. Free Camera: This camera can be moved using the mouse, touch or keyboard. Camera3D properties Basic Camera3D properties Property Description Field of View The Camera’s view angle, measured in degrees along the axis specified in the Field of View Axis drop-down. Field of View Axis Field of view axis: Vertical: The camera uses a vertical field of view axis. Horizontal: The camera uses a horizontal field of view axis. Near Plane The nearest distance the camera can see. Far Plane The furthest distance the camera can see. Background Color The color applied to the background. Clear Flags This flags indicates wich part of the framebuffer will be cleared before rendering: Target: Clear the color buffer attachments. Depth: Clear the depth buffer attachment. Stencil: Clear the stencil buffer attachment. All: Clear all attachments described before. HDR Enabled Render the camera output in a HDR format Camera Order Specify the order in which the camera will be rendered. Lower values produces that the camera will be rendered first. Frustum The camera frustum is the region of the space that will be appear on the screen. Is defined by near, far planes and field of view properties. The near and far planes determine where the camera's view begins and ends. The near plane is the closest point the camera can see. The default value is 0.1. Objects before this point aren't drawn. The far plane, also known as the draw distance, is the furthest point the camera can see. Objects beyond this point aren't drawn. The default setting is 1000. Photometric properties By default, the camera uses basic properties to specify camera views (field of view and exposure). However, is possible to specify these values using physical values used in real cameras. To enable physical parameters: Property Description Enable Physical Parameters Boolean to indicate if the camera will use the physical parameters to define its field of view. Focal Length and sensor size Property Description Focal Length (milimeters) The Focal length is a common terms in photography to describe the field of view. Sensor Size (milimeters) The Sensor size describes the size in milimeters of the camera sensor. It has several implications in combination with other properties. For example, Sensor Size and Focal length defines the camera field of view. Exposure The Exposure property specifies the overal factor that will be applied to the render output. In combination with HDR render output and environments will produce realistic results: Exposure = 0.2 Exposure = 1.0 Exposure = 3.0 The exposure can be specified using the Exposure property, but if you use photometric camera properties you could reproduce physical behavior concerning the amount of light gathered by the camera: Property Description Aperture (f-stops) The Aperture, expressed in f-stops, controls how open or closed the camera system's aperture is. In addition to the exposition, the aperture setting controls the depth of field. Shutter speed (Seconds) The Shutter speed, expressed in seconds, controls how long the aperture remains opened. In addition to the exposition, the shutter speed controls motion blur. Sensitivity (ISO) The Focal length, expressed in ISO, controls how the light reaching the sensor is quantized. In addition to the exposition, the sensitivity setting controls the amount of noise. Compensation (EV units) The Compensation, Exposure Compensation or EC is expressed in EV units. Applying an exposure compensation EC is a simple as adding an offset to the final exposure. Tip Exposure of 1 could be achieved using Aperture 1 f-stop, Shutter Speed of 1.2 seconds and Sensitivity of 100 ISO Camera render output By default, the camera render output will be targeted to the default Display registered in the GraphicPresenter service. This behavior could be modified using two properties: Property Description DisplayTag It controls wich Display will be used to output the render. Each display is registered into the GraphicPresenter using a DisplayTag. Setting this property will be used to specify the camera output to the framebuffer defined in this display. Framebuffer However, you can override this behavior by setting a Framebuffer instance. If you are doing that, the camera output will be targeted to this framebuffer instance, even if you have previously specified a DisplayTag."
  },
  "manual/graphics/compute_tasks/create_computetasks.html": {
    "href": "manual/graphics/compute_tasks/create_computetasks.html",
    "title": "Create Compute Tasks | Evergine Doc",
    "keywords": "Create Compute Tasks Compute Tasks allows run tasks on GPU. Compute tasks are associated with a compute effect. It is very useful to improve the performance of a hard task that runs slow on the CPU. Compute Effect Before creating a Compute task you need to create a compute effect from the Assets Details panel and coding the task on HLSL language. Example This is an example of computing task. In that case the compute applies a grayscale filter to the input texture and stores the result into an output texture. In Create Effects you will find the structure of this code. [Begin_ResourceLayout] Texture2D Input : register(t0); RWTexture2D<float4> Output : register(u0); [End_ResourceLayout] [Begin_Pass:Grayscale] [Profile 11_0] [Entrypoints CS = CS] [numthreads(8, 8, 1)] void CS(uint3 threadID : SV_DispatchThreadID) { float4 color = Input.Load(float3(threadID.xy, 0)); color.rgb = color.r * 0.3 + color.g * 0.59 + color.b * 0.11; Output[threadID.xy] = color; } [End_Pass] ComputeTask Decorator To use a compute task from code you need a compute effect and the compute task decorator associated. You can generate the compute task decorator from Effect Editor. Create a new ComputeTask from code The following sample code can be used to create a new computeTask and run it into your scene. The example assumes that you have a compute effect GPUFilter and its compute task decorator created. protected override void CreateScene() { var graphicsContext = Application.Current.Container.Resolve<GraphicsContext>(); var assetsService = Application.Current.Container.Resolve<AssetsService>(); // Load input texture Texture inputTexture = assetsService.Load<Texture>(EvergineContent.Textures.lena_png); uint width = inputTexture.Description.Width; uint height = inputTexture.Description.Height; // Create output texture var outputTextureDesc = new TextureDescription() { Type = TextureType.Texture2D, Usage = ResourceUsage.Default, Flags = TextureFlags.UnorderedAccess | TextureFlags.ShaderResource, Format = PixelFormat.R8G8B8A8_UNorm, Width = width, Height = height, Depth = 1, MipLevels = 1, ArraySize = 1, Faces = 1, CpuAccess = ResourceCpuAccess.None, SampleCount = TextureSampleCount.None, }; Texture outputTexture = graphicsContext.Factory.CreateTexture(ref outputTextureDesc); // Load compute effect Effect computeEffect = assetsService.Load<Effect>(EvergineContent.Effects.GPUFilter); // Create compute task decorator GPUFilter task = new GPUFilter(computeEffect); task.Input = inputTexture; task.Output = outputTexture; task.Run2D(width, height, pass: \"Grayscale\"); // Load the Material and apply output texture. Material material = assetsService.Load<Material>(EvergineContent.Materials.DefaultMaterial); StandardMaterial standardMaterial = new StandardMaterial(material); standardMaterial.BaseColorTexture = outputTexture; // Apply to an entity Entity primitive = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh()) .AddComponent(new Spinner() { AxisIncrease = new Vector3(0.1f, 0.2f, 0.3f) }) .AddComponent(new MeshRenderer()); this.Managers.EntityManager.Add(primitive); } The result of the above code is:"
  },
  "manual/graphics/compute_tasks/index.html": {
    "href": "manual/graphics/compute_tasks/index.html",
    "title": "Compute Tasks | Evergine Doc",
    "keywords": "Compute Tasks Compute Tasks are GPU programs that don't use classical GPU pipeline such as vertex transformations, fragment shading or geometry programs. he are fully configurable code that can run on a GPU in async. They can be used for massively parallel computational algorithms or to accelerate parts of application rendering. Compute tasks need to be associated to a Compute Effect. The following sections show how to create and use compute tasks in your projects. In this section Create Compute Task Using Compute Task"
  },
  "manual/graphics/compute_tasks/using_computetasks.html": {
    "href": "manual/graphics/compute_tasks/using_computetasks.html",
    "title": "Using Compute Tasks | Evergine Doc",
    "keywords": "Using Compute Tasks Compute tasks are very similar to Materials, they are an associated effect too and you also can generate a class decorator to using from code. The main difference is that the compute tasks only can be used from code. Compute Task decorator are generated from Effect Editor like Material decorators. The compute task decorator helps you set the compute effect resource layout. As input resources, you can use ConstantBuffers, StructureBuffer, Textures, and Samplers. This is an example of a compute task decorator with an input texture and output texture define in its resource layout block: //------------------------------------------------------------------------------ // <auto-generated> // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // </auto-generated> //------------------------------------------------------------------------------ namespace DocumentationWorkBench.Effects { using Evergine.Common.Graphics; using Evergine.Framework.Graphics; using Evergine.Framework.Graphics.Effects; using Evergine.Mathematics; [Evergine.Framework.Graphics.MaterialDecoratorAttribute(\"6ba492de-d165-4491-b5b0-ae72dc202577\")] public partial class GPUFilter : Evergine.Framework.Graphics.ComputeTaskDecorator { public GPUFilter(Evergine.Framework.Graphics.Effects.Effect effect) : base(new ComputeTask(effect)) { } public GPUFilter(Evergine.Framework.Graphics.ComputeTask computeTask) : base(computeTask) { } public Evergine.Common.Graphics.Texture Input { get { return this.material.TextureSlots[0].Texture; } set { this.material.SetTexture(value, 0); } } public Evergine.Common.Graphics.Texture Output { get { return this.material.UABuffers[0].UATexture; } set { this.material.SetUATexture(value, 0); } } } } To run a compute task you must call to Run methods and exists the following flavors: Method Description Run Defines the groupcount X,Y and Z and the pass selected. Run1D Helper method to run 1D tasks, only need to pass threadCount X the groupSizes are defined as (64,1,1). Run2D Helper method to run 2D tasks, only need to pass ThreadCount X and Y, the groupSizes are defined as (8,8,1). Run3D Helper method to run 3D tasks, is similar to run but you can define ThreadCounts X,Y,Z and GroupSizes X,Y,Z."
  },
  "manual/graphics/effects/builtin_effects.html": {
    "href": "manual/graphics/effects/builtin_effects.html",
    "title": "Built-in Effects | Evergine Doc",
    "keywords": "Built-in Effects In this section are described the effects included in Evergine.Core package Standard Effect Property Description Lighting enabled Indicates that the material interacts with the lights of the scene. In the following image the left material has disabled ligth and the right material has it enabled IBL enabled Indicates that the material reflects the enviroment of the scene. In the following image the left material has disabled it while the right material has it enabled Base Color Indicates the surface color. Alpha Indicates the transparent of the surface. Note. This parameter requires set the LayerDescription property to Alpha or a layer with blend mode enable Vertex Color Indicates the surface color will be read from vertex data of the mesh. Base Color Texture Albedo texture to define the color of the surface. Base Color Sampler Albedo texture sampler used by Base Color Texture. UVOffsets 0 Texcoord UV offset added to the vertex texcoord data of the mesh. Note. You can create interesting material effect only animating this parameter. Metallic Indicates how \"metal-like\" the surface is. Its value is between [0-1]. In the following image you can see the result with different values. Roughness Defines the smoothness or roughness of the surface. The value is between 0.0 and 1.0 Reflectance Fresnel reflectance at normal incidence for dieletrice surface. This replaces an explicit index of refraction. Reference Alpha Threshold alpha value. Alpha Cutout Discard pixels when alpha value is less than the specified value. AllowInstancing Indicates whether this material allows instancing draw. OrderBias This value is used to modify the rendering order of the meshes LayerDescription Defines the RenderLayer used by the material. Metal Roughness Property Description MetalRoughness Texture This texture allows to define multiples roughness and metallic values to the surface area instead a constant roughness/metallic value for all surface. Note. the Metallic value is (blue channel) and Roughness is (green channel). MetalRoughness Sampler Sampler used by the MetalRoughness texture. Normal Property Description Normal Texture This texture allows to simulate more details without using more polygons. Normal Smapler Sampler used by the Normal texture. Ambient occlusion Property Description Occlusion Texture Defines how much of the ambient light is accessible to a surface point. It is a per-pixel shadowing factor between 0.0 and 1.0. Occlusion Sampler Sampler used by the Occlusion Texture. Emissive Property Description EmissiveColor Additional diffuse color to simulate emissive surfaces (such as neons, etc.) This parameter is mostly useful in an HDR pipeline with a bloom pass. Emissive Compensation The exposure compensation value of the emissive property can be used to force the emissive color to be brighter (positive values) or darker (negative values) than the current exposure. Emissive Texture Additional diffuse albedo to simulate emissive surfaces (such as neons, etc.) This parameter is mostly useful in an HDR pipeline with a bloom postprocessing effect. Emissive Sampler Sampler used by the Emissive texture. Clear Coat Property Description ClearCoat Strength of the clear coat layer. Scalar between 0 and 1 ClearCoat Roughness Perceived smoothness or roughness of the clear coat layer. Scalar between 0 and 1. ClearCoat Normal Texture Normal map texture that affects to the clear coat layer. ClearCoat Normal Sampler Sampler used by the Clear Coat Normal texture. Dual Texture Property Description Dual Texture Blend Blend mode between Base Color and 2nd Base Color. Availables values: Lightmap, Multiplicative, Additive, Mask. UV Offsets 1 UV Coord offset apply to the 2nd UV coords on the vertex format. 2nd Base Color Texture Texture used with the 2nd UV coords set on the vertex format. 2nd Base Color Sampler Sampler used by the 2nd Base Color texture Distortion Effect This effect requires to use Distortion effect inside of Default postprocessing effect) Property Description RenderLayer Defines the RenderLayer used by the material. Intensity Define the intensity of the distortion. Distortion Texture The texture used with the distortion Sampler Sampler used by the Distortion texture."
  },
  "manual/graphics/effects/create_effects.html": {
    "href": "manual/graphics/effects/create_effects.html",
    "title": "Create Effects | Evergine Doc",
    "keywords": "Create Effects An effect is a uber-shader so be able to represent a single shader or a large group of shaders. There are two type of effect in Evergine: Effect type Description Graphics Effect Defines a rasterization pipeline Vertex Shader, Geometry Shader, Hull Shader, Domain shader, Pixel Shader and are useful to create materials. Compute Effect Defines a compute pipeline with Compute Shader and are useful to create compute task and post-processing graph nodes. Create a Effect asset in Evergine Studio You can create an effect click button on from Assets Details panel to deploy a create menu options and click on the option \"Create effect->Graphics Effect or Compute Effect\" Inspect effects in Asset Details You can find the effect assets in the Assets Details panel when you select a folder in the Project Explorer. Effects files in content directory The effect file has the .wefx extension and always comes together with a folder with the same name of the effect. This folder contains the source code: Effect source code example While Effects in Evergine uses HLSL as shading language, it is empowered by using differents Metatags to automatize some tasks and help users. A tipical effect code looks like this: [Begin_ResourceLayout] [Directives:UseTexture TEX_OFF TEX] cbuffer PerDrawCall : register(b0) { float4x4 WorldViewProj : packoffset(c0); [WorldViewProjection] }; cbuffer Parameters : register(b1) { float3 Color : packoffset(c0); [Default(1, 1, 1)] }; Texture2D ColorTexture : register(t0); SamplerState ColorSampler : register(s0); [End_ResourceLayout] [Begin_Pass:Default] [Profile 10_0] [Entrypoints VS=VertexShaderCode PS=PixelShaderCode] struct VS_IN { float4 Position : POSITION; #if TEX float2 TexCoord : TEXCOORD; #endif }; struct PS_IN { float4 Pos : SV_POSITION; #if TEX float2 Tex : TEXCOORD; #endif }; PS_IN VertexShaderCode(VS_IN input) { PS_IN output = (PS_IN)0; output.Pos = mul(input.Position, WorldViewProj); #if TEX output.Tex = input.TexCoord; #endif return output; } float4 PixelShaderCode(PS_IN input) : SV_Target { float4 color = float4(Color,1); #if TEX color *= ColorTexture.Sample(ColorSampler, input.Tex); #endif return color; } [End_Pass] An effect file in Evergine is divided into the following sections: Resource Layout definition List of Passes Resource Layout definition This block of code defines all resources (Constant Buffers, Structured Buffers, Textures and Samplers) that will be used into your shaders. This section is enclosed between [Begin_ResourceLayout] and [End_ResourceLayout] tags. [Begin_ResourceLayout] [Directives:UseTexture TEX_OFF TEX] cbuffer PerDrawCall : register(b0) { float4x4 WorldViewProj : packoffset(c0); [WorldViewProjection] }; cbuffer Parameters : register(b1) { float3 Color : packoffset(c0); [Default(1, 1, 1)] }; Texture2D ColorTexture : register(t0); SamplerState ColorSampler : register(s0); [End_ResourceLayout] In this example, : [Directives:UseTexture TEX_OFF TEX]: This section contains a Directive (Called UseTexture in this example), which allows the users to enable different features in your effect. This directive specifies two macros (TEX_OFF and TEX) which indicates if this shader will use a color texture or not. In your effect code you are free to define any number of directives as you can. The tradeof is that the number of possible effect combinations rise exponentially in proportion of the number of directives. You can enable or disable features using macros into your shader with the #if #else and #endif preprocessor directives. The definition of two constant buffers, a Texture2D and a SamplerState: cbuffer PerDrawCall : register(b0) { ... }: A constant buffer. cbuffer Parameters : register(b1) { ... }: A second constant buffer. Texture2D ColorTexture : register(t0);: A texture 2D. SamplerState ColorSampler : register(s0);: A Sampler state. You would notice that you can add metatags to your constant buffers attributes to specify default values or to inject useful engine parameters. In the example we are using: The [WorldViewProjection] to inject the object world view projection matrix. The [Default(1, 1, 1)], which indicate the default value of the Color attribute (white color in this example). The majority of topics mentioned here is detailed in Effect Metatags document. List of Passes After the Resource Layout block, your code will specify a list of Passes, each Pass is defined using the [Begin_Pass] and [End_Pass] tags. Each pass requires a name, which will be used by the render path. As a naming convention, all render paths in Evergine must support the Default pass name. In the previous effect example, a Default pass is defined: [Begin_Pass:Default] [Profile 10_0] [Entrypoints VS=VertexShaderCode PS=PixelShaderCode] struct VS_IN { float4 Position : POSITION; #if TEX float2 TexCoord : TEXCOORD; #endif }; struct PS_IN { float4 Pos : SV_POSITION; #if TEX float2 Tex : TEXCOORD; #endif }; PS_IN VertexShaderCode(VS_IN input) { PS_IN output = (PS_IN)0; output.Pos = mul(input.Position, WorldViewProj); #if TEX output.Tex = input.TexCoord; #endif return output; } float4 PixelShaderCode(PS_IN input) : SV_Target { float4 color = float4(Color,1); #if TEX color *= ColorTexture.Sample(ColorSampler, input.Tex); #endif return color; } [End_Pass] In this pass, you will find: The [Entrypoints VS=... PS=...] tag, wich defines the entry point per each render pipeline stage. In the example, you are indicating that this pass will use the following entry points: VS=VertexShaderCode: During the Vertex Shader stage, the VertexShaderCode function will be executed. PS=PixelShaderCode: During the Pixel Shader stage, the PixelShaderCode function will be executed. Hereafter, a typical HLSL shader code is written. You are free to define structures, functions and uses all resources defined inside Resource Layout section. As we mentioned earlier, visit Effect Metatags for more information. Create a new Effect from code The following sample code can be used to create a new effect and its associated material to apply to an entity in your scene. protected override void CreateScene() { protected override void CreateScene() { var graphicsContext = Application.Current.Container.Resolve<GraphicsContext>(); var assetsService = Application.Current.Container.Resolve<AssetsService>(); string shaderSource = @\" [Begin_ResourceLayout] cbuffer PerDrawCall : register(b0) { float4x4 WorldViewProj : packoffset(c0); [WorldViewProjection] }; cbuffer Parameters : register(b1) { float3 Color : packoffset(c0); [Default(1.0, 0.0, 0.0)] }; [End_ResourceLayout] [Begin_Pass:Default] [Profile 10_0] [Entrypoints VS=VS PS=PS] struct VS_IN { float4 Position : POSITION; float3 Normal : NORMAL; float2 TexCoord : TEXCOORD; }; struct PS_IN { float4 pos : SV_POSITION; float3 Nor : NORMAL; float2 Tex : TEXCOORD; }; PS_IN VS(VS_IN input) { PS_IN output = (PS_IN)0; output.pos = mul(input.Position, WorldViewProj); output.Nor = input.Normal; output.Tex = input.TexCoord; return output; } float4 PS(PS_IN input) : SV_Target { return float4(Color,1); } [End_Pass] \"; // Create effect Effect myEffect = new EffectFromCode(graphicsContext, shaderSource); // Create material asociated Material myMaterial = new Material(myEffect) { LayerDescription = assetsService.Load<RenderLayerDescription>(EvergineContent.RenderLayers.Opaque), }; // Apply to an entity Entity primitive = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = myMaterial }) .AddComponent(new SphereMesh()) .AddComponent(new MeshRenderer()); this.Managers.EntityManager.Add(primitive); } }"
  },
  "manual/graphics/effects/effect_editor.html": {
    "href": "manual/graphics/effects/effect_editor.html",
    "title": "Effect Editor | Evergine Doc",
    "keywords": "Effect Editor Effect Editor allows editing the effect assets. Double click over a effect asset shown in Assets Details will open this editor. The editor is composed of 2 main parts Shader Text Editor and Viewport: Shader Text Editor The shader text editor allows writing your effects in HLSL language with metatags. This editor has the common code editor feature included error marks, syntax highlighting and code completion (Ctrl+Space) that help you to create your custom effects. Actions Description Ctrl+Space Code completion. Ctrl+F Search word toolbox Alt+Left mouse button Edit multiple code lines. The effect is compiled automatically while you are writing the shader and on the editor bottom side, you can see the compilation process result. When the compilation results with errors, you can click on the error text and de editor will mark the error line and scroll view to it. Toolbox The shader text editor has a toolbox that helps you with some important task as enable/disable directives, generate material decorator associated or configure effect asset properties. The complete option list is: Icon Description Toggle button to indicate if the automatic compilation mode is enabled or manual compilation mode (Key F5) is enabled. Combo box to enable the current effect pass. Shows the effect directive list and allows enable/disable combinations. Allow to add common snippet codes into your effects. Generates the Material Decorator class in your project. Compiles all directive combinations and shows the combinations with errors. Shows the automatically translation from original HLSL to SPIRV(Vulkan), GLSL(OpenGL/OpenGLES) or MSL(Metal) when it will be used in other backends. Allows configure the asset profile as: exclude an effect on a single platform or pre-compile effect for a single platform. Translation Panel The translation panel is shown below the shader text editor after aclick on it button and shows the result to translate the HLSL current pass and directive combinations to other languages. The panel includes two combo boxes to select the translation languages: GLSL, ESSL, WebGL1, WebGL2, MSL or SPIRV and another to select the stage to translate: Vertex, Geometry, Hull, Domain or Compute. Profile Panel This panel allows configuring the effect asset properties by platform. The first tab is the default or global configuration but you can modify the default configuration using the platform tabs. The effect asset properties are: Property Values Description ExludeAsset True, false If it is enabled the effect asset will be excluded in the building project for the platform. If it is enabled in the Default configuration tab the asset never will be included in the build project process. GraphicsBackend ByPlatform, DirectX11, DirectX12, OpenGL, OpenGLES, Metal, Vulkan, WebGL1, WebGL2 or WebGPU. Defines the backend and languages that the effect will be translated and compiled. ByPlatform value indicates that the data will get from project settings (weproj file) Compile ByPlatform, Yes or No Defines if the effect will be pre-compiled or no. ByPlatform value indicates that the data will get from project settings (weproj file). Viewport Shows the result of the current effect in real-time. The viewport has text on the bottom side that indicates if the primitive mesh vertex input is compatible with vertex input shader because it otherwise will not possibly display the result. Actions Description Left mouse button To rotate the camera around the primitive. Right mouse button To rotate two lights around the primitive. Mouse wheel To make zoom in/out camera. Toolbox The viewport toolbox is on the top side of the Viewport and has the following options: Icon Description Defines the current RenderPipeline Path used by the viewport Defines the current pass used by the viewport Allows change the primitive used by the viewport. Allows change the background color of the viewport. Input Resources and properties The property list panel below the viewport allows to test the effect with different values for constant buffer properties, textures, or samplers, and the changes will update the viewport automatically. The resources and properties are updated automatically with any change in the effect resource layout block. The values are not stored so only are useful for testing proposes."
  },
  "manual/graphics/effects/effect_metatags.html": {
    "href": "manual/graphics/effects/effect_metatags.html",
    "title": "Effect Metatags | Evergine Doc",
    "keywords": "Effect Metatags In evergine the effect are written in HLSL languages, but to automatize some tasks evergine includes additional tags that you can add to the HLSL code. Block Metatags Effect codes are organized into two important kinds of blocks: Block Tags Description Resource Layout [Begin_ResourceLayout] [End_ResourceLayout] This block of code defines all resources (Constant Buffers, Structured Buffers, Textures and Samplers) using all effect passes. Pass [Begin_Pass:PassName] [End_Pass] This block of code defines a RenderPipeline pass. The DefaultRenderPipeline defines 3 passes that any effect can define: ZPrePass, Distortion, Default Directives Metatags Inside of resource layout block you can define the directive set that your custom effect will have. The directives are useful to enable different features of your effect. A directive can be defined as two values On/Off feature or can define a feature with multiple values: [Directive:Name A_OFF A] [Directive:Name A_OFF B C D ...] Example: [Directive:NormalMapping Normal_OFF, Normal] [Directive:ShadowFilter Shadow_OFF, ShadowFilter3 ShadowFilter5 ShadowFilter7] An effect is a set of the shader (known as Uber-shader) and the directive help you to define this set of the shader. The directives generate automatically multiple shaders with the effects is compiled. Example: [Directive:Name A_OFF A] will generate a shader with A enabled and another shader with A disabled. [Directive:Name A_OFF B C D ...] will generate an A, B, C, D ... shaders. Additionally, if you define several directives, it will multiply the combinations. In that case, if you define two directives: [Directive:FeatureA A_OFF A] [Directive:FeatureB B_OFF C D] It will generate the following shader combinations: A_OFF-B_OFF, A-B_OFF, A_OFF-C, A-C , A_OFF-D, A-D The number of combination are multiplied by the number of effect passes so a complex effect would have hundreds or thousands of combinations. The effects can compile his combination on-demand in runtime or pre-compiled combination before and use it later in runtime without compile. So you generate a bundle with compiled shader combinations. To know more details go to this section You can shape your effect code with the #if #else and #endif preprocessor directives: #if TEX // This code is compiled only if TEX directive is used... finalColor = ColorTexture.Sample(ColorSampler, input.Tex); #else // If TEX directive is not present, reach this code... finalColor = ColorAttribute; #endif Or use any directive combinations: #if TEX || NORMAL // This code is compiled only if TEX and NORMAL directives are used... output.texCoord = input.TexCoord; #endif Default Values Metatag Evergine allows to inject default values in constant buffer attributes automatically using tags. Default values can be injected directly using the [Default(value)] tag: cbuffer Parameters : register(b0) { float SpeedFactor : packoffset(c0.x); [Default(1.5)] float3 Position : packoffset(c0.y); [Default(2.3, 3.3, 5.6)] } Default value tag supports the following types: int, float, bool, float, float2, float3, float4. Inject Engine parameters Evergine allows injecting engine data to resource layout resources (Constant Buffers attributes and Textures) automatically using tags. For example, in the following code, the [WorldViewProjection] metatag is used to inject the object world view projection matrix: cbuffer PerDrawCall : register(b0) { float4x4 WorldViewProj : packoffset(c0); [WorldViewProjection] }; List of Parameter Tag Here you can find a complete list of available parameter tag that you can use into your effects: Parameters Tag Type Update Policy Description [FrameID] long PerFrame Gets Frame ID. [DrawContextID] int PerView Gets drawcontext ID. [DrawContextViewIndex] int PerView Gets the view index of this draw context. A draw context can contains several views (cascade shadow, point light shadows, reflection probe, etc...). [World] Matrix4x4 PerDrawCall Gets the world value of the current render mesh. [View] Matrix4x4 PerView Gets the view value of the current camera. [ViewInverse] Matrix4x4 PerView Gets the view inverse value of the current camera. [Projection] Matrix4x4 PerView Gets the projection value of the current camera. [UnjitteredProjection] Matrix4x4 PerView Gets the unjittered projection value of the current camera. [ProjectionInverse] Matrix4x4 PerView Gets the projection inverse value of the current camera. [ViewProjection] Matrix4x4 PerView Gets the view projection value of the current camera. [UnjitteredViewProjection] Matrix4x4 PerView Gets the unjittered view projection value of the current camera. [PreviousViewProjection] Matrix4x4 PerView Gets the view projection value of the current camera in the previous frame. [WorldViewProjection] Matrix4x4 PerDrawCall Gets the world view projection value of the current camera and mesh. [UnjitteredWorldViewProjection] Matrix4x4 PerDrawCall Gets the unjittered (TAA) world view projection value of the current camera and mesh. [WorldInverse] Matrix4x4 PerDrawCall Gets the inverse world value of the current render mesh. [WorldInverseTranspose] Matrix4x4 PerDrawCall Gets the world inverse transpose of the current mesh. [Time] float PerFrame Gets the time value since the game has started. [CameraPosition] Vector3 PerView Gets the position value of the current camera. [CameraJitter] Vector2 PerView Gets the current frame camera jittering. [CameraPreviousJitter] Vector2 PerView Gets the previous frame camera jittering. [CameraRight] Vector3 PerView Gets the right component of the camera orientation. [CameraUp] Vector3 PerView Gets the up component of the camera orientation. [CameraForward] Vector3 PerView Gets the forward component of the camera orientation. [CameraFocalDistance] float PerView Gets the camera focal distance (used with DoF). [CameraFocalLength] float PerView Gets the camera focal length. [CameraAperture] float PerView Gets the camera aperture. [CameraExposure] float PerView Gets the camera exposure. [CameraFarPlane] float PerView Gets the far plane of the camera. [CameraNearPlane] float PerView Gets the near plane of the camera. [ViewProjectionInverse] Matrix4x4 PerView Gets the inverse of the view projection value of the current camera. [MultiviewCount] int PerView Gets the number of eyes to be rendered. [MultiviewProjection] Matrix4x4 PerView Gets the stereo camera projection. [MultiviewView] Matrix4x4 PerView Gets the stereo camera view. [MultiviewViewProjection] Matrix4x4 PerView Gets the stereo camera view projection. [MultiviewViewProjectionInverse] Matrix4x4 PerView Gets the stereo camera inverse view projection. [MultiviewPosition] Vector4 PerView Gets the stereo camera view. [ForwardLightMask] ulong PerDrawCall Gets the lighting mask, used in Forward passes. [LightCount] uint PerView Gets the number of lights. [LightBuffer] IntPtr PerView Gets the light buffer ptr. [LightBufferSize] uint PerView Gets the light buffer size. [ShadowViewProjectionBuffer] IntPtr PerView Gets the shadow view projection buffer pointer. [ShadowViewProjectionBufferSize] uint PerView Gets the shadow view projection buffer size. [IBLMipMapLevel] uint PerFrame Gets the IBL texture mipmap level. [IBLLuminance] float PerFrame Gets the IBL luminance. [IrradianceSH] IntPtr PerFrame Gets the irradiance spherical harmonics buffer ptr. [IrradianceSHBufferSize] uint PerFrame Gets the irradiance spherical harmonics buffer size. [EV100] float PerView Gets the Exposition Value at ISO 100. [Exposure] float PerView Gets the camera exposure. [SunDirection] Vector3 PerFrame Gets the sun direction. [SunColor] Vector3 PerFrame Gets the sun color. [SunIntensity] float PerFrame Gets the sun intensity. [SkyboxTransform] Matrix4x4 PerFrame Gets the skybox transform. Texture Tag Description [Framebuffer] Framebuffer texture. [DepthBuffer] Depthbuffer texture. [GBuffer] GBuffer texture. [Lighting] Lighting texture. [DFGLut] Lookup table for DFG precalculated texture. [IBLRadiance] IBL Prefiltered Mipmapped radiance environment texture. [ZPrePass] ZPrePass in forward rendering (Normal + Roughness). [DistortionPass] Distortion pass in forward rendering. [IBLIrradiance] IBL diffuse irradiance map. [TemporalHistory] Temporal AA history texture. [DirectionalShadowMap] Shadow map array texture. [SpotShadowMap] Shadow map array texture. [PunctualShadowMap] Shadow map array cube texture. [Custom0..N] Custom renderpipeline texture. Pass Settings Metatags These tags are used inside of a pass block code and are useful to configure which settings do you want to compile this pass. Tag Description [Profile API_Level] Defines HLSL language version and capabilities. The API level values could be: 9_1: DirectX9.1 HLSL 3.0. 9_2: DirectX 9.2 HLSL 3.0 9_3: DirectX 9.3 HLSL 3.0 10_0: DirectX 10 HLSL 4.0 10_1: DirectX 10.1 HLSL 4.1 11_0: DirectX 11 HLSL 5.0 11_1: DirectX 11 HLSL 5.0 12_0: DirectX 12 HLSL 6.0 12_1: DirectX 12 HLSL 6.1 12_3: DirectX 12 HLSL 6.3 (Raytracing) [Entirypoints Stage=MethodName] Defines the entrypoint stage methods of the pass. The valid stages values are: VS: Vertex Shader. HS: Hull Shader. DS: Domain Shader. GS: Geometry Shader. PS: Pixel Shader. CS: Compute Shader. [Mode value] Defines the compilation mode of the pass. Available mode list: None: Default compilation mode. Debug: Debug mode includes depuration symbols to analyze with shader tools like RenderDoc, PIX or NVidia Nsight Graphics. See Profile with Renderdoc for more useful information. Release: Optimize compilation mode. [RequiredWidth Directive] Defines the directive list required by the pass. Example: [RequiredWith VCOLOR] the renderpipeline run this pass only when VCOLOR directive is enabled. Override Render Layer Metatags These tags allow the pass to modify the render layer properties when the render pipeline runs this pass. To know more details about the RenderLayer properties read this section: Rasterization Process Tag Description [FillMode Value] Determines the fill mode to use when rendering. Available values: WireFrame or Solid [CullMode Value] Indicates triangles facing the specified direction are not drawn. Available values: None, Front or Back [FrontCounterClockwise bool] Determines if a triangle is front- or back-facing. If this parameter is true, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. Available values: True or false [DepthBias int] Depth value added to a given pixel. The value is an integer. [DepthBiasClamp float] Maximum depth bias of a pixel. The value is a float [0-1]. [SlopeScaledDepthBias float] Scalar on a given pixel's slope. The value is a float. [DepthClipEnable bool] Enable clipping based on distance. Available values: True or False [ScissorEnable bool] Enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled. Available values: True or False [AntialiasedLineEnable bool] Specifies whether to enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false. Available values: True or _False. Blend State Tag Description [AlphaToCoverageEnable bool] Specifies whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target. Available values: True or _False. [IndependentBlendEnable bool] Specifies whether to enable independent blending in simultaneous render targets. Set to true to enable independent blending. If set to false, only the RenderTarget[0] members are used; RenderTarget[1..7] are ignored. Available values: True or _False. [RT0BlendEnable bool] Enable (or disable) blending for RenderTarget 0. Available values: True or _False. [RT0SourceBlendColor Value] This blend option specifies the operation to perform on the RGB value that the pixel shader outputs. The BlendOp member defines how to combine the SrcBlend and DestBlend operations. Availables values: Zero, One SourceColor, InverseSourceColor, SourceAlpha, InverseSourceAlpha, DestinationAlpha, InverseDesinationAlpha, DestinationColor, InverseDestinatinoColor, SourceAlphaSaturate, BlendFactor, InverseBlendFactor, SecondarySourceColor, InverseSecondarySourceColor, SecondarySourceAlpha_ or InverseSecondarySourceAlpha. [RT0DestinationBlendColor Value] This blend option specifies the operation to perform on the current RGB value in the render target. The BlendOp member defines how to combine the SrcBlend and DestBlend operations. Availables values: Zero, One SourceColor, InverseSourceColor, SourceAlpha, InverseSourceAlpha, DestinationAlpha, InverseDesinationAlpha, DestinationColor, InverseDestinatinoColor, SourceAlphaSaturate, BlendFactor, InverseBlendFactor, SecondarySourceColor, InverseSecondarySourceColor, SecondarySourceAlpha_ or InverseSecondarySourceAlpha. [RT0BlendOperationColor Value] This blend operation defines how to combine the SrcBlend and DestBlend operations. Available values: Add, Substract, ReverseSubstract, Min or Max. [RT0SourceBlendAlpha Value] This blend option specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Availables values: Zero, One SourceColor, InverseSourceColor, SourceAlpha, InverseSourceAlpha, DestinationAlpha, InverseDesinationAlpha, DestinationColor, InverseDestinatinoColor, SourceAlphaSaturate, BlendFactor, InverseBlendFactor, SecondarySourceColor, InverseSecondarySourceColor, SecondarySourceAlpha or InverseSecondarySourceAlpha. [RT0DestinationBlendAlpha Value] This blend option specifies the operation to perform on the current alpha value in the render target. Blend options that end in COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha and DestBlendAlpha operations. Availables values: Zero, One SourceColor, InverseSourceColor, SourceAlpha, InverseSourceAlpha, DestinationAlpha, InverseDesinationAlpha, DestinationColor, InverseDestinatinoColor, SourceAlphaSaturate, BlendFactor, InverseBlendFactor, SecondarySourceColor, InverseSecondarySourceColor, SecondarySourceAlpha or InverseSecondarySourceAlpha. [RT0BlendOperationAlpha Value] This blend operation defines how to combine the SrcBlendAlpha and DestBlendAlpha operations for RenderTarget 0. Available values: Add, Substract, ReverseSubstract, Min or Max. [RT0ColorWriteChannels Value] A write mask for Render target 0. Availables values: None, Red, Green, Blue, Alpha or All. Depth Stencil Tag Description [DepthEnable bool] Enable depth testing. Availables values: True or False. [DepthWriteMask bool] Identify a portion of the depth-stencil buffer that can be modified by depth data. Available values: True or False. [DepthFunction Value] A function that compares depth data against existing depth data. Availables values: Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual or Always. [StencilEnable bool] Enable stencil testing. Availables values: True or False. [StencilReadMask byte] Identify a portion of the depth-stencil buffer for reading stencil data. The value is a byte. [StencilWriteMask byte] Identify a portion of the depth-stencil buffer for writing stencil data. The value is a byte. [FrontFaceStencilFailOperation Value] The stencil operation to perform when stencil testing fails in FrontFace Availables values: Keep, Zero, Replace, IncrementSaturation, DescrementSaturation, Invert, Increment, Decrement. [FrontFaceStencilDepthFailOperation Value] The stencil operation to perform when stencil testing passes and depth testing fails in FrontFace. Availables values: Keep, Zero, Replace, IncrementSaturation, DescrementSaturation, Invert, Increment, Decrement. [FrontFaceStencilPassOperation Value] The stencil operation to perform when stencil testing and depth testing both pass in FrontFace. Availables values: Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual or Always. [FrontFaceStencilFunction Value] A function that compares stencil data against existing stencil data in FrontFace. Availables values: Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual or Always. [BackFaceStencilFailOperation Value] The stencil operation to perform when stencil testing fails in BackFace Availables values: Keep, Zero, Replace, IncrementSaturation, DescrementSaturation, Invert, Increment, Decrement. [BackFaceStencilDepthFailOperation Value] The stencil operation to perform when stencil testing passes and depth testing fails in BackFace. Availables values: Keep, Zero, Replace, IncrementSaturation, DescrementSaturation, Invert, Increment, Decrement. [BackFaceStencilPassOperation Value] The stencil operation to perform when stencil testing and depth testing both pass in BackFace. Availables values: Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual or Always. [BackFaceStencilFunction Value] A function that compares stencil data against existing stencil data in BackFace. Availables values: Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual or Always. [StencilReference int] The reference value to use when doing a stencil test. The value is a integer."
  },
  "manual/graphics/effects/index.html": {
    "href": "manual/graphics/effects/index.html",
    "title": "Effects | Evergine Doc",
    "keywords": "Effects An effect is a uber-shader so be able to represent a single shader or a large group of shaders. A shader is a GPU program that can be run on the GPU and are able to perform rendering calculation using textures, vertoces and other resources. The effects in Evergine are written using HLSL. While HLSL is only supported by DirectX backends (DX11 and DX12), The effects are automatically translated to another language when it is necessary (to GLSL when using OpenGL, or Spir-V in Vulkan). Standard Effect Default evergine project template imports the Evergine.Core package package and this package includes several effects like the Standard Effect used by Default Material asset. Effects are a type of asset and have a dedicated Editor Effect Editor. In this section Create Effects Effect metatags Using Effects Effect Editor Built-in Effect"
  },
  "manual/graphics/effects/using_effects.html": {
    "href": "manual/graphics/effects/using_effects.html",
    "title": "Using Effects | Evergine Doc",
    "keywords": "Using Effects In this document, you will learn how to load and use Effects in your applications. How to apply an effect to a material from Evergine Studio. From Material Editor you can select the effect that the material will use on the top side of the properties. Load Effect from code The following sample code can be used to instantiate an existing effect asset, created an associated material, and apply an entity in your scene. protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); // Load effect Effect standardEffect = assetsService.Load<Effect>(EvergineContent.Effects.StandardEffect); // Create material asociated Material defaultMaterial = new Material(standardEffect) { LayerDescription = assetsService.Load<RenderLayerDescription>(EvergineContent.RenderLayers.Opaque), }; // Apply to an entity Entity primitive = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = defaultMaterial }) .AddComponent(new SphereMesh()) .AddComponent(new MeshRenderer()); this.Managers.EntityManager.Add(primitive); }"
  },
  "manual/graphics/environment/environment_manager.html": {
    "href": "manual/graphics/environment/environment_manager.html",
    "title": "Environment Manager | Evergine Doc",
    "keywords": "Environment Manager The EnvironmentManager is a SceneManager responsible to control and provide the Environmental lighting of the scene. EnvironmentManager Properties Default Description IntensityMultiplier 1.0 This value modify the overall intensity of the environmental lighting. Useful to increase or reduce the IBL intensity. This property doesn't affect regular Lights (DirectionalLights, PointLights, etc...). IBLReflectionProbe scene probe This is the ReflectionProbe instance used in the EnvironmentManager. This class contains the IBL textures and information. Strategy Automatically This property indicate to Evergine Studio how often the Environment will be generated. Automatically: Evergine Studio updates automatically the scene IBL every time that detects that it need to be updated (Sun direction changes, skybox material changes, etc...) OnDemand: Only updates the scene IBL on demand, when the user want it. When this option is selected, a Generate button appears. Clicking this button force Evergine Studio to recreate the scene IBL. \"Skybox\" entity tag By default, Evergine Studio creates automatically a environmental light for each scene. To do this, they create a cubemap from the (0,0,0) position, and will include all entities with the \"Skybox\" as Tag property. When you creates a new scene in Evergine Studio, it will create by default a Sphere Dome entity called \"SkyAtmosphere\", which render a sky environment controlled by a DirectionalLight marked as Sun."
  },
  "manual/graphics/environment/environment_textures.html": {
    "href": "manual/graphics/environment/environment_textures.html",
    "title": "Environment Textures | Evergine Doc",
    "keywords": "Environment Textures This is the best way to transfer the illumination of a equirectangular HDR image to your scene. Equirectangular textures A equirectangular image is created to convert a 360º view into a 2D texture. It usually has an aspect ratio of 2:1. If you use HDR equirectangular images (generally .hdr format) will produce more realistic illuminations. In Poly Haven site you can find a lot of environment textures grouped by categories (outdoor, skies, indoor, night, etc...) SkyboxEffect En Evergine, to create an environment lighting from a equirectangular image, you need to create a environment sphere dome with a SkyboxEffect material, that will use the HDR environment texture. The SkyboxEffect only has 3 useful properties: Property Description Texture The equirectangular image to use as environment. TextureSampler The SamplerState used to sample the texture. Parameters_Intensity A factor that modify the intensity of the texture. This is used to increase or reduce the brightness of the texture. Warning If you want to use this effect with a common SphereMesh, use the Skybox layer in the LayerDescription property. Using Skybox material Steps to create an Environmental lighting using a equirectangular image: Import into your Evergine project an equirectangular HDR image. Create a new SkyboxEffect material Edit the new SkyboxEffect material, and set the Texture property with the imported equirectangular image. Assign the Skybox LayerDescription tho the new SkyboxEffect material. Now you have two options: Option A (reuse the SkyAtmosphere): Select the SkyAtmosphere entity, in the MaterialComponent, set the new SkyboxEffect material. This will override the AtmosphereController appearance. Option B (create a new sky dome): Create a new Sphere primitive in your scene, and assign the new SkyboxEffect material. In the new entity, set the Tag property to \"Skybox\" Delete the SkyAtmosphere entity."
  },
  "manual/graphics/environment/index.html": {
    "href": "manual/graphics/environment/index.html",
    "title": "Environment | Evergine Doc",
    "keywords": "Environment In this section we will cover how you can control in Evergine the environmental light. Image Based Lighting (IBL) Image Based lighting (IBL) is a rendering technique which involves capturing an omnidirectional representation of real-world light information as an image, typically using a 360° camera. This image is then projected onto a dome or sphere analogously to environment mapping, and this is used to simulate the lighting for the objects in the scene. This allows highly detailed real-world lighting to be used to light a scene, instead of trying to accurately model illumination using an existing rendering technique. Image-based lighting often uses high-dynamic-range (HDR) imaging for greater realism. IBL involves the creation of two lighting components: Irradiance map (Diffuse): For the diffuse illumination, we need what is called an Irradiance Map. This usually involves a cubemap (or Spherical Harmonics) that stores the amount of light coming from each direction. Radiance map (Specular): Now, when we get to specular illumination, we need a texture called Pre-filtered Mip-Mapped Radiance Environment Map (PMREM). This is another cubemap that pre-calculate the reflected environment. An as an addition, it store in its MipMap levels different reflections for roughness values. Credits LearnOpenGL Evergine will use Image Based Lighting to create environmental illumination. In this section Environment Manager Sky Atmosphere Environment Textures"
  },
  "manual/graphics/environment/sky_atmosphere.html": {
    "href": "manual/graphics/environment/sky_atmosphere.html",
    "title": "Sky Atmosphere | Evergine Doc",
    "keywords": "Sky Atmosphere This is the default way to create environment lighting in Evergine. When you create a new Scene in Evergine Studio, it will use this method to provide the environmental lighting. They create a HDR sky texture that simulates physically the atmosphere properties. Additionally it will use a Directional Light to control the atmosphere light dispersion and light intensity and color. SunComponent This component is used to mark a DirectionalLight as the light source that will use the atmosphere controller. When you create a Evergine Scene, it will create a DirectionalLight with a SunComponent. Changing the DirectionalLight rotation allows you to change the visual atmospheric, simulating effects like sunset, sunrise or daylight: This component has no properties, and the only purpose is to mark a DirectionalLight as the Sun source. Note Only the first light with SunComponent will be used. AtmosphereController component This component is responsible to control the set the physical properties of the atmosphere and render the sky dome texture. Property Default Description RayleighScattering 5.5, 13, 22.4 Rayleigh scattering coefficient per each color channel wavelength (Red, Green and Blue). RayleighScaleHeight 8000 Scale height for Rayleigh scattering measured in meters. PlanetRadiusInKm 6371 Radius of the planet in Kilometers AtmosphereRadiusInKm 6471 Radius of the atmosphere in Kilometers MieScatteringCoefficient 21 Mie scattering coefficient. MieScaleHeight 12000 Mie scattering scale height in meters MiePreferredScattering 0.758 Mie preferred scattering direction. ModifySunColor true This will force to SunIntensity 22.0 The Sun intensity. SunDiskEnabled true Indicates if the environment will create a sun disk. SunDiskSize 0.02 The size of the sun disk in degrees These properties allows you to simulate another atmospheres of other worlds, like Mars (atmosphere obtained from here): Or you can simulate any exotic atmosphere: Using Sky Atmosphere In Evergine Studio You can add two entities from Evergine Studio under Environment menu entry: Sun Light: This will create a Photometric Directional Light marked as a Sun light with the SunComponent Sky Atmospheric dome: Will create a Sphere mesh with the AtmosphereController component to create the atmosphere. This entity also has the \"Skybox\" tag. From code This is a small code snippet to create both entities needed to create a sky atmosphere: protected override void CreateScene() { // Create the sun light var sun = new Entity() .AddComponent(new Transform3D() { LocalRotation = new Vector3(-2, 0, 0) }) // Add some rotation to the light... .AddComponent(new PhotometricDirectionalLight()) .AddComponent(new SunComponent()); this.Managers.EntityManager.Add(sun); // Create the sphere sky dome var skyDome = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent()) .AddComponent(new SphereMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new AtmosphereController()); this.Managers.EntityManager.Add(skyDome); }"
  },
  "manual/graphics/fonts/create_text3D.html": {
    "href": "manual/graphics/fonts/create_text3D.html",
    "title": "Create Text3D | Evergine Doc",
    "keywords": "Create Text3D Text3D is a component that allows to render a paragrah in 3D space. It is possible to render a simple header text or a large paragram and configure the limit of the text, wrapping and ellipsis. Create a Text3D in Evergine Studio You can create a Text3D click button on from Entity Hierarchy panel to deploy a create menu options and click on the option \"Text3D\" A Text3D entity will be added to your scene In the Text3DMesh component of your Text3D entity you will find the following properties: Property Description Font The font asset used. (Font family) Layer RenderLayer used to render the text. Text The text will be drawn. It is possible to use /n to line break. Color The text color. Size The canvas size or area. Enable DebugMode property in the Text3DRenderer component to show this area (blue rectangle) ScaleFactor The text scale factor. Wrapping Word wrapping. If this option is enabled line breaking will be created automatically when the current line hasn't enough space to add more words. Ellipsis If this option is enabled it will show a three ellipsis at the end of the text when hasn't enough space in the canvas to add more letters. HorizontalAlignment Allows align the text horizontally. The available values are: Left, Center, and Right VerticalAlignment Allows align the text vertically. The available values are: Top, Center, and Bottom Origin Allows to configure the origin of the Text3D entity. The value is a vector2 with values between [0-1]. LineSpacing Allows to configure the space between text lines. Softness Allows to configure anti-aliasing effect. The value is a float between [0-2] Create a Text3D from code The following code shows the list of components necessary to convert an entity into a billboard entity. public class MyScene : Scene { protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); var defaultFont = assetsService.Load<Font>(DefaultResourcesIDs.DefaultFontID); var text = new Entity() .AddComponent(new Transform3D()) .AddComponent(new Text3DMesh() { Font = defaultFont, Text = \"Hello World!\", }) .AddComponent(new Text3DRenderer()); this.Managers.EntityManager.Add(text); } } The result: Enable debug mode Sometimes will be useful to enable DebugMode property in Text3DRenderer component to draw the debug information of our Text3D entity. The canvas space will be shown as a blue rectangle. The text space will be shown as a yellow rectangle and a red point will be render on each character origin."
  },
  "manual/graphics/fonts/font_editor.html": {
    "href": "manual/graphics/fonts/font_editor.html",
    "title": "Font Editor | Evergine Doc",
    "keywords": "Font Editor Font Editor allows editing the font assets. Double click over a font asset shown in Assets Details will open this editor. The editor is composed of 3 main parts: Viewport Shows the result of the current font configuration. The viewport has a toolbox on the top side that allows change the font color and background color. Input Text In this area you can input different texts to test the font configuration in the viewport. By default appear the paragrah \"The quick brown fox jumps over the lazy dog. 1234567890.:,;'\"(!?)+-*/=\" that test all letters, numbers and punctuation marks. But if you modify the charset to include additional characters you can test including them in this input text. Properties The font properties that you can configure are: Property Default value Description MinGlyphSize 32 The minimum glyph size used to render a font glyph in the atlas. When a font is so thin or has thin parts as ligatures, it will be necessary to increase this size for a correct render. Increasing the size produces more large atlas and a more weight font asset. Charset ['','~'] Sets the character set. The charset is a text with UTF-8 or ASCII encondig. The following syntax are correct: Single character: 'A' (UTF-8 enconded), 65 (decimal Unicode), 0x41 (hexadecimal Unicode) Range of characters: ['A', 'Z'],[65, 90], [0x41, 0x5a] String of characters: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (UTF-8 enconded) The entries should be separated by commas or whitespace. In between quotation marks, backslash is used as the escape character (e.g. ''', '\\', \"!\"#\"). The order in which characters appear is not taken into consideration."
  },
  "manual/graphics/fonts/import_fonts.html": {
    "href": "manual/graphics/fonts/import_fonts.html",
    "title": "Import Fonts | Evergine Doc",
    "keywords": "Import Fonts The font asset allows you render text in your project using differents font families and styles. Import a Font asset in Evergine Studio You can create a font asset by dragging a font file to the Assets Details panel, as explained in this article. Font files in content directory Fonts imported in Evergine create an aditional metadata .weft file. Supported formats: Evergine supports the following font file formats: Extension Description .ttf TrueType is an outline font standard developed by Apple in the late 1980s as a competitor to Adobe's Type 1 fonts used in PostScript. It has become the most common format for fonts on the classic Mac OS, macOS, and Microsoft Windows operating systems. The primary strength of TrueType was originally that it offered font developers a high degree of control over precisely how their fonts are displayed, right down to particular pixels, at various font sizes. With widely varying rendering technologies in use today, pixel-level control is no longer certain in a TrueType font. .otf OpenType is a format for scalable computer fonts. It was built on its predecessor TrueType, retaining TrueType's basic structure and adding many intricate data structures for prescribing typographic behavior. OpenType is a registered trademark of Microsoft Corporation. The specification germinated at Microsoft, with Adobe Systems also contributing by the time of the public announcement in 1996. Because of wide availability and typographic flexibility, including provisions for handling the diverse behaviors of all the world's writing systems, OpenType fonts are used commonly on major computer platforms."
  },
  "manual/graphics/fonts/index.html": {
    "href": "manual/graphics/fonts/index.html",
    "title": "Fonts and Texts | Evergine Doc",
    "keywords": "Fonts and Texts Fonts is a asset that represents a TrueType font that could be using to draw Text in your project. The available font file formats supported are .ttf and .otf . Font atlas Evergine uses the Multi-channel signed distance field technique to generate a prerender sprite font atlas from the original font file. A font atlas is typically stored in texture memory and used to draw text in real-time rendering contexts, the main issue with the traditional sprite-atlas is that the glyphs are prerender in a specified resolution, so if you use this sprite-atlas to render a big text or the camera is closed to the text, is possible detect loss of resolution and aliasing on the text. Multi-channel signed distance field allows to render font glyphs minimizing loss of resolution with diferent font size and even when the camera is closed to the text. Follow this link to read more details about this technique. Default Font Default Evergine project template imports the Evergine.Core package and this package includes the Arial Font. Text3D component uses Arial font as default you can create your own font asset and change it in the Text3D component. Fonts are a type of asset and have a dedicated Editor Font Editor. In this section Import Font Font Editor Create Text3D"
  },
  "manual/graphics/index.html": {
    "href": "manual/graphics/index.html",
    "title": "Graphics | Evergine Doc",
    "keywords": "Graphics Evergine's graphics features let you control the appearance of your applications and are highly-customizable. You can use Evergine's graphics features to create beautiful, optimized graphics across a range of platforms, from mobile, portable XR headset to desktop. This section explains how to use Evergine for graphics and rendering. In this section Supported graphics backends Cameras Lights Materials Textures Models Primitives Post Processing Graph Particles Effects Environment Line Batch Sprites Billboards Fonts and Texts Low-level API"
  },
  "manual/graphics/lights.html": {
    "href": "manual/graphics/lights.html",
    "title": "Lights | Evergine Doc",
    "keywords": "Lights Evergine uses an advanced lighting mode to simulate how light affect geometries. It also supports multiple lights in the scene, allowing a wide range of environment and possibilities. Every type of light is modelled in Evergine using a Light component. Create a Light in Evergine Studio In the Entities Hierarchy panel of your Scene Editor, click the \"Add Entity and select Light, then choose the kind of light you want to create: Point Light Directional Light Sphere Area Light Spot Light Disc Area Light Rectangle Area Light Rube Area Light We discuss the light types later in this article. Additionally we can create photometric lights from the same panel with theese options: Photometric Point Light Photometric Directional Light Photometric Sphere Area Light Photometric Spot Light Photometric Disc Area Light Photometric Rectangle Area Light Photometric Rube Area Light Create Light from code The following sample code can be used to instantiate a new basic new point light entity in a scene. protected override void CreateScene() { // Create a new light entity. Entity pointLightEntity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new PointLight() { Color = Color.Red, Intensity = 3, LightRange = 10 }); // Add the light entity to the entity manager. this.Managers.EntityManager.Add(pointLightEntity); } Basic light properties These are the basic properties that almost all the lights have. Property Description Is Enabled If the light is on / off. Shadow Enabled Enable/disable shadow mapping for this light. Photometric / Non photometric lights Photometric lights use photometric (lighting units) allowing you to define precisely lights as they would be in the real world. They are configured using physical parameters. Evergine supports both photometric and non photometric lights, and it offers all the same light types duplicated depending this choice. Common Photometric properties Every photometric light (no matter what type it is) defines this parameters, additionally each specific type of light defines its own intensity unit properties. Property Description Color By Temperature Indicates if the light color will be overrided using the light temperature. Temperature The light temperature in Kelvin (K). When ColorByTemperature is true, the light color is overrided by the light temperature. Note Light Intensity unit depends on the light type (for example, PointLights are measured in Lumens, whether DirectionalLights are measured in Lux) Non photometric lights properties For contrary, if you create regular lights, you could use the basic light properties: Property Description Color The RGB color tint of the light. Intensity The light intensity value in a non-standard unit. Greater values will produce brighter illumination. Types of lights There are different types of lights, each one useful for a different scenario. In general terms, lights are divided in two general categories: Directional Lights: These lights have unlimited boundaries, and every object is affected by this light type. Volume Lights: The light influence is delimited by a range. Area Lights: A subtype of volume lights that emulate lights coming from an area instead of a point in the space. Directional Lights / Photometric Directional Light Directional lights are lights that comes uniformly from one direction and at infinited distance. They're used to simulate distant light sources like the sun. It uses the forward vector of its entity Transform3D for calculating the light direction. In case of using a Photometric Directional Light, the intensity is measured using the following property: Photometric Property Description Illuminance (Lux) The light Illuminance measured in Lux. Indicates the total luminous flux incident on a surface, per unit area. Volume Lights Volume lights are a common type of lights in which the light source comes from a specific point in the space, and its intensity decays with the distance. Property Description Light Range The light range in meters. In case of using a Volume Photometric Lights, the intensity is measured using the following property: Photometric Property Description Luminous Power (Lumen) The light luminous flux in Lumen Point Light / Photometric Point Light A point light is located at a point in space and it emits light in all directions equally within its sphere range. Its intensity decays with distance from the light, reaching zero at its maximum range. It's useful for local lights like lamps. Spot Light / Photometric Spot Light A spot light is also placed in a specific location and it has a range over which the light decays. However, spot lights are also constrained by an angle, defining a cone shape light. Specific Properties Property Description InnerConeAngle The inner angle of the spotlight cone. OuterConeAngle The outter angle of the spotlight cone Tube Area lights / Photometric Tube Area Light Tube Area Lights are lights that comes from a line segment and have a range and a emission thickness. They are usefull for simulating neon lights. Specific Properties Property Description Length The length of the tube light volume. Radius The radius of the tube light volume. Sphere Area Lights / Photometric Sphere Area Light Sphere Area Lights behave like a phyical sphere emiting light rather a point light. They create much more softer lighting and can use for creating dynamic environment. Specific Properties Property Description Radius The radius of the sphere light volume. Disc Area Lights / Photometric Disc Area Light Disc Area Lights emit their light from a disc with a specified radius and at a maximum range. Useful for creating artificial soft lights. Specific Properties Property Description Radius The radius of the disc area light. Rectangle Area Lights / Photometric Rectangle Area Light Rectangle Area Lights emit their light from a rectangle with a specified with and height, at a maximum range. Useful for creating indoor window lighting, for example. Specific Properties Property Description Width The width of the rectangle area light. Height The height of the rectangle area light. Note Area lights needs to make complex calculation in order to properly simulate their shape. Therefore, they are significantly more performance heavy than their punctual counterparts (Point, Spot and Directional). Shadows To enable light cast shadows, the following properties has been added: Property Description Shadow Enabled Enable/disable shadow mapping for this light. Debug Mode Debug ShadowMap cascades used to generate this light shadow. Shadow Opacity Value [0-1] that represents the total opacity of the shadow. 1 by default. Shadow Bias Shadow bias for this specific light. Choosing the correct bias value allows to control shadows artifacts like a Moiré-like patern or Peter panning"
  },
  "manual/graphics/linebatch/custom_linebatch.html": {
    "href": "manual/graphics/linebatch/custom_linebatch.html",
    "title": "Create custom LineBatch | Evergine Doc",
    "keywords": "Create custom LineBatch In most cases will be enough to use the default linebatch3D provided by the RenderManager, but sometimes is useful to create your custom line batch because you can modify its global transformation or you can modify its render behavior without impact in the default line batch included in Evergine. In these cases will be interesting to create an independent custom line batch. How to create a custom linebatch public class MyDrawable : Drawable3D { [BindService] private AssetsService assetsService = null; private GraphicsContext graphicsContext; private LineBatch3D lineBatch; protected override bool OnAttached() { this.graphicsContext = Application.Current.Container.Resolve<GraphicsContext>(); var layer = this.assetsService.Load<RenderLayerDescription>(DefaultResourcesIDs.OpaqueRenderLayerID); // Create custom line batch 3D this.lineBatch = new LineBatch3D(this.graphicsContext, layer); // Add line batch to render this.Managers.RenderManager.AddRenderObject(this.lineBatch); return base.OnAttached(); } protected override void OnActivated() { // Enable line batch when the component is activated this.lineBatch.IsEnabled= true; base.OnActivated(); } protected override void OnDeactivated() { // Disable line batch when the component is deactivated this.lineBatch.IsEnabled= false; base.OnDeactivated(); } protected override void OnDetach() { // Remove line batch from render when the component is detached this.Managers.RenderManager.RemoveRenderObject(this.lineBatch); base.OnDetach(); } public override void Draw(DrawContext drawContext) { // Draw a sample blue cone this.lineBatch.DrawCone(0.5f, 1.0f, Vector3.UnitY, Vector3.Down, Color.Blue); } } Result Some interesting properties The line batch has a Transform property that could be used to apply transformations (translation, rotation, or scale) to all elements added to the batch. For example, if you use the line batch to draw a CAD map you can use this property to rotate the whole map. The line batch by default requires that every frame the elements to draw will be added to the batch, but in some cases is interesting to create a static batch and draw the same elements every frame because any new element will not need to be added to the batch at runtime, so you can use the property ResetAfterRender to indicates that the line batch doesn't reset the batch every frame. this.lineBatch = new LineBatch3D(this.graphicsContext, layer) { ResetAfterRender = false, };"
  },
  "manual/graphics/linebatch/index.html": {
    "href": "manual/graphics/linebatch/index.html",
    "title": "Line Batch | Evergine Doc",
    "keywords": "Line Batch Linebatch is very useful when you need to create a huge amount of line in your scene. For example for dummy objects or helpers in your scene. The more interesting thing of this feature is that all lines that you created are batch in a single drawcall so you archieve a good performance. This feature is only available from code. You can find the LineBatch3D and LineBatch2D in the scene RenderManager. The lines are compounds by two vertex and an edge so you cannot control the thickness of the lines. If you want to draw thickness lines see the Line3D. In this section Using Linebatch Create custom Linebatch"
  },
  "manual/graphics/linebatch/using_linebatch.html": {
    "href": "manual/graphics/linebatch/using_linebatch.html",
    "title": "Using LineBatch | Evergine Doc",
    "keywords": "Using LineBatch LineBatch only can be used from code. In the scene RenderManager you will find the LineBatch3D to draw lines in 3d space and the LineBatch2D to draw lines in 2d space. If you want to add a debug or helper mode to your entity, you can add a Drawable3D component to your scene and from this you will be access to the linebatch: The following example draw a red line from (0,0,0) to (0,1,0) From your scene.cs protected override void CreateScene() { ... // Add dummy entity to your scene var dummyEntity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MyDrawable()); this.Managers.EntityManager.Add(dummyEntity); } Drawable component implementation // Drawable component using lineBatch3D public class MyDrawable : Drawable3D { public override void Draw(DrawContext drawContext) { this.RenderManager.LineBatch3D.DrawLine(Vector3.Zero, Vector3.Up, Color.Red); } } The lineBatch3D not only draw lines but can also draw Point, Sphere, Box ... And LineBatch2D is similar but with shapes (Circle, Square ...) Note LineBatch3D must be used with Drawable3D and LineBatch2D with Drawable2D_ LineBatch This section shows with examples all geometries that LineBatch can draw: DrawArc Vector3 origin = Vector3.Zero; Color color = Color.White; this.RenderManager.LineBatch3D.DrawArc(ref origin, 0.5f, 0.5f, ref color); DrawAxis this.RenderManager.LineBatch3D.DrawAxis(Matrix4x4.Identity, 1.0f); DrawBoundingBox this.RenderManager.LineBatch3D.DrawBoundingBox(new BoundingBox(Vector3.Zero, Vector3.One), Color.White); DrawBoundingFrustum this.RenderManager.LineBatch3D.DrawBoundingFrustum(new BoundingFrustum(Matrix4x4.Identity), Color.White); DrawBoundingOrientedBox this.RenderManager.LineBatch3D.DrawBoundingOrientedBox(new BoundingOrientedBox(Vector3.Zero, Vector3.One * 0.5f, Quaternion.CreateFromAxisAngle(Vector3.Right, MathHelper.PiOver4)), Color.White); DrawBoundingSphere this.RenderManager.LineBatch3D.DrawBoundingSphere(new BoundingSphere(Vector3.Zero, 1.0f), Color.White); DrawRectangle this.RenderManager.LineBatch3D.DrawRectangle(Vector3.Zero, Vector3.One, Color.White); DrawCircle this.RenderManager.LineBatch3D.DrawCircle(Vector3.Zero, 1.0f, Color.White); DrawCone this.RenderManager.LineBatch3D.DrawCone(0.5f, 1.0f, Vector3.Zero, Vector3.Down, Color.White); DrawCube this.RenderManager.LineBatch3D.DrawCube(Vector3.Zero, Vector3.One, Color.White); DrawForward this.RenderManager.LineBatch3D.DrawForward(Matrix4x4.Identity, 1.0f); DrawPoint this.RenderManager.LineBatch3D.DrawPoint(Vector3.Zero, 0.5f, Color.White); DrawRay this.RenderManager.LineBatch3D.DrawRay(Vector3.Zero, Vector3.Forward, Color.White); DrawTriangle this.RenderManager.LineBatch3D.DrawTriangle(new Vector3(-0.5f, 0, 0), new Vector3(0, 1.0f, 0), new Vector3(0.5f, 0, 0), Color.White);"
  },
  "manual/graphics/lines_3d.html": {
    "href": "manual/graphics/lines_3d.html",
    "title": "Lines 3D | Evergine Doc",
    "keywords": "Lines 3D Coming soon"
  },
  "manual/graphics/low_level_api/buffer.html": {
    "href": "manual/graphics/low_level_api/buffer.html",
    "title": "Buffer | Evergine Doc",
    "keywords": "Buffer A Buffer represents a block of memory that can be used in GPU operations. You can use buffers to store a wide variety of data, including position vectors, normal vectors, texture coordinates in a vertex buffer, indexes in an index buffer for example. Creation To create a buffer, first you need to create the BufferDescription struct: // Populate some data for the buffer... Vector4[] vertexData = new Vector4[] { new Vector4(0.0f, 0.2f, 0.0f, 1.0f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4(0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), }; uint expectedSize = (4 * 4) * (uint)vertexData.Length; BufferFlags expectedFlags = BufferFlags.VertexBuffer; ResourceUsage expectedUsage = ResourceUsage.Default; // Create the BufferDescription.... BufferDescription bufferDescription = new BufferDescription(expectedSize, expectedFlags, expectedUsage); // Create the Buffer Buffer buffer = this.GraphicsContext.Factory.CreateBuffer(vertexData, ref bufferDescription); BufferDescription Property Type Description SizeInBytes uint Retrieves or sets the size of the new buffer. Flags BufferFlags Buffer flags describing buffer type. CpuAccess ResourceCpuAccess Specifies the types of CPU access allowed for this buffer. Usage ResourceUsage Usage of this buffer. StructureByteStride int The structure byte stride. ResourceUsage Identifies expected resource usage during rendering. ResourceUsage Description Default A resource that requires read and write access by the GPU, Default value. Immutable A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. Dynamic A resource that is accessible by both the GPU (read only) and the CPU (write only). Staging A resource that supports data transfer (copy) from the GPU to the CPU. BufferFlags Identifies how to bind a buffer. This flag gives a hint to the graphics API of how this buffer will be used. BufferFlags Description None No option. VertexBuffer Bind a buffer as a vertex buffer to the input-assembler stage. IndexBuffer Bind a buffer as an index buffer to the input-assembler stage. ConstantBuffer Bind a buffer as a constant buffer to a shader stage. This flag may NOT be combined with any other bind flag. ShaderResource Bind a buffer or texture to a shader stage. AccelerationStructure Bind a buffer to used in a raytracing stage. RenderTarget Bind a texture as a render target for the output-merger stage. UnorderedAccess Bind a buffer as unordered access resource. BufferStructured Bind a buffer as structured buffer resoruce. IndirectBuffer Bind a buffer as indirect buffer to the input-assembler stage. ResourceCpuAccess Specifies the types of CPU access allowed for a resource. ResourceCpuAccess Description None Not specified, Default value. Write The CPU can be write this resource. Read The CPU can be read this resources. Using Buffers How to update a Default Buffer (Buffer created with ResourceUsage.Default) In that case, you just need to execute the GraphicsContext.UpdateBufferData(...) method: var vertexData = new Vector4[] { new Vector4(0.0f, 0.2f, 0.0f, 1.0f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4(0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), }; // Creates a Buffer without data... uint sizeInBytes = (4 * 4) * (uint)vertexData.Length; var bufferDescription = new BufferDescription(sizeInBytes, BufferFlags.VertexBuffer, ResourceUsage.Default); var buffer = this.GraphicsContext.Factory.CreateBuffer(ref bufferDescription); // Update buffer... this.GraphicsContext.UpdateBufferData(buffer, vertexData); How to copy a Default Buffer into another Default Buffer In that case you need to execute the CommandBuffer.CopyBufferDataTo(...) method. To do this, you need to obtains a CommandBuffer instance and enqueue the copy command: var vertexData = new Vector4[] { new Vector4(0.0f, 0.2f, 0.0f, 1.0f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4(0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), }; // Creates the source buffer with some vertex data... var description = new BufferDescription( 4 * 4 * (uint)vertexData.Length, BufferFlags.VertexBuffer, ResourceUsage.Default); var buffer = this.GraphicsContext.Factory.CreateBuffer(vertexData, ref description); // Creates an empty buffer with the same size and properties as before... var bufferCopyDescription = new BufferDescription( (4 * 4) * (uint)vertexData.Length, BufferFlags.VertexBuffer, ResourceUsage.Default); var bufferCopy = this.GraphicsContext.Factory.CreateBuffer(ref bufferCopyDescription); // Creates a CommandBuffer to execute the copy command... var queue = this.GraphicsContext.Factory.CreateCommandQueue(); var command = queue.CommandBuffer(); command.Begin(); // Execute the CopyBufferDataTo() commandBuffer method to copy data from one buffer to another... command.CopyBufferDataTo(buffer, bufferCopy, buffer.Description.SizeInBytes); // Commit and submit the commandBuffer... command.End(); command.Commit(); queue.Submit(); queue.WaitIdle(); buffer.Dispose(); bufferCopy.Dispose(); queue.Dispose(); How to read a Default Buffer content (by using a Staging Buffer) In order to read a Default Buffer, you need to copy previously the content into a Staging Buffer. Once you do this, you could map the Stagging Buffer to CPU Memory and access the data without problems: var vertexData = new Vector4[] { new Vector4(0.0f, 0.2f, 0.0f, 1.0f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4(0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), }; // Create the source buffer with some data... var description = new BufferDescription( 4 * 4 * (uint)vertexData.Length, BufferFlags.VertexBuffer, ResourceUsage.Default); var buffer = this.GraphicsContext.Factory.CreateBuffer(vertexData, ref description); // Creates the staging buffer... var stagingDescription = new BufferDescription( 4 * 4 * (uint)vertexData.Length, BufferFlags.None, ResourceUsage.Staging, // Use Staging as ResourceUsage... ResourceCpuAccess.Read); var stagingBuffer = this.GraphicsContext.Factory.CreateBuffer(ref stagingDescription); // Copy the buffer data like the previous example... var queue = this.GraphicsContext.Factory.CreateCommandQueue(); var command = queue.CommandBuffer(); command.Begin(); command.CopyBufferDataTo(buffer, stagingBuffer, buffer.Description.SizeInBytes); command.End(); command.Commit(); queue.Submit(); queue.WaitIdle(); // To read the buffer data, Map the buffer into the CPU memory... var readableResource = this.GraphicsContext.MapMemory(stagingBuffer, MapMode.Read); // Checks if the staging buffer content is the same as that we use before to create // the default buffer... for (int i = 0; i < vertexData.Length; i++) { Vector4* pointer = (Vector4*)(readableResource.Data + (i * sizeof(Vector4))); Assert.Equal(*pointer, vertexData[i]); } // Unmap the memory to free the CPU Memory resources... this.GraphicsContext.UnmapMemory(stagingBuffer); buffer.Dispose(); stagingBuffer.Dispose(); queue.Dispose(); How to update a Dynamic Buffer from CPU A Dynamic Buffer could be updated directly from CPU. To do this, you only need to map a Buffer and write the data directly to the mapped pointer: var vectorSize = (uint)Unsafe.SizeOf<Vector4>(); var vertexData = new Vector4[] { new Vector4(0.0f, 0.2f, 0.0f, 1.0f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4(0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.2f, -0.2f, 0.0f, 1.0f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), }; var dynamicDescription = new BufferDescription( vectorSize * (uint)vertexData.Length, BufferFlags.VertexBuffer, ResourceUsage.Dynamic, ResourceCpuAccess.Write); var dynamicBuffer = this.GraphicsContext.Factory.CreateBuffer(ref dynamicDescription); // Map the write staging and leave mapped... var writableResource = this.GraphicsContext.MapMemory(dynamicBuffer, MapMode.Write); Vector4* pointer = (Vector4*)writableResource.Data; for (int i = 0; i < vertexData.Length; i++) { *pointer = vertexData[i]; pointer++; } // Once the buffer us unmapped, the new buffer content is accesible by the GPU... this.GraphicsContext.UnmapMemory(dynamicBuffer); dynamicBuffer.Dispose();"
  },
  "manual/graphics/low_level_api/commandbuffer.html": {
    "href": "manual/graphics/low_level_api/commandbuffer.html",
    "title": "CommnadBuffer | Evergine Doc",
    "keywords": "CommnadBuffer Coming soon"
  },
  "manual/graphics/low_level_api/commandqueue.html": {
    "href": "manual/graphics/low_level_api/commandqueue.html",
    "title": "CommandQueue | Evergine Doc",
    "keywords": "CommandQueue Coming soon"
  },
  "manual/graphics/low_level_api/computepipeline.html": {
    "href": "manual/graphics/low_level_api/computepipeline.html",
    "title": "ComputePipeline | Evergine Doc",
    "keywords": "ComputePipeline Coming soon"
  },
  "manual/graphics/low_level_api/framebuffer.html": {
    "href": "manual/graphics/low_level_api/framebuffer.html",
    "title": "Framebuffer | Evergine Doc",
    "keywords": "Framebuffer Framebuffers represent a collection of memory attachments that are used by a render pass instance. Examples of these memory attachments include the color textures and depth texture. Creation A framebuffer provides the attachments that a RenderPass needs while rendering. // Create Render Target FrameBuffer var rTColorTargetDescription = new TextureDescription() { Format = PixelFormat.R8G8B8A8_UNorm, Width = rtSize, Height = rtSize, Depth = 1, ArraySize = 1, Faces = 1, Flags = TextureFlags.RenderTarget | TextureFlags.ShaderResource, CpuAccess = ResourceCpuAccess.None, MipLevels = 1, Type = TextureType.Texture2D, Usage = ResourceUsage.Default, SampleCount = TextureSampleCount.None, }; var rTColorTarget = this.graphicsContext.Factory.CreateTexture(ref rTColorTargetDescription); var rTDepthTargetDescription = new TextureDescription() { Format = PixelFormat.D24_UNorm_S8_UInt, Width = rtSize, Height = rtSize, Depth = 1, ArraySize = 1, Faces = 1, Flags = TextureFlags.DepthStencil, CpuAccess = ResourceCpuAccess.None, MipLevels = 1, Type = TextureType.Texture2D, Usage = ResourceUsage.Default, SampleCount = TextureSampleCount.None, }; var rTDepthTarget = this.graphicsContext.Factory.CreateTexture(ref rTDepthTargetDescription); var depthAttachment = new FrameBufferAttachment(rTDepthTarget, 0, 1); var colorsAttachment = new[] { new FrameBufferAttachment(rTColorTarget, 0, 1) }; this.rTFrameBuffer = this.graphicsContext.Factory.CreateFrameBuffer(depthAttachment, colorsAttachment); How to use First, you need to create a graphics pipeline that use the framebuffer output description: var trianglePipelineDescription = new GraphicsPipelineDescription() { PrimitiveTopology = PrimitiveTopology.TriangleList, InputLayouts = triangleVertexLayouts, ResourceLayouts = new[] { triangleResourceLayout }, Shaders = new GraphicsShaderStateDescription() { VertexShader = triangleVertexShader, PixelShader = trianglePixelShader, }, RenderStates = new RenderStateDescription() { RasterizerState = RasterizerStates.None, BlendState = BlendStates.Opaque, DepthStencilState = DepthStencilStates.None, }, Outputs = this.rTFrameBuffer.OutputDescription, }; this.trianglePipelineState = this.graphicsContext.Factory.CreateGraphicsPipeline(ref trianglePipelineDescription); And finally you can use to start a renderpass: // Render to texture var commandBuffer = this.commandQueue.CommandBuffer(); commandBuffer.Begin(); RenderPassDescription renderPassDescription = new RenderPassDescription(this.rTFrameBuffer, new ClearValue(ClearFlags.Target, Color.CornflowerBlue)); commandBuffer.BeginRenderPass(ref renderPassDescription); commandBuffer.SetViewports(this.rTViewports); commandBuffer.SetScissorRectangles(this.scissors); commandBuffer.SetGraphicsPipelineState(this.trianglePipelineState); commandBuffer.SetResourceSet(this.triangleResourceSet); commandBuffer.SetVertexBuffers(this.triangleVertexBuffers); commandBuffer.Draw((uint)this.triangleVertexData.Length); commandBuffer.EndRenderPass(); commandBuffer.End(); commandBuffer.Commit(); this.commandQueue.Submit(); this.commandQueue.WaitIdle();"
  },
  "manual/graphics/low_level_api/graphicscontext.html": {
    "href": "manual/graphics/low_level_api/graphicscontext.html",
    "title": "GraphicsContext | Evergine Doc",
    "keywords": "GraphicsContext The GraphicsContext is the central class for displaying your application. It's used to create and manage graphic resources. Like the majority of Low-level-API classes, GraphicsContext is an abstract class that exposes common functionality of each graphics API (e.g. DirectX, Vulkan, Metal...). To use this API just need to create or get access to the GraphicsContext instance indicating the properly implementation depending of which graphic backend are you interested. In the following example, we are creating a DirectX11 GraphicsContext: var graphicsContext = new Evergine.DirectX11.DX11GraphicsContext(); Use the specify constructor to initialize a concrete graphics API. API Class DirectX 11 new DX11GraphicsContext() DirectX 12 new DX12GraphicsContext() Vulkan new VKGraphicsContext() OpenGL new GLGraphicsContext() Metal new MTLGraphicsContext() Initialize the Device Once you have created the Graphics context, in order to create resources and render your content, you need to create the graphics device: graphicsContext.CreateDevice(); Validation Layer To enable debug graphics mode you must added the ValidationLayer object to the device constructor, this will show you the native and internal errors: // Add a ValidationLayer instance in the CreateDevice invocation... graphicsContext.CreateDevice(new ValidationLayer()); By default, the ValidationLayer use exception to notify any issue, but it is possible to change it: Notify Method Declaration Description Exception new ValidationLayer() Throws exception with each internal error and stop the execution. Trace new ValidationLayer(ValidationLayer.NotifyMethod.Trace) Display all errors in console without stopping the execution Event new ValidationLayer(ValidationLayer.NotifyMethod.Event) The ValidationLayer.Error event allow to obtains the error messages Initialize Swapchain Once you have the GraphicsContext you can use it to create the swapchain and use it to render on a surface. // Create a windows... var windowSystem = new Evergine.WindowsForms.FormsWindowsSystem(); var window = windowSystem.CreateWindow(windowsTitle, width, height); // Create a swapchain descriptor and assign the surface info... var swapChainDescriptor = new SwapChainDescription() { Width = window.Width, Height = window.Height, SurfaceInfo = info, ColorTargetFormat = PixelFormat.R8G8B8A8_UNorm, ColorTargetFlags = TextureFlags.RenderTarget | TextureFlags.ShaderResource, DepthStencilTargetFormat = PixelFormat.D24_UNorm_S8_UInt, DepthStencilTargetFlags = TextureFlags.DepthStencil, SampleCount = this.SampleCount, IsWindowed = true, RefreshRate = 60, SurfaceInfo = window.SurfaceInfo }; // Finally, create the swapchain... var swapChain = this.graphicsContext.CreateSwapChain(swapChainDescriptor); swapChain.VerticalSync = false; To create the surface first you need to select an UI technology: UI Class Windows Forms Evergine.Forms.FormsWindowsSystem WPF Evergine.WPF.WPFWindowsSystem SDL Evergine.SDL.SDLWindowsSystem Android Evergine.AndroidView.AndroidWindowsSystem iOS Evergine.iOSView.iOSWindowsSystem UWP Evergine.UWPView.UWPWindowsSystem WinUI Evergine.WinUI.WinUIWindowsSystem MixedReality Evergine.MixedReality.MixedRealityWindowsSystem Web Evergine.Web.WebWindowsSystem Create from scratch Visit the Low-Level test samples to learn how to create an application from scratch using this cross-platform API."
  },
  "manual/graphics/low_level_api/graphicspipeline.html": {
    "href": "manual/graphics/low_level_api/graphicspipeline.html",
    "title": "GraphicsPipeline | Evergine Doc",
    "keywords": "GraphicsPipeline Coming soon"
  },
  "manual/graphics/low_level_api/index.html": {
    "href": "manual/graphics/low_level_api/index.html",
    "title": "Low-level API | Evergine Doc",
    "keywords": "Low-level API Evergine uses a custom low level graphics API to send commands to the GPU. This is a cross-platform agnostic library to run on top of DirectX, Vulkan, OpenGL and Metal. In this section we will take a look to all the classes and objects used by Evergine to share data with the GPU. It is a new graphics API inspired on the latest advances on DirectX 12, Vulkan and Metal to get the maximum graphics performance when using once of this APIs but also with backward compatibility to support APIs like DirectX 11, OpenGL and WebGL. In this section GraphicsContext ResourceFactory Buffer Texture Sampler Swapchain Framebuffer QueryHeap"
  },
  "manual/graphics/low_level_api/queryheap.html": {
    "href": "manual/graphics/low_level_api/queryheap.html",
    "title": "QueryHeap | Evergine Doc",
    "keywords": "QueryHeap A query heap contains an array of GPU queries. A query heap allows batch a set of GPU queries to get better performance. Creation To create a QueryHeap, first you need to construct a QueryHeapDescription: QueryHeap queryHeap; uint maxQueries = 4; QueryHeapDescription desc = new QueryHeapDescription() { Type = QueryType.Timestamp, QueryCount = maxQueries, }; this.queryHeap = this.graphicsContext.Factory.CreateQueryHeap(ref desc); QueryType Value Description Timestamp Indicates the query is for high definition GPU and CPU timestamps. Occlusion Indicates the query is for depth/stencil occlusion counts. BinaryOcclusion Indicates the query is for a binary depth/stencil occlusion statistics. Timestamp queries You can obtain timestamps as part of a command list (rather than a CPU-side call on a command queue) via timestamp queries. How to use timestamp queries ulong[] results; var commandBuffer = this.commandQueue.CommandBuffer(); commandBuffer.Begin(); commandBuffer.WriteTimestamp(this.queryHeap, 0); commandBuffer.UpdateBufferData(this.constantBuffer, ref worldViewProj); commandBuffer.SetViewports(this.viewports); commandBuffer.SetScissorRectangles(this.scissors); var renderPassDescription = new RenderPassDescription(this.frameBuffer, ClearValue.Default); commandBuffer.BeginRenderPass(ref renderPassDescription); commandBuffer.SetGraphicsPipelineState(this.pipelineState); commandBuffer.SetResourceSet(this.resourceSet); commandBuffer.SetVertexBuffers(this.vertexBuffers); commandBuffer.Draw((uint)this.vertexData.Length / 2); commandBuffer.EndRenderPass(); commandBuffer.WriteTimestamp(this.queryHeap, 1); commandBuffer.End(); commandBuffer.Commit(); this.commandQueue.Submit(); this.commandQueue.WaitIdle(); this.queryHeap.ReadData(0, 4, this.results); How to show timestamp results this.surface.MouseDispatcher.DispatchEvents(); this.surface.KeyboardDispatcher.DispatchEvents(); commandBuffer.SetViewports(this.viewports); this.uiRenderer.NewFrame(gameTime); double gpuFrequency = this.graphicsContext.TimestampFrequency; double time1 = ((this.results[1] - this.results[0]) / gpuFrequency) * 1000.0; double time2 = ((this.results[3] - this.results[2]) / gpuFrequency) * 1000.0; ImGui.SetNextWindowSize(new System.Numerics.Vector2(300, 100)); ImGui.Begin(\"Timmings\"); ImGui.Text($\"Draw: { time1.ToString(\"0.0000\") } ms\"); ImGui.Text($\"ImGui: { time2.ToString(\"0.0000\") } ms\"); ImGui.End(); this.uiRenderer.Render(commandBuffer); Occlusion queries Hardware occlusion queries were one of the most eagerly awaited graphics hardware features in a long time. This feature makes it possible for an application to ask the 3D API whether or not any pixels would be drawn if a particular object were rendered. With this feature, applications can check whether or not the bounding boxes of complex objects are visible; if the bounds are occluded, the application can skip drawing those objects. QueryHeap creation uint maxQueries = 4; QueryHeapDescription desc = new QueryHeapDescription() { Type = QueryType.Occlusion, QueryCount = maxQueries, }; var queryHeap = this.graphicsContext.Factory.CreateQueryHeap(ref desc); How to use occlusion queries // Draw var commandBuffer = this.commandQueue.CommandBuffer(); commandBuffer.Begin(); commandBuffer.UpdateBufferData(this.constantBuffer0, ref viewProj); commandBuffer.UpdateBufferData(this.constantBuffer1, ref worldViewProj); commandBuffer.SetViewports(this.viewports); commandBuffer.SetScissorRectangles(this.scissors); var renderPassDescription = new RenderPassDescription(this.frameBuffer, ClearValue.Default); commandBuffer.BeginRenderPass(ref renderPassDescription); commandBuffer.SetGraphicsPipelineState(this.pipelineState); commandBuffer.SetResourceSet(this.resourceSet0); commandBuffer.SetVertexBuffers(this.vertexBuffers); commandBuffer.BeginQuery(this.queryHeap, 0); commandBuffer.Draw((uint)this.vertexData.Length / 2); commandBuffer.EndQuery(this.queryHeap, 0); commandBuffer.EndRenderPass(); commandBuffer.End(); commandBuffer.Commit(); this.commandQueue.Submit(); this.commandQueue.WaitIdle(); this.queryHeap.ReadData(0, 1, this.results); How to show occlusion results this.surface.MouseDispatcher.DispatchEvents(); this.surface.KeyboardDispatcher.DispatchEvents(); commandBuffer.SetViewports(this.viewports); this.uiRenderer.NewFrame(gameTime); ImGui.SetNextWindowSize(new System.Numerics.Vector2(300, 100)); ImGui.Begin(\"Occlusion Test\"); ImGui.Text($\"Samples: { this.results[0] } \"); ImGui.End(); this.uiRenderer.Render(commandBuffer);"
  },
  "manual/graphics/low_level_api/raytracingpipeline.html": {
    "href": "manual/graphics/low_level_api/raytracingpipeline.html",
    "title": "RaytracingPipeline | Evergine Doc",
    "keywords": "RaytracingPipeline Coming soon"
  },
  "manual/graphics/low_level_api/resourcefactory.html": {
    "href": "manual/graphics/low_level_api/resourcefactory.html",
    "title": "ResourceFactory | Evergine Doc",
    "keywords": "ResourceFactory ResourceFactory is the factory class responsible to create all low-level objects like a native Texture, Sampler, GraphicsPipeline among other things... Once you have the GraphicsContext instance you can use it to access to the ResourceFactory and start creating Low-Level objects. In this example, to create a VertexBuffer object: var vertexBufferDescription = new BufferDescription((uint)Unsafe.SizeOf<VertexPositionNormalTexture>() * (uint)vertexData.Length, BufferFlags.VertexBuffer, ResourceUsage.Default); var vertexBuffer = this.graphicsContext.Factory.CreateBuffer(vertexData, ref vertexBufferDescription); All the common Low-Level objects (textures, buffer, ...) are represented by abstract classes, and ResourceFactory allows you to create them in the same way for all the supported APIs. So, for example, a ResourceFactory of DX11GraphicsContext always will create DX11 graphics resources (DX11Texture, DX11Buffer and so on). Objects The complete list of objects that you can create using the ResourceFactory are: Buffer Texture Sampler Framebuffer Shader QueryHeap ResourceLayout GraphicsPipeline ComputePipeline RayTracingPipeline ResourceSet CommandQueue CommandBuffer"
  },
  "manual/graphics/low_level_api/resourcelayout.html": {
    "href": "manual/graphics/low_level_api/resourcelayout.html",
    "title": "ResourceLayout | Evergine Doc",
    "keywords": "ResourceLayout Coming soon"
  },
  "manual/graphics/low_level_api/resourceset.html": {
    "href": "manual/graphics/low_level_api/resourceset.html",
    "title": "ResourceSet | Evergine Doc",
    "keywords": "ResourceSet Coming soon"
  },
  "manual/graphics/low_level_api/sampler.html": {
    "href": "manual/graphics/low_level_api/sampler.html",
    "title": "Sampler | Evergine Doc",
    "keywords": "Sampler A Sampler State is a low level object that encapsulates how a texture will be sampled in your application. Creation To create a sampler, first you need to create the SamplerStateDescription struct: // Linear clamp sampler state var samplerDescription = new SamplerStateDescription() { Filter = TextureFilter.MinLinear_MagLinear_MipLinear, AddressU = TextureAddressMode.Clamp, AddressV = TextureAddressMode.Clamp, AddressW = TextureAddressMode.Clamp, MinLOD = -1000, // DirectX -float.MaxValue | OpenGL -1000 MaxLOD = 1000, // DirectX float.MaxValue | OpenGL 1000 MipLODBias = 0f, MaxAnisotropy = 1, ComparisonFunc = ComparisonFunction.Never, BorderColor = SamplerBorderColor.OpaqueWhite, }; var samplerState = this.graphicsContext.Factory.CreateSamplerState(ref samplerDescription); SamplerStateDescription Property Type Description Filter TextureFilter Filtering method to use when sampling a texture. AddressU TextureAddressMode Method to use for resolving a u texture coordinate that is outside the 0 to 1 range. AddressV TextureAddressMode Method to use for resolving a v texture coordinate that is outside the 0 to 1 range. AddressW TextureAddressMode Method to use for resolving a w texture coordinate that is outside the 0 to 1 range. MipLODBias float Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5. MaxAnisotropy uint Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is specified in Filter. Valid values are between 1 and 16. ComparisonFunc ComparisonFunction A function that compares sampled data against existing sampled data. BorderColor SamplerBorderColor Border color. MinLOD float Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. MaxLOD float Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. TextureFilter Defines texture filtering modes for a texture stage. Value Description MinPoint_MagPoint_MipPoint Use point sampling for minification, magnification, and mip-level sampling. MinPoint_MagPoint_MipLinear Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. MinPoint_MagLinear_MipPoint Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. MinPoint_MagLinear_MipLinear Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. MinLinear_MagPoint_MipPoint Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. MinLinear_MagPoint_MipLinear Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. MinLinear_MagLinear_MipPoint Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. MinLinear_MagLinear_MipLinear Use linear interpolation for minification, magnification, and mip-level sampling. Anisotropic Use anisotropic interpolation for minification, magnification, and mip-level sampling. TextureAddressMode Your application can assign texture coordinates to any vertex of any primitive. Typically, the u- and v-texture coordinates that you assign to a vertex are in the range of 0.0 to 1.0 inclusive. However, by assigning texture coordinates outside that range, you can create certain special texturing effects. Value Description Wrap Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times. Mirror Flip the texture at every (u,v) integer junction. For u values between 0 and 1. Clamp Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. Border Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in SamplerStateDescription. Mirror_One Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. MaxAnisotropy Retrieves a value that indicates the maximum valid value for anisotropic filtering. Valid values are between 1 and 16. Presets To make the sampler construction easy, you can use Evergine.Common.SamplerStates to describe the most common sampler descriptions: Value PointClamp PointWrap PointMirror LinearClamp LinearWrap LinearMirror AnisotropicClamp AnisotropicWrap AnisotropicMirror Default initialization public void SetDefault() { this.Filter = TextureFilter.MinLinear_MagLinear_MipLinear; this.AddressU = TextureAddressMode.Clamp; this.AddressV = TextureAddressMode.Clamp; this.AddressW = TextureAddressMode.Clamp; this.MinLOD = -1000; // DirectX -float.MaxValue | OpenGL -1000 this.MaxLOD = 1000; // DirectX float.MaxValue | OpenGL 1000 this.MipLODBias = 0f; this.MaxAnisotropy = 1; this.ComparisonFunc = ComparisonFunction.Never; this.BorderColor = SamplerBorderColor.OpaqueWhite; } Presets initialization PointClamp = SamplerStateDescription.Default; PointClamp.Filter = TextureFilter.MinPoint_MagPoint_MipPoint; PointWrap = SamplerStateDescription.Default; PointClamp.Filter = TextureFilter.MinPoint_MagPoint_MipPoint; PointWrap.AddressU = TextureAddressMode.Wrap; PointWrap.AddressV = TextureAddressMode.Wrap; PointWrap.AddressW = TextureAddressMode.Wrap; PointMirror = SamplerStateDescription.Default; PointClamp.Filter = TextureFilter.MinPoint_MagPoint_MipPoint; PointMirror.AddressU = TextureAddressMode.Mirror; PointMirror.AddressV = TextureAddressMode.Mirror; PointMirror.AddressW = TextureAddressMode.Mirror; LinearClamp = SamplerStateDescription.Default; LinearWrap = SamplerStateDescription.Default; LinearWrap.AddressU = TextureAddressMode.Wrap; LinearWrap.AddressV = TextureAddressMode.Wrap; LinearWrap.AddressW = TextureAddressMode.Wrap; LinearMirror = SamplerStateDescription.Default; LinearMirror.AddressU = TextureAddressMode.Mirror; LinearMirror.AddressV = TextureAddressMode.Mirror; LinearMirror.AddressW = TextureAddressMode.Mirror; AnisotropicClamp = SamplerStateDescription.Default; AnisotropicClamp.Filter = TextureFilter.Anisotropic; AnisotropicWrap = SamplerStateDescription.Default; AnisotropicWrap.Filter = TextureFilter.Anisotropic; AnisotropicWrap.AddressU = TextureAddressMode.Wrap; AnisotropicWrap.AddressV = TextureAddressMode.Wrap; AnisotropicWrap.AddressW = TextureAddressMode.Wrap; AnisotropicMirror = SamplerStateDescription.Default; AnisotropicMirror.Filter = TextureFilter.Anisotropic; AnisotropicMirror.AddressU = TextureAddressMode.Mirror; AnisotropicMirror.AddressV = TextureAddressMode.Mirror; AnisotropicMirror.AddressW = TextureAddressMode.Mirror;"
  },
  "manual/graphics/low_level_api/shader.html": {
    "href": "manual/graphics/low_level_api/shader.html",
    "title": "Shader | Evergine Doc",
    "keywords": "Shader Coming soon"
  },
  "manual/graphics/low_level_api/swapchain.html": {
    "href": "manual/graphics/low_level_api/swapchain.html",
    "title": "Swapchain | Evergine Doc",
    "keywords": "Swapchain A swap chain is a collection of buffers that are used for displaying frames to the user. Each time an application presents a new frame for display, the first buffer in the swap chain takes the place of the displayed buffer. This process is called swapping or flipping. A graphics adapter holds a pointer to a surface that represents the image being displayed on the monitor, called a front buffer. As the monitor is refreshed, the graphics card sends the contents of the front buffer to the monitor to be displayed. However, this leads to a problem when rendering real-time graphics. The heart of the problem is that monitor refresh rates are very slow in comparison to the rest of the computer. Common refresh rates range from 60 Hz (60 times per second) to 100 Hz. If your application is updating the front buffer while the monitor is in the middle of a refresh, the image that is displayed will be cut in half with the upper half of the display containing the old image and the lower half containing the new image. This problem is referred to as tearing. Creation To create a Swapchain, first you need to create the SwapChainDescription struct: // Create a windows... var windowSystem = new Evergine.WindowsForms.FormsWindowsSystem(); var window = windowSystem.CreateWindow(windowsTitle, width, height); // Create a swapchain descriptor and assign the surface info... var swapChainDescriptor = new SwapChainDescription() { Width = window.Width, Height = window.Height, SurfaceInfo = info, ColorTargetFormat = PixelFormat.R8G8B8A8_UNorm, ColorTargetFlags = TextureFlags.RenderTarget | TextureFlags.ShaderResource, DepthStencilTargetFormat = PixelFormat.D24_UNorm_S8_UInt, DepthStencilTargetFlags = TextureFlags.DepthStencil, SampleCount = this.SampleCount, IsWindowed = true, RefreshRate = 60, SurfaceInfo = window.SurfaceInfo }; // Finally, create the swapchain... var swapChain = this.graphicsContext.CreateSwapChain(swapChainDescriptor); swapChain.VerticalSync = false; SwapChainDescription Property Type Description SurfaceInfo SurfaceInfo Surface information. Width uint The swapchain buffers width. Height uint The swapchain buffers height. RefreshRate uint The screen refresh rate. ColorTargetFormat PixelFormat The pixel format of the color target. ColorTargetFlags TextureFlags The color texture flags for binding to pipeline stages. The flags ca be combined by a logical OR. DepthStencilTargetFormat PixelFormat The pixel format of the depthstencil target. DepthStencilTargetFlags TextureFlags The depth texture flags for binding to pipeline stages. The flags ca be combined by a logical OR. SampleCount TextureSampleCount The sampler count of this swapchain. IsWindowed bool Whether the output is in windowed mode. TextureFlags Identifies how to bing a texture. TextureFlags Description None Not specified, Default value. ShaderResource A texture usable as a ShaderResourceView. RenderTarget A texture usable as render target. UnorderedAccess A texture usable as an unordered access buffer. DepthStencil A texture usable as a depth stencil buffer. GenerateMipmaps Enables MIP map generation by GPU. TextureSampleCount Describes the number of samples to use in a Texture. TextureSampleCount Description None Not multisample. Default value. Count2 Multisample count of 2 pixels. Count4 Multisample count of 4 pixels. Count8 Multisample count of 8 pixels. Count16 Multisample count of 16 pixels. Count32 Multisample count of 32 pixels."
  },
  "manual/graphics/low_level_api/texture.html": {
    "href": "manual/graphics/low_level_api/texture.html",
    "title": "Texture | Evergine Doc",
    "keywords": "Texture A Texture object in a low-level API is a 2D (even 1D and 3d textures exists) used to provide details to objects or to map information. Please, reade the Graphics Texture section for high level asset and how to use in Evergine Studio. Creation To create a texture, first you need to create the TextureDescription struct: uint expectedSize = 256; ResourceUsage expectedUsage = ResourceUsage.Default; var description = new TextureDescription() { Type = TextureType.Texture2D, Width = expectedSize, Height = expectedSize, Depth = 1, ArraySize = 1, Faces = 1, Usage = expectedUsage, CpuAccess = ResourceCpuAccess.None, Flags = TextureFlags.None, Format = expectedFormat, MipLevels = 1, SampleCount = TextureSampleCount.None, }; var texture = this.GraphicsContext.Factory.CreateTexture(ref description); TextureDescription Property Type Description Type TextureType Texture type TextureType. Format PixelFormat Texture format PixelFormat. Width uint Texture width (in texels). Height uint Texture height (in texels). Depth uint Texture Depth (in texels). ArraySize uint Number of textures in the texture array. Faces uint Number of texture faces useful in TextureCube and TextureCubeArray. MipLevels uint The maximum number of mipmap levels in the texture. Flags TextureFlags The texture flags TextureFlags. Usage ResourceUsage Value that identifies how the texture is to be read from and written to. SampleCount TextureSampleCount The number of samples in this texture. CpuAccess ResourceCpuAccess Flags ResourceCpuAccess to specify the type of CPU access allowed. TextureType Specify the texture type. TextureType Description Texture2D Represent a two dimensions texture. Texture2DArray Represent an array of 2D textures. Texture1D Represent a one dimension texture. Texture1DArray Represent an array of 1D textures. TextureCube Represent a 6 faces texture cube. TextureCubeArray Represent an array of textures cube. Texture3D Represent a three dimensions texture. PixelFormat Specify the bytes format used in each texel. The most common format are: PixelFormat Description R8_UNorm A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel. R8G8_UNorm A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8B8A8_UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha. R8G8B8A8_UNorm_SRgb A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha. R16_Float A single-component, 16-bit floating-point format that supports 16 bits for the red channel. R16_SInt A single-component, 16-bit signed-integer format that supports 16 bits for the red channel. R16_UInt A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel. R16_UNorm A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel. R16G16_Float A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16_SInt A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16_UInt A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16B16A16_Float A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha. R16G16B16A16_SInt A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha. R16G16B16A16_UInt A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha. R32_Float A single-component, 32-bit floating-point format that supports 32 bits for the red channel. R32_SInt A single-component, 32-bit signed-integer format that supports 32 bits for the red channel. R32_UInt A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel. R32G32_Float A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32_SInt A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32_UInt A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32B32_Float A three-component, 96-bit floating-point format that supports 32 bits per color channel. R32G32B32_SInt A three-component, 96-bit signed-integer format that supports 32 bits per color channel. R32G32B32_UInt A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel. R32G32B32A32_Float A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. 1 R32G32B32A32_SInt A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. 1 R32G32B32A32_UInt A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. 1 Note See the PixelFormat enum at Evergine.Common namespace for the complete list. TextureFlags Identifies how to bing a texture. TextureFlags Description None Not specified, Default value. ShaderResource A texture usable as a ShaderResourceView. RenderTarget A texture usable as render target. UnorderedAccess A texture usable as an unordered access buffer. DepthStencil A texture usable as a depth stencil buffer. GenerateMipmaps Enables MIP map generation by GPU. ResourceUsage Identifies expected resource usage during rendering. ResourceUsage Description Default A resource that requires read and write access by the GPU, Default value. Immutable A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. Dynamic A resource that is accessible by both the GPU (read only) and the CPU (write only). Staging A resource that supports data transfer (copy) from the GPU to the CPU. TextureSampleCount Describes the number of samples to use in a Texture. TextureSampleCount Description None Not multisample. Default value. Count2 Multisample count of 2 pixels. Count4 Multisample count of 4 pixels. Count8 Multisample count of 8 pixels. Count16 Multisample count of 16 pixels. Count32 Multisample count of 32 pixels. ResourceCpuAccess Specifies the types of CPU access allowed for a resource. ResourceCpuAccess Description None Not specified, Default value. Write The CPU can be write this resource. Read The CPU can be read this resources. Usage examples How to create and fill a texture by code uint expectedSize = 256; var description = new TextureDescription() { Type = TextureType.Texture2D, Width = expectedSize, Height = expectedSize, Depth = 1, ArraySize = 1, Faces = 1, Usage = ResourceUsage.Default, CpuAccess = ResourceCpuAccess.None, Flags = TextureFlags.None, Format = PixelFormat.R8G8B8A8_UNorm, MipLevels = 1, SampleCount = TextureSampleCount.None, }; float[] data = Enumerable.Range(0, (int)(expectedSize * expectedSize)).Select(i => (float)i).ToArray(); var rowPitch = Common.Graphics.Helpers.GetRowPitch(expectedSize, PixelFormat.R8G8B8A8_UNorm); var slicePitch = Common.Graphics.Helpers.GetSlicePitch(rowPitch, expectedSize, PixelFormat.R8G8B8A8_UNorm); var pinnedHandle = GCHandle.Alloc(data, GCHandleType.Pinned); IntPtr dataPointer = Marshal.UnsafeAddrOfPinnedArrayElement(data, 0); var databox = new DataBox[] { new DataBox(dataPointer, rowPitch, slicePitch) }; var texture = this.GraphicsContext.Factory.CreateTexture(databox, ref description); pinnedHandle.Free(); How to update a default texture uint expectedSize = 256; ResourceUsage expectedUsage = ResourceUsage.Default; PixelFormat expectedFormat = PixelFormat.R8G8B8A8_UNorm; var description = new TextureDescription() { Type = TextureType.Texture2D, Width = expectedSize, Height = expectedSize, Depth = 1, ArraySize = 1, Faces = 1, Usage = expectedUsage, CpuAccess = ResourceCpuAccess.None, Flags = TextureFlags.None, Format = expectedFormat, MipLevels = 1, SampleCount = TextureSampleCount.None, }; var texture = this.GraphicsContext.Factory.CreateTexture(ref description); float[] data = Enumerable.Range(0, (int)(expectedSize * expectedSize)).Select(i => (float)i).ToArray(); this.GraphicsContext.UpdateTextureData(texture, data); texture.Dispose(); How to copy from other device texture uint expectedSize = 256; var description = new TextureDescription() { Type = TextureType.Texture2D, Width = expectedSize, Height = expectedSize, Depth = 1, ArraySize = 1, Faces = 1, Usage = ResourceUsage.Default, CpuAccess = ResourceCpuAccess.None, Flags = TextureFlags.None, Format = PixelFormat.R8G8B8A8_UNorm, MipLevels = 1, SampleCount = TextureSampleCount.None, }; var texture = this.GraphicsContext.Factory.CreateTexture(ref description); float[] data = Enumerable.Range(0, 256 * 256).Select(i => (float)i).ToArray(); this.GraphicsContext.UpdateTextureData(texture, data); var textureCopy = this.GraphicsContext.Factory.CreateTexture(ref description); var queue = this.GraphicsContext.Factory.CreateCommandQueue(); var command = queue.CommandBuffer(); command.Begin(); command.CopyTextureDataTo(texture, textureCopy); command.End(); command.Commit(); queue.Submit(); queue.WaitIdle(); texture.Dispose(); textureCopy.Dispose(); queue.Dispose(); How to set data in a staging texture uint expectedSize = 256; var description = new TextureDescription() { Type = TextureType.Texture2D, Width = expectedSize, Height = expectedSize, Depth = 1, ArraySize = 1, Faces = 1, Usage = ResourceUsage.Staging, CpuAccess = ResourceCpuAccess.Write | ResourceCpuAccess.Read, Flags = TextureFlags.None, Format = PixelFormat.R8G8B8A8_UNorm, MipLevels = 1, SampleCount = TextureSampleCount.None, }; var texture = this.GraphicsContext.Factory.CreateTexture(ref description); float[] data = Enumerable.Range(0, (int)(expectedSize * expectedSize)).Select(i => (float)i).ToArray(); this.GraphicsContext.UpdateTextureData(texture, data); texture.Dispose(); How to map and read a staging texture uint expectedSize = 256; var description = new TextureDescription() { Type = TextureType.Texture2D, Width = expectedSize, Height = expectedSize, Depth = 1, ArraySize = 1, Faces = 1, Usage = ResourceUsage.Staging, CpuAccess = ResourceCpuAccess.Write | ResourceCpuAccess.Read, Flags = TextureFlags.None, Format = PixelFormat.R8G8B8A8_UNorm, MipLevels = 1, SampleCount = TextureSampleCount.None, }; var texture = this.GraphicsContext.Factory.CreateTexture(ref description); float[] data = Enumerable.Range(0, (int)(expectedSize * expectedSize)).Select(i => (float)i).ToArray(); this.GraphicsContext.UpdateTextureData(texture, data); var mappedResource = this.GraphicsContext.MapMemory(texture, MapMode.Read); for (int y = 0; y < expectedSize; y++) { for (int x = 0; x < expectedSize; x++) { int offset = ((y * ((int)mappedResource.RowPitch / sizeof(float))) + x) * sizeof(float); float* pointer = (float*)(mappedResource.Data + offset); int index = (y * (int)expectedSize) + x; Assert.Equal(data[index], *pointer); } } this.GraphicsContext.UnmapMemory(texture); texture.Dispose();"
  },
  "manual/graphics/materials/create_materials.html": {
    "href": "manual/graphics/materials/create_materials.html",
    "title": "Create Materials | Evergine Doc",
    "keywords": "Create Materials Materials describe the appearance of object surfaces and how they react to light. Create a Material asset in Evergine Studio You can create a material click button on from Assets Details panel to deploy a create menu options and click on the option \"Create material\" Inspect materials in Asset Details You can find the material assets in the Assets Details panel when you select a folder in the Project Explorer. Material files in content directory The material file has the .wemt extension. Create a new Material from code The following sample code can be used to create a new material and apply to an entity in your scene. In that case the material will be created using the StandardEffect effect and the Opaque render layer: protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); // Load the effect... Effect standardEffect = assetsService.Load<Effect>(EvergineContent.Effects.StandardEffect); // Load a Render Layer description... RenderLayerDescription layer = assetsService.Load<RenderLayerDescription>(EvergineContent.RenderLayers.Opaque); // Create your own material... Material material = new Material(standardEffect); material.LayerDescription = layer; // Apply to an entity Entity primitive = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new SphereMesh()) .AddComponent(new MeshRenderer()); this.Managers.EntityManager.Add(primitive); }"
  },
  "manual/graphics/materials/index.html": {
    "href": "manual/graphics/materials/index.html",
    "title": "Materials | Evergine Doc",
    "keywords": "Materials Materials describe the appearance of object surfaces and how they react to light. This allows you to simulate properties like roughness, reflection, specular to create realistic materials of the real world as metal, plastic, concrete, etc. Matertial and Effects The materials are based on an Effect so you first need to create one or use an existing Effect. While an effect defines all the properties and possibilities, a Material sets specific values for each property defined in the associated effect. Default Materials Default Evergine project template imports the Evergine.Core package and this package includes the Default Material that you can use to simulate a large amount of surfaces. Materials are a type of asset and have a dedicated Editor Material Editor. In this section Create Materials Using Materials Material Editor Material Decorators"
  },
  "manual/graphics/materials/material_decorators.html": {
    "href": "manual/graphics/materials/material_decorators.html",
    "title": "Material Decorators | Evergine Doc",
    "keywords": "Material Decorators Material Decorator is a C# class that simplify the use of custom materials to the users. It allows to define how the effect resource layout elements are shown in the Material Editor. To generate material decorator of your effects you need to use the Effect Editor. Generate Material Decorator From the Effect Editor toolbox push the button to generate the Material decorator. A new c# class will be created in your C# solution that you will see from Visual Studio Example Parting from the following effect resource layout block (This is the section marked in the effect code with the [Begin_ResourceLayout] and [End_ResourceLayout] tags): [Begin_ResourceLayout] cbuffer PerDrawCall : register(b0) { float4x4 WorldViewProj : packoffset(c0); [WorldViewProjection] }; cbuffer Parameters : register(b1) { float3 Color : packoffset(c0); [Default(0.3, 0.3, 1.0)] }; [End_ResourceLayout] The generated Material Decorator will be the following: //------------------------------------------------------------------------------ // <auto-generated> // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // </auto-generated> //------------------------------------------------------------------------------ namespace DocumentationWorkBench.Effects { using Evergine.Common.Graphics; using Evergine.Framework.Graphics; using Evergine.Framework.Graphics.Effects; using Evergine.Mathematics; [Evergine.Framework.Graphics.MaterialDecoratorAttribute(\"67d3f67f-e1f0-4075-894d-5a58d3697fb6\")] public partial class MyGraphicEffect : Evergine.Framework.Graphics.MaterialDecorator { public MyGraphicEffect(Evergine.Framework.Graphics.Effects.Effect effect) : base(new Material(effect)) {} public MyGraphicEffect(Evergine.Framework.Graphics.Material material) : base(material) {} public Evergine.Mathematics.Matrix4x4 PerDrawCall_WorldViewProj { get { return this.material.CBuffers[0].GetBufferData<Evergine.Mathematics.Matrix4x4>(0);} set { this.material.CBuffers[0].SetBufferData(value, 0); } } public Evergine.Mathematics.Vector3 Parameters_Color { get { return this.material.CBuffers[1].GetBufferData<Evergine.Mathematics.Vector3>(0); } set { this.material.CBuffers[1].SetBufferData(value, 0); } } } } The above Material decorator example shows how the effect resource layout is translated to get/set class properties to make easier use of the effect from code. Now when you open a material asset from Material Editor and the material uses MyGraphicEffect its properties as: Customize Material Decorators Editing the material decorator c# class you can modify how the properties are shown in the Material Editor. For example, the Color property appears as Vector3 property because this is the type using in the HLSL effect code. You can change it to use a Color picker to configure this parameter with the following code change: public Evergine.Common.Graphics.Color Parameters_Color { get { Vector3 v = this.material.CBuffers[1].GetBufferData<Vector3>(0); return Color.FromVector3(ref v); } set { this.material.CBuffers[1].SetBufferData(value.ToVector3(), 0); } } After this change, if you reload the project in the Evergine Studio, the Material Editor shows its color property as:"
  },
  "manual/graphics/materials/material_editor.html": {
    "href": "manual/graphics/materials/material_editor.html",
    "title": "Material Editor | Evergine Doc",
    "keywords": "Material Editor Material Editor allows editing the material assets. Double click over a material asset shown in Assets Details will open this editor. The editor is composed of 3 main parts: Viewport Shows the result of the current material configuration. The viewport has a toolbox on the top side that allows change the primitive shown or change the background color. The primitive displays in the viewport are lighting by two lights (front and back) that you can move using the mouse. Actions Description Left mouse button To rotate the camera around the primitive. Right mouse button To rotate two lights around the primitive. Mouse wheel To make zoom in/out camera. Effect The properties of the material will be defined by the effect used. So first to edit or configure your material you need the select the effect that you want to use. The Standard effect is the default effect used when you create a new material. Properties The properties panel displays all effect properties or the Material decorator properties associated with the effect. You can configure your materials to change their properties and the result will be shown on the Viewport."
  },
  "manual/graphics/materials/using_materials.html": {
    "href": "manual/graphics/materials/using_materials.html",
    "title": "Using Materials | Evergine Doc",
    "keywords": "Using Materials In this document you will learn how to load and use Materials in your applications. Load Material from code The following sample code can be used to instantiate an existing material asset and apply to an entity in your scene. protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); // Load Material Material defaultMaterial = assetsService.Load<Material>(EvergineContent.Materials.DefaultMaterial); // Apply to an entity Entity primitive = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = defaultMaterial }) .AddComponent(new SphereMesh()) .AddComponent(new MeshRenderer()); this.Managers.EntityManager.Add(primitive); } How to apply material to an entity from Evergine Studio. Select an entity from Viewport or Entities Hierarchy and then the Entity Details panel shows the entity component list. To apply a new material set the Material property in the Material Component of your entity."
  },
  "manual/graphics/meshes.html": {
    "href": "manual/graphics/meshes.html",
    "title": "Meshes | Evergine Doc",
    "keywords": "Meshes Coming soon"
  },
  "manual/graphics/models/create_model_from_code.html": {
    "href": "manual/graphics/models/create_model_from_code.html",
    "title": "How to create a model from code | Evergine Doc",
    "keywords": "How to create a model from code Coming soon"
  },
  "manual/graphics/models/import_model.html": {
    "href": "manual/graphics/models/import_model.html",
    "title": "Import a Model | Evergine Doc",
    "keywords": "Import a Model In Evergine Studio, importing an 3d model file will create a Model asset, as explained in this article. Embedded assets Depending of the 3d model file, when importing a Model it may also import other embedded assets. A new folder will be created at the same level than the 3d file, with the name [ModelName]_Embedded (So, for example, the file car.fbx will generate a folder named car_Embedded). Asset Location Description Material [ModelName]_Embedded/Materials The most common one. Every material that the 3d file uses is generated as a specific Material asset and referenced into the Model. Texture [ModelName]_Embedded/Textures Some 3d file formats can embed textures. For every embedded Texture an asset is generated. Sampler [ModelName]_Embedded/Samplers Some 3d file formats specify the sampler states for their textures. In this case Samplers are generated. Inspect Models in Asset Details You can find the model assets in the Assets Details panel when you select a folder in the Project Explorer. The picture shows both the Model asset and the Embededed folder for all the generated assets. Model files in content directory Models imported in Evergine create an aditional metadata .wemd file. Supported formats: Evergine supports the following model formats: Extension Description .gltf, .glb Open source format. Kronos Group created this format for 3D web, AR, VR, games and 3D advertising. It’s the first really well-defined standard for 3D. This file format supports geometry, materials, textures, colors, and animations. This includes PBR (Physical Based Rendering). GLTF is based on JSON, so it stores some data in external files like textures (JPEG or PNG), shaders (GLSL), or geometry and animation data (BIN). GLB files store all this data internally. The Khronos groups is continually improving and updating this file format. It is quickly becoming the standard for 3D shopping. .fbx FBX is a proprietary 3D file format. AutoDesk then purchased them in 2006 and continued supporting FBX. It is widely used in the film and video game industry. It supports geometry, appearance (color and texture), as well as animations (skeletal and morphs). FBX is most popular for animation and is used as an exchange format between different programs like Maya, 3DSMax, AutoCAD, Roman’s CAD, and others. .obj An OBJ file contains information about the geometry of 3D objects. Developers use the file format for exchanging information and in CAD and 3D printing applications. OBJ files can support unlimited colors, and one file can define multiple objects. The current version is 3.0. The objects in an OBJ file are defined by polygon faces and normals, curves, texture maps, and surfaces. OBJ is a vector file, which makes the defined objects scalable. .3ds A 3DS file is a 3D image format used by Autodesk 3D Studio. It contains mesh data, material attributes, bitmap references, smoothing group data, viewport configurations, camera locations, and lighting information. 3DS files may also include object animation data. .dae A DAE file is a Digital Asset Exchange file format that is used for exchanging data between interactive 3D applications. This file format is based on the COLLADA (COLLAborative Design Activity) XML schema which is an open standard XML schema for the exchange of digital assets among graphics software applications."
  },
  "manual/graphics/models/index.html": {
    "href": "manual/graphics/models/index.html",
    "title": "Models | Evergine Doc",
    "keywords": "Models Models are files that contains 3d objects like characters, objects, and all kind of elements. Evergine supports importing models created by 3D editing software (like 3ds Max, Blender or CAD software like Solidworks.) but also supports procedural model generation. Models are crucial assets in every graphical application because can provide high quality and realism. In Evergine a Model is a graphical element that combines multiple parts to conform a full 3D object in a scene. It can contains the following parts: Node Hierarchy. MeshContainers Material references. Skinning information. Animation Clips Node Hierarchy A Model contains a node graph that covers all the objects of the 3d model. They are covered in the NodeContent class. They can have geometry or just serve as dummy element, but all of them contains a transform information (position, orientation and scale) and a list of children. Model contains the hierarchy in these two properties: Property Description AllNodes The list of all the NodeContents, whether they are in the root level or not. RootNodes The indices of the NodeContent elements of the AllNodes list that contains the nodes at root level (they don't have a parent). For example, if we have this node hierarchy: A Model would have them stored in this way: NodeContent The NodeContent refers to the class that represents one node. It contains the basic information of a node of a 3d model: Property Description Name Name of the node Children Array of the NodeContent children of the node. Translation Local Vector3 translation of the node. Orientation Local Quaternion orientation of the node. Scale Local Vector3 scale of the node. Mesh MeshContainer reference of the node. That means the node has geometry attached to it. null if the node doesn't have geometry. Skin Reference of a SkinContent element, meaning the node is a skinned mesh. null if the node is not skinned. MeshesContainers In a Model mesh containers are where the 3d geometry is stored. It usually represents one full object, and it can contains one or more Meshes (see this section for more information.). The main reason for the MeshContainer concept is that a geometry attached to a node can contain multiple sub-elements with a different material each of them. One MeshContainer can be referenced by one or more nodes, making the model more memory efficient. Property Description Name Name of the mesh container. Skin Reference of the SkinContent for skinning information (if it's the case). BoundingBox The Bounding box of the mesh. Meshes List of the meshes of this container Materials The model also contain a list of a tuple containing the material id and the material name referenced by its meshes. The Mesh class contains a parameter called MaterialIndex which tells us the index of this list we're refering to. Skinning Information Evergine supports Skinning animation. With this method a geometry is deformed following the transformations of a set of bones. To support it the model class contains an array of SkinContent class, that represents the skinning information of a geometry. Every MeshContainer and Node that as a skinned mesh references one of the elements of the array. The SkinContent class contain this information: Property Description Name Name of the skinning content. Nodes Array of integer that contain the indices of the AllNodes list of the Model class. They are the bone nodes of the skeleton. InverseBindPoses Array of Matrix4x4. For every node of the skeleton there is a matrix in that contains the inverse bind pose relative to its parent. RootJoint Int that represents the index in the Nodes array of the root bone of the skinning. Using this properties animating the nodes referenced by this SkinContent will animate the geometry accordingly. In order for the skinned mesh to work properly, the Vertex Buffer of the skinned mesh needs the following fields: Semantic Type Description BoneIndices ´int4short´ Vector that contains the indices of the bones (from the Nodes list) affected by this vertex. BoneWeights float4 For every bone from he previous field, the weight indicates the percentaje of the box transforms that applies to this vertex. Animations In Evergine model animation is achieved by animating nodes. If those nodes are part of a skinning bones, it will also animate the skinned mesh accordingly. In this section Import Models Using Model Level of Detail Model Editor"
  },
  "manual/graphics/models/level_of_detail.html": {
    "href": "manual/graphics/models/level_of_detail.html",
    "title": "Level of Detail (LOD) for models | Evergine Doc",
    "keywords": "Level of Detail (LOD) for models The Level of detail (LOD) is a technique which reduces the number of GPU operations that Evergine requires to render distant models. This technique allows Evergine to reduce the model complexity it renders for an Entity based on its distance from the camera. It is possible to configure LOD levels in your external 3D modeling application and Evergine automatically creates and configures the required Entity and components for you when you drag&drop the model into a scene. The representation inside the hierarchy tree will be a parent entity with one child entity for every LOD defined level. The parent entity must be contained in a LODGroup component which allows you to configure all the parameters to correctly render this model depending on the distance to the camera and each child will have a LODEntry component with the information required by the LODGroup to define each level. LOD Levels A LOD level in a model defines which meshes (or materials) Evergine will render that model. LOD Levels are identified by an index, where Level 0 is the most detailed level. LOD selection Evergine select a LOD Level of a model depending on the area covered by this model in the camera. Examples: If the model is too close to the camera, we select the lowest LOD (more details). In that case, the model cover the 80% of the screen: If the model is far away, it appears smaller, and because of this, Evergine will select highest LOD levels. In that case LOD 1 is selected because the model is now at 15% of screen coverage: Here is the same example in movement: LOD Components To setup LOD in your entities, you need to use LODGroup and LODEntry components. LODGroup The LODGroup component manages the Level of Detail of the owner's entity. It will collect all LODEntry components defined in the entity hierarchy to conform the meshes assigned to each LOD Levels. They will calculate the screen coverage of the meshes in the camera, and select the properly level accordingly. Property Default Description LOD Levels 0.25, 12.5, 6.25, ... Indicates the minimum screen coverage required per each LOD Level (for example, by default LOD 0 requires that the entity covers at least 25% of the screen). LOD Bias 1 This property is used as a factor to the calculated screen coverage. This will be used to increase or reduce the overall LOD levels. For example, a LOD Bias of 0.5 cause that a model with a screen coverage of 40% is processed as 20%. In general terms, values lower than 1 tend to incrase the LOD levels, and values greater than 1 will produce of lower LOD levels. LODEntry You need to add a LODEntry component to assign a LOD level to a specified entity with a Mesh. This component requires a MeshRenderer component, which will enable or disable depending the overal LOD Level. By default, when a LOD Level is selected, it will enable all LODEntry MeshRenderer associated components, and they will disable the others LODEntry MeshRenderers. Property Default Description LOD 0 Indicates the LOD Level assigned to this entity DisableEntity false If this value is true, it will disable or enable the entire Entity, instead of only enable or disable the MeshRenderer. Importing LOD Models You can create models with different levels of details in an external 3D application for use Evergine's LOD system. If you name these meshes (and nodes) correctly, Evergine automatically creates and configures an Entity with LODGroup and LODEntry components for them when it imports the Model. To import a Model with LOD level into Evergine, you must do the following: In your external 3D application (Blender for example), follow the application's process to create as many LOD meshes as you need. Name the meshes according to the following naming convention: ExampleMeshName_LOD0 for the first LOD level (the most detailed version) ExampleMeshName_LOD1 ExampleMeshName_LOD2 Export your Model as a compatible Evergine model format (.glb or .fbx for example) Import the model into Evergine. Evergine recognizes the grouped Meshes and naming convention, and automatically creates LODGroup and LODEntry components when the model is instantiated in the scene. This is an example of a model in Blender with 4 LOD Level defined:"
  },
  "manual/graphics/models/model_editor.html": {
    "href": "manual/graphics/models/model_editor.html",
    "title": "Model Editor | Evergine Doc",
    "keywords": "Model Editor Model Editor allows the editing of model assets. Double click over a Model asset shown in Assets Details will open this editor. The editor is composed of 5 main parts: Viewport Shows the Model with the current configuration. If the model is animated, it will show the current animation state of the animation toolbar. Toolbar Helps with the model visualization. Has the following options: Item Description Toggles the Grid visualization. / Toggles the visualization from Solid (default) to Wireframe. Toggles the Bounding box visualization of the model. Toggles the Hierarchy visualization of the model. Toggles the normals visualization of the vertices. Toggles the UV checker visualization of the model. Resets the camera position. Changes the background color. ##Playback controls In case that the model has animations, the Playback Toolbar allows to play the selected clip. Control Description / Plays / Stop the current clip animationS. The timeline slider. The handle will mark the current time in the animation, and its position can be modified. Controls the Speed Factor of the reproduction. By default is 1.00. Properties Panel with all the Model properties. They don't depend on the profile. Property Description SwapSwindingOrder Flips the normals of the model when activated.. GenerateTangentSpace When checked will generate the tangent coordinates of every vertex. Useful when dealing with normal mapping. ExportAnimations For exporting the animation information of the model. ExportAsRaw Will export the model as the source file (.fbx for example), instead of creating a binary Evergine asset.. Animation clip properties For every animation contained in the model, it will show the following information. Property Description Index The animation order. Name the name of the clip. This string will be used in the Animation3D when we want to play the animation. Duration Timestamp of the duration."
  },
  "manual/graphics/models/using_models.html": {
    "href": "manual/graphics/models/using_models.html",
    "title": "Using Models | Evergine Doc",
    "keywords": "Using Models In this document you will learn how to load and use Models in your applications. Load Model from code The following sample code can be used to instantiate an existing Model asset (camera.fbx in this case) into your scene, creating a entity hierarchy. protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); // Load Model assets Model cameraModel = assetsService.Load<Model>(EvergineContent.Models.Camera_fbx); // Apply to an entity Entity camera = cameraModel.InstantiateModelHierarchy(assetsService); // Alternatively this method accepts the name of the root entity. Entity camera = cameraModel.InstantiateModelHierarchy(\"coolCamera\", assetsService); // Adds the entity into the scene. this.Managers.EntityManager.Add(camera); } How to create models from Evergine Studio. For instantiating a Model into a Scene just drag the model asset from the Asset Details Panel into your Scene. This will instantiate a full hierarchy of entities into the Scene. The new created hiearchy has the next kind of entities: Node Type Description Root The root node of the hierarchy. If the model contains animation this entity will contain the Animation3D component. Node Nodes without geometry attached. They are empty entities with just a Transform3D with the specific position, scale and orientation. Mesh Node that contains geometry. It contains the following components: MeshComponent, specifying with mesh from the model it will show. MaterialComponent. For every different material from the entity mesh, a component will be created. MeshRenderer for rendering the geometry. Skin If the node contains a skinned mesh, it will have the same components of a normal Mesh node, but using SkinnedMeshRenderer component instead. As you can see this, entity hierarchy mirrors the inner Model asset structure seen here."
  },
  "manual/graphics/particles/create_particles.html": {
    "href": "manual/graphics/particles/create_particles.html",
    "title": "Create Particle Systems | Evergine Doc",
    "keywords": "Create Particle Systems Particle systems simulates and renders a large amount of quads called particles. Create a Particle Systems asset in Evergine Studio You can create a material click button on from Assets Details panel to deploy a create menu options and click on the option \"Create particles\" Inspect Particle Systems in Asset Details You can find the particle system assets in the Assets Details panel when you select a folder in the Project Explorer. Particle System files in content directory The particle system file has the .weps extension. Create a new Particle System from code The following sample code can be used to create a new particle system and apply to an entity in your scene: var assetsService = Application.Current.Container.Resolve<AssetsService>(); var graphicsContext = Application.Current.Container.Resolve<GraphicsContext>(); // Sets its particle emitter. ParticleEmitterDescription emitterDesc = new ParticleEmitterDescription() { ParticleTexture = EvergineContent.Textures.particle_png, ParticleSampler = EvergineContent.Samplers.LinearClampSampler, RenderLayer = EvergineContent.RenderLayers.Alpha, MaxParticles = 1000, InitLife = 2, InitSpeed = 1, InitSize = 0.1f, InitColor = Color.Red, }; ParticlesEmitter emitter = new ParticlesEmitter(emitterDesc, graphicsContext, assetsService); // Creates the asset and sets its emitter. ParticleSystem particleSystem = new ParticleSystem(); particleSystem.AddEmitter(emitter);"
  },
  "manual/graphics/particles/index.html": {
    "href": "manual/graphics/particles/index.html",
    "title": "Particle System | Evergine Doc",
    "keywords": "Particle System Evergine supports complex particle system simulations, taking advantage of the Compute Shaders whenever it's possible. Basics Particles are elements that are used in a large number to create a wide range of visual effects like sparks, clouds, fire, etc. Evergine has a Particle System asset so developers can reuse create, adjust and reuse it in your scene. GPU vs CPU Evergine supports GPU particles simulation when the platform is supported. These simulations are based in compute shaders, allowing a fast and efficient representation of large amount of particles compared to the classical CPU particles. In this section Create Particle Systems Using Particles Particles Editor Particle properties Particle shapes Particle spawn Particle forces"
  },
  "manual/graphics/particles/particle_forces.html": {
    "href": "manual/graphics/particles/particle_forces.html",
    "title": "Particle Forces | Evergine Doc",
    "keywords": "Particle Forces Particle forces are component that once attached to an entity can alter the behavior of a Particle System. They mostly alter the velocity of the particles, according to a set of rules. Creating Forces in Evergine Studio. In the Entities Hierarchy panel of your Scene Editor, click the \"Add Entity and select Particles, then choose the kind of force you want to create: Point attractor Entity attractor Wind force Drag force We discuss the force types later in this article. This will create a new entity the Scene. The new created entity has a Transform3D component and a new component, depending of the type of the force (See below). Creating Forces by Code The following sample code can be used to instantiate an existing material asset and apply to an entity in your scene. protected override void CreateScene() { // Creates tje entity. A Point Attractor in this sample. Entity particleForce = new Entity() .AddComponent(new Transform3D()) .AddComponent(new PointAttractorForce() { ForceCategory = CollisionCategory3D.All }); this.Managers.EntityManager.Add(particleForce); } Common Properties All particle forces share a common base class (BaseForce). This class contains the following properties, making them accesible to all forces: Property Default value Description Strength 1 Factor of how much the force affects the particles. Force Category All Category of the force. A force only will affect particle systems that share the same ForceCategory. Range Enabled true If the force has a maximum range effect. Range 1 The maximum distance whether tha particle system is affected by the force. Decay Enabled true If true the particle force will decay over its range. Type of Forces As stated previously, Evergine supports the following particle system forces: Point Attractor Force This force gravitationally pulls all the particles into a point. In addition of the common properties of the base class, Particle Attractor Force adds properties for managing a cutout behavior. Cutout effect The cutout effect is a behavior affecting particles that goes closer to the attractor center. Instead of being gravitationally pulled to the center and orbiting around that point, The cutout effect causes to drag particles directly to its center, without escaping or keep orbiting. This is useful when we want to control particles that go to a specific point without keep endlessly orbiting around its center. Property Default value Description Cutout Enabled false Enables the cutout behavior of the force. Cutout Strength All The intensity where the particles are dragged into a vortex pit. Cutout Range true The range where the particles start falling into the force center. Entity Attractor Force The Entity Attractor Force is similar to Point Attractor Force, but the particles are attracted to an Entity. Specifically to all the meshes contained in an entity. It has the same Cutout parameters as previously stated, but in addition it has the following properties: Property Default value Description Source Entity Path null The path of the target entity of the force. Source Topology Vertex The part of the mesh topology towards the particles are attracted. Its values can be Vertex or Triangle Note In this version Evergine does not spport Triangle as Source Topology. Wind Force The Wind Force push the particles in the entity's forward direction around its effect area (if the range is enabled). It doesn't have additional parameters. Its strength controls how much the particles are pushed by the wind. Drag Force The Wind Force drags the particles around its effect area (if the range is enabled). It doesn't have additional parameters. Its strength controls how much the particles are dragged by the force."
  },
  "manual/graphics/particles/particle_properties.html": {
    "href": "manual/graphics/particles/particle_properties.html",
    "title": "Particle System properties | Evergine Doc",
    "keywords": "Particle System properties A particle system has the next properties. Particles Material Group that manages the properties relative to the particle material. Property Default value Description Texture particle.png The texture that will appear in each particle quad. Sampler State LinearClampSampler The texture sampler state. RenderLayer Additive The texture render layer. General properties Properties that controls the basic aspects of the particle system. Property Default value Description Max Particles 1000 The maximum amount of particles the emitter can handle. The emission will be paused if it reaches this number. Gravity 0 Sets the gravity of the particle system. Gravity value of 9.8 Drag 0 The amount of resistance the particle will find. Drag value of 0. Drag value of 2. Simulation Space World Sets the simulation space of the particle. In Local space the particle positions stays relative to its emitter transform. In World space all coordinates are global. Simulation Space value of World. Simulation Space value of Local. Random Precission Medium The precision of the random values generated, both in GPU and CPU simulations. High precision will randomize better but with a performance cost and the Low precision will improve performance but produce less random values. Medium precission (default value) offers a good balance. Life The life configuration panel controls the particle remaining life time when it's emitted. Property Default value Description Init Life mode Constant Sets whether the life time of the particle is Constant (Init Life) or RandomBetweenTwoConstants (A random value between Init Life and Init Life2). Init Life 5 The initial color of the particle. Init Life 2 5 The second value of the initial color range. The next video shows how different life parameters behave: Color The initial color configuration panel controls the particle color when it's emitted. Property Default value Description Init Color mode Constant Sets whether the initial color is Constant (Init Color) or RandomBetweenTwoConstants (A random value between Init Color and Init Color2). Init Color White The initial color of the particle. Init Color 2 White The second value of the initial color range. Preserve Highlights false If true, the tint effect of the initial color on the particle texture will decay when the texture color gets whiter. The next image shows two examples of initial color setting. Size The initial size configuration panel controls the particle size when it's emitted. Property Default value Description Init Size mode Constant Sets whether the initial size is Constant (Init Size) or RandomBetweenTwoConstants (A random value between Init Size and Init Size). Init Size 0.1 The initial size of the particle. Init Size 2 0.1 The second value of the initial size range. The next image shows two examples of initial size setting. Speed The initial speed configuration panel controls the particle speed magnitude (in space units per second) when it's emitted. The initial Velocity of the particle will be the initial direction vector multiplied by the Speed of the particle. Property Default value Description Init Speed mode Constant Sets whether the initial speed is Constant (Init Speed) or RandomBetweenTwoConstants (A random value between Init Speed and Init Speed). Init Speed 0.1 The initial speed of the particle. Init Speed 2 0.1 The second value of the initial speed range. The next video shows how different speed parameters behave: Angle The initial angle configuration panel controls the particle quad angle when it's emitted. Property Default value Description Init Angle mode Constant Sets whether the initial angle is Constant (Init Angle) or RandomBetweenTwoConstants (A random value between Init Angle and Init Angle). Init Angle 0 The initial angle of the particle in degrees. Init Angle 2 0 The second value of the initial angle range in degrees. The next image shows three examples of initial angle setting. Angular Speed The angular speed configuration panel controls the particle rotation speed when it's emitted. The quad will spin facing the camera with this angular speed. Property Default value Description Init Angular Speed mode Constant Sets whether the initial angular speed is Constant (Init Angular Speed) or RandomBetweenTwoConstants (A random value between Init Angular Speed and Init Angular Speed). Init Angular Speed 0 The initial angular speed of the particle. Init Angular Speed 2 0 The second value of the initial angular speed range. The next video shows a random angular speed of [-180, 180]. Shapes The Shape group defines all the properties to manage the volume or surface where the particles can be emitted. Property Default value Description Shape type Point Enum that contains all the shape emitter types. Currently the options are: Point Sphere Box Circle Entity Edge More information about these shapes here: Particle Shapes. Spawn The spawn information The Spawn property defines when and how many particles are emitted. Property Default value Description Spawn type Rate Enum that contains all the spawn emitter types. Currently the options are: Rate Burst Distance More information about the spawn management here: Particle Spawn. Color over life These properties manages how the particle color changes over life. In a next Evergine version we will implement a proper Gradient Color editor, but meanwhile we've defined the color over life of the particle using the next properties according to this diagram: Note The color of the gradient is applied as a tint over the initial color of the particle. Property Default value Description Color Animated false Sets whether the particle color is animated through its life time. Color Over Life 1 Transparent Color of the first point of the animation. Color Over Life 2 White Color of the second point of the animation. Color Over Life 3 White Color of the third point of the animation. Color Over Life 4 Transparent Color of the fourth point of the animation. Color Over Life 2 Position 0.2 Position in the curve of the second point of the animation. Must be in the range [0, 1] Color Over Life 3 Position 0.8 Position in the curve of the third point of the animation. Must be in the range [0, 1] The next video shows a particle system using the color gradient previously seen. Size over life These are the properties that controls how the particles change their size over their lifetime. In a next Evergine version we will implement a proper Curve Editor_ editor, but meanwhile we've defined the size over life of the particle using the next properties according to this diagram: Note The size of the curve is applied as a multiplier over the initial size of the particle. Property Default value Description Size Animated false Sets whether the particle size is animated through its life time. Size Over Life 1 0 Size multiplier of the first point of the animation. Size Over Life 2 1 Size multiplier of the second point of the animation. Size Over Life 3 1 Size multiplier of the third point of the animation. Size Over Life 4 0 Size multiplier of the fourth point of the animation. Size Over Life 2 Position 0.2 Position in the curve of the second point of the animation. Must be in the range [0, 1] Size Over Life 3 Position 0.8 Position in the curve of the third point of the animation. Must be in the range [0, 1] The next video shows a particle system using the size curve previously seen. Noise The noise panel allows to apply a turbulence field into the particle system. All the properties of this panel are used to control the parameters of that field. Property Default value Description Noise Enabled false Sets whether the particle system is affected by the noise field. Noise Strength 1 How much the particles are affected by the noise field. Bigger value will generate more chaos! Noise Size 1 The scale of the noise field. Big values cause a more wavy noise, small values will change the behavior among close particles. Noise Frequency 1 Represents the period at which the noise data is sampled. Noise Speed (1, 1, 1) The velocity vector that the noise field is moving. The next video shows a particle system affected by noise (Strength 1, Size 10, Frequency 1, Speed (0, -1, 0)). Forces This panel is used to allow the particle system to be affected by forces and to tune which one can affect them. The different available forces are explained in this article. Property Default value Description Forces Enabled false Sets whether the particle system is affected by the forces. Forces Category All The particle system is only affected by forces with the same Forces Category property. The next video shows a particle system affected by a Point Attractor Force."
  },
  "manual/graphics/particles/particle_shapes.html": {
    "href": "manual/graphics/particles/particle_shapes.html",
    "title": "Particle emission shapes | Evergine Doc",
    "keywords": "Particle emission shapes The particle system emission shape controls the position and direction of the particles when they are spawned. Common parameters All the emission shapes shares the next properties: Property Default value Description Randomize Direction 0 Randomness factor of the particle direction. A value of 0 mean no random directions, 1 is total chaos, while intermediate values sort of adds a little bit of randomness while keeping the overall particle direction of the emission shape. Velocity Offset (0, 0, 0) Velocity that it's added on top of initial particle velocity. Point Shape Point Shape emits the particles from the same position, and using the Up vector of the particles entity as direction. Sphere Shape Sphere Shape uses a sphere for the emission. Its parameters controls the size of the emission sphere, whether the particles are emitted from sphere volume or only from its surface, and the direction of the new particles (from the sphere center or following the up vector). Property Default value Description Radius 1 The radius of the emission sphere From Surface _false True if the particles are spawned from the sphere carcass, false if they are placed from inside the sphere volume. From Center true If the particles are moving from the sphere center or all to the same direction (Up vector). Box Shape Box Shape uses a box for the emission. Its parameters controls the size of the emission box. Property Default value Description Size (1, 1, 1) The size of the emission cube From Center true If the particles are moving from the box center or all to the same direction (Up vector). Circle Shape **Circle Shape** uses a circle for the emission. Its parameters controls the size of the emission circle and whether the particles are emitted from the circle area or its circumference, and the direction of the new particles (from the circle center or following the up vector). Property Default value Description Radius 1 The radius of the emission circle From Circumference false True if the particles are spawned from the circle circumference, false if they are placed from inside the circle area. From Center true If the particles are moving from the center or all to the same direction (Up vector). Edge Shape Edge Shape uses a line for the emission. Its parameters controls the length of the edge or line and the direction of the new particles (from the line or following the up vector). Property Default value Description Length 1 The length of the emission line From Center true If the particles are moving from the center or all to the same direction (Up vector). Entity Shape Entity Shape is an emission shape where particles are emitted from a specific Entity of the scene. More specifically, the particle system uses the meshes of the entity and its children. Note The target entity is not defined in the Entity Shape Emitter because it's part of the Particle System asset hence is not bound to any specific scene. It's defined in the ParticlesComponent component, which can have access to the scene entities. Property Default value Description EmissionSource Vertex The part of the mesh topology where the particles are emitted. Its values can be Vertex or Triangle."
  },
  "manual/graphics/particles/particle_spawn.html": {
    "href": "manual/graphics/particles/particle_spawn.html",
    "title": "Particle spawn | Evergine Doc",
    "keywords": "Particle spawn This module controls when the particles are spawned in our particle system. We mainly have 3 types: Rate Spawn Burst Spawn Distance Spawn. Rate Spawn The rate spawn emits uniformly the particles according to a rate. It can emit for a specific amount of time or indefinitely. It has the following properties: Property Default Value Description Rate 10 Particles per second that will be emitted by the particle system. Duration 0 Duration in seconds of the particle system emission. A value of 0 will emit indefinitely until we manually stop the emission. Burst Spawn The burst spawn emits all the particles available by the system (The Max Particles property) at the same time. It doesn't have additional properties. Distance Spawn The distance spawn emits at a rate proportionally to the particle system speed. A static particle system won't emit particles, but a moving one will emit accordingly to its speed and a specific defined factor. It has the following properties: Property Default Value Description Distance Rate 0 The amount of particles that are spawned per unit of distance translated by the emitter since the last frame. Duration 0 Duration in seconds of the particle system emission. A value of 0 will emit indefinitely until we manually stop the emission."
  },
  "manual/graphics/particles/particles_editor.html": {
    "href": "manual/graphics/particles/particles_editor.html",
    "title": "Particle System Editor | Evergine Doc",
    "keywords": "Particle System Editor Particle system Editor allows the editing of particle system assets. Double click over a Particle System asset shown in Assets Details will open this editor. The editor is composed of 4 main parts: Viewport Shows the Particle System with the current configuration. The user can orbit, zoom and pan the camera. Actions Description Left mouse button To rotate the camera around the particle system. Right mouse button To rotate two lights around the particle system. Mouse wheel To make zoom in/out camera. Toolbar Helps with the model visualization. Has the following options: Item Description Toggles the Grid visualization. Toggles the Emitter shape gizmo visualization. Forces particles simulation to be made using CPU instead of GPU when this option is activated, even when GPU particles are available. Resets the camera position. Changes the background color. ##Playback controls This bar controls some aspect of the particle simulation life. Control Description Resets the particle system. / The timeline slider. The handle will mark the current time in the animation, and its position can be modified. Controls the Time Factor of the particle system. The same behavior of the Particles Component property. Particles Properties Panel with all the Particle System properties. They don't depend on the profile."
  },
  "manual/graphics/particles/using_particles.html": {
    "href": "manual/graphics/particles/using_particles.html",
    "title": "Using Particles | Evergine Doc",
    "keywords": "Using Particles In this document you will learn how to load and use Particle Systems in your applications. How to create particle systems from Evergine Studio. For instantiating a Particle System into a Scene just drag the particle system asset from the Asset Details Panel into your Scene. This will create a new entity the Scene. The new created entity has a Transform3D component and 2 new components: ParticlesComponent This component loads the Particle System asset and manages its simulation and resources. It has the following methods: Property Description StartEmitting () Starts the particle system emission if it was stopped StopEmitting () Stops the particle system emission if it was already emitting Reset () Resets all the particles to its initial state And the following properties: Property Type Description ParticleSystem ParticleSystem Selects the particle system asset into this entity. Force CPU Particles boolean Forces the particle system to use a CPU simulation, even if the platform supports GPU particles. (false by default) Emit Automatically boolean When true, starts emitting particles when the scene is loaded. If false it will be idle until it's manually started. (true by default) Life Factor float Factor applied to the life time of the particle. 2 will cause particles life reduced by half. (1 by default) Time Factor float Time factor applied to the whole particle simulation. A value of 2 will cause particles move at double speed, while 0.5 will slow down particles to half speed. (1 by default) Load Particle System from code The following sample code can be used to create a new Particle force entity in your scene. protected override void CreateScene() { // Load Particle System ParticleSystem particlesAsset = this.Managers.AssetSceneManager.Load<ParticleSystem>(EvergineContent.Particles.MyParticleSystem); // Apply to an entity Entity particlesEntity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new ParticlesComponent() { ParticleSystem = particlesAsset }) .AddComponent(new ParticlesRenderer()); this.Managers.EntityManager.Add(particlesEntity); }"
  },
  "manual/graphics/postprocessing_graph/create_postprocessing_graphs_from_code.html": {
    "href": "manual/graphics/postprocessing_graph/create_postprocessing_graphs_from_code.html",
    "title": "Create Postprocessing Graph from code | Evergine Doc",
    "keywords": "Create Postprocessing Graph from code Although we recommend to create PostProcessing using Evergine Studio, you can achieve this task from code. The following sample code can be used to create a new postprocessing graph and apply it to an entity in your scene. protected override void CreateScene() { var graphicsContext = Application.Current.Container.Resolve<GraphicsContext>(); // Create compute effect var shaderSource = @\" [Begin_ResourceLayout] Texture2D input : register(t0); RWTexture2D<float4> Output : register(u0); SamplerState Sampler : register(s0); [End_ResourceLayout] [Begin_Pass:Default] [Profile 11_0] [Entrypoints CS = CS] [numthreads(8, 8, 1)] void CS(uint3 threadID : SV_DispatchThreadID) { float2 outputSize; Output.GetDimensions(outputSize.x, outputSize.y); float2 uv = (threadID.xy + 0.5) / outputSize; float4 color = input.SampleLevel(Sampler, uv, 0); Output[threadID.xy] = float4(color.x,0,0,1); } [End_Pass] \"; Effect computeEffect = new EffectFromCode(graphicsContext, shaderSource); // Create Postprocessing Graph PostProcessingGraphDescription graphDescription = new PostProcessingGraphDescription(); // Create start node PostProcessingNode render = new PostProcessingNode(); var renderColorTextureOPort = new PostProcessingOutputNodePort(\"ColorTexture\", new PostProcessingNodePortLoadableType<Texture>()); var renderDepthTextureOPort = new PostProcessingOutputNodePort(\"DepthTexture\", new PostProcessingNodePortLoadableType<Texture>()); render.AddOutputPort(renderColorTextureOPort); render.AddOutputPort(renderDepthTextureOPort); graphDescription.StartNode = render; render.IntegrityNodeCheck(graphDescription); // Create end node PostProcessingNode screen = new PostProcessingNode(); var screenColorTextureIPort = new PostProcessingInputNodePort(\"ColorTexture\", new PostProcessingNodePortLoadableType<Texture>()); screen.AddInputPort(screenColorTextureIPort); graphDescription.EndNode = screen; screen.IntegrityNodeCheck(graphDescription); // Create my custom node PostProcessingNode myNode = new PostProcessingNode(computeEffect); myNode.ThreadGroupDivisorX = 8; myNode.ThreadGroupDivisorY = 8; myNode.ThreadGroupDivisorZ = 1; graphDescription.AddNode(myNode); // Connect nodes myNode.GetInputPortByName(\"input\").AddConnection(new PostProcessingPortConnection(renderColorTextureOPort)); myNode.GetOutputPortByName(\"Output\").AddConnection(new PostProcessingPortConnection(screenColorTextureIPort)); PostProcessingGraph graph = new PostProcessingGraph(graphDescription); // Add postprocessing graph to scene Entity postprocessingVolume = new Entity() .AddComponent(new Transform3D()) .AddComponent(new PostProcessingGraphRenderer() { ppGraph = graph }); this.Managers.EntityManager.Add(postprocessingVolume); }"
  },
  "manual/graphics/postprocessing_graph/create_postprocessing_graphs.html": {
    "href": "manual/graphics/postprocessing_graph/create_postprocessing_graphs.html",
    "title": "Create Postprocessing Graph | Evergine Doc",
    "keywords": "Create Postprocessing Graph The Post-Processing graph is a group of nodes connected that apply visual effects to the output render before drawing on the screen. Each node is a compute effect. Create a Postprocessing Graph asset in Evergine Studio You can create a postprocessing graph click button on from the Assets Details panel to deploy a create menu options and click on the option \"Create Post-Processing Graph\" Inspect Postprocessing Graph in Asset Details You can find the postprocessing graph assets in the Assets Details panel when you select a folder in the Project Explorer. Postprocessing Graph files in content directory The postprocessing graph file has the .wepp extension."
  },
  "manual/graphics/postprocessing_graph/custom_postprocessing_graph.html": {
    "href": "manual/graphics/postprocessing_graph/custom_postprocessing_graph.html",
    "title": "Custom Postprocessing graph | Evergine Doc",
    "keywords": "Custom Postprocessing graph This section, it is explained how to create your custom postprocessing graph. This could be useful if you want to create and test effects that are not available in the default postprocessing graph. Example For this example, we are going to create a simple filter that renders only the red component of input render. First, create a compute effect from the Assets Details panel: Write the code of our custom filter from Effect Editor: [Begin_ResourceLayout] Texture2D input : register(t0); RWTexture2D<float4> Output : register(u0); SamplerState Sampler : register(s0); [End_ResourceLayout] [Begin_Pass:Default] [Profile 11_0] [Entrypoints CS = CS] [numthreads(8, 8, 1)] void CS(uint3 threadID : SV_DispatchThreadID) { float2 outputSize; Output.GetDimensions(outputSize.x, outputSize.y); float2 uv = (threadID.xy + 0.5) / outputSize; float4 color = input.SampleLevel(Sampler, uv, 0); Output[threadID.xy] = float4(color.x,0,0,1); } [End_Pass] Create a new Postprocessing graph asset from Assets Details panel After creating the postprocessing graph asset make double click on the asset to open the Postprocessing Graph Editor. You can see an empty postprocessing graph where the render node connects directly with the Screen node. Drag our compute effect from the Available effects panel to the graph editor to create a new node. Then connect render node Color texture port with Custom node Input port and Custom node Output port with Screen node Color Texture port. After saving the graph, you can see the result on the viewport panel. To use your custom postprocessing graph in your scene read more details in using postprocessing graph section Special Nodes There is a special Node named Enable that you can use to enable or disable an effect in your graph. Enable node has two inputs where input0 port connects with path without applying the effect and input1 port that connect with the path with the effect apply. Using its Enabled parameter you can select which path will be used by the output port. Everyone analyzes the graph before using and discard the no-used paths. For example, we are going to add this special node out before example. Special [Output] metatags There are special compute effect metatags used by the Postprocessing graph. The metatags Output could be used to define the output texture of any node. By default, the output texture is created using the first input texture information but you can configure it with Output metatags. With these special metatags, you can define the with, height, and pixel format of the node output texture. Output overloading [Output(ReferencedInput)] [Output(ReferencedInput, ScaleFactor)] [Output(ReferencedInput, ScaleFactor, PixelFormat)] [Output(width, height, PixelFormat)] The metatag parameters are: Parameter Description ReferenceInput Input name used to get width, height and Pixel format of the output texture. ScaleFactor Defines the scale factor apply to the width and height of the ReferenceInput to get the output width and height dimensions. PixelFormat Defines the pixel format of the output texture. Width Defines the width dimension of the output texture. Height Defines the height dimension of the output texture. Example In the following example the Depth input texture has 1920x1080 dimension and D24_UNorm_S8_UInt pixel format. Texture2D<float> Depth : register(t0); RWTexture2D<float4> PositionOutput : register(u0); [Output(Depth, 1, R16G16B16A16_Float)] RWTexture2D<float2> VelocityOutput : register(u1); [Output(Depth, 0.5, R16G16_Float)] RWTexture2D<float> LinealDepthOutput : register(u2); [Output(500, 500, R32_Float)] The result of the resolve the output tags will be: Output Texture Dimensions Pixel Format PositionOutput 1920x1080 R16G16B16A16_Float VelocityOutput 960x540 R16G16_Float LinealDepthOutput 500x500 R32_Float Postprocessing Graph Decorator You can create a c# class extending from PostProcessingGraphDecorator to define how your custom postprocessing graph is displayed on the PostProcessingGraphRenderer component. Only need to implement the GenerateUI method using the Editor extensions. More details about here."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/anti-aliasing.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/anti-aliasing.html",
    "title": "Fast approximate anti-aliasing (FXAA) | Evergine Doc",
    "keywords": "Fast approximate anti-aliasing (FXAA) Fast approximate anti-aliasing is a screen-space anti-aliasing algorithm created by Timothy Lottes at Nvidia. The main advantage of this technique over conventional spatial anti-aliasing is that it does not require large amounts of computing power. It achieves this by smoothing undesirable jagged edges (\"jaggies\") as pixels, according to how they appear on-screen, rather than analyzing the 3D model itself, as in conventional spatial anti-aliasing. Since it is not based on the actual geometry, it will smooth not only edges between triangles, but also edges inside alpha-blended textures, or those resulting from pixel shader effects, which are immune to the effects of multisample anti-aliasing (MSAA). The downsides are that high contrast texture maps are blurred, that FXAA must be applied before rendering the HUD elements of a game lest it affect them too, and that polygonal details smaller than one pixel that would have been captured and rendered by MSAA and SSAA will not be captured and rendered by FXAA alone."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/bloom.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/bloom.html",
    "title": "Bloom, Dirt, LightShaft and Lensflare | Evergine Doc",
    "keywords": "Bloom, Dirt, LightShaft and Lensflare In this section, multiples effects are explained because the process steps to calculate them are similar and they was implemented together for performance reasons. Bloom The effect produces fringes (or feathers) of light extending from the borders of bright areas in an image, contributing to the illusion of an extremely bright light overwhelming the camera or eye capturing the scene. Parameter Description Threshold The pixels with a luminance higher than threshold value will apply the effect. Color Intensity Defines the bloom color intensity in the final blend image. Intensity Defines how the render image and the bloom output will be blended. Dirt This effect tries to simulate when the camera lens is dirty and some lens stains are visible. Parameter Description Texture Dirt texture used. Intensity Dirt intentsity or how the render image and the dirt output will be blended. LightShaft LightShaft also known as God Rays allows the viewer to see beams of light shining across the environment. Parameter Description Min.Threshold Minimun luminance of the pixel will be affected by the effect. Max. Threshold Maximum luminance of the pixel will be affected by the effect. Scale Size of the effect. Intensity Defines how the render image and the bloom output will be blended. LensFlare A Lens flare happens when light is scattered or flared in a lens system, often in response to a bright light, producing a sometimes undesirable artifact in the image. This happens through light scattered by the imaging mechanism itself, for example through internal reflection and forward scatter from material imperfections in the lens. Parameter Description Ghost Count The ghost image number. Ghost Spacing The distance between ghost elements. Ghost threshold The pixels with upper luminance value to the threshold will be used to generate the ghost elements. Halo radius External halo radius. Halo thickness External halo thickness. Halo threshold The pixels with upper luminance value to the threshold will be used to generate the halo. Halo Chro. Aberration Amout of chromatic aberration. Intensity Defines how the render image and the bloom output will be blended."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/depth_of_field.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/depth_of_field.html",
    "title": "Depth of Field (DoF) | Evergine Doc",
    "keywords": "Depth of Field (DoF) The Depth of Field (DoF) effect tries to simulate the blur or bokeh observed in out-of-focus areas in the camera field of vision. The depth of field can be calculated based on focal length, distance to subject, the acceptable circle of confusion size, and aperture. A particular depth of field may be chosen for technical or artistic purposes. Parameter Description Debug Mode Mode debug enabled draws red the nearest areas, green the focus areas and blue the farest areas. Only for debug proposes. Focal Region Size of the focus area. Bokeh Shape Shape uses to simulate bokeh effect: Circle, Pentagon, Hexagon, Heptagon. Bokeh Size Size of the bokeh shapes. Bokeh rotation Angle of the bokeh shapes. Near Fade Power Blur border size around the nearest areas. Tip The Focal Distance is a Camera parameter."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/fidelity_super_resolution.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/fidelity_super_resolution.html",
    "title": "Fidelity Super Resolution | Evergine Doc",
    "keywords": "Fidelity Super Resolution AMD FidelityFX Super Resolution (FSR) uses cutting-edge upscaling technologies to help boost your framerates in select titles1 and deliver high-quality, high-resolution gaming experiences, without having to upgrade to a new graphics card. More details here. This effect allows scale low-resolution image to the final resolution image improving the performance of your render. FSR support 4 recommended configurations: FSR 1.0 quality mode Description Scale Factor Input Resolution Output Resolution Ultra quality Ultra quality mode produces an image with quality virtually indistinguishable from native rendering. It should be selected when the highest quality is desired. 1.3x 1477x831 1970x1108 2646x1108 2954x1662 1920x1080 2560x1440 3440x1440 3840x2160 Quality Quality mode produces a super resolution image with quality representative of native rendering, with a sizeable performance gain. 1.5x 1280x720 1706x960 2293x960 2560x1440 1920x1080 2560x1440 3440x1440 3840x2160 Balanced Balanced mode produces a super resolution image approximating native rendering quality, with a major performance gain compared to native. 1.7x 1129x635 1506x847 2024x847 2259x1270 1920x1080 2560x1440 3440x1440 3840x2160 Performance Performance mode visibly impacts image quality and should only be selected in situations where needing additional performance is critial. 2.0x 960x540 1280x720 1720x720 1920x1080 1920x1080 2560x1440 3440x1440 3840x2160"
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/fog.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/fog.html",
    "title": "Fog | Evergine Doc",
    "keywords": "Fog This effect allows simulate distance and height fog. Fog can be considered a type of low-lying cloud usually resembling stratus, and is heavily influenced by nearby bodies of water, topography, and wind conditions. Parameter Description Color Fog color. Mode Defines 3 modes to calculate the fog distance: Lineal, Exponential and ExponentialSquare. Distance enabled Enabled/Disabled depth distance. Distance Density Amount of density with the fog distance. Height Enabled Enabled/Disabled fog in height. Height Maximum height with fog. Height Density Amount of density with the fog height."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/index.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/index.html",
    "title": "Default Postprocessing graph | Evergine Doc",
    "keywords": "Default Postprocessing graph Default Evergine project template imports the Evergine.Core package and this package includes the Default Post-Processing graph with the most important post-processing visual effect common in a project. Default Postprocessing effects The complete list of postprocessing effects cover by the default postprocessing graph are: Screen Space Ambient Occlusion (SSAO) Screen Space Reflection (SSR) Fog Temporal Anti-Aliasing (TAA) Motion Blur Depth of Field (DoF) Bloom, Dirt, LensFlare, LightShaft Fidelity Super Resolution (FSR) Sharpen Tonemapping, Chromatic aberration, Vignette, Grain, Distortion Fast approximate anti-aliasing (FXAA) Using default postprocessing graph from Evergine studio These effects can be configured from PostprocessingGraphRenderer component inside of a postprocessing volume entity."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/motion_blur.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/motion_blur.html",
    "title": "Motion Blur | Evergine Doc",
    "keywords": "Motion Blur Motion Blur blurs the image based on the camera motion. This effect is the apparent streaking of moving objects in a photograph or a sequence of frames, such as a film or animation. It results when the image being recorded changes during the recording of a single exposure, due to rapid movement or long exposure. Parameter Description Decay Factor Visibility factor of the samples. Num. Samples Number of samples used."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/screen_space_ambient_occlusion.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/screen_space_ambient_occlusion.html",
    "title": "Screen Space Ambient Occlusion (SSAO) | Evergine Doc",
    "keywords": "Screen Space Ambient Occlusion (SSAO) The Screen Space Ambient Occlusion (SSAO) effect approximates Ambient Occlusion in realtime, as an image post-processing effect. It darkens creases, holes and surfaces that are close to each others. In real life, such areas tend to block out or occlude ambient light, hence they appear darker. This effect uses the depth framebuffer data and throws several rays into a range in different directions from each pixel. If a ray hits with any geometry the pixel will become darker. The darkest pixel will be the one that all rays hit with something, and in the other part, the lightest pixel will occurs where all his rays didn't hit with anything. In the above picture you can see first the scene without effect applied, then the scene with the SSAO output, and finally the blend combination between original render and SSAO output. SSAO Parameters Parameter Description SPP Samples per pixel. Range Range around the point using to calculate close geometries. Power Amount of darkness Scale Bias -- Intensity Intensity of the blend with render image."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/screen_space_reflection.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/screen_space_reflection.html",
    "title": "Screen Space Reflection (SSR) | Evergine Doc",
    "keywords": "Screen Space Reflection (SSR) Screen Space Reflections (SSR) effect adds real time local reflections to the object surfaces. This effect is in screen space, which means reflected can be only objects that are already on the screen. The effect uses the depth buffer to throw rays from object surfaces to calculate the reflection. Parameter Description Num. Rays Number of rays per pixel. Max. Reflection Distance Maximum ray reflection distance Refinement steps After the ray hit detection, number of steps of the refinement hit algoritm. Pixel Thickness Helps to avoid depth shadow areas. Max. Roughness Maximun roughness value which the reflection will be calculated. Intensity Blend with original render. Debug Mode Enable Allows to check only the reflection output."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/sharpen.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/sharpen.html",
    "title": "Sharpen | Evergine Doc",
    "keywords": "Sharpen Sharpen effect is a technique for increasing the apparent sharpness of an image. This effect is recommended to use in combination with effects that their output can apply blur to the image as Temporal Anti-Aliasing (TAA) or Fidelity Super Resolution (FSR). Parameter Description Amount Increase/reduce the sharpness effect."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/temporal_anti_aliasing.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/temporal_anti_aliasing.html",
    "title": "Temporal Anti-Aliasing | Evergine Doc",
    "keywords": "Temporal Anti-Aliasing Tempral Anti-Aliasing (TAA) is a spatial anti-aliasing technique for computer-generated video that combines information from past frames and the current frame to remove jaggies in the current frame. In TAA, each pixel is sampled once per frame but in each frame the sample is at a different location at subpixel level. Pixels sampled in past frames are blended with pixels sampled in the current frame to produce an anti-aliased image. This effect improves the quality of anti-aliasing FXAA result. This effect doesn't require any setting parameters."
  },
  "manual/graphics/postprocessing_graph/default_postprocessing_graph/tonemapping.html": {
    "href": "manual/graphics/postprocessing_graph/default_postprocessing_graph/tonemapping.html",
    "title": "Tonemapping, Chromatic aberration, Vignette, Grain, Distortion | Evergine Doc",
    "keywords": "Tonemapping, Chromatic aberration, Vignette, Grain, Distortion In this section, multiples effects are explained because the process steps to calculate them are similar and they was implemented together for performance reason. Tonemapping Tonemapping is a technique used in image processing and computer graphics to map one set of colors to another to approximate the appearance of high-dynamic-range images in a medium that has a more limited dynamic range. In the above image the left side is the render without tonemapping applied and the right side is the result of to apply tonemapping to the left side. Parameter Description HDR Enabled Enabled/Disabled mapping of High Dynamic Range (HDR) to Low Dynamic Range (LDR). Curve Defines how to map the image color to output image. There are the following curves availables: Reinhard, ReinhardSQ, LumaReinhard, Filmic, ACES, RombindAHouse. Default curve is ACES. LUT Enable Enabled/Disabled use the Lookup Table (LUT) Texture table to map de colors LUT Texture Represents a Lookup Table (LUT) 16x16x16 color neutral unwrapped to a 256x16 texture. There are two LUT Texture samples: HDR: Vintage: Chromatic aberration Chromatic aberration, also known as “color fringing” or “purple fringing”, is a common optical problem that occurs when a lens is either unable to bring all wavelengths of color to the same focal plane, and/or when wavelengths of color are focused at different positions in the focal plane. Chromatic aberration is caused by lens dispersion, with different colors of light travelling at different speeds while passing through a lens. As a result, the image can look blurred or noticeable colored edges (red, green, blue, yellow, purple, magenta) can appear around objects, especially in high-contrast situations. In the above image the left side is the render withou chromatic aberration applied and the right side is the result of to apply chromatic aberration to the left side. Parameter Description Strength Defines the distance between color bands. Offset Defines vector direction of the aberration. Grain If you’ve watched a film and seen speckles on the screen in random patterns, you’ve seen film grain. Originally, the actual grains in film grain were small particles of silver halide, the primary photosensitive substance used in chemical film. These particles are randomly distributed artifacts throughout the image. Parameter Description Intensity Defines the intensity of the grain effect. Vignette A vignette is a decrease in brightness of a photograph towards its edges compared to the image centre. Vignetting is often an undesired effect caused by camera settings that are not suitable for the given light situation. However, the effect can also be added subsequently to create noticeable changes in the picture’s mood and perception by making subtle changes only. Parameter Description Power Defines the intensity of the vignette effect. Radio Defines the radio of the effect respect to the center image. Distortion This is a visual effect that simulates the effect produced by the refraccion of the light. Refraction produces when you see through the vidrio or the fire smoke could be some examples of this effect. Tip This effect required to use the Distortion Material include in the Evergine.core package"
  },
  "manual/graphics/postprocessing_graph/index.html": {
    "href": "manual/graphics/postprocessing_graph/index.html",
    "title": "Postprocessing Graph | Evergine Doc",
    "keywords": "Postprocessing Graph Post-Processing graph allows you to apply visual effects like Tonemapping, Depth of Field, Temporal Anti-Aliasing, SSAO, SSR ... to your scene final render. The Post-Processing graph is a group of nodes connected that apply visual effects to the output render before drawing on the screen. Each node is a compute effect. With Postprocessing you could obtain a good looking cinematic appearance for your applications: Postprocessing Disabled Postprocessing Enabled Postprocessing and compute effects A postprocessing graph is a group of compute effect nodes that apply effects to the first render node and connect the result to the last Screen node. You can create a postprocessing graph with single or multiples nodes depends on your proposal. Post-Processing graphs are a type of asset and have a dedicated Editor Post-Processing Graph Editor. Default Postprocessing Graph InEvergine, the default project template imports the Evergine.Core package and this package includes the Default Post-Processing graph with the most important post-processing visual effect common in a project. So in the most of time, you will use this asset reserving to create a new custom post-processing graph only to create new visual effects or to improve performance needs. In this section Create Postprocessing Graph Using Postprocessing Graph Postprocessing Graph Editor Default postprocessing graph Custom postprocessing graph Create custom Postprocessing Graph from code"
  },
  "manual/graphics/postprocessing_graph/postprocessing_graph_editor.html": {
    "href": "manual/graphics/postprocessing_graph/postprocessing_graph_editor.html",
    "title": "Postprocessing Graph Editor | Evergine Doc",
    "keywords": "Postprocessing Graph Editor Postprocessing Graph Editor allows editing the Postprocessing Graph assets. Double click over a postprocessing graph asset shown in Assets Details will open this editor. The editor is composed of 3 main parts: Graph Editor Compute Effects collection Viewport. Graph Editor The Graph Editor allows you to create graph nodes to connect the start node (Render) with the last node (Screen). The nodes are computed effects and his parameters, input, and output are defined by his ResourceLayout block. Node elements Description Name Located on top of the Node is the name of the compute effect used. Divisors Allows configure the ThreadGroupDivisor X,y and Z to dispatch the compute effect. Parameters Allows configuring constant buffer or structure buffer properties to the compute effect. Input Allows set Textures and Samplers to the compute effect. Output Allows set RWTextures to the compute effect. Tip The node inputs can only be connected with a single node output but a node output can be connected with multiple node inputs. Toolbox The toolbox is located on the top side of the graph editor and allows to manipulate the graph view. Icon Description Delete the selected node. Execute an algorithm to relocated nodes and avoid node overlapping. Zoom in/out the graph. Center the view over the graph. Actions Description Left mouse button Selection tool. Allows to select a single or multiple nodes. Right mouse button Cut tool. Allows the draw a cut line to break conections. Medium mouse button Pan tool. Allows to move along the graph. Mouse wheel Allows to make zoom in/out over the graph. Compuse Effects Collection In this panel, you can find all compute effects existing in the project and drag an effect to the graph editor to use it. Viewport The vewport allows to inspect the result of the postprocessing graph applied to the scene: Note To refresh the graph changes in the viewport, you need to save all graph changes. Icon Description The combobox allows to select the current scene for the viewport. Opens the camera settings to configure all its parameters. The camera changes are not stored so it is only for testing proposes. The viewport allows you a simple interaction to easily inspect the scene: Actions Description W, S, D, A Move camera along the scene. Right mouse button Rotates camera. Medium mouse button Camera panning. Mouse wheel Camera zoom in/out."
  },
  "manual/graphics/postprocessing_graph/using_postprocessing_graphs.html": {
    "href": "manual/graphics/postprocessing_graph/using_postprocessing_graphs.html",
    "title": "Using Postprocessing Graph | Evergine Doc",
    "keywords": "Using Postprocessing Graph In this document, you will learn how to load and use Postprocesing Graph in your applications. Load Postprocessing Graph from code The following sample code can be used to instantiate an existing postprocessing graph asset and apply it in your scene. protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); var graph = assetsService.Load<PostProcessingGraph>(EvergineContent.PostprocessingGraph.MyPostProcessingGraph); // Add postprocessing graph to scene Entity postprocessingVolume = new Entity() .AddComponent(new Transform3D()) .AddComponent(new PostProcessingGraphRenderer() { ppGraph = graph }); this.Managers.EntityManager.Add(postprocessingVolume); } How to apply Postprocessing graph to a scene from Evergine Studio. You can apply a postprocessing graph to your scene click on button from Entities Hierarchy panel and select Post-processing Volume Postprocessing Volume is an entity in your scene composed of 3 components: Transform3D PostProcessingGraphRenderer BoxCollider3D With the PostProcessingGraphRenderer component, you can configure it to work in two modes. Mode Description Global All cameras in your scene will be affected by the postprocessing graph. Volume The cameras enter into the volume defines by a BoxCollider will be affected by the postprocessing graph. In addition, you can configure the LayerOrder to execute the postprocessing in your scene. For example, you can execute the postprocessing after drawing all entities of your scene but before the UI entities. Finally, The PostProcessingGraphRenderer allows to load a Postprocessing Graph asset and displays all his nodes or his associated decorator."
  },
  "manual/graphics/primitives.html": {
    "href": "manual/graphics/primitives.html",
    "title": "Primitives | Evergine Doc",
    "keywords": "Primitives Evergine has a 3D primitives collection that you can use for prototyping proposes. The primitives are easier and faster to use so they are very useful when you are making tests or your creating a prototype scene. Primitive collection: Capsule Cone Cube Cylinder Plane Pyramid Sphere Teapot Torus The main difference of using primitives instead of a Model is that in that case the Mesh is generated procedurally, instead of obtaining it from an asset. It allows you to parametrice the way this mesh is generated. Create primitive from Evergine Studio From the Entity Hierarchy panel click on button and go to Primitives 3D submenu. Create primtive from code To create a primitive only need to create an entity with the following components: protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); var material = assetsService.Load<Material>(EvergineContent.Materials.DefaultMaterial); Entity cubeEntity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh()) // A cube primitive .AddComponent(new MeshRenderer()); this.Managers.EntityManager.Add(cubeEntity); } Tip To create primitive only need to change CubeMesh component by CapsuleMesh, ConeMesh, CylinderMesh, PlaneMesh, PyramidMesh, SphereMesh, TeapotMesh or TorusMesh component. Cube Parameters The component for create this primitive is CubeMesh Parameter Description Size The size of the cube. Must be greater than 0. UVHorizontalFlip Value indicating whether to flip the horizontal texture coordinate. UVVerticalFlip Value indicating whether to flip the vertical texture coordinate. InitialU The horizontal texture coordinate offset. InitialV The vertical texture coordinate offset. UTile The horizontal texture coordinate scale factor. VTile The vertical texture coordinate scale factor. Sphere Parameters The component for create this primitive is SphereMesh Parameter Description Diameter The diameter of the sphere. Must be greater than 0. Tessellation The tessellation of the sphere. Must be greater than 3. UVHorizontalFlip Value indicating whether to flip the horizontal texture coordinate. UVVerticalFlip Value indicating whether to flip the vertical texture coordinate. Plane Parameters The component for create this primitive is PlaneMesh Parameter Description PlaneNormal The normal of the plane. Availables values: XPositive YPositive ZPositive XNegative YNegative ZNegative Width The width of the plane. Must be greater than 0. Height The height of the plane. Must be greater than 0. TwoSides Value indicating whether the plane has two sides. By default botton face of the plane is not generated. UMirror Value indicating whether to flip the horizontal texture coordinate. VMirror Value indicating whether to flip the vertical texture coordinate. UOffset Apply an offset to the horizontal texture coordinates. VOffset Apply an offset to the vertical texture coordinates. UTile The horizontal texture coordinate scale factor. VTile The vertical texture coordinate scale factor. Origin Represent the pivot in a normalized position. By default the value is (0.5, 0.5), which indicatest that the PlaneMesh position is measured from the center of the plane. Teapot Parameters The component for create this primitive is TeapotMesh Parameter Description Size The size of the teapot. Must be greater than 0. Tessellation The tessellation of the teapot. Must be greater than 3. Capsule Parameters The component for create this primitive is CapsuleMesh Parameter Description Height The height of the capsule. Must be greater than 0. Radius The radius of the capsule. Must be greater than 0. Tessellation the tessellation of the capsule. Must be even. Cone Parameters The component for create this primitive is ConeMesh Parameter Description Height The height of the cone. Must be greater than 0. Diameter The diameter of the cone. Must be greater than 0. Tessellation The tessellation of the cone. Cylinder Parameters The component for create this primitive is CylinderMesh Parameter Description Height The height of the cylinder. Must be greater than 0. Diameter The diameter of the cylinder. Must be greater than 0. Tessellation The tessellation of the cylinder. Must be greater than 3. Pyramid Parameters The component for create this primitive is PyramidMesh Parameter Description Size The size of the pyramid. Must be greater than 0. Torus Parameters The component for create this primitive is TorusMesh Parameter Description Diameter The diameter of the torus. Must be greater than 0. Thickness The thickness of the torus. Must be greater than 0. Tessellation The tessellation of the torus. Must be greater than 3."
  },
  "manual/graphics/render_layers.html": {
    "href": "manual/graphics/render_layers.html",
    "title": "Render Layers | Evergine Doc",
    "keywords": "Render Layers Coming soon"
  },
  "manual/graphics/rendering_overview.html": {
    "href": "manual/graphics/rendering_overview.html",
    "title": "Rendering Overview | Evergine Doc",
    "keywords": "Rendering Overview Coming soon"
  },
  "manual/graphics/samplers.html": {
    "href": "manual/graphics/samplers.html",
    "title": "Samplers | Evergine Doc",
    "keywords": "Samplers Coming soon"
  },
  "manual/graphics/sprites.html": {
    "href": "manual/graphics/sprites.html",
    "title": "Sprites | Evergine Doc",
    "keywords": "Sprites image Sprites are 2D images used in a 2D context. They are simulated in Evergine as quad oriented to the camera. The Sprites are batched automatically for the SpriteBatch allowing drawing a huge amount of sprites with a single drawcall. The Sprite could be useful to create special UI elements over your 3D scene as a compass, or indicators. The Sprites are not available from de Evergine Studio by now so if you want to create a sprite you need to create it from code. Create Sprite from Code The Sprite is an entity with the components Sprite and SpriteRenderer. To draw a Sprite is necessary to create a Camera2D. A Camera3D and a Camera2D can be combined in a scene to draw the 3d objects layer and 2d objects as a new layer over the 3D. In the following example are created a Camera2D and a Sprite. protected override void CreateScene() { var assetsService = Application.Current.Container.Resolve<AssetsService>(); // Load default texture Texture texture = assetsService.Load<Texture>(EvergineContent.Textures.car_png); // Load default sampler SamplerState linearClampSampler = assetsService.Load<SamplerState>(EvergineContent.Samplers.LinearClampSampler); // Load a Render Layer description... RenderLayerDescription layer = assetsService.Load<RenderLayerDescription>(EvergineContent.RenderLayers.Alpha); // Add Sprite var sprite = new Entity() .AddComponent(new Transform2D() { Origin = Vector2.One * 0.5f, // Center pivot }) .AddComponent(new Sprite() { Texture = texture, Sampler = linearClampSampler, }) .AddComponent(new SpriteRenderer() { Layer = layer }); this.Managers.EntityManager.Add(sprite); // Add Camera var camera2d = new Entity(\"Camera\") .AddComponent(new Transform2D()) .AddComponent(new Camera2D() { BackgroundColor = Color.CornflowerBlue * 0.3f, }); this.Managers.EntityManager.Add(camera2d); } The result:"
  },
  "manual/graphics/supported_backends/directx11.html": {
    "href": "manual/graphics/supported_backends/directx11.html",
    "title": "DirectX 11 | Evergine Doc",
    "keywords": "DirectX 11 DirectX 11 is one of the most popular graphics APIs used on graphics applications created by Microsoft and supported on all computers using the Windows OS. Microsoft announce DirectX 11 at the Gamefest 2008 event in Seattle and since then three updates were released: DirectX 11.1 was included in Windows 8 DirectX 11.2 was included in Windows 8.1 DirectX 11.3 was released in 2015 and was included in Windows 10. Currently is the most popular graphics API on Windows platform and supported on all devices running Windows 10. This is the default graphics APIs used by the Evergine Studio as well. Supported DirectX 11 devices Windows 8/10/11 x64/x86 desktop Windows 10/11 ARM64/x86 tablet HoloLens 2 ARM64 Checking DirectX 11 version The DxDiag tool reports detailed information about the DirectX components and drivers installed on your Windows system and it is available on Windows 7/8/10/11. To get the latest DirectX version on your system used Windows update, not all version of Windows can run the latest version of DirectX 11. For more information visit Microsoft support. Create a Graphics Context To create a graphics context based on DirectX11 just write: GraphicsContext graphicsContext = new Evergine.DirectX11.DX11GraphicsContext(); graphicsContext.CreateDevice(); Build & Run DirectX 11 is used by default for Evergine so not actions are required to active it. You can run on DirectX 11 by clicking on File -> Build & Run -> Windows.DirectX11 or just press F5 inside the Evergine Studio."
  },
  "manual/graphics/supported_backends/directx12.html": {
    "href": "manual/graphics/supported_backends/directx12.html",
    "title": "DirectX 12 | Evergine Doc",
    "keywords": "DirectX 12 DirectX12 is the latest Microsoft graphics API available on all devices running Windows 10/11. Microsoft announced this version at GDC on March 20 2014, and was officially launched alongside Windows 10 on July 29 2015. At October 2 2018 the DirectX Raytracing support was added to the API and it become very popular quickly and currently all the latest GPUs from Nvidia and AMD come with Raytracing support which is supported on Evergine low level API so DirectX12 support Evergine raytracing API. Supported DirectX 12 devices Windows 10/11 x64/x86 desktop Windows 10/11 ARM64/x86 tablet Checking DirectX 12 version The DxDiag tool reports detailed information about the DirectX components and drivers installed on your Windows system and it is available on Windows 10/11. To get the latest DirectX version on your system used Windows update. For more information visit Microsoft support. Create a Graphics Context To create a graphics context based on DirectX12 just write: GraphicsContext graphicsContext = new Evergine.DirectX12.DX12GraphicsContext(); graphicsContext.CreateDevice(); Build & Run You can select DirectX 12 API support during the new project creation from the Evergine launcher. If the project already exists you can add the DirectX 12 support from Evergine Studio by clicking on Settings -> Project Settings. Selecting and adding the profile for Windows (DirectX12). You can run on DirectX 12 by clicking on File -> Build & Run -> Windows.DirectX12."
  },
  "manual/graphics/supported_backends/index.html": {
    "href": "manual/graphics/supported_backends/index.html",
    "title": "Supported Graphics Backends | Evergine Doc",
    "keywords": "Supported Graphics Backends Evergine supported multiples graphics APIs including DirectX11, DirectX12, Vulkan, OpenGL, Metal and WebGL/WebGPU. In the previous image you can see and overall diagram where all this APIs are represented. All the most recent APIs are supported and on top of all of them exists a common low level graphics API used by Evergine to abstract the final graphics API used by the applications. In this section DirectX11 DirectX12 OpenGL Vulkan Metal WebGPU"
  },
  "manual/graphics/supported_backends/metal.html": {
    "href": "manual/graphics/supported_backends/metal.html",
    "title": "Metal | Evergine Doc",
    "keywords": "Metal Metal is a low-level graphics and compute API created by Apple and is the default API on MacOS and iOS devices. Metal has been available since June 2 2014 on iOS devices powered by Apple A7 or later and sice June 8 2015 on MacOS running OS X El capitan. Evergine uses Metal API on MacOS and iOS devices like iPhone and IPad but also supports Vulkan graphics API on those platforms through MoltenVK which allows to convert a subset of Vulkan API to run on top of Metal on MacOS and iOS operating systems. Supported Metal devices MacOS x64/x86/ARM64 desktop iOS iPhone and iPad Checking Metal version It is the default graphics API used on iOS and MacOS devices and Apple updates through updates. To make sure you have the latest version just update to the latest OS version. Create a Graphics Context To create a graphics context based on Metal just write: GraphicsContext graphicsContext = new Evergine.Metal.MTLGraphicsContext(); graphicsContext.CreateDevice(); Build & Run The project template will be available soon."
  },
  "manual/graphics/supported_backends/opengl.html": {
    "href": "manual/graphics/supported_backends/opengl.html",
    "title": "OpenGL | Evergine Doc",
    "keywords": "OpenGL Open Graphics Library (OpenGL) is the most widely adopted 2D and 3D graphics API in the industry cross-platform. Silicon Graphics Inc, began developing OpenGL in 1991 and released it on June 30 1992, and now is a technology maintained by Khronos Group. Evergine use OpenGL graphics API on Web platform and Windows desktop but is deprecating this technology in favor of Vulkan, which is the new modern graphics API created by the Khronos Group. OpenGL is used on Web platform by Evergine through the version named WebGL. This is the default version supported in the most popular browsers. Chrome, Edge, Firefox support WebGL 2.0 Safari supports WebGL 1.0 Supported OpenGL devices Windows 8/10/11 x64/x86 desktop Web Browsers desktop, tablet and mobile. Checking OpenGL version If you a running Windows 7 or later the OpenGL library has already been installed on your system. To check the OpenGL version available on your system just find out the control panel of your graphics card or you can download the OpenGL Hardware Capability Viewer. Create a Graphics Context To create a graphics context based on OpenGL just write: GraphicsContext graphicsContext = new Evergine.OpenGL.GLGraphicsContext(); graphicsContext.CreateDevice(); To create a graphics context based on WebGL just write: GraphicsContext graphicsContext = new Evergine.OpenGL.GLGraphicsContext(GraphicsBackend.WebGL2); graphicsContext.CreateDevice(); Build & Run You can select OpenGL API support during the new project creation from the Evergine launcher. Desktop If the project already exists you can add the OpenGL support from Evergine Studio by clicking on Settings -> Project Settings. Selecting and adding the profile for Windows (OpenGL). You can run on OpenGL by clicking on File -> Build & Run -> Windows.OpenGL. WebGL To support Web Platforms based on WebGL versions you also need to add from project setting the WebGL Template, selecting WebGL 2.0 or 1.0 depends your project needs."
  },
  "manual/graphics/supported_backends/vulkan.html": {
    "href": "manual/graphics/supported_backends/vulkan.html",
    "title": "Vulkan | Evergine Doc",
    "keywords": "Vulkan Vulkan is a low-overhead cross-platform API, It is the most recently API created by Khronos Group and targets high-performance real-time 3D graphics applications. Compared with DirectX 11 and OpenGL, Vulkan offer higher performance and more balanced CPU and GPU usage and provides a considerably lower-level API and parallel tasking for the application. Khronos Group announced this API for first time at GDC 2015 referred to as the \"next generation OpenGL initiative\" or \"OpenGL next\" but finally the rename it to Vulkan. Vulkan is not backwards compatible with OpenGL and is derived from AMD's Mantle API which was donated by AMD to Khronos to try to standardize a low level API across the industry. Raytracing support was added recently to Vulkan and the API is very similar to DirectX12 Raytracing API so Vulkan support Evergine raytracing API. Supported Vulkan devices Windows 8/10/11 x64/x86 desktop Linux x64/x86 desktop Android ARMv7/ARM64 tablet and mobile MacOS x64/x86/ARM64 desktop (using MoltenVK) iOS ARM64 tablet and mobile (using MoltenVK) Checking Vulkan version To make sure that you can visualize the rendering options Vulkan has available on your development PC, you will need to download and install the latest version of video card drivers for your graphics card. Download it from: Nvidia AMD It is highly recommended download LunarSDK to install the latest developing and debugging tools for Vulkan graphics API. Create a Graphics Context To create a graphics context based on Vulkan just write: GraphicsContext graphicsContext = new Evergine.Vulkan.VKGraphicsContext(); graphicsContext.CreateDevice(); Build & Run You can select Vulkan API support during the new project creation from the Evergine launcher. If the project already exists you can add the Vulkan support from Evergine Studio by clicking on Settings -> Project Settings. Selecting and adding the profile for Windows (Vulkan). You can run on Vulkan by clicking on File -> Build & Run -> Windows.Vulkan."
  },
  "manual/graphics/supported_backends/webgpu.html": {
    "href": "manual/graphics/supported_backends/webgpu.html",
    "title": "WebGPU | Evergine Doc",
    "keywords": "WebGPU WebGPU is a working project to become in a future web standard API for accelerated graphics and compute, aiming to provide modern 3D graphics and computation capabilities on Web platform. It is developed by the W3C for the Web community group with engineers from Apple, Mozilla, Microsoft, Google and others. This technology run on top of the latest graphics APIs like DirectX 12, Vulkan and Metal. Chrome, Edge and Firefox already support it as experimental feature so you need to move to beta channel and active it. Evergine uses WebGPU on Web platforms when it is available otherwise use WebGL which is the most supported graphics technology today. To check the implementation status of this technology visit webgpu.io. Supported WebGPU devices Chrome, Edge, Safari and firefox browsers on Desktop, tablet and mobile. Checking WebGPU version Browser Check command Chrome The WebGPU flag must be enabled by writing this in your browser: chrome://flags/#enable-unsafe-webgpu Edge The WebGPUflag must be enabled by writing this in your browser: edge://flags/#enable-unsafe-webgpu Create a Graphics Context To create a graphics context based on WebGPU just write: GraphicsContext graphicsContext = new Evergine.WebGPU.WGPUGraphicsContext(); graphicsContext.CreateDevice(); Build & Run on WebGPU The project template will be available soon."
  },
  "manual/graphics/textures/create_texture_from_code.html": {
    "href": "manual/graphics/textures/create_texture_from_code.html",
    "title": "Create a texture from code | Evergine Doc",
    "keywords": "Create a texture from code The most common use Texture is assigning them into Materials and Components. However, it's perfectly valid to use and even create a Texture from code. Load Texture asset from code As explained in this article, it's perfectly possible. Here is a sample code for creating a primitive entity with a Diffuse material. protected override void CreateScene() { AssetSceneManager assets = this.Managers.AssetSceneManager; // Loading 'Diffuse.png' located in 'Content/Textures/ Texture diffuseTexture = assets.Load<Texture>(EvergineContent.Textures.Diffuse**png); // We create a standard material and assign the texture as diffuse channel. StandardMaterial materialDecorator = new StandardMaterial(assets.Load<Effect>(EvergineContent.Effects.StandardEffect)); material.BaseColorTexture = diffuseTexture; // We create a primitive Entity teapot = new Entity(\"texturedTeapot\") .AddComponent(new Transform3D()) .AddComponent(new TeapotMesh()) .AddComponent(new MaterialComponent(){ Material = materialDecorator.Material}) .AddComponent(new MeshRenderer()); this.Managers.EntityManager.Add(teapot); } Create a Texture from code Creating a Texture demands a little bit more effort, and it's defined in this article. Bassically we need to define two main things: TextureDescription structure. DataBoxes with the texture data. TextureDescription The TextureDescription struct that contains all the specifications of the Texture so the graphic card can properly load the buffer data accordingly and be able to extract all their information. Property Values Description TextureType Texture2D, Texture2DArray, Texture1D, Texture1DArray, TextureCube, TextureCubeArray, Texture3D The type of the texture. Width unsigned integer Width of the texture (first dimmension). The maximum value is defined by the device hardware. Height unsigned integer Height of the texture (second dimmension). The maximum value is defined by the device hardware. Depth unsigned integer Depth of the texture (third dimension). Used in Texture3D. The maximum value is defined by the device hardware. ArraySize unsigned integer The number of textures in a Texture Array (either 1D, 2D or Cube). Faces unsigned integer The number of texture faces used in TextureCube and TextureCubeArray. MipLevels unsigned integer Maximum number of mipmap levels in the Texture. ResourceUsage Default: Requires read and write acces from the GPU. Immutable: Can only be read by GPU. Cannot be writtend or accessed by CPU. Dynamic: Can be accessed by the GPU (read only) and the CPU (write only). Used for textures updated in CPU. Staging: Supports data transfer (copy) from the GPU to the CPU. Type of access of the Texture. Usage None, Count2, Count4, Count8, Count16, Count32 Number of samples in the Texture. DataBoxes A DataBox represents a data buffer that contains all pixel of an element of texture. Every mipmap level, array slice or cube face defines its own DataBox."
  },
  "manual/graphics/textures/import_textures.html": {
    "href": "manual/graphics/textures/import_textures.html",
    "title": "Import a texture | Evergine Doc",
    "keywords": "Import a texture In Evergine Studio, importing an image file will create a Texture asset, as explained in this article. Inspect Textures in Asset Details You can find the texture assets in the Assets Details panel when you select a folder in the Project Explorer. Texture files in content directory Textures imported in Evergine create an aditional metadata .wetx file. Supported formats: Evergine supports the following image formats: Extension Compression Alpha Bits per pixel Supported texture types .jpg, jpeg Lossy compression. Configurable No 24 Texture2D .png Lossless compression Yes 8, 24, 48 Texture2D .bmp No compression Yes (not common) 24 Texture2D .gif Indexed colors Yes 8 Texture2D .tga No Yes 32 Texture2D .hdr No No 48 or 96 (high dynamic range) Texture2D .dds Yes (S3, DXT1, DXT3, DXT5) Yes Multiple Texture2D, Texture2DArray, Texture1D, Texture1DArray, TextureCube, TextureCubeArray, Texture3D .ktx Yes (ETC1S) Yes Multiple Texture2D, Texture2DArray, Texture1D, Texture1DArray, TextureCube, TextureCubeArray, Texture3D Sampler State association A Texture graphic resource needs a Sampler State asset for properly filtering it. That's why the Texture asset contains a reference to a SamplerState of your project. This way the Texture has a default SamplerState associated. Evergine will automatically use it."
  },
  "manual/graphics/textures/index.html": {
    "href": "manual/graphics/textures/index.html",
    "title": "Textures | Evergine Doc",
    "keywords": "Textures Textures are assets that usually contains an image. In Evergine they are mostly used in materials to provide color detail in your application. How the texture is viewed in your application depends of the material itself. For example, a texture can be used as diffuse or emissive color information. Textures can also be used in other areas, like Sprites or UI elements. Mipmapping Evergine also supports mipmapping. It can generate or loads the successive half reduction of the texture, consisting the mip levels. This process is crucial when dealing with Texture Filtering (anisotropic, linear, bilinear, etc). Texture types Evergine supports these basic GPU textures types (They are detailed in this section) Texture2D Texture1D Texture1DArray Texture2DArray TextureCube TextureCubeArray Texture3D Supported file types. Evergine supports importing the following texture types: .png .jpg .jpeg .bmp .gif .tga .dds .ktx .hdr Note Evergine will only import the first frame of any animated image file like .gif and will load like an static Texture. In this section Texture types Import Textures How to create a texture from code Texture Editor"
  },
  "manual/graphics/textures/texture_editor.html": {
    "href": "manual/graphics/textures/texture_editor.html",
    "title": "Texture Editor | Evergine Doc",
    "keywords": "Texture Editor Texture Editor allows the editing of texture assets. Double click over a Texture asset shown in Assets Details will open this editor. The editor is composed of 3 main parts: Viewport Shows the Texture with the current configuration. It contains a label with the following information: TextureType Resolution in pixels Pixel Format. Size of the texture on disc. Note An example of descriptive text would be Texture2D 4096x4096 px R8G8B8A8_Unorm.- Toolbox Helps with the texture visualization. Has the following options: Item Description Each button enables or disables the Texture channels. Slider that sets the current Mipmap level of the texture. This control will be hidden in case of textures without mipmapping Sets the background color on the Viewport. Properties Panel with all the Texture properties. They don't depend on the profile. Property Description GenerateMipmaps If Evergine will generate all the mipmaps for the Texture. PremultipliedAlpha If the RGB channels are multiplied by the Alpha (A) channel. Sampler The SamplerState asset that will defines how the Texture is sampled and filtered. NinePathType (Currently not supported ) Sets the ninepath information of the image. It defines how the texture can stretch un a ui component. Profile Properties Properties that can be changed in every app profile. Property Description ScalingType Sets how the texture will be scaled: Original: Don't affect the image size. Percentage: Scale the image using the ScaledPercentage value. FreeForm: Set the Texture size directy using the ScaledWidth and ScaledHeight. PowerOfTwo: Scales to the smallest power of two size per dimension. SquarePowerOfTwo: Scales to the smallest square power of two size per dimension. ScaledPercentage Defines the scale factor of the texture when using Percentage scaling type. 1.0 by default. ScaledWidth Defines the width of Texture when using Freeform scaling type. ScaledHeight Defines the height of Texture when using Freeform scaling type. PixelFormat Defines the size, elements and name of Texture pixels."
  },
  "manual/graphics/textures/textureTypes.html": {
    "href": "manual/graphics/textures/textureTypes.html",
    "title": "Texture Types | Evergine Doc",
    "keywords": "Texture Types Modern graphic APIs like DirectX12 or Vulkan supports a wide range of Texture types because there are many ways that a Texture can be accessed and presented. Evergine supports all of them. However, some of them are only loaded using some specific image formats (like .dds or .ktx); Texture 2D The classic two dimensional texture. It has width and height and as a graphic resource can be accessed using two texture coordinates UV. Almost every image file can be imported as a Texture2D asset because it's the most common one. Usage They are used for almost everything, like Sprites, Diffuse channel, Normal mapping. Texture 2D Array The same as the Texture2D above, but it contains an array of textures. Modern graphics APIs support texture arrays, which is an array of textures with the same size and format. They are treated as the same graphic resource, it also can have mipmapping information and can be sampled using an extra texture coordinate that indicates which array item is needed to be sampled. Usage They are useful, for example, for creating sprite atlas or animations, which every element of the array containing a frame of the animation or atlas. Texture 1D Texture that only contains only one dimension ( width ) and are sampled using only one texture coordinate. Usage Useful when dealing with one dimensional info like gradients, for example. Texture 1D Array Array of one dimensional textures as specified before. It's sampled using two texture coordinates: one for the texture address and another for the element in the array. Usage Using multiple gradients for a custom shader. Texture Cube It's commonly known as Cubemap. It's a texture that contains 6 individual 2D textures that each form one side of a cube. It has the useful property that they can be sampled using a direction vector instead of texture coordinates. It's like having a 1x1x1 cube and a vector with the sampling direction at its center. It will return the texel placed in the intersection point. Like in the following diagram. Usage TextureCubes are mainly used as environment textures for IBL, like radiance and irradiance texture cubes for specular or diffuse components, or creating a Skyboxes for creating the background environment of your scene. Texture Cube Array Texture Cube Arrays take a step further than the normal cubemap and stores an array of texture cubes, so they need an aditional coordinate to retrieve the element of the array. Usage TextureCubesArray is an intersting choice when creating Reflection Probes of your scene. in one resource can store all the probes of the scene. Texture 3D A 3D Texture is an image that contains information in three dimensions rather the standard two. Usage They are commonly used to simulate volumetric effects such fog, smoke, for raymarching operations or for sprite animation blending."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Evergine manual | Evergine Doc",
    "keywords": "Evergine manual These pages contain information about how to use Evergine. This manual helps you learn how to use Evergine and its associated tools. You can read it from start to finish, or use it as a reference Note This documentation is a work-in-progress and updated regularly with new content. If you find something that can be improved, please contact us in the feedback repository In this section Getting started Basics Evergine Studio Platforms Graphics Input Audio Physics XR Extensions Addons"
  },
  "manual/input/button_states.html": {
    "href": "manual/input/button_states.html",
    "title": "Button states | Evergine Doc",
    "keywords": "Button states The input API defines four valid states for a button. The transition between different states is the same no matter which platform Evergine is running. When an input key event is raised by the operating system, it is received by an ButtonStateTracker that handles the state changes of the key. States State Description Released The key or button is not pressed for more than one frame in a row. Pressing The key or button is pressed and is transitioning from Released to Pressed state. This state is an intermediate state (rising edge) and will last only one frame. Pressed The key or button is pressed for more than one frame in a row. Releasing The key or button is not pressed and is transitioning from Pressed to Released state. This state is an intermediate state (falling edge) and will last only one frame. Tip Pressing and Releasing states are very useful to trigger an action only once every time a key is pressed."
  },
  "manual/input/index.html": {
    "href": "manual/input/index.html",
    "title": "Input | Evergine Doc",
    "keywords": "Input Reading the application input is the most essential part of providing user interaction in graphic applications. Every application should support at least one input device. Evergine captures keyboard, mouse and touch from different surfaces and map the results into a unified API with same key definitions and expected behavior. Input and Surfaces In Evergine, each application Surface exposes different Input dispatchers. So, for example, an Evergine application could launch two separate windows, and each surface may be interacted only when this window is focused. In this section Button states Keyboard Mouse Touch"
  },
  "manual/input/keyboard.html": {
    "href": "manual/input/keyboard.html",
    "title": "Keyboard | Evergine Doc",
    "keywords": "Keyboard The keyboard is the most common input device on desktop platforms. You can acces the keyboard state by using KeyboardDispatcher. KeyboardDispatcher The KeyboardDispatcher is a class used to track keyboard key events. public abstract class KeyboardDispatcher { public event EventHandler<KeyCharEventArgs> KeyChar; public event EventHandler<KeyEventArgs> KeyDown; public event EventHandler<KeyEventArgs> KeyUp; public bool IsKeyDown(Keys key); public ButtonState ReadKeyState(Keys key); } Events Events Description KeyChar It occurs when a key is pressed and a character is generated. KeyChar event is useful for text input. KeyDown and KeyUp This events are available to track keyboard pressed keys but it is recommended to use IsKeyDown and ReadKeyState methods. IsKeyDown: Gets a value indicating whether the current state of a keyboard key is Pressing or Pressed. ReadKeyState: Gets the current state of a keyboard key. Using KeyboardDispatcher The KeyboardDispatcher can be found within the Display or Surface objects. The following sample code can be used to access the keyboard dispatcher from a Component or Service. [BindService] protected GraphicsPresenter graphicsPresenter; protected override void Update(TimeSpan time) { KeyboardDispatcher keyboardDispatcher = this.graphicsPresenter.FocusedDisplay?.KeyboardDispatcher; if (keyboardDispatcher?.ReadKeyState(Keys.A) == ButtonState.Pressing) { // Do something } }"
  },
  "manual/input/mouse.html": {
    "href": "manual/input/mouse.html",
    "title": "Mouse | Evergine Doc",
    "keywords": "Mouse Mouse is the most common input device on desktop platforms. You can access the mouse state by using the MouseDispatcher. MouseDispatcher The MouseDispatcher is a class used to track mouse button events. It inherits from PointerDispatcher so it can be used to produce touch events using the mouse. public abstract class MouseDispatcher : PointerDispatcher { public MouseButtons State { get; } public Point ScrollDelta { get; } public Point PositionDelta { get; } public Point Position { get; } public abstract CursorTypes CursorType { get; } public bool IsMouseOver { get; } public event EventHandler<MouseButtonEventArgs> MouseButtonUp; public event EventHandler<MouseButtonEventArgs> MouseButtonDown; public event EventHandler<MouseEventArgs> MouseLeave; public event EventHandler<MouseEventArgs> MouseEnter; public event EventHandler<MouseEventArgs> MouseMove; public event EventHandler<MouseScrollEventArgs> MouseScroll; public bool IsButtonDown(MouseButtons button); public ButtonState ReadButtonState(MouseButtons button); public bool TrySetCursorPosition(Point position); public abstract bool TrySetCursorType(CursorTypes cursorType); } Properties It gives you the following properties: Properties Description State Gets a flag enum that indicates which mouse buttons are pressed at the current frame. Position Gets the mouse absolute screen position at the current frame. PositionDelta property gets the mouse delta position since the last frame. In other words, it describes how much the mouse has. ScrollDelta Gets the mouse scroll increment since the last frame. The value X indicates a horizontal scroll increment. The value is positive if the mouse wheel is rotated to the right or negative if the mouse wheel is rotated to the left. The value Y indicates a vertical scroll increment. The value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user). CursorType property gets the mouse active cursor type. IsMouseOver Indicates if the mouse is over the Surface. Events You can be subscribed to events to ve notified when mouse state change: Events Description MouseMove and MouseScroll This events track changes in mouse position and scroll. MouseButtonDown and MouseButtonUp This events are available to track mouse pressed buttons but it is recommended to use IsButtonDown and ReadButtonState methods: IsButtonDown: Gets a value indicating whether the current state of a mouse button is Pressing or Pressed. ReadButtonState: Gets the current state of a mouse button. MouseLeave and MouseEnter They indicate if the mouse enter or leave the Surface, so, they track changes in the IsMouseOver property. Useful Methods Events Description TrySetCursorPosition Try to update the cursor position. When this method is supported by the patform, this method will return true. TrySetCursorType Try to update the cursor type. When this method is supported by the patform, this method will return true. Using MouseDispatcher The MouseDispatcher can be found within the Display or Surface objects. The following sample code can be used to access the mouse dispatcher from a Component or Service. [BindService] protected GraphicsPresenter graphicsPresenter; protected override void Update(TimeSpan time) { MouseDispatcher mouseDispatcher = this.graphicsPresenter.FocusedDisplay?.MouseDispatcher; if (mouseDispatcher?.ReadButtonState(MouseButtons.Left) == ButtonState.Pressing) { // Do something } }"
  },
  "manual/input/touch.html": {
    "href": "manual/input/touch.html",
    "title": "Touch | Evergine Doc",
    "keywords": "Touch Touch is the most common input system on mobile devices. Pointers are points on the device screen corresponding to finger touches. Devices with multi-touch functionality support multiple simultaneous pointers. PointerDispatcher The PointerDispatcher is a class used to track pointer events. public abstract class PointerDispatcher { public IList<PointerPoint> Points { get; } public event EventHandler<PointerEventArgs> PointerDown; public event EventHandler<PointerEventArgs> PointerUp; public event EventHandler<PointerEventArgs> PointerMove; } Points property gets a list of points detected inside the surface at the current frame. PointerDown, PointerUp and PointerMove events are available to track touch and pointer points. PointerPoint The PointerPoint class give the following information: Property Description Id A number that is uniquely associated to this touch. It is usually given by the underliying platform. Position The pointer position in screen coordinates State Get the current pointer state. See Button States for more information. Using PointerDispatcher The PointerDispatcher can be found within the Display or Surface objects. The following sample code can be used to access the pointer dispatcher from a Component or Service. [BindService] protected GraphicsPresenter graphicsPresenter; protected override void Update(TimeSpan time) { PointerDispatcher pointerDispatcher = this.graphicsPresenter.FocusedDisplay?.PointerDispatcher; if (keyboardDispatcher == null) { return; } foreach (PointerPoint p in keyboardDispatcher.Points) { if (p.State == ButtonState.Pressing) { // Do something } } }"
  },
  "manual/physics/colliders/box_collider.html": {
    "href": "manual/physics/colliders/box_collider.html",
    "title": "Box Collider | Evergine Doc",
    "keywords": "Box Collider A Box shaped collider. BoxCollider3D component To use a Box Collider in Evergine, you only need to add a BoxCollider3D component to your entity: Properties Property Default Description Size 1,1,1 This property define the size of the Box collider. The Size value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Size value is relative to the mesh extents. In that case, a value of 1,1,1 let the BoxCollider3D to fit the entity mesh. If the entity hasn't any meshes, the Size value is used as scene units. In that case, a value of 2,2,2 will create a box collider of 2x2x2 units. Offset 0,0,0 Offset the collider respect the owner entity. The Offset value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Offset value is relative to the mesh extents. If the entity hasn't any meshes, the Offset value is used as scene units. RotationOffset 0,0,0 Apply to the Collider a rotation offset respect the owner entity. Margin 0.04 Physic Engine uses a small collision margin for collision shapes, to improve performance and reliability of the collision detection."
  },
  "manual/physics/colliders/capsule_collider.html": {
    "href": "manual/physics/colliders/capsule_collider.html",
    "title": "Capsule Collider | Evergine Doc",
    "keywords": "Capsule Collider A Capsule shaped collider. A capsule is a special shape defined by two properties: Radius: The radius of the collider's local width. Height: The total height of the collider. SphereCollider3D component To use a Sphere Collider in Evergine, you only need to add a SphereCollider3D component to your entity: Properties Property Default Description Radius 0.5 This property define the radius of the Capsule collider. The Radius value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Radius value is relative to the mesh extents. If the entity hasn't any meshes, the Radius value is used as scene units. Height 1 This property define the total height of the Capsule collider. The Height value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Height value is relative to the mesh height. If the entity hasn't any meshes, the Radius value is used as scene units. Offset 0,0,0 Offset the collider respect the owner entity. The Offset value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Offset value is relative to the mesh extents. If the entity hasn't any meshes, the Offset value is used as scene units. Margin 0.04 Physic Engine uses a small collision margin for collision shapes, to improve performance and reliability of the collision detection."
  },
  "manual/physics/colliders/cone_collider.html": {
    "href": "manual/physics/colliders/cone_collider.html",
    "title": "Cone Collider | Evergine Doc",
    "keywords": "Cone Collider A Cone shaped collider. ConeCollider3D component To use a Sphere Collider in Evergine, you only need to add a ConeCollider3D component to your entity: Properties Property Default Description Radius 0.5 This property define the radius of the Cone collider. The Radius value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Radius value is relative to the mesh extents. If the entity hasn't any meshes, the Radius value is used as scene units. Height 1 This property define the total height of the Cone collider. The Height value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Height value is relative to the mesh height. If the entity hasn't any meshes, the Radius value is used as scene units. Offset 0,0,0 Offset the collider respect the owner entity. The Offset value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Offset value is relative to the mesh extents. If the entity hasn't any meshes, the Offset value is used as scene units. Margin 0.04 Physic Engine uses a small collision margin for collision shapes, to improve performance and reliability of the collision detection."
  },
  "manual/physics/colliders/cylinder_collider.html": {
    "href": "manual/physics/colliders/cylinder_collider.html",
    "title": "Cylinder Collider | Evergine Doc",
    "keywords": "Cylinder Collider A Cylinder shaped collider. CylinderCollider3D component To use a Cylinder Collider in Evergine, you only need to add a CylinderCollider3D component to your entity: Properties Property Default Description Radius 0.5 This property define the radius of the Cylinder collider. The Radius value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Radius value is relative to the mesh extents. If the entity hasn't any meshes, the Radius value is used as scene units. Height 1 This property define the total height of the Cylinder collider.The Height value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Height value is relative to the mesh height. If the entity hasn't any meshes, the Radius value is used as scene units. Offset 0,0,0 Offset the collider respect the owner entity. The Offset value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Offset value is relative to the mesh extents. If the entity hasn't any meshes, the Offset value is used as scene units. Margin 0.04 Physic Engine uses a small collision margin for collision shapes, to improve performance and reliability of the collision detection."
  },
  "manual/physics/colliders/index.html": {
    "href": "manual/physics/colliders/index.html",
    "title": "Colliders | Evergine Doc",
    "keywords": "Colliders Colliders are used to define the physical shape of a Physic Body. Colliders are invisible and don't need to be the exact same shape as the object mesh and in a fact, a rough approximation is often more efficient and indistinguishable in your application. Evergine provides various collider types, such as Box, Sphere or Capsule. Using simple collider shapes helps with application performance optimizations. However, if you need more detailed and exact collision for your object, use the Mesh collider. Physics Bodies and Colliders As we mentioned before in Physics Bodies section. A Collider needs a Physic Body to be attached, and a Physic Body itself needs Colliders to define their shape. A Physic Body search their attached collider in their child hierarchy, including the owner's entity of the physic body. This also implies that a Physic Body could have multiple colliders attached to it. Simple shapes This is the most common scenario. Your entity has a Physic Body component (RigidBody3D in that case), and one or more colliders attached to the same entity (BoxCollider3D in that case). Compound shapes This is another possible scenario. In that case we have an entity hierarchy. In that case, the parent entity has a StaticBody3D component, and we have added several entities containing several colliders (a BoxCollider3D and a SphereCollider3D). This cause that the final shape of the body is compounded of all attached colliders. Tip As a rule of thumb, create a physical body when you want to interact with it indistinguishable of other bodies. For example, to capture collision events. In this section Box Collider Sphere Collider Capsule Collider Cylinder Collider Cone Collider Mesh Collider"
  },
  "manual/physics/colliders/mesh_collider.html": {
    "href": "manual/physics/colliders/mesh_collider.html",
    "title": "Mesh Collider | Evergine Doc",
    "keywords": "Mesh Collider A collider represented by an arbitrary mesh. A Mesh Collider uses the owner entity meshes to define their shape. They use all MeshComponent to obtain meshes and create colliders with them. Types of Mesh Collider Default mode By default, a Mesh Collider uses the entire triangle mesh to generate a collider shape. This will create the better precision and fidelity. However, only Static Bodies can have Mesh Colliders in the default mode. Mesh Colliders in the default mode is more suitable to create collisions for static scenery objects, such as walls, terrain, props, etc... Important Only Static Bodies can have Mesh Colliders in the default mode. Convex Hull If you want to use Mesh Colliders in dynamic bodies like Rigid Bodies, you need to set your Mesh Collider to use a Convex Hull. After using this mode, the Physic Engine creates a convex approximation of the mesh, allowing it to be used in dynamic bodies. As a counterpart, the precision of the collision is degraded. Convex colliders are suitable for movable physics objects like, chairs, tables, stones, etc... MeshCollider3D component To use a Mesh Collider in Evergine, you only need to add a MeshCollider3D component to your entity. Note Is obvious, but to use a MeshCollider3D, the owner entity is required to have at least one MeshComponent Properties Property Default Description Size 1,1,1 This property allows you to scale the generated Mesh Collider. Offset 0,0,0 Position offset of the collider respect the owner entity. The units is relative of the size of the entity mesh. RotationOffset 0,0,0 Apply to the Collider a rotation offset respect the owner entity. Margin 0.04 Physic Engine uses a small collision margin for collision shapes, to improve performance and reliability of the collision detection. AsyncShapeCreation false Allows to create the Mesh colliders in an asynchronous way. Create mesh colliders could be very CPU intensive. By default the execution thread is blocked until the Mesh Collider is generated. If this property is set to true the generation is done in a thread apart, releasing the main thread. However, it is possible that some frames the collider won't work."
  },
  "manual/physics/colliders/sphere_collider.html": {
    "href": "manual/physics/colliders/sphere_collider.html",
    "title": "Sphere Collider | Evergine Doc",
    "keywords": "Sphere Collider A Sphere shaped collider. SphereCollider3D component To use a Sphere Collider in Evergine, you only need to add a SphereCollider3D component to your entity: Properties Property Default Description Radius 0.5 This property define the radius of the Sphere collider. The Radius value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Radius value is relative to the mesh extents, to be more specific. In that case, a value of 0.5 let the SphereCollider3D to fit the entity mesh. If the entity hasn't any meshes, the Radius value is used as scene units. In that case, a value of 2 will create a Sphere collider of a radius of 2 units, and a diameter of 4 units. Offset 0,0,0 Offset the collider respect the owner entity. The Offset value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Offset value is relative to the mesh extents. If the entity hasn't any meshes, the Offset value is used as scene units. Margin 0.04 Physic Engine uses a small collision margin for collision shapes, to improve performance and reliability of the collision detection."
  },
  "manual/physics/index.html": {
    "href": "manual/physics/index.html",
    "title": "Physics | Evergine Doc",
    "keywords": "Physics Evergine provides real-time physics simulation including collision, gravity and other forces. Using built-in physics engine helps with creating realistic behavior for your scene entities. This section explains how physics work, how to add them to your scene, and how to control them in your custom components. Built-in Physics engine Evergine uses the open-source Bullet Physics engine. For detailed information, see the Bullet User Note Evergine provides an abstraction API that allows you to provide your custom physics integration. In this section PhysicManager and Bullet Physics Bodies Colliders Queries"
  },
  "manual/physics/joints/cone_twist_joint.html": {
    "href": "manual/physics/joints/cone_twist_joint.html",
    "title": "Cone Twist Joint | Evergine Doc",
    "keywords": "Cone Twist Joint For ragdolls, the Cone-Twist Joint is useful for limbs like the upper arm. It is a special point-to-point joint that adds cone and twist axis limits. A Cone-Twist Joint is similar to a Point-to-Point Joint Relationship, but specifies an elliptical cone within which rotation may take place. The cone is described by specifying a maximum rotation on each axis. ConeTwistJoint3D In Evergine, a Cone-Twist Joint is implemented using the ConeTwistJoint3D component. Properties Common Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Anchor 0, 0, 0 The point which defines the center of the joint in source entity local space. All physics-based simulations use this point as the center in calculations. AutoConfigureConnected true Enable this setting to automatically calculate the ConnectedAnchor position to match the global position of the anchor property. This is the default setting. Disable it to configure the position of the connected anchor manually. ConnectedAnchor auto-calculated Manually configure the connected anchor position, in the connected body local space. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Limit properties Property Default Description ConeTwistSettings 30º, 30º, 30º Defines the limitation angle in each axis. LimitSoftness 0.9 Once an angle is greater than softness * the maximum angle, the constraint begins to take effect. Lowering the value of softness softens the constraint boundaries. LimitBiasFactor 0.3 The rate at which the constraint corrects errors in orientation. A value of 1 will ensure that the constraint is always obeyed. It is recommended to keep bias between 0.2 and 0.5. LimitRelaxationFactor 1 The rate at which the angular velocity is changed by the constraint. A low value means the constraint will modify the velocities slowly, leaving the boundaries appearing softer. Motor Properties The following properties set the motor properties of the joint. Property Default Description UseMotor false If enabled, the motor makes the object spin around. MotorTargetRotation 0, 0, 0 The target angular speed on each axis. MotorTargetImpulse 0 The impulse applied in order to attain the speed. Using Cone-Twist Joint This snippet creates a serie of bodies attached using Cone-Twist joints. protected override void CreateScene() { this.Managers.RenderManager.DebugLines = true; // Load your material var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.CrateMat); int chainLength = 4; Entity previousLink = null; // Create the chain... for (int i = 0; i < chainLength; i++) { /// The first object is kinematic (we don't want a falling chain :D) var rigidObjectType = (i == 0) ? RigidBodyType3D.Kinematic : RigidBodyType3D.Dynamic; // Create the link entities... var link = this.CreateCube(cubeMaterial, new Vector3(i, 0, 0), 0.75f, rigidObjectType); if (previousLink != null) { // Limit Joint to 40º or 10º... var angle = MathHelper.ToRadians(i % 2 == 0 ? 40 : 10); // Add a PointToPoint joint to the previous link connected to the current link... previousLink.AddComponent(new ConeTwistJoint3D() { ConnectedEntityPath = link.EntityPath, Anchor = new Vector3(0.5f, 0, 0), // Sets the anchor between the two objects ConeTwistSettings = Vector3.One * angle, // Sets the limit angle... }); } previousLink = link; this.Managers.EntityManager.Add(link); } } private Entity CreateCube(Material material, Vector3 position, float size, RigidBodyType3D rigidBodyType) { Entity cube = new Entity() .AddComponent(new Transform3D() { Position = position }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh() { Size = size }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() // Add a RigidBody3D component... { PhysicBodyType = rigidBodyType, }) .AddComponent(new BoxCollider3D()); // Add a BoxCollider3D to the physic body... return cube; }"
  },
  "manual/physics/joints/fixed_joint.html": {
    "href": "manual/physics/joints/fixed_joint.html",
    "title": "Fixed Joint | Evergine Doc",
    "keywords": "Fixed Joint Fixed Joints restricts an object’s movement to be dependent upon another object. This is somewhat similar to Parenting but is implemented through physics rather than Transform hierarchy. The best scenarios for using them are when you have objects that you want to easily break apart from each other, or connect two object’s movement without parenting. FixedJoint3D In Evergine, a Fixed Joint is implemented using the FixedJoint3D component. Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Axis 1, 0, 0 This is the relative axis which locates the joint frame relative to the target body. Anchor 0, 0, 0 The point which defines the center of the joint in source entity local space. All physics-based simulations use this point as the center in calculations. AutoConfigureConnected true Enable this setting to automatically calculate the ConnectedAnchor position and ConnectedAxis to match the global position of the anchor property. This is the default setting. Disable it to configure the position of the connected anchor and connected axis manually. ConnectedAxis auto-calculated The joint axis relative to the connected body. ConnectedAnchor auto-calculated Manually configure the connected anchor position, in the connected body local space. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Using Fixed Joint This snippet creates two bodies and add a fixed joint maintaining the relative position at start. This is because the AutoConfigureConnected property is set to true. protected override void CreateScene() { // Load your material var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.Materials.CubeMaterial); var floorMaterial = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); // Create the floor var floor = this.CreateFloor(floorMaterial); var cubeA = this.CreateCube(cubeMaterial, new Vector3(0, 2, 0), 0.5f); var cubeB = this.CreateCube(cubeMaterial, new Vector3(0, 3, 0), 0.5f); // Add a Fixed Joint to cubeA... cubeA.AddComponent(new FixedJoint3D(){ ConnectedEntityPath = cubeB.EntityPath // Connect to cubeB }); // Register entities to EntityManager... this.Managers.EntityManager.Add(floor); this.Managers.EntityManager.Add(cubeA); this.Managers.EntityManager.Add(cubeB); } private Entity CreateFloor(Material material) { Entity floor = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new PlaneMesh() { Width = 10, Height = 10 }) // Create a 10x10 floor plane .AddComponent(new MeshRenderer()) .AddComponent(new StaticBody3D()) // Add a StaticBody component... .AddComponent(new BoxCollider3D()); // Add a BoxCollider3D to the physic body... return floor; } private Entity CreateCube(Material material, Vector3 position, float size) { Entity cube = new Entity() .AddComponent(new Transform3D() { Position = position }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh() { Size = size }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D()) // Add a RigidBody3D component... .AddComponent(new BoxCollider3D()); // Add a BoxCollider3D to the physic body... return cube; }"
  },
  "manual/physics/joints/gear_joint.html": {
    "href": "manual/physics/joints/gear_joint.html",
    "title": "Gear Joint | Evergine Doc",
    "keywords": "Gear Joint A Gear Joint is a type of constraint that allows you to create a relationship between two rigid bodies that is based on their angular velocities. Specifically, it lets you specify a gear ratio between the angular velocities of the two bodies, which can be used to create realistic mechanical systems like gears, pulleys, and other types of machinery. GearJoint3D In Evergine, a Gear Joint is implemented using the GearJoint3D component. Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Axis 0, 1, 0 The axis rotation of the gear. Ratio 1 Sets the desired angular speed ratio between the two objects. For example, if you want one object to rotate at half the speed of the other object, set the value of Ratio to 0.5. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Using Gear Joint This snippet creates 3 gears of different sizes interconnected. protected override void CreateScene() { this.Managers.RenderManager.DebugLines = true; // Load your material var material = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); float sliderLength = 3; // Create the slider holder... Entity gear1 = new Entity() .AddComponent(new Transform3D()) .AddComponent(new Spinner() { AxisIncrease = new Vector3(0, 1f, 0) }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CylinderMesh() { Height = 0.1f, Diameter = 2}) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Kinematic, LinearFactor = Vector3.Zero, // Lock the object position to avoid gravity fall... }) .AddComponent(new CylinderCollider3D()); Entity gear2 = new Entity() .AddComponent(new Transform3D() { LocalPosition = new Vector3(1.5f, 0, 0) }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CylinderMesh() { Height = 0.1f, Diameter = 1 }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Dynamic, LinearFactor = Vector3.Zero, // Lock the object position to avoid gravity fall... }) .AddComponent(new CylinderCollider3D()); Entity gear3 = new Entity() .AddComponent(new Transform3D() { LocalPosition = new Vector3(-1f, 0.25f, 0), LocalRotation = new Vector3(0, 0, MathHelper.PiOver2) }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CylinderMesh() { Height = 0.1f, Diameter = 0.5f, Tessellation = 8 }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Dynamic, LinearFactor = Vector3.Zero, // Lock the object position to avoid gravity fall... }) .AddComponent(new CylinderCollider3D()); gear1.AddComponent(new GearJoint3D() { ConnectedEntityPath = gear2.EntityPath, Ratio = 0.5f, Axis = Vector3.UnitY, }); gear2.AddComponent(new GearJoint3D() { ConnectedEntityPath = gear3.EntityPath, Ratio = 0.5f, Axis = -Vector3.UnitX, }); this.Managers.EntityManager.Add(gear1); this.Managers.EntityManager.Add(gear2); this.Managers.EntityManager.Add(gear3); }"
  },
  "manual/physics/joints/generic_6dof_joint.html": {
    "href": "manual/physics/joints/generic_6dof_joint.html",
    "title": "Generic 6DoF Joint | Evergine Doc",
    "keywords": "Generic 6DoF Joint The Generic 6DoF Joint can emulate a variety of standard constraints if each of the six Degrees of Freedom (DoF) is configured. The first 3 DoFs axis are linear axis, which represent the translation of rigid bodies, while the latter 3 DoFs axis represent the angular motion. Each axis can be locked, free, or limited. By default, all axes are unlocked. Generic6DoFJoint3D In Evergine, a Generic 6DoF Joint is implemented using the Generic6DoFJoint3D component. Properties Common Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Anchor 0, 0, 0 The point which defines the center of the joint in source entity local space. All physics-based simulations use this point as the center in calculations. AutoConfigureConnected true Enable this setting to automatically calculate the ConnectedAnchor position to match the global position of the anchor property. This is the default setting. Disable it to configure the position of the connected anchor manually. ConnectedAnchor auto-calculated Manually configure the connected anchor position, in the connected body local space. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Limit Properties The following properties set the limits of the object movement. Property Default Description UseLinearLimit false If enabled, the position of the connected object will be restricted within the LowerAngularLimit & UpperAngularLimit values.. LowerLinearLimit 0 The lower distance of the limit. UpperLinearLimit 0 The upper distance of the limit. UseAngularLimit false If enabled, the angular rotations will be restricted within the LowerAngularLimit & UpperAngularLimit values.. LowerAngularLimit 0 The lowest angle the rotation can go. UpperAngularLimit 0 The highest angle the rotation can go. Using Generic 6DoF Joint This snippet uses a Generic6DoF to replicate the same functionality showed in the Slider Joint example. protected override void CreateScene() { this.Managers.RenderManager.DebugLines = true; // Load your material var material = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.CrateMat); float sliderLength = 3; // Create the slider holder... Entity slider = new Entity() .AddComponent(new Transform3D() { Scale = new Vector3(sliderLength, 0.1f, 0.1f), Rotation = new Vector3(0, 0, MathHelper.ToRadians(-10)) // Rotate 10º the slider axis }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Kinematic }); // Create the sliding object... Entity cube = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = cubeMaterial }) .AddComponent(new CubeMesh() { Size = 0.5f }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Dynamic, }); // Create the Joint slider.AddComponent(new Generic6DofJoint3D() { ConnectedEntityPath = cube.EntityPath, UseLinearLimit = true, // Limit the slider LowerLinearLimit = new Vector3(0, 0, -sliderLength / 2), UpperLinearLimit = new Vector3(0, 0, sliderLength / 2), }); this.Managers.EntityManager.Add(slider); this.Managers.EntityManager.Add(cube); }"
  },
  "manual/physics/joints/hinge_joint.html": {
    "href": "manual/physics/joints/hinge_joint.html",
    "title": "Hinge Joint | Evergine Doc",
    "keywords": "Hinge Joint The Hinge Joint restricts the translation and two additional angular degrees of freedom, so the body can only rotate around one defined axis. This joint is useful for representing doors or wheels rotating around an axis. The user can specify limits and motor settings for the hinge. HingeJoint3D In Evergine, a Hinge Joint is implemented using the HingeJoint3D component. Common Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Axis 1, 0, 0 The direction of the axis around which the body swings. The direction is defined in local space. Anchor 0, 0, 0 The position of the axis around which the body swings. The position is defined in local space. AutoConfigureConnected true Enable this setting to automatically calculate the ConnectedAnchor position and ConnectedAxis to match the global position of the anchor property. This is the default setting. Disable it to configure the position of the connected anchor and connected axis manually. ConnectedAxis auto-calculated The joint axis relative to the connected body. ConnectedAnchor auto-calculated Manually configure the connected anchor position, in the connected body local space. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Limit Properties The following properties set the limits of the rotation movement. Property Default Description UseAngularLimit false If enabled, the angle of the hinge will be restricted within the LowerAngularLimit & UpperAngularLimit values.. LowerAngularLimit 0 The lowest angle the rotation can go. UpperAngularLimit 0 The highest angle the rotation can go. LimitSoftness 0.9 Once an angle is greater than softness * the maximum angle, the constraint begins to take effect. Lowering the value of softness softens the constraint boundaries. LimitBiasFactor 0.3 The rate at which the constraint corrects errors in orientation. A value of 1 will ensure that the constraint is always obeyed. It is recommended to keep bias between 0.2 and 0.5. LimitRelaxationFactor 1 The rate at which the angular velocity is changed by the constraint. A low value means the constraint will modify the velocities slowly, leaving the boundaries appearing softer. Motor Properties The following properties set the motor properties of the joint. Property Default Description UseMotor false If enabled, the motor makes the object spin around. MotorTargetVelocity 0 The speed the object tries to attain. MotorTargetImpulse 0 The impulse applied in order to attain the speed. Using Hinge Joint This snippet creates a small bridge of a series of connected bodies. protected override void CreateScene() { this.Managers.RenderManager.DebugLines = true; // Load your material var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); int chainLength = 6; Entity previousLink = null; var size = new Vector3(0.5f, 0.1f, 2); var separation = 0.6f; // Create the chain... for (int i = 0; i < chainLength; i++) { /// The first object is kinematic (we don't want a falling chain :D) var rigidObjectType = (i == 0) ? RigidBodyType3D.Kinematic : RigidBodyType3D.Dynamic; // Create the link entities... var link = this.CreateCube(cubeMaterial, new Vector3(i * separation, 0, 0), size, rigidObjectType); if (previousLink != null) { // Add a PointToPoint joint to the previous link connected to the current link... previousLink.AddComponent(new HingeJoint3D() { ConnectedEntityPath = link.EntityPath, Axis = Vector3.Forward, // Sets the hinge axis to Z Anchor = new Vector3(separation / 2, 0, 0) // Sets the Anchor between the Source and Connected body }); } previousLink = link; this.Managers.EntityManager.Add(link); } } private Entity CreateCube(Material material, Vector3 position, Vector3 size, RigidBodyType3D rigidBodyType) { Entity cube = new Entity() .AddComponent(new Transform3D() { Position = position, Scale = size }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() // Add a RigidBody3D component... { PhysicBodyType = rigidBodyType }) .AddComponent(new BoxCollider3D()); // Add a BoxCollider3D to the physic body... return cube; } Add Motor At the end of the previous CreateScene() method, add the following code: var firstHinge = this.Managers.EntityManager.FindFirstComponentOfType<HingeJoint3D>(); firstHinge.UseMotor = true; firstHinge.MotorTargetVelocity = 4; firstHinge.MotorTargetImpulse = 100; This will produce the following effect:"
  },
  "manual/physics/joints/index.html": {
    "href": "manual/physics/joints/index.html",
    "title": "Joints | Evergine Doc",
    "keywords": "Joints A Joint constrains the way two RigidBodies move relative to one another. A typical use for a joint would be to model a door hinge or the shoulder of a character. Evergine has a set of default joint types (point to point, hinge, etc...) that allows developers to make many different types of constraints simply by changing some properties. Joints and RigidBodies In Evergine you can create Joints by adding the proper component (HingeJoint3D for example) to an Entity that contains a RigidBody3D component. This body is treated as Source Rigid Body. A Joint always need to be connected to another RigidBody, which is named Connected Rigid Body. Joint Anchor The position offset of the joint respect the Source RigidBody is called Anchor. The offset position respect the connected Rigid Body is the Connected Anchor. Breaking joints You can use the BreakPoint properties to set limits for the joint's strength. If these are greater than 0, and a force greater than these limits are applied to the object, the joint will be destroyed and will no longer be confined by its restraints. Supported Joint types Joint Description Fixed Joint Fixed Joints restricts an object’s movement to be dependent upon another object. This is somewhat similar to a parent entity but is implemented through physics rather than Entity hierarchy. The best scenarios for using them are when you have objects that you want to easily break apart from each other, or connect two object’s movement without parenting. Point-to-Point Joint The Point-to-Point Joint limits the translation so that pivot points between the two rigid bodies match in world space. You can use the Point to Point joint to create effects, such as a chain-link, or to pin objects together. Hinge Joint The Hinge Joint restricts the translation and two additional angular degrees of freedom, so the body can only rotate around one defined axis. This joint is useful for representing doors or wheels rotating around an axis. The user can specify limits and motor settings for the hinge. Slider Joint The Slider Joint allows rigid bodies to rotate around one axis and translate along the same axis. Cone Twist Joint For ragdolls, the Cone-Twist Joint is useful for limbs like the upper arm. It is a special point-to-point joint that adds cone and twist axis limits. Gear Joint A Gear Joint is a type of constraint that allows you to create a relationship between two rigid bodies that is based on their angular velocities. Specifically, it lets you specify a gear ratio between the angular velocities of the two bodies, which can be used to create realistic mechanical systems like gears, pulleys, and other types of machinery. Generic 6DoF Joint The Six Degrees-Of-Freedom Joint can emulate a variety of standard constraints if each of the six Degrees of Freedom (DoF) is configured. The first 3 DoFs axis are linear axis, which represent the translation of rigid bodies, while the latter 3 DoFs axis represent the angular motion. Each axis can be locked, free, or limited. By default, all axes are unlocked. Spring Joint The Spring Joint is a variant of the previous Six Degrees-of-Freedom joint that includes the addition of springs for each of the degrees of freedom. Springs and motors cannot be combined on this constraint. In this section Fixed Joint Point to Point Joint Hinge Joint Slider Joint Cone Twist Joint Gear Joint Generic 6DoF Joint Spring Joint"
  },
  "manual/physics/joints/point_to_point_joint.html": {
    "href": "manual/physics/joints/point_to_point_joint.html",
    "title": "Point to Point Joint | Evergine Doc",
    "keywords": "Point to Point Joint The Point-to-Point Joint limits the translation so that pivot points between the two rigid bodies match in world space. You can use the Point to Point joint to create effects, such as a chain-link, or to pin objects together. FixedJoint3D In Evergine, a Point-to-Point Joint is implemented using the PointToPointJoint3D component. Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Anchor 0, 0, 0 The point which defines the center of the joint in source entity local space. All physics-based simulations use this point as the center in calculations. AutoConfigureConnected true Enable this setting to automatically calculate the ConnectedAnchor position to match the global position of the anchor property. This is the default setting. Disable it to configure the position of the connected anchor manually. ConnectedAnchor auto-calculated Manually configure the connected anchor position, in the connected body local space. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Using Point-to-Point Joint This snippet creates two bodies and add a fixed joint maintaining the relative position at start. This is because the AutoConfigureConnected property is set to true. protected override void CreateScene() { // Load your material var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.CrateMat); int chainLength = 6; Entity previousLink = null; // Create the chain... for (int i = 0; i < chainLength; i++) { /// The first object is kinematic (we don't want a falling chain :D) var rigidObjectType = (i == 0) ? RigidBodyType3D.Kinematic : RigidBodyType3D.Dynamic; // Create the link entities... var link = this.CreateCube(cubeMaterial, new Vector3(i, 0, 0), 0.75f, rigidObjectType); if (previousLink != null) { // Add a PointToPoint joint to the previous link connected to the current link... previousLink.AddComponent(new PointToPointJoint3D() { ConnectedEntityPath = link.EntityPath, }); } previousLink = link; this.Managers.EntityManager.Add(link); } } private Entity CreateCube(Material material, Vector3 position, float size, RigidBodyType3D rigidBodyType) { Entity cube = new Entity() .AddComponent(new Transform3D() { Position = position }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh() { Size = size }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() // Add a RigidBody3D component... { PhysicBodyType = rigidBodyType }) .AddComponent(new BoxCollider3D()); // Add a BoxCollider3D to the physic body... return cube; }"
  },
  "manual/physics/joints/slider_joint.html": {
    "href": "manual/physics/joints/slider_joint.html",
    "title": "Slider Joint | Evergine Doc",
    "keywords": "Slider Joint The Slider Joint allows rigid bodies to rotate around one axis and translate along the same axis. SliderJoint3D In Evergine, a Hinge Joint is implemented using the SliderJoint3D component. Common Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Axis 1, 0, 0 The direction of the axis around which the body slides. The direction is defined in local space. Anchor 0, 0, 0 The position of the axis around which the body slides. The position is defined in local space. AutoConfigureConnected true Enable this setting to automatically calculate the ConnectedAnchor position and ConnectedAxis to match the global position of the anchor property. This is the default setting. Disable it to configure the position of the connected anchor and connected axis manually. ConnectedAxis auto-calculated The joint axis relative to the connected body. ConnectedAnchor auto-calculated Manually configure the connected anchor position, in the connected body local space. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Limit Properties The following properties set the limits of the rotation movement. Property Default Description UseLinearLimit false If enabled, the position of the sliding object will be restricted within the LowerAngularLimit & UpperAngularLimit values.. LowerLinearLimit 0 The lower distance of the limit. UpperLinearLimit 0 The upper distance of the limit. UseAngularLimit false If enabled, the angle of the slider will be restricted within the LowerAngularLimit & UpperAngularLimit values.. LowerAngularLimit 0 The lowest angle the rotation can go. UpperAngularLimit 0 The highest angle the rotation can go. Motor Properties The following properties set the motor properties of the joint. Property Default Description UseLinearMotor false If enabled, the motor makes the object spin around. TargetLinearMotorVelocity 0 The linear speed the object tries to attain. MaxLinearMotorForce 0 The linear force applied in order to attain the speed. UseAngularMotor false If enabled, the motor makes the object spin around. TargetAngularMotorVelocity 0 The angular speed the object tries to attain. MaxAngularMotorForce 0 The angular impulse applied in order to attain the speed. Using Slider Joint This snippet creates a small bridge of a series of connected bodies. protected override void CreateScene() { this.Managers.RenderManager.DebugLines = true; // Load your material var material = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.CrateMat); float sliderLength = 3; // Create the slider holder... Entity slider = new Entity() .AddComponent(new Transform3D() { Scale = new Vector3(sliderLength, 0.1f, 0.1f), Rotation = new Vector3(0, 0, MathHelper.ToRadians(-10)) // Rotate 10º the slider axis }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Kinematic }); // Create the sliding object... Entity cube = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = cubeMaterial }) .AddComponent(new CubeMesh() { Size = 0.5f }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Dynamic, }); // Create the Joint slider.AddComponent(new SliderJoint3D() { ConnectedEntityPath = cube.EntityPath, UseLinearLimit = true, // Limit the slider LowerLinearLimit = -sliderLength / 2, UpperLinearLimit = sliderLength / 2 }); this.Managers.EntityManager.Add(slider); this.Managers.EntityManager.Add(cube); }"
  },
  "manual/physics/joints/spring_joint.html": {
    "href": "manual/physics/joints/spring_joint.html",
    "title": "Spring Joint | Evergine Doc",
    "keywords": "Spring Joint The Spring Joint is a variant of the previous Six Degrees-of-Freedom joint that includes the addition of springs for each of the degrees of freedom. Springs and motors cannot be combined on this constraint. SpringJoint3D In Evergine, a Spring Joint Joint is implemented using the Generic6DoFJoint3D component. Properties Common Properties Property Default Description ConnectedEntityPath null The entity path of the connected body. Only when the path is valid a Joint is established properly. Anchor 0, 0, 0 The point which defines the center of the joint in source entity local space. All physics-based simulations use this point as the center in calculations. AutoConfigureConnected true Enable this setting to automatically calculate the ConnectedAnchor position to match the global position of the anchor property. This is the default setting. Disable it to configure the position of the connected anchor manually. ConnectedAnchor auto-calculated Manually configure the connected anchor position, in the connected body local space. BreakPoint 0 If the value is greater than 0, Indicates the force that needs to be applied for this joint to break. CollideConnected false Determines whether a collision between the two bodies managed by the joint is enabled. Limit Properties The following properties set the limits of the object movement. Property Default Description UseLinearLimit false If enabled, the position of the connected object will be restricted within the LowerAngularLimit & UpperAngularLimit values.. LowerLinearLimit 0 The lower distance of the limit. UpperLinearLimit 0 The upper distance of the limit. UseAngularLimit false If enabled, the angular rotations will be restricted within the LowerAngularLimit & UpperAngularLimit values.. LowerAngularLimit 0 The lowest angle the rotation can go. UpperAngularLimit 0 The highest angle the rotation can go. Spring Properties The following properties set the spring functionality of this joint. Property Default Description UseSpringTranslationX, Y, Z false If enabled, apply the spring functionality in the axis X, Y or Z respectively. EquilibriumPointTranslationX, Y, Z 0 Sets the equilibrium point of the spring forces along the X, y or Z translation axis. SpringStiffnessTranslationX, Y, Z 0 Sets the spring stiffness along the X, Y or Z translation axis. SpringDampingTranslationX, Y, Z 1 Sets the spring damping along the X, Y or Z translation axis. UseSpringRotationX, Y, Z false If enabled, apply the spring functionality in the axis X, Y or Z respectively. EquilibriumPointRotationX, Y, Z 0 Sets the equilibrium point of the spring forces along the X, y or Z Rotation axis. SpringStiffnessRotationX, Y, Z 0 Sets the spring stiffness along the X, Y or Z Rotation axis. SpringDampingRotationX, Y, Z 1 Sets the spring damping along the X, Y or Z Rotation axis. Using Spring Joint This snippet uses a SpringJoint to add some spring functionality given in the Generic6DoF Joint example. protected override void CreateScene() { this.Managers.RenderManager.DebugLines = true; // Load your material var material = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.CrateMat); float sliderLength = 3; // Create the slider holder... Entity slider = new Entity() .AddComponent(new Transform3D() { Scale = new Vector3(sliderLength, 0.1f, 0.1f), Rotation = new Vector3(0, 0, MathHelper.ToRadians(-45)) // Rotate 45º the slider axis }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Kinematic }); // Create the sliding object... Entity cube = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = cubeMaterial }) .AddComponent(new CubeMesh() { Size = 0.5f }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() { PhysicBodyType = RigidBodyType3D.Dynamic, }); // Create the Joint slider.AddComponent(new SpringJoint3D() { ConnectedEntityPath = cube.EntityPath, UseLinearLimit = true, // Limit the slider LowerLinearLimit = new Vector3(0, 0, -sliderLength / 2), UpperLinearLimit = new Vector3(0, 0, sliderLength / 2), UseSpringTranslationZ= true, // Add a linear spring in Z axis EquilibriumPointTranslationZ = 0, SpringStiffnessTranslationZ = 10, SpringDampingTranslationZ = 0.02f, }); this.Managers.EntityManager.Add(slider); this.Managers.EntityManager.Add(cube); }"
  },
  "manual/physics/physicmanager_bullet.html": {
    "href": "manual/physics/physicmanager_bullet.html",
    "title": "PhysicManager and Bullet | Evergine Doc",
    "keywords": "PhysicManager and Bullet In Evergine, Physics are implemented with the PhysicManager3D class, a SceneManager. This manager is responsible to create and maintain the Physic World. This is an abstract class that only offer the functionality that a Physic Manager should implement: Create the Physic World Allow to create Physic elements (Bodies, Colliders, etc...) OFfer the possibility to perform physic queries (ray casting, sweep test, etc...). Because PhysicManager3D is a SceneManager, every scene has their own Physic World. PhysicManager3D properties To properly setup your Physic World, the following properties are useful: Property Default Description Gravity 0, -9.8, 0 This is the global gravity vector, in m/s. The default value is 1G (-9.8m/s) PerformPhysicSteps true Indicates if the physic simulation will be updated evey frame. If your scene has dynamics objects (rigidbodies), and this property is set to false, this objects won't be simulated. If your applications only use static bodies, it is recommended to set this property to false. MaxSubSteps 1 In how many subdivisions the physic world updated are divided. Greater values produce better simulations, but the performance is degraded. PhysicWorldResolution 1 The general physic world scale. By default, 1 unit in Evergine is equal to 1 unit in Physic World. Changing this value allows to change this behavior. For example, a value of 10 indicates that a sphere with radius 1 will produce a physic object of 10. Changing this value is useful when the objects are too small or too big. FixedTimeStep 1.0/60 The physic steps will perform at a fixed timestep indicated in this property (in seconds). By default is 60Hz DrawFlags All, -DrawAabb, -DrawContactPoints This flags allows you to select which elements want to be rendered when RenderManager.DebugLines is set to true. By default all elements are included excepht Aabb and contact points: DrawWireframe: Debug draw mesh collider wireframe. DrawAabb: Debug draw bodies AABB. DrawContactPoints: Debug draw the contact points between bodies. DrawConstraints: Debug draw physic joints. DrawConstraintLimits: Debug draw the physic joints limits. DrawFastWireframe: Debug draw wireframes in a fast way. DrawNormals: Debug draws normals. Bullet and BulletPhysicManager3D Evergine provides an implementation for PhysicManagr3D using the open-source Bullet Physics engine. For detailed information, see the Bullet User. In Evergine, the Bullet implementation can be used with the BulletPhysicManager3D. Using BulletPhysicManager3D To start using Physics in your scene, you need to create an instance of BulletPhysicManager3D and register into your Scene. This implementation is provided in the Evergine.Bullet nuget package. Note Evergine project template will register the Bullet physic manager by default. public public class MyScene : Scene { public override void RegisterManagers() { base.RegisterManagers(); this.Managers.AddManager(new Evergine.Bullet.BulletPhysicManager3D()); } // Other scene methods... }"
  },
  "manual/physics/physics_bodies/character_controller.html": {
    "href": "manual/physics/physics_bodies/character_controller.html",
    "title": "Character Controller | Evergine Doc",
    "keywords": "Character Controller The character controller is an physic body type used for the player objects to provide collision-based physics but also to allow for more customizations dedicated to game characters (player or NPCs). It's a common choice for first-person and third-person games. In Evergine, we use the CharacterController3D component to provide this functionality. CharacterController3D Component General properties Property Default Description Restitution 0 Sets the amount of kinetic energy lost or gained after a collision. A typical value is between 0 and 1. If the restitution property of colliding bodies is 0, the bodies lose all energy and stop moving immediately on impact. If the restitution is 1, they lose no energy and rebound with the same velocity they collided at. Use this to change the \"bounciness\" of rigidbodies. Friction 0.5 Sets the surface friction. RollingFriction 0 Sets the rolling friction. IsSensor true Characters are special type of physics bodies and by default is created as a sensor. CollisionCategory Cat1 The CollisionCategory flag specify the category of this body. MaskBit All The MaskBits indicates with which categories this body will collide. Character properties The following properties affect the movement of the rigidbody. Property Default Description StepHeight 0.2 The maximum height the character can step onto. FallSpeed 55 Maximum velocity of a character in a free fall (m/s). By default is 55, the terminal velocity of a sky diver. JumpSpeed 10 Jump speed. MaxSlope 45 Limits the character to only climb slopes that are less steep (in degrees) than the indicated value. Gravity 29.4 3G gravity acceleration. Useful methods To control a character, you may find useful these methods: Method Description SetVelocity(velocity) Sets the character velocity. This is the most usual way to move and control a character. After setting a velocity vector, the character will move in that direction, and will interact with the physic world. Jump(), Jump(jumpDirection) The character perform a jump movement. You can specify an optional jump direction. Teleport(newPosition) Teleport the character to a new position. Create a Character Controller From code This code is just to create a character body: Entity character = new Entity() .AddComponent(new Transform3D(){ Position = characterPosition }) .AddComponent(new MaterialComponent() { Material = material }) // assign a material .AddComponent(new CapsuleMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new CharacterController()) // Add a RigidBody3D component... .AddComponent(new CapsuleCollider3D()); // Assign a CapsuleCollider3D to the physic body... .AddComponent(new MoveCharacterBehavior()) // Add a component that will control the character. this.Managers.EntityManager.Add(character); But we need a component that move the CharacterController3D component. The following component just capture some keys to move and jump the character. public class MoveCharacterBehavior : Behavior { [BindComponent] private CharacterController3D character; public float Speed { get; set; } = 3; protected override void Update(TimeSpan gameTime) { // Gets the keyboard var keyboard = this.Managers.RenderManager.ActiveCamera3D.Display.KeyboardDispatcher; // Use keys (I, K, J, L) to move the character... var velocity = Vector3.Zero; if (keyboard.IsKeyDown(Evergine.Common.Input.Keyboard.Keys.I)) { velocity += Vector3.Forward; } if (keyboard.IsKeyDown(Evergine.Common.Input.Keyboard.Keys.K)) { velocity += Vector3.Backward; } if (keyboard.IsKeyDown(Evergine.Common.Input.Keyboard.Keys.J)) { velocity += Vector3.Left; } if (keyboard.IsKeyDown(Evergine.Common.Input.Keyboard.Keys.L)) { velocity += Vector3.Right; } // Update the character velocity... this.character.SetVelocity(velocity * this.Speed); // Jump if we press the space key... if (keyboard.IsKeyDown(Evergine.Common.Input.Keyboard.Keys.Space)) { this.character.Jump(); } }"
  },
  "manual/physics/physics_bodies/collisions.html": {
    "href": "manual/physics/physics_bodies/collisions.html",
    "title": "Collisions | Evergine Doc",
    "keywords": "Collisions A Collision is produced when two bodies enter in contact. Collision events To listen to all collision produced in a body, a Pysic Body component offers 3 events to be subscribed. Event Description BeginCollision(sender, collisionInfo) Event fired when two objects begin a collision. This event is fired everytime that the owner body collides with a new object. This event send a CollisionInfo3D to provide collision information. UpdateCollision(sender, collisionInfo) This event is fired every frame per colliding object. This event send a CollisionInfo3D to provide collision information. EndCollision(sender, collisionInfo) This event is fired when a body is not yet colliding with the owner body. This event send a CollisionInfo3D to provide collision information. CollisionInfo3D This class provides all collision information between two physics bodies (in physic engines, this is usually called a manifold). Property Description Id Manifold identification. State Indicates the state of this collision info: New, Updated, Deleted. ThisBody The owner body that produces the collision. OtherBody The other body that produces the collision. NumContacts The number of contact points. Methods Description GetContact(contacts) Return all contact points (ContactPoint3D) between this two bodies in the specified collection. GetContact(index, out contact) Return a contact point (ContactPoint3D) specified by its index. ContactPoint3D This structure contains all contact information produced between two objects: Property Description Distance Distance of the contact point to the body surface. Some times the contact can be produced before a real contact happens. In that case is useful to check the distance value. Normal The normal value in the contact. PositionOnThis The contact position in the owner body. PositionOnOther The contact position in the other contacted body. This can be different, due to collider differences, margin properties among other things. ThisCollider The contacted collider in the owner body. OtherCollider The contacted collider in the other body. Using contact events Little example that shows how to use collision events (BeginCollision): protected override void OnActivated() { base.OnActivated(); // Subscribe to the begin collision event... this.rigidBody.BeginCollision += this.BeginCollision; } protected override void OnDeactivated() { base.OnDeactivated(); // Unsubscribe to the begin collision event... this.rigidBody.BeginCollision -= this.BeginCollision; } private void BeginCollision(object sender, CollisionInfo3D collisionInfo) { var lineBatch = this.Managers.RenderManager.LineBatch3D; ContactPoint3D contactPoint; // Iterate over all contact points... for (int contactIndex = 0; contactIndex < collisionInfo.NumContacts; contactIndex++) { if (collisionInfo.GetContact(contactIndex, out contactPoint)) { // Draw the contact position lineBatch.DrawPoint(contactPoint.PositionOnThis, 0.2f, Color.Red); // Draw the contact normal lineBatch.DrawLine(contactPoint.PositionOnThis, contactPoint.PositionOnThis + (contactPoint.Normal * 0.5f), Color.Yellow); } } } Collision filtering So far in every scene we have made, all the physics bodies were able to collide with all the other bodies. That is the default behavior, but it's also possible to set up 'collision filters' to provide finer control over which bodies can collide with each other. Collision filtering is implemented by setting some properties. These flags are: CollisonCategory MaskBits Both flags are a 32 bit integer so you can have up to 32 different categories for collision (Cat1, Cat2, Cat3, .... Cat32). There is a little more to it than that though, because it is the combination of these values that determines whether two bodies will collide. Is it possible to combine some categories, and for that case there is a special value All, that is the aggregation of all categories. The CollisionCategory flag can be thought of as the physic body saying 'I am a ...', and the MaskBits is like saying 'I will collide with a ...'. The important point is that these conditions must be satisfied for both bodies in order for collision to be allowed. Collision filtering properties Every physic body (static, rigid or character) has the following properties: Property Default Description CollisionCategory Cat1 The CollisionCategory flag specify the category of this body. MaskBit All The MaskBits indicates with which categories this body will collide."
  },
  "manual/physics/physics_bodies/index.html": {
    "href": "manual/physics/physics_bodies/index.html",
    "title": "Physics Bodies | Evergine Doc",
    "keywords": "Physics Bodies A Physics Body is an object that can interact with the physic world. In some cases is being affected by dynamic forces such as gravity, or collides with other bodies. Physics Bodies use their attached Colliders to define their physical shape. Type of Physics Bodies Rigid Bodies Rigid bodies are moved around by forces such as collision and gravity. In general, rigidbodies are good choice for objects that can be moved or pushed like boxes, furniture, and obstacles. In Evergine we use RigidBody3D component. Static Bodies Static bodies are not affected by any physic force, and as a result it don't move. Rigid bodies can collide with static bodies. In general, static bodies can be used for objects that are immovable, like walls, floors, etc... In Evergine we use StaticBody3D component. [(static_bodies) Character Controller Is a special type of body used for player controlled characters. It is usually controlled by the user inputs. In Evergine we use CharacterController3D component. Vehicles Is it possible to simulate physical vehicles by using a standard Rigid Body and applying several components to set the Vehicle behavior. In Evergine, add a PhysicVehicle3D to a RigidBody entity, and add several PhysicWheel3D for each desired wheel. Physics Bodies and Colliders As we mentioned before, a physic body itself doesn't define its shape. The entity that owns the Physic Body need at least one Collider component to interact with other bodies. For example, a rigid body without colliders will pass through a floor, because it doesn't have any shape to cause collisions. In this section Rigid Bodies Static Bodies Character Controller Vehicle Physics Collisions Sensors Using Physics Bodies"
  },
  "manual/physics/physics_bodies/rigid_bodies.html": {
    "href": "manual/physics/physics_bodies/rigid_bodies.html",
    "title": "Rigid Bodies | Evergine Doc",
    "keywords": "Rigid Bodies Rigid bodies are moved around by forces such as collision and gravity. In general, rigidbodies are good choice for objects that can be moved or pushed like boxes, furniture, and obstacles. In Evergine, we use the RigidBody3D component to provide the functionality required to turn an Entity into a rigid body. Every frame, the PhysicManager update the state of every registered rigid body, changing their poses and detecting collisions. RigidBody3D Component In Evergine, we use the RigidBody3D component to provide the functionality required to turn an Entity into a rigid body. General properties Property Default Description Mass 1.0 Sets the mass of the rigid body. Try to avoid larger mass ratios (differences). Restitution 0 Sets the amount of kinetic energy lost or gained after a collision. A typical value is between 0 and 1. If the restitution property of colliding bodies is 0, the bodies lose all energy and stop moving immediately on impact. If the restitution is 1, they lose no energy and rebound with the same velocity they collided at. Use this to change the \"bounciness\" of rigidbodies. Friction 0.5 Sets the surface friction. RollingFriction 0 Sets the rolling friction. CollisionCategory Cat1 The CollisionCategory flag specify the category of this body. MaskBit All The MaskBits indicates with which categories this body will collide. Motion properties The following properties affect the movement of the rigidbody. Property Default Description LinearVelocity 0,0,0 Sets the initial linear velocity. LinearFactor 1,1,1 This property is used to limit the translation of a rigidbody. It's separated in X, Y, Z. If one of this axis is set to 1, the movement is not limited, and if a value is set to 0, this axis is locked. LinearDamping 0 Used to slow down the movement of an object. The higher the drag the more the object slows down. AngularVelocity 0,0,0 Sets the initial angular velocity. AngularFactor 1,1,1 This property is used to limit the rotation of a rigidbody. It's separated in X, Y, Z. If one of this axis is set to 1, the rotation is not limited, and if a value is set to 0, this axis is locked. AngularDamping 0 Used to slow down the rotation of an object. The higher the drag the more the rotation slows down. OverrideGravity false Indicates if this rigidbody will define their own gravity value, instead of using the common value defined in PhysicManager. Gravity 0,-9.8,0 If OverrideGravity is true, the rigidbody will use this value as the gravity intensity. IsSensor false If you set a physic body to be a sensor, other colliders no longer bump into it. Instead, they pass through. Sensors detects when bodies enter it, which you can use in your application. Kinematic Rigid Bodies There are two types of rigid bodies, dynamics and kinematic bodies. In Dynamic rigidbodies, their movement is driven by the physic simulation. Receive forces and can be pushed by other bodies. In contrary, Kinematic rigidbodies are not influenced by forces (such as gravity), and have no momentum. They cannot be pushed by other rigid bodies and their movement is only controlled by changing it's transform. An elevator platform is a good example of a kinematic rigid body. Although kinematic rigidbodies aren't moved by physics, other objects can still collide with them. For example, in the case of an elevator, objects placed inside won't fall through the elevator floor. Is it possible to specify the type of rigidbody with the PysicBodyType property: Property Default Description PhysicBodyType Dynamic There are two types of rigid bodies: Dynamic: Their movement is driven by the physic simulation. Receive forces and can be pushed by other bodies. Kinematic: A Kinematic rigidbodies are not influenced by forces (such as gravity), and have no momentum. They cannot be pushed by other rigid bodies and their movement is only controlled by changing it's transform. Create a RigidBody You only need to add a RigidBody3D to an entity, to become this into a rigid body. Don't forget to add a proper collider too. From code Little example to create a bouncing sphere: Entity bouncingBall = new Entity() .AddComponent(new Transform3D(){ Position = position }) .AddComponent(new MaterialComponent() { Material = material }) // assign a material .AddComponent(new SphereMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() // Add a RigidBody3D component... { Restitution = 1.0f // Create a bouncing ball (restitution 1) }) .AddComponent(new SphereCollider3D()); // Assign a SphereCollider3D to the physic body... this.Managers.EntityManager.Add(bouncingBall);"
  },
  "manual/physics/physics_bodies/sensors.html": {
    "href": "manual/physics/physics_bodies/sensors.html",
    "title": "Sensors | Evergine Doc",
    "keywords": "Sensors If you set a physic body to be a sensor, other bodies no longer bump into it. Instead, they pass through. The sensor detects when other bodies enter it, which you can use in your application. For example, you can detect when a the user finger touch a button, and use it to launch an action. Sensor properties Every physic body (static, rigid or character) can be set to sensor with the IsSensor property: Property Default Description IsSensor false If you set a physic body to be a sensor, other colliders no longer bump into it. Instead, they pass through. Sensors detects when bodies enter it, which you can use in your application."
  },
  "manual/physics/physics_bodies/static_bodies.html": {
    "href": "manual/physics/physics_bodies/static_bodies.html",
    "title": "Static Bodies | Evergine Doc",
    "keywords": "Static Bodies Static bodies are not affected by any physic force, and as a result it don't move. Rigid bodies can collide with static bodies. In general, static bodies can be used for objects that are immovable, like walls, floors, etc... In Evergine, we use the StaticBody3D component to provide the functionality required to turn an Entity into a Static body. Note You can change the position of a static body changing the entity Transform, but it is not recommended if you want to apply motions. In that case use a Kinematic RigidBody Static Component In Evergine, we use the StaticBody3D component to provide the functionality required to turn an Entity into a Static body. General properties Property Default Description Restitution 0 Sets the amount of kinetic energy lost or gained after a collision. A typical value is between 0 and 1. If the restitution property of colliding bodies is 0, the bodies lose all energy and stop moving immediately on impact. If the restitution is 1, they lose no energy and rebound with the same velocity they collided at. Use this to change the \"bounciness\" of rigidbodies. Friction 0.5 Sets the surface friction. RollingFriction 0 Sets the rolling friction. IsSensor false If you set a physic body to be a sensor, other colliders no longer bump into it. Instead, they pass through. Sensors detects when bodies enter it, which you can use in your application. CollisionCategory Cat1 The CollisionCategory flag specify the category of this body. MaskBit All The MaskBits indicates with which categories this body will collide. Create a Static Body You only need to add a StaticBody3D to an entity, to become this into a static body. Don't forget to add a proper collider too. From code In the following code we will create a floor plane of 10x10 units: Entity floor = new Entity() .AddComponent(new Transform3D(){ Position = position }) .AddComponent(new MaterialComponent() { Material = floorMaterial }) // assign a material .AddComponent(new PlaneMesh(){ Width = 10, Height = 10 }) // Create a 10x10 floor plane .AddComponent(new MeshRenderer()) .AddComponent(new StaticBody3D()) // Add a StaticBody3D component... .AddComponent(new BoxCollider3D()); // Assign a BoxCollider3D to the physic body... this.Managers.EntityManager.Add(floor);"
  },
  "manual/physics/physics_bodies/using_physics_bodies.html": {
    "href": "manual/physics/physics_bodies/using_physics_bodies.html",
    "title": "Using Physics Bodies | Evergine Doc",
    "keywords": "Using Physics Bodies This is a small step by step to cover a variety of physics bodies. This is easily to replicate in Evergine Studio. 1. Create a pile of rigid bodies In the following example we will create a simple pile of 10 rigid bodies and a static body as a floor: protected override void CreateScene() { // Load your material var cubeMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.Materials.CubeMaterial); var floorMaterial = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); // Create the floor this.CreateFloor(floorMaterial); // Create 10 cubes for (int i = 0; i < 10; i++) { this.SpawnCube(cubeMaterial, new Vector3(0, 1 + i, 0), 0.5f); } } private void CreateFloor(Material material) { Entity cube = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new PlaneMesh() { Width = 10, Height = 10 }) // Create a 10x10 floor plane .AddComponent(new MeshRenderer()) .AddComponent(new StaticBody3D()) // Add a StaticBody component... .AddComponent(new BoxCollider3D()); // Add a BoxCollider3D to the physic body... this.Managers.EntityManager.Add(cube); } private void SpawnCube(Material material, Vector3 position, float size) { Entity cube = new Entity() .AddComponent(new Transform3D() { Position = position }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh() { Size = size }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D()) // Add a RigidBody3D component... .AddComponent(new BoxCollider3D()); // Add a BoxCollider3D to the physic body... this.Managers.EntityManager.Add(cube); } 2. Adding a Kinematic body In this step we will add a kinematic body to the scene and we are going to add a simple shake movement: Add the following code to your scene: protected override void CreateScene() { // Previous code of step 1... // Create a kinematic body this.CreateKinematic(); } private void CreateKinematic() { // Load your material var material = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.Materials.Kinematic); Entity cube = new Entity() .AddComponent(new Transform3D() { Position = new Vector3(0, 0.5f, 0) }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh() { Size = 1 }) .AddComponent(new MeshRenderer()) .AddComponent(new RigidBody3D() // Add a RigidBody3D component... { PhysicBodyType = RigidBodyType3D.Kinematic // Kinematic rigid body... }) .AddComponent(new BoxCollider3D()) // Add a BoxCollider3D to the physic body... .AddComponent(new ShakeKinematic()); // Add a behavior that move this entity... this.Managers.EntityManager.Add(cube); } This is the ShakeKinematic component, that move the entity: public class ShakeKinematic : Behavior { [BindComponent] public Transform3D transform; [BindService] public Clock clock; private Vector3 initPosition; protected override void Start() { base.Start(); this.initPosition = this.transform.Position; } protected override void Update(TimeSpan gameTime) { this.transform.Position = initPosition + new Vector3((float)Math.Cos(5 * clock.TotalTime.TotalSeconds), 0, 0); } }"
  },
  "manual/physics/physics_bodies/vehicle_physics.html": {
    "href": "manual/physics/physics_bodies/vehicle_physics.html",
    "title": "Vehicle Physics | Evergine Doc",
    "keywords": "Vehicle Physics The car model is based on Real Car New made by Maker Game Studios Is it possible to simulate physical vehicles by using a standard Rigid Body and applying several components to set the Vehicle behavior. This is a simplified vehicle physic model. Instead of simulation each wheel and chassis as separate rigid bodies, connected by joints, it uses a simplified model. The entire vehicle is represented as a single Rigid Body, the chassis. The collision detection of the wheels is approximated using ray-casting, and the tire friction is a basic anisotropic friction model. To start using Physic vehicles in Evergine, we need to use two components: PhysicVehicle3D: Add this component to the chassis rigid body that we want to turn into a vehicle. PhysicWheel3D: Add this component to each entity that you want to act as a wheel for a vehicle. PhysicVehicle3D In Evergine, a vehicle is implemented using the PhysicVehicle3D component. General vehicle properties Property Default Description SuspensionStiffness 20 Suspension stiffness is a measure of how much force is required to compress the suspension of a vehicle. SuspensionCompression 4.4 This property determines how much the suspension will compress when the wheel hits a bump or obstacle. SuspensionCompression 2.3 This property determines the rate at which the suspension spring will compress and rebound. It controls the amount of damping force that is applied to the suspension when the vehicle encounters bumps or uneven terrain. MaxSuspensionTravel 5.0 It represents the maximum distance that the suspension can be compressed or extended. It is measured in units of length. FrictionSlip 1000 It refers to the amount of slip that occurs between the tire and the ground during motion. Friction slip is typically modeled using a friction coefficient that represents the ratio of the tangential force to the normal force between the tire and the ground. This coefficient can be adjusted to simulate different levels of slip and traction for different types of vehicles and surfaces. MaxSuspensionForce 6000 Specifies the maximum force that the suspension can apply to the chassis of the vehicle. It is used to limit the effect of the suspension when it is compressed or stretched, preventing the vehicle from bouncing too much or losing stability. Control the vehicle Using the following methods you can control your vehicle: Method Description ApplyEngineForce(force) This method is used to apply the engine force that will be applied to the vehicle. This can be adjusted to increase or decrease the speed of the vehicle, and it can be set to a negative value to go backwards. The engine force will be applied only to the drive wheels. SetSteeringValue(steering) This method is used to set the steering angle of the vehicle. Use this method to change the vehicle direction. The steering value is only applied to steerable wheels. SetBrake(brake) Indicates the brake force applied by the vehicle. The steering value is only applied to brakable wheels. PhysicWheel3D In Evergine, a wheel is implemented using the PhysicWheel3D component. Vehicle attachment Properties First of all, it's necessary to indicate how which vehicle entity the wheel will be associated. Property Default Description SearchVehicle FromParents Indicates the strategy to search the associated vehicle: FromParents: The wheel entity is a child of the Chassis vehicle. Find the first PhysicVehicle3D component in its descendants. FromEntityPath: The vehicle entity is selected by indicating its Entity Path. PhysicVehicleEntityPath null Indicates the Entity Path of the vehicle entity. Wheel Axis Properties The following properties helps to define how the wheel directions of suspension and rotation among other things Property Default Description WheelRadius 0.5 Determines the wheel radius. The WheelRadius value can be used in two ways: If the Entity has a mesh (with MeshComponent for example), the Size value is relative to the mesh extents. If the entity hasn't any meshes, the Size value is used as scene units. RotationAxis 1, 0, 0 The RotationAxis property is used to define the axis around which the wheel rotates. It also indicates the advance direction when applying engine force. It is specified in the local space of the wheel entity. SuspensionDirection 0, -1, 0 Indicates the direction in which the wheel's suspension operates. It also defines the steering wheel direction. It is specified in the local space of the wheel entity. SuspensionRestLength 0.2 Defines the length of the wheel's suspension when the vehicle is in its resting position. Flags Properties In the following properties you can specify how the wheel will be used in the car (steerable, breakable, etc...) Property Default Description IsFrontWheel false It indicates if this is a front wheel or not. This property, in combination with others, helps to define the behavior of the wheel. For example, a steerable wheel which is not a front wheel will be steered in the opposite direction that a front wheel. IsSteerableWheel false If true, the wheel will be affected by the vehicle steering values. IsDriveWheel true If true, the wheel will be affected by engine force. IsBrakableWheel true Determine if the wheel is able to brake or not. With the above properties, you can define different types of vehicles (4x4, font-wheel-drive, etc.) Controlling the wheel individually Above we described how to control your vehicle using a sets of methods to control the general steering, brake and engine force values of the vehicle. You can also avoid to use this methods and set individually these properties to the wheel directly. This allows you to set different values to each wheel (different steering values per wheel for example). Property Description Steering Indicates the steering angle of this wheel. EngineForce The force applied by the engine to this wheel. Brake The brake force acting to this wheel. Overriding vehicle settings As we mentioned before, the PhysicVehicle3D component defines a series of physical properties of the suspensions. By default, all of these properties are applied to all wheel equally, but you can override these properties and set your specific values. Property Default Description OverrideVehicleSettings false If true, this wheel will ignore the properties defined in the vehicle and will specify its own values. If false, the following property values will be ignored. SuspensionStiffness 20 Suspension stiffness is a measure of how much force is required to compress the suspension of a vehicle. SuspensionCompression 4.4 This property determines how much the suspension will compress when the wheel hits a bump or obstacle. SuspensionCompression 2.3 This property determines the rate at which the suspension spring will compress and rebound. It controls the amount of damping force that is applied to the suspension when the vehicle encounters bumps or uneven terrain. MaxSuspensionTravel 5.0 It represents the maximum distance that the suspension can be compressed or extended. It is measured in units of length. FrictionSlip 1000 It refers to the amount of slip that occurs between the tire and the ground during motion. Friction slip is typically modeled using a friction coefficient that represents the ratio of the tangential force to the normal force between the tire and the ground. This coefficient can be adjusted to simulate different levels of slip and traction for different types of vehicles and surfaces. MaxSuspensionForce 6000 Specifies the maximum force that the suspension can apply to the chassis of the vehicle. It is used to limit the effect of the suspension when it is compressed or stretched, preventing the vehicle from bouncing too much or losing stability. Using Physics Vehicles In the following snippet we are going to create a simple vehicle and start controlling it. Create the vehicle protected override void CreateScene() { this.Managers.RenderManager.DebugLines = true; // Load your material var floorMaterial = this.Managers.AssetSceneManager.Load<Material>(EvergineContent.FloorMat); var vehicleMaterial = this.Managers.AssetSceneManager.Load<Material>(DefaultResourcesIDs.DefaultMaterialID); // Add a floor var floor = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = floorMaterial }) .AddComponent(new PlaneMesh() { Width = 20, Height = 20 }) .AddComponent(new MeshRenderer()) .AddComponent(new StaticBody3D()) .AddComponent(new BoxCollider3D()) ; // Create the vehicle entity var vehicle = new Entity() .AddComponent(new Transform3D() { LocalPosition = new Vector3(0, 2, 0) }) .AddComponent(new RigidBody3D() { Mass = 800, // 800Kg }) .AddComponent(new PhysicVehicle3D()); // Create the chassis var chassis = new Entity() .AddComponent(new Transform3D() { LocalScale = new Vector3(1.8f, 1, 3) }) .AddComponent(new MaterialComponent() { Material = vehicleMaterial }) .AddComponent(new CubeMesh()) .AddComponent(new MeshRenderer()) .AddComponent(new BoxCollider3D()); vehicle.AddChild(chassis); // Add Wheels vehicle.AddChild(this.AddWheel( vehicleMaterial, new Vector3(1, -0.5f, 1.5f), true, true)); vehicle.AddChild(this.AddWheel(vehicleMaterial, new Vector3(-1, -0.5f, 1.5f), true, true)); vehicle.AddChild(this.AddWheel(vehicleMaterial, new Vector3(1, -0.5f, -1.5f), false, false)); vehicle.AddChild(this.AddWheel(vehicleMaterial, new Vector3(-1, -0.5f, -1.5f), false, false)); this.Managers.EntityManager.Add(floor); this.Managers.EntityManager.Add(vehicle); } private Entity AddWheel(Material material, Vector3 position, bool isFront, bool isSteerable) { return new Entity() .AddComponent(new Transform3D() { LocalPosition = position, LocalRotation = new Vector3(0, 0, MathHelper.PiOver2) // Rotate the cylinder 90º }) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CylinderMesh() { Height = 0.2f }) .AddComponent(new MeshRenderer()) .AddComponent(new PhysicWheel3D() { IsFrontWheel = isFront, IsSteerableWheel = isSteerable, RotationAxis = Vector3.UnitY, SuspensionDirection = -Vector3.UnitX }); } Control the car! We just need to add a simple custom behavior to start controlling the car: First of all, create a custom Behavior, with the following code: public class VehicleController : Behavior { [BindService] private GraphicsContext graphicsContext; [BindComponent] private PhysicVehicle3D vehicle; public float MaxForce = 1000; // Max Engine force public float Brake = 20; // Max breke force public float MaxSteering = MathHelper.ToRadians(35); public float SteeringSmooth = 0.5f; private float currentSteering = 0; private float steeringVelocity = 0; protected override void Update(TimeSpan gameTime) { var keyboard = this.Managers.RenderManager.ActiveCamera3D.Display.KeyboardDispatcher; float engineForce = 0; // If press the W or Up Arrow, move forward... if ((keyboard.ReadKeyState(Keys.W) == ButtonState.Pressed) || (keyboard.ReadKeyState(Keys.Up) == ButtonState.Pressed)) { engineForce = MaxForce; } // If press the S or Down Arrow, reverse direction... else if ((keyboard.ReadKeyState(Keys.S) == ButtonState.Pressed) || (keyboard.ReadKeyState(Keys.Down) == ButtonState.Pressed)) { engineForce = -MaxForce / 3; } // Apply the brake if we press the space bar var brake = keyboard.ReadKeyState(Keys.Space) == ButtonState.Pressed ? Brake : 0; // Sets the Steering value by aplying D,A or Left and Right Arrow... var steeringRotation = 0f; if ((keyboard.ReadKeyState(Keys.D) == ButtonState.Pressed) || (keyboard.ReadKeyState(Keys.Right) == ButtonState.Pressed)) { steeringRotation = MaxSteering; } else if ((keyboard.ReadKeyState(Keys.A) == ButtonState.Pressed) || (keyboard.ReadKeyState(Keys.Left) == ButtonState.Pressed)) { steeringRotation = -MaxSteering; } // Smooth the steering... this.currentSteering = MathHelper.SmoothDamp(this.currentSteering, steeringRotation, ref this.steeringVelocity, this.SteeringSmooth, (float)gameTime.TotalSeconds); // Apply the engine force, brake and steering values... this.vehicle.ApplyEngineForce(engineForce); this.vehicle.SetSteeringValue(this.currentSteering); this.vehicle.SetBrake(brake); } } Later, add this component to the vehicle entity created in the previous section: vehicle.AddComponent(new VehicleController());"
  },
  "manual/physics/queries.html": {
    "href": "manual/physics/queries.html",
    "title": "Physic Queries | Evergine Doc",
    "keywords": "Physic Queries You can use physics Raycast queries to determine whether a specific line segment intersects physics geometry. Similarly a SweepTest query tests whether a shape extruded along a line segment intersects with physics geometry. Example uses for these queries might include determining whether an object is in front of another object, or testing a line of sight. Raycast Raycast queries are the most common scene query, based on firing a ray from a start position a specified distance along a ray direction. There are two ways to perform a raycast: Closest Hit: Return the closest hit position detected by the raycast All Hits: Return all hits produced between the start and end position. Method Description Raycast(from, to, ...) Perform a raycast between the specified from and to positions. Returns a HitResult3D instance with the result. Raycast(ray, distance, ...) Perform a raycast defined a Ray (position and direction) and a maximum distance. Returns a HitResult3D instance with the result. RaycastAll(from, to, resultsOutput, ...) Perform a raycast between the specified from and to positions. Returns all hits in a HitResult3D collection, which need to be passed as argument. RaycastAll(ray, distance, resultsOutput, ...) Perform a raycast defined a Ray (position and direction) and a maximum distance. Returns all hits in a HitResult3D collection, which need to be passed as argument. Using raycast from code [BindComponent] private Transform3D transform; public float RayDistance {get; set;} = 10 private List<HitResult3D> hitCollection = new List<HitResult3D>(); protected override void Update(TimeSpan gameTime) { // Launch a raycast from the transform position, pointing to the transform forward... var from = this.transform.Position; var to = from + (this.transform.WorldTransform.Forward * this.RayDistance); // Perform a hit test, getting the closest result... var hitResult = this.Managers.PhysicManager3D.RayCast(ref from, ref to); if (hitResult.Succeeded) { this.DebugHit(hitResult); Console.WriteLine(\"Hit detected!\"); } // Perform a hit test, getting all results... // Clear the previous hits.. this.hitCollection.Clear(); this.Managers.PhysicManager3D.RayCastAll(ref from, ref to, this.hitCollection); foreach (var hit in this.hitCollection) { this.DebugHit(hit); Console.WriteLine(\"Process hit!\"); } } Sweep test A Sweep test query is similar to a raycast query except that a sweep query takes a Collider as well as a point and direction. The collider shape is swept along the ray to form a volume. Anything that intersects with this volume is returned from the query. Method Description ConvexSweepTest(colliderShape, from, to, ...) Perform a sweep test between the specified from and to transforms (Matrix4x4 values, because you can specify position, orientation, scale). Returns a HitResult3D instance with first position in which the collider hit. ConvexSweepTestAll(colliderShape, from, to, resultOutput, ...) Perform a sweep test between the specified from and to transforms (Matrix4x4 values, because you can specify position, orientation, scale). Returns all hits in a HitResult3D collection, which need to be passed as argument. Using Sweep test from code [BindComponent] private Collider3D collider; [BindComponent] private Transform3D transform; public float RayDistance {get; set;} = 10 private List<HitResult3D> hitCollection = new List<HitResult3D>(); protected override void Update(TimeSpan gameTime) { // Launch a sweeptest from the transform position, pointing to the transform forward... var from = this.transform.WorldTransform; var to = from * Matrix4x4.CreateTranslation(this.transform.WorldTransform.Forward * this.RayDistance); // Perform a sweep test, getting the closest result... var hitResult = this.Managers.PhysicManager3D.ConvexSweepTest(collider.InternalColliderShape,ref from, ref to); if (hitResult.Succeeded) { this.DebugHit(hitResult); Console.WriteLine(\"Hit detected!\"); } // Perform a sweep test, getting all results... // Clear the previous hits.. this.hitCollection.Clear(); this.Managers.PhysicManager3D.ConvexSweepTestAll(collider.InternalColliderShape, ref from, ref to, this.hitCollection); foreach (var hit in this.hitCollection) { this.DebugHit(hitResult); Console.WriteLine(\"Process hit!\"); } } HitResult3D All physic queries use the HitResult3D structure to return all hit information. This structure contains all the required information to process a hit result: Property Description Succeeded Indicates if the query has successfully hit another object. Point The hit position in world space. Normal The hit normal vector. HitFraction A value between [0-1] indicating if the hit is produced in the start position 0, or at least end position 1 PhysicBody The hit physic body Collider The hit collider. You need to take in consideration that a physic body can have multiple colliders. TriangleIndex If the hit collider is a MeshCollider, specify the intersected triangle index in this mesh. Using HitResult3D from code In the previous sample we used a DebugHit() method: private void DebugHit(HitResult3D hitResult) { var lineBatch = this.Managers.RenderManager.LineBatch3D; // Draw the hit position lineBatch.DrawPoint(hitResult.Point, 0.2f, Color.Red); // Draw the hit normal lineBatch.DrawLine(hitResult.Point, hitResult.Point + (hitResult.Normal * 0.5f), Color.Yellow); }"
  },
  "manual/platforms/android/index.html": {
    "href": "manual/platforms/android/index.html",
    "title": "Android platform | Evergine Doc",
    "keywords": "Android platform Create a new application Use Evergine launcher to add Android as one of your project platforms. Current Android template runs with Xamarin Android, and we have a new Android .NET6 template that runs with .NET6 for Android. Prerequisites If you choose Android template, you need to install Xamarin and cross-platform development tools using Visual Studio installer. In other hand, if you choose Android .NET6 template, you should install Android workload for .NET6. You can do it using a PowerShell console. dotnet workload install android Project structure For both flavors of Android templates, project structure is similar. The differences are: Project type, as .NET6 solution uses latest .NET SDK project style. For .NET6 project, Evergine libraries targets also copy dll map files, that have no effect in Android projects that runs under .NET6. Application deployment There is no support for deployment on Android emulators, so you should use a physical device for development. Evergine uses Vulkan as graphics backend for Android, that is included since Android Nougat and later versions."
  },
  "manual/platforms/index.html": {
    "href": "manual/platforms/index.html",
    "title": "Evergine platforms | Evergine Doc",
    "keywords": "Evergine platforms This section documents the different platforms that Evergine can be deployed on. In this section Windows Web UWP Linux Android iOS"
  },
  "manual/platforms/uwp/index.html": {
    "href": "manual/platforms/uwp/index.html",
    "title": "UWP platform | Evergine Doc",
    "keywords": "UWP platform Desktop and tablets You can add UWP as one of the platforms for your project, using Universal Windows Platform template. With this template, you can create an application that runs in devices such PC, tablet or Xbox. Project targets Windows 10 build 16299 as minimal version, and Windows 10 build 18362 as target version. You can also deploy applications to HoloLens devices, as stated in Mixed Reality section. Prerequisites You have to install target SDKs to build and run the application. You can find download links here. Application deployment As a standard UWP application, you can deploy your application in your local Windows device, in a remote device or in a physical device connected by USB to your development machine. Mixed Reality If you want to create an Evergine project for HoloLens you should use Mixed Reality template. Project targets Windows 10 build 16299 as minimal version, and Windows 10 build 18362 as target version. XR capabilities Evergine for Mixed Reality relies on a set on interfaces and classes defined in Evergine.Framework.XR.* namespace: QR code detection with IQRCodeWatcherService. Spatial anchors with SpatialAnchor. Spatial mapping with SpatialMappingObserver and SpatialMappingSurface. Application deployment In this case, there are two options for application deployment: Deploy in HoloLens emulator: before deploying, you need to install device emulator from official documentation page. Deploy in a HoloLens device: remember that you should mark ARM64 as active configuration to deploy an application for HoloLens 2. For more information, read official documentation."
  },
  "manual/platforms/web/getting_started.html": {
    "href": "manual/platforms/web/getting_started.html",
    "title": "Getting started with a Evergine web application | Evergine Doc",
    "keywords": "Getting started with a Evergine web application Create a new application From the Evergine launcher you can create a Web (WebGL2.0) project, or add the web profile from the Evergine Studio. This template adds two projects to the web solution, the Web one which is the web application client, that uses typescript to execute Evergine into a web canvas, and an optional Server project that it is just an Asp server application that implements some optimiziations for asset loading that can only be done from server side. After editing your scene from Evergine Studio as usual, run the Web.server project or the Web project from Visual Studio 2022 to see it running on the browser. Finally, check it out how to deploy the app and improve its performance."
  },
  "manual/platforms/web/index.html": {
    "href": "manual/platforms/web/index.html",
    "title": "Evergine on the web with WebGL and WebAssembly | Evergine Doc",
    "keywords": "Evergine on the web with WebGL and WebAssembly An Evergine application can be deployed as a web app, using WebGL 2.0 as rendering API. Evergine web applications can run statically on client side quite fast by the use of Blazor Web Assembly for native code execution. Furthermore, they are optimzed for fast loading, by parallelizing asset downloading and leveraging compressing techniques such as Brotli and Zip. Finally, to improve the loading as much as possible, which is crucial in web sites, we also provide an optional ASP server application that implements some optimizations that can only be done from server side. Prerequisites .Net6.0 SDK Install Visual Studio 2022 (Recommended) Alternatively, Install latest dotnet SDK release. Install wasm-tools From Visual Studio Installer, add web development workload and the .Net WebAssembly build tools individual component. Alternatively, from a root terminal: dotnet workload install wasm-tools --skip-manifest-update Limitations Due to the very recent support of WebGL2.0 by iOS devices, support on its Safari browser is still a work in progress. In this section Getting started DevOps Tips"
  },
  "manual/platforms/web/io.html": {
    "href": "manual/platforms/web/io.html",
    "title": "Comming soon | Evergine Doc",
    "keywords": "Comming soon"
  },
  "manual/platforms/web/ops.html": {
    "href": "manual/platforms/web/ops.html",
    "title": "Detailed information to develop & debug & deploy Evergine for the web | Evergine Doc",
    "keywords": "Detailed information to develop & debug & deploy Evergine for the web Build Use VS2022 or VSCode/Terminal. You can build and test only the client project (web), the server is only needed for publishing with compression (see below). dotnet build -c [Debug|Release] ./sample.web/sample.web.[Server.]csproj Run From VS2022 you can run the profile sample.web[.Server]. There is also an IIS Express profile for each cliente and server projects, but it is usually slower. Additionally you can publish the app dotnet publish -c [Debug|Release] ./sample.web/sample.web.csproj and run the app by populating the folder ./sample.web/bin/[Debug|Release]/net6.0/publish/wwwroot. In this second case we do recommend to use VSCode Live Server, instead of Fenix, as the second has known issues with Web Assembly. Debug Debug is now possible from VS2022 by running the application in debug mode only on Chrome browser. Publish with Compression To publish the application with automatic compression (Brotli & GZip), the AspNetCore server is needed. Use VS2022 or from Terminal: dotnet publish -c Release -r win-x86 --self-contained ./sample.web.Server/sample.web.Server.csproj If done from terminal, you can publish the files in sample.web.Server/bin/Release/net6.0/win-x86/publish to an AspNetCore server, from VSCode or manually."
  },
  "manual/platforms/web/tips.html": {
    "href": "manual/platforms/web/tips.html",
    "title": "Tips to optimize a web application | Evergine Doc",
    "keywords": "Tips to optimize a web application Web platform have some technology limitations compared to regular desktop apps. Specifically, loading time is much worse than applications stored in the local computer, and execution power is reduces.Therefore it is important to apply some optimizations to get good performance on the browser. Reduce texture sizes: Textures are usually one of the biguest assets. To improve the loading time, try to use reduce its resolution to the possible minimum."
  },
  "manual/xr/index.html": {
    "href": "manual/xr/index.html",
    "title": "XR (Extended-Reality) | Evergine Doc",
    "keywords": "XR (Extended-Reality) What is XR? XR (Extended Reality) is an umbrella terms that covers the following types of applications: Virtual Reality (VR) The application simulates a completely different environment around the user. Mixed Reality (MR) The application combines its own environment with the user's real-world environment and allows them to interact with each other. Augmented Reality (AR) The application ayers content over a digital view of the real world. Evergine XR In Evergine, you can develop with different XR platforms and solutions, and Evergine XR helps users to deal with multiples XR technologies. Evergine XR is an abstraction layer that allows multiple XR implementations (OpenXR, Mixed Reality, etc...) to be used in a standardized way in your interactive applications. Evergine XR is included by default in the Evergine.Framework and Evergine.Components NuGet packages, and exposes an abstract Service (XRPlatform) which is the entry point to start creating XR applications. Different XR technologies integrations gives an implementation of the XRPlatform service, and it is provided using Evergine extensions or add-ons. This functionality will be covered in the following documents of this section. In this section XRPlatform Input Devices Spatial Mapping Spatial Anchors Trackable Items"
  },
  "manual/xr/input_tracking/advancedtrackxrdevice.html": {
    "href": "manual/xr/input_tracking/advancedtrackxrdevice.html",
    "title": "AdvancedTrackXRDevice | Evergine Doc",
    "keywords": "AdvancedTrackXRDevice This component allows you to track all kind of XR Devices, not only controllers or hands, such as base stations, generic trackers, etc... Selection Strategy This component can select the device that will track in different ways, and it is defined by the SelectionStrategy property, that has the following values: ByHandedness: Specify the device using the handedness (left or right device). This is the most usual way to select a device. ByDeviceType: Select the device by specifying the type of the device and an number of occurrences. ByDeviceTypeAndHandedness: Select the device by specifying the type of the device and the handedness. ByDeviceIndex: The InputTracking maintain an ordered list of tracked devices. If you use this way the device will be selected by specifying an index on that list. Selection by Handedness If your selection strategy is ByHandedness, you will select your device by using its handedness. In that case you need to se these properties: Property Description Handedness With this property you will indicate the handedness of the device that you want to track: LeftHand to specify the left hand. RightHand to specify the right hand. Undefined if the device has no specific handedness. DeviceIndex In the case that there are more than one devices using the same handedness, with this property you will specify which occurence are going to be selected. Selection by Device Type If your selection strategy is ByDeviceType, you will select your device by using its handedness. In that case you need to se these properties: Property Description DeviceType Specify the type of device that you want to select: Controller if you want to select a tipical controller device. HMD in the case that you want to track the headset device. GenericTracker to select typical tracker devices (such as Vive Tracker). TrackingReference reffers to devices used as a tracking reference (such as Vive Base Stations or old Oculus Rift Camera Sensors). Hand if the system can detect the user hands. DeviceIndex In the case that there are more than one devices using the same device type, with this property you will specify which occurence are going to be selected. Selection by Device Type and Handedness If your selection strategy is ByDeviceTypeAndHandedness, you will select your device by using its handedness and the specified device type. In that case you need to se these properties: Property Description DeviceType Specify the type of device that you want to select: Controller if you want to select a tipical controller device. HMD in the case that you want to track the headset device. GenericTracker to select typical tracker devices (such as Vive Tracker). TrackingReference reffers to devices used as a tracking reference (such as Vive Base Stations or old Oculus Rift Camera Sensors). Hand if the system can detect the user hands. Handedness With this property you will indicate the handedness of the device that you want to track: LeftHand to specify the left hand. RightHand to specify the right hand. Undefined if the device has no specific handedness. DeviceIndex In the case that there are more than one devices using the same properties described above, with this property you will specify which occurence are going to be selected. Selection by Device Index If your selection strategy is ByDeviceIndex, you will select your device by its index that is registered in your system. Property Description DeviceIndex Integer that specify the index of the device. Tracking lost mode This component will updat the entity Transform to follow the selected device. But in the case that an issue occurs during the tracking process, you can specify how the entity behaves using the following property: Property Description TrackingLostMode Specify the strategy to follow in case that the device is not well tracked: DisableEntityOnPoseInvalid disable the entity if the tracked pose is not valid. In the case that the device is well tracked again, the entity will be enabled again. This is the default value. KeepLastPose stop to track the entity if the pose is not valid, maintaining the entity with the last pose received. DisableEntityOnDisconnection disable the entity only if the selected device is no longer connected. Using AdvancedTrackXRDevice In the following code you will find how to create some sort of entities to track left and right controllers, and two generic trackers: protected override void CreateScene() { base.CreateScene(); // Left entity var leftDevice = new Entity() .AddComponent(new Transform3D()) .AddComponent(new AdvancedTrackXRDevice() { SelectionStrategy = TrackXRDevice.SelectionDeviceStrategy.ByDeviceTypeAndHandedness, DeviceType = XRTrackedDeviceType.Controller, Handedness = XRHandedness.RightHand // select the left device }); // Right entity var rightDevice = new Entity() .AddComponent(new Transform3D()) .AddComponent(new AdvancedTrackXRDevice() { SelectionStrategy = TrackXRDevice.SelectionDeviceStrategy.ByDeviceTypeAndHandedness, DeviceType = XRTrackedDeviceType.Controller, Handedness = XR.XRHandedness.RightHand // select the right device }); this.Managers.EntityManager.Add(leftDevice); this.Managers.EntityManager.Add(rightDevice); // First Tracker var firstTracker = new Entity() .AddComponent(new Transform3D()) .AddComponent(new AdvancedTrackXRDevice() { SelectionStrategy = TrackXRDevice.SelectionDeviceStrategy.ByDeviceType, DeviceType = XRTrackedDeviceType.GenericTracker, DeviceIndex = 0 // First }); // Second Tracker var secondTracker = new Entity() .AddComponent(new Transform3D()) .AddComponent(new AdvancedTrackXRDevice() { SelectionStrategy = TrackXRDevice.SelectionDeviceStrategy.ByDeviceType, DeviceType = XRTrackedDeviceType.GenericTracker, DeviceIndex = 1 // Second }); this.Managers.EntityManager.Add(firstTracker); this.Managers.EntityManager.Add(secondTracker); }"
  },
  "manual/xr/input_tracking/index.html": {
    "href": "manual/xr/input_tracking/index.html",
    "title": "XR Input Tracking | Evergine Doc",
    "keywords": "XR Input Tracking In XR, it's usual that the user interact with different XR input devices such as Motion Controllers, Hands, Trackers, etc.. The InputTracking subsystem of XRPlatform keep control and track all connected devices in the XR session. Using XRPlatform.InputTracking you can obtain and list all connected devices of your system, and get access to its information. However, it is more straightforward to use Components that help developers to integrate the device tracking status into your Entity and components. Track XR Components The following components will change the entity Transform by setting the device position and orientation: TrackXRController: Represent and track a tipical motion controller. This component inherit from TrackXRDevice, and additionally, it will expose the state of its buttons, triggers and much more. TrackXRArticulatedHand: In the case that your XR system has hand tracking support, it will provide access to the articulated hand state. Additionally, it will expose a list of hand joint poses. AdvancedTrackXRDevice: This component allows you to track all kind of xr devices, such as base stations, generic trackers, etc... In this section Tracking Controllers (TrackXRController) Tracking Hands (TrackXRArticulatedHand) Advanced Tracking Devices (AdvancedTrackXRDevice)"
  },
  "manual/xr/input_tracking/trackxrarticulatedhand.html": {
    "href": "manual/xr/input_tracking/trackxrarticulatedhand.html",
    "title": "TrackXRArticulatedHand | Evergine Doc",
    "keywords": "TrackXRArticulatedHand This component is used to track and obtain the state of an articulated hand. A variety of MR and VR platforms supports hand tracking, like Mixed Reality (HoloLens) or Oculus Quest. Supported Hand Joints Evergine supports a list of hand joints to be tracked, it is described using the XRHandJointKind enumeration, and its values can be visually perceived in the following image: Note The entity transform will use the Palm joint pose. Properties The following properties has been added to this component in order to acces hand joint information: Property Description Handedness With this property you will indicate the handedness of the device that you want to track: LeftHand to specify the left hand. RightHand to specify the right hand. Undefined if the device has no specific handedness. TrackingLostMode Specify the strategy to follow in case that the device is not well tracked: DisableEntityOnPoseInvalid disable the entity if the tracked pose is not valid. In the case that the device is well tracked again, the entity will be enabled again. This is the default value. KeepLastPose stop to track the entity if the pose is not valid, maintaining the entity with the last pose received. DisableEntityOnDisconnection disable the entity only if the selected device is no longer connected. SupportedHandJointKind Returns a XRHandJointKind[] array of supported hand joints. Hand tracking in some devices can be limited and only support a limited joints TryGetArticulatedHandJoint() Obtains the articulated hand joint state specified using a XRHandJointKind value. Return true if the joint is susscessfully obtained. Using TrackXRArticulatedHand Create a TrackXRArticulatedHand from code In the following code you will find how to create an entity that track a controller from code: protected override void CreateScene() { base.CreateScene(); var material = this.Managers.AssetSceneManager .Load<Material>(EvergineContneet.DefaultMaterialID); // The hand material // Hand entity var leftHand = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new TeapotMesh() { Size = 0.15f }) .AddComponent(new MeshRenderer()) .AddComponent(new TrackXRArticulatedHand() { Handedness = XRHandedness.LeftHand // select the left hand }) .AddComponent(new DebugArticulatedhand()); this.Managers.EntityManager.Add(leftHand); } Read the Hand Joints Small sample to read the hand joint state: public class DebugArticulatedhand : Behavior { [BindComponent] private TrackXRArticulatedHand trackXRHand; protected override void Update(TimeSpan gameTime) { var lineBatch = this.Managers.RenderManager.LineBatch3D; if (trackXRHand.IsConnected) { // Iterate over all supported joints foreach (var supportedJoint in this.trackXRHand.SupportedHandJointKind) { // Obtain the joint pose and draw it... if (this.trackXRHand.TryGetArticulatedHandJoint(supportedJoint, out var handJoint)) { Matrix4x4.CreateFromTR(ref handJoint.Pose.Position, ref handJoint.Pose.Orientation, out var jointTransform); lineBatch.DrawAxis(jointTransform, 0.01f); // Draw 1cm axis with the joint transform } } } } } Render Hands Using the XRDeviceRenderableModel component add the possibility to obatains a renderable model associated to XR device. In the case of articulated hands, it provides a skinned mesh of the hand following the user hand poses. Note You can add to the entity an optional MaterialComponent component, to specify which material will be used to render the hand meshes. If this component is not provided, they will be rendered by the default material. Render Hands from code Small example that shows how to render both hands using the XRDeviceRenderableModel component. protected override void CreateScene() { base.CreateScene(); var material = this.Managers.AssetSceneManager .Load<Material>(EvergineContneet.DefaultMaterialID); // The hand material // Left hand var leftHand = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new TrackXRArticulatedHand() { Handedness = XRHandedness.LeftHand // select the left hand }) .AddComponent(new XRDeviceRenderableModel()); this.Managers.EntityManager.Add(leftHand); // Right hand var rightHand = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new TrackXRArticulatedHand() { Handedness = XRHandedness.RightHand // select the right hand }) .AddComponent(new XRDeviceRenderableModel()); this.Managers.EntityManager.Add(rightHand); }"
  },
  "manual/xr/input_tracking/trackxrcontroller.html": {
    "href": "manual/xr/input_tracking/trackxrcontroller.html",
    "title": "TrackXRController | Evergine Doc",
    "keywords": "TrackXRController This component is used to track and obtain the controller input state (buttons, triggers, etc...). Most of VR platforms supports controller devices, such as Oculus Touchs, Vive Controllers, or Valve Idnex Controllers. Properties When you add this component to your entity, you will show this in Evergine Studio: Property Description Handedness With this property you will indicate the handedness of the device that you want to track: LeftHand to specify the left hand. RightHand to specify the right hand. Undefined if the device has no specific handedness. TrackingLostMode Specify the strategy to follow in case that the device is not well tracked: DisableEntityOnPoseInvalid disable the entity if the tracked pose is not valid. In the case that the device is well tracked again, the entity will be enabled again. This is the default value. KeepLastPose stop to track the entity if the pose is not valid, maintaining the entity with the last pose received. DisableEntityOnDisconnection disable the entity only if the selected device is no longer connected. ControllerState Structure that expose the controller input state. Controller State Give the user access to the following properties through the XRControllerGenericState structure: Property Description IsConnected Indiacates whether this device is connected. Trigger Return a 0-1 float value of the trigger state. TriggerButton Gives the ButtonState enum of the trigger, to check if it is pressed or not. Grip Indicates if the grip button is pressed. ThumbStick 'Vector2' value that indicates the direction of the tipical mini-stick in the controller. ThumbStickButton 'ButtonState' That indicates if the thumbstick is pressed. Touchpad 'Vector2' value that indicates the direction of the touchpad placed in some VR controllers. Menu 'ButtonState' of the menu button. Button1 'ButtonState' of the typical first button of a controller (it can be usually labelled as A or X). Button2 'ButtonState' of the typical second button of a controller (it can be usually labelled as B or Y). Using TrackXRController Create a TrackXRController from code In the following code you will find how to create an entity that track a controller from code: protected override void CreateScene() { base.CreateScene(); var material = Application.Current.Container .Resolve<AssetsService>() .Load<Material>(DefaultResourcesIDs.DefaultMaterialID); // Left entity var leftDevice = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new TeapotMesh() { Size = 0.15f }) .AddComponent(new MeshRenderer()) .AddComponent(new TrackXRController() { Handedness = XRHandedness.LeftHand // select the left device }) .AddComponent(new ScaleEntityWithController()); // Described in the next section :) this.Managers.EntityManager.Add(leftDevice); } Read the Controller State Small sample to read the controller state: public class ScaleEntityWithController : Behavior { [BindComponent] private Transform3D transform; [BindComponent] private TrackXRController trackXRController; protected override void Update(TimeSpan gameTime) { if (trackXRController.IsConnected) { // Scale the entity if the user press the trigger (from 1 to 2) this.transform.LocalScale = Vector3.One * (1 + trackXRController.ControllerState.Trigger); } } }"
  },
  "manual/xr/integrations/index.html": {
    "href": "manual/xr/integrations/index.html",
    "title": "XR Integrations | Evergine Doc",
    "keywords": "XR Integrations Evergine comes with several XR platform integrations. OpenXR OpenXR is an open royalty-free API standard from Khronos, designed to unify the development across multiple VR/MR/AR (XR) devices. Behind this initiative, there are companies like Meta, Microsoft, HTC, Steam, Varjo, and Magic Leap, allowing support to all their devices. In this section OpenXR"
  },
  "manual/xr/integrations/openxr.html": {
    "href": "manual/xr/integrations/openxr.html",
    "title": "OpenXR | Evergine Doc",
    "keywords": "OpenXR OpenXR is an open royalty-free API standard from Khronos, designed to unify the development across multiple VR/MR/AR (XR) devices. Behind this initiative, there are companies like Meta, Microsoft, HTC, Steam, Varjo, and Magic Leap, allowing support to all their devices. The official support for OpenXR will allow the Evergine developer to create new applications that will support the incoming new XR devices. In this Evergine version, the OpenXR integration covers the main aspects of this standard. We will provide new functionality and specific extensions in future versions, such as eye gazing, and Spatial Mapping, which are very useful in HoloLens devices. Right now, Evergine allows you to create PC desktop applications with Evergine that cover almost the entire variety of wired VR devices and portable Android devices (such as Meta Quest). OpenXRPlatform The OpenXR implementation is provided by the OpenXRPlatform service, this class offer the implementation of XRPlatform. When you create the OpenXRPlatform instance, you have the possibility to specify which extensions do you want to enable. Meta Quest project template The Oculus Quest device is now called Meta Quest after the latest news from Facebook. This is the most popular VR headset right now after selling about 10 million units of the newest Quest 2 device. Thanks to the OpenXR standard, the latest Evergine version brings the possibility to deploy your VR applications into Meta Quest devices. For maximum performance and to support future graphics features, we use Vulkan as the only Graphics API in this platform based on Android. Create a Meta Quest template To start developing your Evergine project with Meta Quest, you only need to select the Android Meta Quest template when you create an Evergine project: On the other hand, if you have previously created an Evergine project, you can add the Meta Quest profile in the Project Settings:"
  },
  "manual/xr/overview.html": {
    "href": "manual/xr/overview.html",
    "title": "General overview | Evergine Doc",
    "keywords": "General overview Coming soon"
  },
  "manual/xr/spatial_anchors.html": {
    "href": "manual/xr/spatial_anchors.html",
    "title": "XR Spatial Anchors | Evergine Doc",
    "keywords": "XR Spatial Anchors A spatial anchor represents an important point in the real world that the system tracks over time. Each anchor has an adjustable coordinate system, based on other anchors or frames of reference, to ensure anchored holograms stay precisely in place. Rendering a hologram in an anchor's coordinate system gives you the most precise positioning for that hologram at any given time. This comes at the cost of small adjustments over time to the hologram's position as the system continually moves it back into place based on the real world. By saving local spatial anchors to disk and loading them back later, your application can calculate the same location in the real world across multiple application sessions on a single HoloLens. While spatial anchors are great for holograms that should remain fixed in the world, once an anchor is placed, it can't be moved. Supported Devices Currently in Evergine, the following devices has Spatial Anchors support: Device XR Platform HoloLens 2 Windows Mixed Reality. You can find useful information here. TrackSpatialAnchor Component In Evergine, you can create Spatial Anchors in your device using the TrackSpatialAnchor component. This component allows you to do: Detect a Spatial Anchor and place the owner entity in the tracked pose (position and orientation). Create a Spatial Anchor to a desired position and orientation. Note During the application running, the position is usually updated to adapt the anchor position to the best predicted pose. Properties and Methods The following properties provides you the way to setup a Spatial Anchor Property Description AnchorId The Anchor Identifier. This is the Id used to find the anchor in the XR Platform. If the XR Platform find a stored anchor with the given ID, it will track and update the position of the owner entity. StoreAnchor() Store the current entity position and orientation as an spatial anchor with the current AnchorId. After this method Using TrackSpatialAnchor from code protected override void CreateScene() { base.CreateScene(); // Spatial Anchor entity var anchor = new Entity() .AddComponent(new Transform3D()) .AddComponent(new TrackSpatialAnchor() { AnchorId = \"AwesomeAnchor\" // The anchor Id. }); this.Managers.EntityManager.Add(anchor); } Low-Level Spatial Anchors While the most usual way to access to Spatial Anchors is using the TrackSpatialAnchorcomponent, you can access to a low-level way that provides more functionality. The XRPlatform.SpatialAnchorStore gives access to all low-level functionality implemented by the XR Platform. If this property is null the XR device doesn't support Spatial Anchor. Another useful class is SpatialAnchor. This class is represent a Spatial Anchor in your XR System. With XRPlatform.SpatialAnchorStore class you can create/delete/update instances of SpatialAnchor. SpatialAnchor properties This class represent a spatial anchor that can be persisted or updated in your XR Platform Property Description Transform (only get) Gets the detected transform (Matrix4x4?) of the Spatial Anchor. XRPlatform.SpatialAnchorStore properties and methods Property Description SavedAnchors Read only dictionary <string, SpatialAnchor> that returns all stored anchors in this device. CreateSpatialAnchor() Create a SpatialAnchor instance in the specified position and orientation. This method only create the SpatialAnchor instance, but not persist this anchor in the device StoreAnchor(id, anchor) Store the specified SpatialAnchor instance with the given identifier. After this method, this anchor will be persisted and can be accessed every time the application runs. RemoveAnchor(id) Remove a stored anchor with the given identifier. RemoveAllAnchors() Remove all persisted anchors in this device. Note There can only be one SpatialAnchor for each identifier Store a Spatial Anchor from code [BindService] private XRPlatform xrPlatform; [BindComponent] private Transform3D transform; public void StoreAnchor(string id) { if (this.xrPlatform.SpatialAnchorStore == null) { throw new InvalidOperationException(\"XRPlatform doesn't support Spatial Anchor\"); } // Create the spatial anchor... var anchor = this.xrPlatform.SpatialAnchorStore.CreateSpatialAnchor(this.transform.Position, this.transform.Orientation); if(anchor != null) { // Store the spatial anchor... this.xrPlatform.SpatialAnchorStore.StoreAnchor(id, anchor); } } Debug all stored anchors from code [BindService] private XRPlatform xrPlatform; protected override void Start() { if (this.xrPlatform.SpatialAnchorStore == null) { throw new InvalidOperationException(\"XRPlatform doesn't support Spatial Anchor\"); } var material = this.Managers.AssetSceneManager .Load<Material>(EvergineContent.DefaultMaterialID); foreach (var anchorId in this.spatialAnchorStore.SavedAnchors.Keys) { Entity anchorEntity = new Entity() .AddComponent(new Transform3D()) .AddComponent(new MaterialComponent() { Material = material }) .AddComponent(new CubeMesh() { Size = 0.1f } ) .AddComponent(new MeshRenderer()) .AddComponent(new TrackSpatialAnchor(){ AnchorId = anchorId // The anchor Id. }); this.Managers.EntityManager.Add(anchorEntity); } }"
  },
  "manual/xr/spatial_mapping.html": {
    "href": "manual/xr/spatial_mapping.html",
    "title": "XR Spatial Mapping | Evergine Doc",
    "keywords": "XR Spatial Mapping Some XR Devices has built-in cameras that continuously scan the environment, allowing it to construct virtual world geometry for real-world objects. This ability allows developers to create convincing interactions between virtual content and the real world (such as occluding and physically interacting with real-world objects). The process of mapping real-world surfaces into the virtual world is called Spatial Mapping. Supported Devices Currently in Evergine, the following devices has Spatial Mapping support: Device XR Platform HoloLens 2 Windows Mixed Reality. SpatialMapping Component To start using Spatial Mapping in your application, you only need to create an Entity and add the SpatialMapping component: This component will request to the XR Platform a collection of Spatial Mapping surfaces, which consist in meshes that conforms the detected environment by the XR Device. Internally, this component will create a collection of child entities, each one is responsible to maintain and render a single surface with the giving properties which will be described after. Properties Mesh generation properties The following properties specify how the spatial mapping meshes will be generated: Property Description TrianglesPerCubicMeter (Default 500) The triangles per cubic meter of the generated Spatial Mapping Meshes. With this property you can control the overall quality of the generated meshes. Lower values generate meshes with less quality but increase the overall performance, and greater values provides a better spatial mapping quality, but with a performance penalty. Default value is 500 ObtainNormals (Default true) Indicates that the generated mesh will provides normals. Default value is true Extends (Default [6, 5, 6]) This property define a volume area (measured in meters) centered in the XR Device user in which all spatial mapping surfaces are updated and generated. Distant surfaces are discarded to prevent a performance penalty. Default value is an area of 6m x 5m x 6m Material Specify which material will be used to render the Spatial Mapping meshes. If no material is provided, the spatial mapping surfaces won't be rendered. Default value is null Update Mesh properties The following properties indicates how often the spatial mapping surfaces will be updated or generated: Property Description UpdateInterval (Default 0) Frequency (in seconds) in which SpatialMapping component will update its surfaces. In case of 0, the spatial mapping will not be updated (keeping the first requested spatial mapping surfaces). Increase this value Default value is 0 MaxSurfaceUpdatesPerFarame (Default 1) Indicate how many surfaces will be processed per frame. When SpatialMapping request an update, it gives a list of surfaces that require to update. Setting this value allows you to control how many surfaces will be processed in a single frame. This prevents the application to increase the CPU usage and cause a FPS drop. Default value is 1 Collision Mesh properties One of most important utilities for Spatial Mapping is to generate Physics colliders of the detected surfaces, allowing to physically interact with the environment. Property Description GenerateColliders (Default false) Indicates if physic colliders will be generated for detected spatial mapping surfaces. Generating colliders has an important performance penalty, so we recommend to only enable colliders if it is necessary Default value is false CollisionCategory (Default Cat1) Specify the CollisionCategory property of spatial mapping physics colliders (It has no effect if GenerateColliders value is false). Please, read Collision Filtering for further details. Default value is Cat1 MaskBits (Default All) Specify the MaskBits properly of spatial mapping physics colliders (It has no effect if GenerateColliders value is false). Please, read Collision Filtering for further details. Default value is All Using SpatialMapping from code protected override void CreateScene() { base.CreateScene(); // Spatial Mapping entity var spatialMapping = new Entity() .AddComponent(new Transform3D()) .AddComponent(new SpatialMapping() { UpdateInterval = 5 // Update spatial mapping surfaces every 5 seconds GenerateColliders = true // Generate colliders }); this.Managers.EntityManager.Add(spatialMapping); }"
  },
  "manual/xr/trackable_items.html": {
    "href": "manual/xr/trackable_items.html",
    "title": "XR Trackable Items | Evergine Doc",
    "keywords": "XR Trackable Items A trackable is something that can be tracked during application execution. This is, and object which changes on its position and orientation can be detected. Then, you can use that information to add 3D elements assoiciated to those trackables. While a trackable is detected, its world transform matrix is updated depending on real-world object changes. There are different types of trackables that can be detected by Evergine: planes, images and faces. They all extend XRTrackableItem as base class. Supported Devices Currently in Evergine, the following devices has Trackable Items support: Device XR Platform Android ARCore XRTrackableItem This base class holds information that is common to any trackable element. Properties and Methods Property Description ID Gets trackable identifier. This is internally generated by Evergine and will be unique for all detected trackables. Transform Stores position and orientation information for the detected trackable. Will be continuously updated while application is running with real-world object information. XRPlaneTrackable This class represents plane detection. Depending on XR platform implementation you can use XRPlaneDetectionType to detect just vertical or horizontal planes, or even enable both types of plane detection. Properties and Methods Property Description BoundaryPolygon Holds information of vertices for an approximation of polygon boundaries for a detected plane. Values are relative to XZ plane that should be transformed by trackable transform information to get boundaries in world-relative coordinates. Size Estimated width and length of the plane. Type Type of detected plane: horizontal with upward or downward facing, or vertical plane. XRImageTrackable Trackable for images, no matter they are static or in movement. Properties and Methods Property Description DatabaseIndex Indicates index of the image in the internal images database. Name Indicates name of the image in the internal images database. Size Size of detected image. TrackingMethod Depending on tracking state: if image is not being tracked, is tracked by last pose information or full tracking. XRFaceTrackable This class is used to face tracking. A single face at the same time would be detected. Properties and Methods Property Description MeshVerticesPointer Pointer to native face mesh vertices buffer. MeshVerticesCount Number of face mesh vertices. MeshTextureCoordinatesPointer Pointer to native face texture coordinates buffer. MeshTextureCoordinatesCount Number of texture coordinates. MeshNormalsPointer Pointer to native face mesh normals buffer. MeshNormalsCount Number of normals. MeshTriangleIndicesPointer Pointer to native mesh index buffer. MeshTriangleIndicesCount Number indexes. LeftForeheadPose Pose for the left forehead. RightForeheadPose Pose for the right forehead. NosePose Pose for the nose."
  },
  "manual/xr/xrplatform.html": {
    "href": "manual/xr/xrplatform.html",
    "title": "XR Platform | Evergine Doc",
    "keywords": "XR Platform XRPlatform is the main service in Evergine to provide XR functionality to your applications. This service (through its implementations) is responsible to: Create and maintain the XR session. Create and maintain all required graphic resources to properly render the scene in the XR environment. Update the scene Camera to track the HMD device. Offer access to different XR subsystems (such as Input Tracking, Spatial Mapping, etc..) Note Is it possible (and common), that some XRPlatform providers does not implement all functionality exposed by this service. For example: SteamVR implementation (Evergine.OpenVR extension) doesn't provide Spatial Mapping functionality or Hand Tracking) Camera3D and HMD tracking One of the main purposes of a XR platform is to track the head position and setup properly the render output to be displayed on the HMD device. With Evergine.XR, and using XRPlatform, you don't need to create special Components or instantiate XR Camera prefabs. You only need to create a common Camera 3D of your scene, and XRPlatform will update every frame its properties to match the HMD device properties. This approach has a lot of advantages, one of them are that you can develop your application with or without XR integration without any change in your scene. XRPlatform sets the following Camera properties: Camera Position & Orientation: Updates with the HMD device pose, including its position and orientation. Camera Projection: The Camera Projection properties is changed to match the projection required by the device. If you register the XRPlatform display as the default Display, the Camera will render directly to the HMD device display. Important Properties You can access to useful information of the current XR session by using the following properties: General properties Property Description Display Returns the display that will be configured to render in the XR device. In order to render your scene, you need to setup your camera to render in that Display. It is done by default if you register the XR Display as the \"DefaultDisplay\" MirrorDisplay This display will be used to mirror the content that is rendering in the XR device. Additionally, it is used too to provide access to Input dispatchers in your application. RenderMirrorTexture Boolean that indicates if you want to mirror the XR content into the Mirror Display. MSAASampleCount Setup the XR platform to create graphics resources using the specified MSAA Sample Count. This helps to increase the objects definition and sharpness, but reduce the application performance. HMD properties You can access to properties regarding the HMD device: Property Description TrackingState Gets the current device tracking state. It can indicates several tracking status, such as that everything is OK, or for contrary, the device is not initialized or can be out of range. HeadGaze Ray that point from the head position to the direction of the device is facing. EyeCount Number of eyes that this device will be rendered. In most common XR applications, the number is 2. Eye Gaze Some XR devices has the possibility to track the eye look direction (HoloLens2 for instance). in that cases Property Description EyeGaze Gets a ray that indicates the position and direction that the user are looking with their eyes. IsEyeGazeValid Boolean that indicates if the eye gaze is providing valid values. This can be false in case that the eye is not well tracked, or in the case that the device doesn't support this feature, or doesn't have permission to track eyes. RequestEyeGazePermission() Async method that request the devices to grant permission to track the user eyes. It will return true only if the device supports eye gazing and the user has approved this interaction (in most of devices it is usually to show a small dialog requesting this permission). A small example of how to use eye gazing in your application: protected override bool OnAttached() { if (base.OnAttached()) { // Request eye gaze permission... this.RequestPermission(); return true; } return false; } protected override void Update(TimeSpan gameTime) { if (this.xrPlatform.IsEyeGazeValid) { var eyeGaze = this.xrPlatform.EyeGaze.Value; // modify the transform to follow the eye gaze... this.transform.LocalPosition = eyeGaze.Position; this.transform.LookAt(eyeGaze.GetPoint(1)); } } private async void RequestPermission() { await this.xrPlatform.RequestEyeGazePermission(); } XR Subsystems XRPlatforms allows you to access more functionality that has been described before. In the following documents these areas will be covered: Input Tracking Spatial Mapping Spatial Anchors"
  }
}